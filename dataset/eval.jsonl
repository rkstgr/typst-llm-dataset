{"text": "#set page(fill: luma(245), margin: (top: 6em, bottom: 4em, left:5em, right: 5em))\n#set text(11pt, font: \"DM Sans\")\n#let mono(content) = text(10pt, font: \"DM Mono\")[#content]\n\n#let data = (\n  freelancer: (\n    name: \"Erik Steiger\",\n    company_name: \"SteigerLabs\",\n    street: \"Leopoldstr. 10\",\n    zip_code: \"81379 München\",\n    email: \"erik@steigerlabs.com\",\n    website: \"ersteiger.com\"\n  ),\n  client: (\n    name: \"John Doe\",\n    company_name: \"Corporate Client Inc.\",\n    street: \"Maximiliansstr. 17\",\n    zip_code: \"80801 München\",\n    number: \"C-108\"\n  ),\n  invoice: (\n    invoice_number: \"R-0291\",\n    date: \"22.05.2025\"\n  ),\n  services: (\n    (name: \"Exploration\", description: \"Research and discovery phase including user interviews, market analysis, and requirement gathering\", amount: 1500.00),\n    (name: \"Design\", description: \"Complete visual design system including wireframes, mockups, prototypes, and brand guidelines\", amount: 5200),\n  ),\n  banking: (\n    (iban: \"DE89 3704 0044 0532 0130 00\", bic: \" INGDDEFFXXX\", taxnumber: \"12/345/67890\")\n  ),\n  postfix: \"\"\n)\n\n#let add_commas(n, width: none) = {\n  let s = str(n)\n\n  // Split on decimal point\n  let parts = s.split(\".\")\n  let integer_part = parts.at(0)\n  let decimal_part = if parts.len() > 1 { parts.at(1) } else { \"\" }\n\n  // Add thousand separators to integer part\n  let result = \"\"\n  let len = integer_part.len()\n  for i in range(len) {\n    if i > 0 and calc.rem(len - i, 3) == 0 {\n      result += \".\"\n    }\n    result += integer_part.at(i)\n  }\n\n  // Add decimal part with comma separator (always 2 digits)\n  if decimal_part != \"\" {\n    // Pad or truncate decimal part to exactly 2 digits\n    if decimal_part.len() == 1 {\n      decimal_part += \"0\"\n    } else if decimal_part.len() > 2 {\n      decimal_part = decimal_part.slice(0, 2)\n    }\n    result += \",\" + decimal_part\n  } else {\n    // No decimal part, add ,00\n    result += \",00\"\n  }\n\n  // Pad with whitespace if width is specified\n  if width != none {\n    let current_len = result.len()\n    if current_len < width {\n      let padding = \" \" * (width - current_len)\n      result = padding + result\n    }\n  }\n\n  result\n}\n\n// Header with logo placeholder and freelancer info\n#align(center)[\n  #grid(\n    columns: (1fr, 2fr, 1fr),\n    column-gutter: 1em,\n    align: (left, center, right),\n\n    // Logo placeholder\n    image(\"logo3.png\", height: 60pt),\n\n    [],\n    // Freelancer info (right aligned)\n    align(left)[\n      #text(weight: \"bold\")[#data.freelancer.name] \\\n      #data.freelancer.company_name\\\n\n      #data.freelancer.street\\\n      #data.freelancer.zip_code\n    ]\n  )\n]\n\n#let divider = line(length: 100%, stroke: luma(200))\n\n#v(2em)\n#divider\n#v(4em)\n\n// Client address\n#block[\n  #data.client.name \\\n  #data.client.company_name\\\n\n  #data.client.street \\\n  #data.client.zip_code\n]\n\n#v(2em)\n\n#let chip(title, value) = {\n  stack(spacing: 1em,\n  text(fill: luma(100))[#title],\n  mono(value)\n  )\n}\n\n// Invoice details grid\n#grid(\n  columns: (1fr, 1fr, 1fr, 1fr),\n  column-gutter: 1em,\n  row-gutter: 0.5em,\n  chip([Invoice\\#], data.invoice.invoice_number),\n  chip([Client\\#], data.client.number),\n  chip([Date], data.invoice.date),\n  [], []\n)\n\n#v(1.5em)\n\n// Services table\n#let service_table = table(\n  columns: (3fr, 1fr),\n  stroke: none,\n  align: (left, left),\n  row-gutter: 0pt,\n  inset: (x: 0pt,y: 15pt),\n\n  // Header\n  table.header(text(luma(100))[Services], text(luma(100))[Amount]),\n\n  // Separator line\n  table.hline(stroke: luma(180)),\n\n  // Services rows\n  ..data.services.map(service => (\n    [\n      #grid(\n        columns: (4fr, 1fr),\n        stack(\n        spacing: 7pt,\n        [#text(weight: \"bold\")[#service.name]],\n        [#text(size: 0.9em)[#service.description]]\n      ),[]\n      )\n\n    ],\n    mono[#add_commas(service.amount, width: 8) €]\n  )).flatten()\n\n)\n\n#service_table\n\n#v(1em)\n#h(1fr)\n#divider\n\n// Totals section\n#let subtotal = data.services.map(s => s.amount).sum()\n#let vat_amount = subtotal * 0.19\n#let total = subtotal * 1.19\n\n#align(right)[\n  #grid(\n    columns: (2fr, 1fr, 1fr),\n    row-gutter: 10pt,\n    align: (left, left),\n    [], [Subtotal], [#mono(add_commas(subtotal, width: 8)) €],\n    [], [VAT (19%)], [#mono(add_commas(calc.round(vat_amount, digits: 2), width: 8)) €],\n    [],[*Total*], text(weight: \"bold\", font: \"DM Mono\", 10pt)[\n      #add_commas(calc.round(total, digits: 2), width: 8) €], []\n  )\n]\n\n#v(1fr)\n\n#text(8pt)[\n#data.postfix\n]\n\n#v(1em)\n\n#let pagefooter() = {\n  set text(font: \"DM Mono\", 8pt)\n  line(length: 100%, stroke: luma(100))\n  grid(\n    columns: (1fr, 2fr, 1fr),\n    [\n      #data.freelancer.name\\\n      \\\n      #data.freelancer.email\\\n      #data.freelancer.website\n    ],\n    [\n      ING Diba\\\n      \\\n      #text(fill: luma(100))[IBAN]: #data.banking.iban\\\n      #text(fill: luma(100))[BIC]: #data.banking.bic\n    ],\n    [\n      Munich\\\n      \\\n      Taxnumber\\\n      #data.banking.taxnumber\n    ]\n  )\n}\n\n#pagefooter()", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/eval/designer-invoice.typ", "filename": "designer-invoice.typ"}
