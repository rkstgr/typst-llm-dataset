{"text": "= Guide for LaTeX users\n\nThis page is a good starting point if you have used LaTeX before and want to try out Typst. We will explore the main differences between these two systems from a user perspective. Although Typst is not built upon LaTeX and has a different syntax, you will learn how to use your LaTeX skills to get a head start.\n\nJust like LaTeX, Typst is a markup-based typesetting system: You compose your document in a text file and mark it up with commands and other syntax. Then, you use a compiler to typeset the source file into a PDF. However, Typst also differs from LaTeX in several aspects: For one, Typst uses more dedicated syntax (like you may know from Markdown) for common tasks. Typst's commands are also more principled: They all work the same, so unlike in LaTeX, you just need to understand a few general concepts instead of learning different conventions for each package. Moreover Typst compiles faster than LaTeX: Compilation usually takes milliseconds, not seconds, so the web app and the compiler can both provide instant previews.\n\nIn the following, we will cover some of the most common questions a user switching from LaTeX will have when composing a document in Typst. If you prefer a step-by-step introduction to Typst, check out our #link(\"/docs/tutorial/\")[tutorial].\n\n== Installation\n\nYou have two ways to use Typst: In #link(\"https://typst.app/signup/\")[our web app] or by #link(\"https://github.com/typst/typst/releases\")[installing the compiler] on your computer. When you use the web app, we provide a batteries-included collaborative editor and run Typst in your browser, no installation required.\n\nIf you choose to use Typst on your computer instead, you can download the compiler as a single, small binary which any user can run, no root privileges required. Unlike LaTeX, packages are downloaded when you first use them and then cached locally, keeping your Typst installation lean. You can use your own editor and decide where to store your files with the local compiler.\n\n== How do I create a new, empty document?\n\nThat's easy. You just create a new, empty text file (the file extension is `.typ`). No boilerplate is needed to get started. Simply start by writing your text. It will be set on an empty A4-sized page. If you are using the web app, click \"+ Empty document\" to create a new project with a file and enter the editor. #link(\"/docs/reference/model/parbreak/\")[Paragraph breaks] work just as they do in LaTeX, just use a blank line.\n\n```typst\nHey there!\n\nHere are two paragraphs. The\noutput is shown to the right.\n```\n\nIf you want to start from an preexisting LaTeX document instead, you can use #link(\"https://pandoc.org\")[Pandoc] to convert your source code to Typst markup. This conversion is also built into our web app, so you can upload your `.tex` file to start your project in Typst.\n\n== How do I create section headings, emphasis, ...?\n\nLaTeX uses the command `\\section` to create a section heading. Nested headings are indicated with `\\subsection`, `\\subsubsection`, etc. Depending on your document class, there is also `\\part` or `\\chapter`.\n\nIn Typst, #link(\"/docs/reference/model/heading/\")[headings] are less verbose: You prefix the line with the heading on it with an equals sign and a space to get a first-order heading: `= Introduction`. If you need a second-order heading, you use two equals signs: `== In this paper`. You can nest headings as deeply as you'd like by adding more equals signs.\n\nEmphasis (usually rendered as italic text) is expressed by enclosing text in `_underscores_` and strong emphasis (usually rendered in boldface) by using `*stars*` instead.\n\nHere is a list of common markup commands used in LaTeX and their Typst equivalents. You can also check out the #link(\"/docs/reference/syntax/\")[full syntax cheat sheet].\n\n#link(\"/docs/reference/model/list/\")[Lists] do not rely on environments in Typst. Instead, they have lightweight syntax like headings. To create an unordered list (`itemize`), prefix each line of an item with a hyphen:\n\n```typst\nTo write this list in Typst...\n\n```latex\n\\begin{itemize}\n  \\item Fast\n  \\item Flexible\n  \\item Intuitive\n\\end{itemize}\n```\n\n...just type this:\n\n- Fast\n- Flexible\n- Intuitive\n```\n\nNesting lists works just by using proper indentation. Adding a blank line in between items results in a more #link(\"/docs/reference/model/list/#parameters-tight\")[widely] spaced list.\n\nTo get a #link(\"/docs/reference/model/enum/\")[numbered list] (`enumerate`) instead, use a `+` instead of the hyphen. For a #link(\"/docs/reference/model/terms/\")[term list] (`description`), write `/ Term: Description` instead.\n\n== How do I use a command?\n\nLaTeX heavily relies on commands (prefixed by backslashes). It uses these _macros_ to affect the typesetting process and to insert and manipulate content. Some commands accept arguments, which are most frequently enclosed in curly braces: `\\cite{rasmus}`.\n\nTypst differentiates between #link(\"/docs/reference/scripting/#blocks\")[markup mode and code mode]. The default is markup mode, where you compose text and apply syntactic constructs such as `*stars for bold text*`. Code mode, on the other hand, parallels programming languages like Python, providing the option to input and execute segments of code.\n\nWithin Typst's markup, you can switch to code mode for a single command (or rather, _expression_) using a hash (`#`). This is how you call functions to, for example, split your project into different #link(\"/docs/reference/scripting/#modules\")[files] or render text based on some #link(\"/docs/reference/scripting/#conditionals\")[condition]. Within code mode, it is possible to include normal markup #link(\"/docs/reference/foundations/content/\")[content] by using square brackets. Within code mode, this content is treated just as any other normal value for a variable.\n\n```typst\nFirst, a rectangle:\n#rect()\n\nLet me show how to do\n#underline([_underlined_ text])\n\nWe can also do some maths:\n#calc.max(3, 2 * 4)\n\nAnd finally a little loop:\n#for x in range(3) [\n  Hi #x.\n]\n```\n\nA function call always involves the name of the function (#link(\"/docs/reference/visualize/rect/\")[rect], #link(\"/docs/reference/text/underline/\")[underline], #link(\"/docs/reference/foundations/calc/#functions-max\")[calc.max], #link(\"/docs/reference/foundations/array/#definitions-range\")[range]) followed by parentheses (as opposed to LaTeX where the square brackets and curly braces are optional if the macro requires no arguments). The expected list of arguments passed within those parentheses depends on the concrete function and is specified in the #link(\"/docs/reference/\")[reference].\n\nA function can have multiple arguments. Some arguments are positional, i.e., you just provide the value: The function `#lower(\"SCREAM\")` returns its argument in all-lowercase. Many functions use named arguments instead of positional arguments to increase legibility. For example, the dimensions and stroke of a rectangle are defined with named arguments:\n\n```typst\n#rect(\n  width: 2cm,\n  height: 1cm,\n  stroke: red,\n)\n```\n\nYou specify a named argument by first entering its name (above, it's `width`, `height`, and `stroke`), then a colon, followed by the value (`2cm`, `1cm`, `red`). You can find the available named arguments in the #link(\"/docs/reference/\")[reference page] for each function or in the autocomplete panel when typing. Named arguments are similar to how some LaTeX environments are configured, for example, you would type `\\begin{enumerate}[label={\\alph*)}]` to start a list with the labels `a)`, `b)`, and so on.\n\nOften, you want to provide some #link(\"/docs/reference/foundations/content/\")[content] to a function. For example, the LaTeX command `\\underline{Alternative A}` would translate to `#underline([Alternative A])` in Typst. The square brackets indicate that a value is #link(\"/docs/reference/foundations/content/\")[content]. Within these brackets, you can use normal markup. However, that's a lot of parentheses for a pretty simple construct. This is why you can also move trailing content arguments after the parentheses (and omit the parentheses if they would end up empty).\n\n```typst\nTypst is an #underline[alternative]\nto LaTeX.\n\n#rect(fill: aqua)[Get started here!]\n```\n\nYou likely already noticed that the arguments have distinctive data types. Typst supports many #link(\"/docs/reference/foundations/type/\")[data types]. Below, there is a table with some of the most important ones and how to write them. In order to specify values of any of these types, you have to be in code mode!\n\nThe difference between content and string is that content can contain markup, including function calls, while a string really is just a plain sequence of characters.\n\nTypst provides #link(\"/docs/reference/scripting/#conditionals\")[control flow constructs] and #link(\"/docs/reference/scripting/#operators\")[operators] such as `+` for adding things or `==` for checking equality between two variables.\n\nYou can also store values, including functions, in your own #link(\"/docs/reference/scripting/#bindings\")[variables]. This can be useful to perform computations on them, create reusable automations, or reference a value multiple times. The variable binding is accomplished with the let keyword, which works similar to `\\newcommand`:\n\n```typst\n// Store the integer `5`.\n#let five = 5\n\n// Define a function that\n// increments a value.\n#let inc(i) = i + 1\n\n// Reference the variables.\nI have #five fingers.\n\nIf I had one more, I'd have\n#inc(five) fingers. Whoa!\n```\n\nIn LaTeX, some commands like `\\textbf{bold text}` receive an argument in curly braces and only affect that argument. Other commands such as `\\bfseries bold text` act as switches (LaTeX calls this a declaration), altering the appearance of all subsequent content within the document or current scope.\n\nIn Typst, the same function can be used both to affect the appearance for the remainder of the document, a block (or scope), or just its arguments. For example, `#text(weight: \"bold\")[bold text]` will only embolden its argument, while `#set text(weight: \"bold\")` will embolden any text until the end of the current block, or, if there is none, document. The effects of a function are immediately obvious based on whether it is used in a call or a #link(\"/docs/reference/styling/#set-rules\")[set rule.]\n\n```typst\nI am starting out with small text.\n\n#set text(14pt)\n\nThis is a bit #text(18pt)[larger,]\ndon't you think?\n```\n\nSet rules may appear anywhere in the document. They can be thought of as default argument values of their respective function:\n\n```typst\n#set enum(numbering: \"I.\")\n\nGood results can only be obtained by\n+ following best practices\n+ being aware of current results\n  of other researchers\n+ checking the data for biases\n```\n\nThe `+` is syntactic sugar (think of it as an abbreviation) for a call to the #link(\"/docs/reference/model/enum/\")[enum] function, to which we apply a set rule above. #link(\"/docs/reference/syntax/\")[Most syntax is linked to a function in this way.] If you need to style an element beyond what its arguments enable, you can completely redefine its appearance with a #link(\"/docs/reference/styling/#show-rules\")[show rule] (somewhat comparable to `\\renewcommand`).\n\nYou can achieve the effects of LaTeX commands like `\\textbf`, `\\textsf`, `\\rmfamily`, `\\mdseries`, and `\\itshape` with the #link(\"/docs/reference/text/text/#parameters-font\")[font], #link(\"/docs/reference/text/text/#parameters-style\")[style], and #link(\"/docs/reference/text/text/#parameters-weight\")[weight] arguments of the `text` function. The text function can be used in a set rule (declaration style) or with a content argument. To replace `\\textsc`, you can use the #link(\"/docs/reference/text/smallcaps/\")[smallcaps] function, which renders its content argument as smallcaps. Should you want to use it declaration style (like `\\scshape`), you can use an #link(\"/docs/reference/styling/#show-rules\")[everything show rule] that applies the function to the rest of the scope:\n\n```typst\n#show: smallcaps\n\nBoisterous Accusations\n```\n\n== How do I load a document class?\n\nIn LaTeX, you start your main `.tex` file with the `\\documentclass{article}` command to define how your document is supposed to look. In that command, you may have replaced `article` with another value such as `report` and `amsart` to select a different look.\n\nWhen using Typst, you style your documents with #link(\"/docs/reference/foundations/function/\")[functions]. Typically, you use a template that provides a function that styles your whole document. First, you import the function from a template file. Then, you apply it to your whole document. This is accomplished with a #link(\"/docs/reference/styling/#show-rules\")[show rule] that wraps the following document in a given function. The following example illustrates how it works:\n\n```typst\n#import \"conf.typ\": conf\n#show: conf.with(\n  title: [\n    Towards Improved Modelling\n  ],\n  authors: (\n    (\n      name: \"Theresa Tungsten\",\n      affiliation: \"Artos Institute\",\n      email: \"tung@artos.edu\",\n    ),\n    (\n      name: \"Eugene Deklan\",\n      affiliation: \"Honduras State\",\n      email: \"e.deklan@hstate.hn\",\n    ),\n  ),\n  abstract: lorem(80),\n)\n\nLet's get started writing this\narticle by putting insightful\nparagraphs right here!\n```\n\nThe #link(\"/docs/reference/scripting/#modules\")[import] statement makes #link(\"/docs/reference/foundations/function/\")[functions] (and other definitions) from another file available. In this example, it imports the `conf` function from the `conf.typ` file. This function formats a document as a conference article. We use a show rule to apply it to the document and also configure some metadata of the article. After applying the show rule, we can start writing our article right away!\n\nYou can also use templates from Typst Universe (which is Typst's equivalent of CTAN) using an import statement like this: `#import \"@preview/elsearticle:0.2.1\": elsearticle`. Check the documentation of an individual template to learn the name of its template function. Templates and packages from Typst Universe are automatically downloaded when you first use them.\n\nIn the web app, you can choose to create a project from a template on Typst Universe or even create your own using the template wizard. Locally, you can use the `typst init` CLI to create a new project from a template. Check out #link(\"https://typst.app/universe/search/?kind=templates\")[the list of templates] published on Typst Universe. You can also take a look at the #link(\"https://github.com/qjcg/awesome-typst\")[awesome-typst repository] to find community templates that aren't available through Universe.\n\nYou can also #link(\"/docs/tutorial/making-a-template/\")[create your own, custom templates.] They are shorter and more readable than the corresponding LaTeX `.sty` files by orders of magnitude, so give it a try!\n\n== How do I load packages?\n\nTypst is \"batteries included,\" so the equivalent of many popular LaTeX packages is built right-in. Below, we compiled a table with frequently loaded packages and their corresponding Typst functions.\n\nAlthough _many_ things are built-in, not everything can be. That's why Typst has its own #link(\"https://typst.app/universe/\")[package ecosystem] where the community share its creations and automations. Let's take, for instance, the _cetz_ package: This package allows you to create complex drawings and plots. To use cetz in your document, you can just write:\n\n(The `@preview` is a _namespace_ that is used while the package manager is still in its early and experimental state. It will be replaced in the future.)\n\nAside from the official package hub, you might also want to check out the #link(\"https://github.com/qjcg/awesome-typst\")[awesome-typst repository], which compiles a curated list of resources created for Typst.\n\nIf you need to load functions and variables from another file within your project, for example to use a template, you can use the same #link(\"/docs/reference/scripting/#modules\")[import] statement with a file name rather than a package specification. To instead include the textual content of another file, you can use an #link(\"/docs/reference/scripting/#modules\")[include] statement. It will retrieve the content of the specified file and put it in your document.\n\n== How do I input maths?\n\nTo enter math mode in Typst, just enclose your equation in dollar signs. You can enter display mode by adding spaces or newlines between the equation's contents and its enclosing dollar signs.\n\n```typst\nThe sum of the numbers from\n$1$ to $n$ is:\n\n$ sum_(k=1)^n k = (n(n+1))/2 $\n```\n\n#link(\"/docs/reference/math/\")[Math mode] works differently than regular markup or code mode. Numbers and single characters are displayed verbatim, while multiple consecutive (non-number) characters will be interpreted as Typst variables.\n\nTypst pre-defines a lot of useful variables in math mode. All Greek (`alpha`, `beta`, ...) and some Hebrew letters (`alef`, `bet`, ...) are available through their name. Some symbols are additionally available through shorthands, such as `<=`, `>=`, and `->`.\n\nRefer to the #link(\"/docs/reference/symbols/\")[symbol pages] for a full list of the symbols. If a symbol is missing, you can also access it through a #link(\"/docs/reference/syntax/#escapes\")[Unicode escape sequence].\n\nAlternate and related forms of symbols can often be selected by #link(\"/docs/reference/foundations/symbol/\")[appending a modifier] after a period. For example, `arrow.l.squiggly` inserts a squiggly left-pointing arrow. If you want to insert multiletter text in your expression instead, enclose it in double quotes:\n\n```typst\n$ delta \"if\" x <= 5 $\n```\n\nIn Typst, delimiters will scale automatically for their expressions, just as if `\\left` and `\\right` commands were implicitly inserted in LaTeX. You can customize delimiter behaviour using the #link(\"/docs/reference/math/lr/#functions-lr\")[lr function]. To prevent a pair of delimiters from scaling, you can escape them with backslashes.\n\nTypst will automatically set terms around a slash `/` as a fraction while honoring operator precedence. All round parentheses not made redundant by the fraction will appear in the output.\n\n```typst\n$ f(x) = (x + 1) / x $\n```\n\n#link(\"/docs/reference/math/attach/#functions-attach\")[Sub- and superscripts] work similarly in Typst and LaTeX. `$x^2$` will produce a superscript, `$x_2$` yields a subscript. If you want to include more than one value in a sub- or superscript, enclose their contents in parentheses: `$x_(a -> epsilon)$`.\n\nSince variables in math mode do not need to be prepended with a `#` or a `/`, you can also call functions without these special characters:\n\n```typst\n$ f(x, y) := cases(\n  1 \"if\" (x dot y)/2 <= 0,\n  2 \"if\" x \"is even\",\n  3 \"if\" x in NN,\n  4 \"else\",\n) $\n```\n\nThe above example uses the #link(\"/docs/reference/math/cases/\")[cases function] to describe f. Within the cases function, arguments are delimited using commas and the arguments are also interpreted as math. If you need to interpret arguments as Typst values instead, prefix them with a `#`:\n\n```typst\n$ (a + b)^2\n  = a^2\n  + text(fill: #maroon, 2 a b)\n  + b^2 $\n```\n\nYou can use all Typst functions within math mode and insert any content. If you want them to work normally, with code mode in the argument list, you can prefix their call with a `#`. Nobody can stop you from using rectangles or emoji as your variables anymore:\n\n```typst\n$ sum^10_(🥸=1)\n  #rect(width: 4mm, height: 2mm)/🥸\n  = 🧠 maltese $\n```\n\nIf you'd like to enter your mathematical symbols directly as Unicode, that is possible, too!\n\nMath calls can have two-dimensional argument lists using `;` as a delimiter. The most common use for this is the #link(\"/docs/reference/math/mat/\")[mat function] that creates matrices:\n\n```typst\n$ mat(\n  1, 2, ..., 10;\n  2, 2, ..., 10;\n  dots.v, dots.v, dots.down, dots.v;\n  10, 10, ..., 10;\n) $\n```\n\n== How do I get the \"LaTeX look?\"\n\nPapers set in LaTeX have an unmistakeable look. This is mostly due to their font, Computer Modern, justification, narrow line spacing, and wide margins.\n\nThe example below\n\n- sets wide #link(\"/docs/reference/layout/page/#parameters-margin\")[margins]\n- enables #link(\"/docs/reference/model/par/#parameters-justify\")[justification], #link(\"/docs/reference/model/par/#parameters-leading\")[tighter lines] and #link(\"/docs/reference/model/par/#parameters-first-line-indent\")[first-line-indent]\n- #link(\"/docs/reference/text/text/#parameters-font\")[sets the font] to \"New Computer Modern\", an OpenType derivative of Computer Modern for both text and #link(\"/docs/reference/text/raw/\")[code blocks]\n- disables paragraph #link(\"/docs/reference/layout/block/#parameters-spacing\")[spacing]\n- increases #link(\"/docs/reference/layout/block/#parameters-spacing\")[spacing] around #link(\"/docs/reference/model/heading/\")[headings]\n\nThis should be a good starting point! If you want to go further, why not create a reusable template?\n\n== Bibliographies\n\nTypst includes a fully-featured bibliography system that is compatible with BibTeX files. You can continue to use your `.bib` literature libraries by loading them with the #link(\"/docs/reference/model/bibliography/\")[bibliography] function. Another possibility is to use #link(\"https://github.com/typst/hayagriva/blob/main/docs/file-format.md\")[Typst's YAML-based native format].\n\nTypst uses the Citation Style Language to define and process citation and bibliography styles. You can compare CSL files to BibLaTeX's `.bbx` files. The compiler already includes #link(\"/docs/reference/model/bibliography/#parameters-style\")[over 80 citation styles], but you can use any CSL-compliant style from the #link(\"https://github.com/citation-style-language/styles\")[CSL repository] or write your own.\n\nYou can cite an entry in your bibliography or reference a label in your document with the same syntax: `@key` (this would reference an entry called `key`). Alternatively, you can use the #link(\"/docs/reference/model/cite/\")[cite] function.\n\nAlternative forms for your citation, such as year only and citations for natural use in prose (cf. `\\citet` and `\\textcite`) are available with #link(\"/docs/reference/model/cite/#parameters-form\")[#cite(<key>, form: \"prose\")].\n\nYou can find more information on the documentation page of the #link(\"/docs/reference/model/bibliography/\")[bibliography] function.\n\n== What limitations does Typst currently have compared to LaTeX?\n\nAlthough Typst can be a LaTeX replacement for many today, there are still features that Typst does not (yet) support. Here is a list of them which, where applicable, contains possible workarounds.\n\n- Well-established plotting ecosystem. LaTeX users often create elaborate charts along with their documents in PGF/TikZ. The Typst ecosystem does not yet offer the same breadth of available options, but the ecosystem around the cetz package is catching up quickly.\n- Change page margins without a pagebreak. In LaTeX, margins can always be adjusted, even without a pagebreak. To change margins in Typst, you use the page function which will force a page break. If you just want a few paragraphs to stretch into the margins, then reverting to the old margins, you can use the pad function with negative padding.\n- Include PDFs as images. In LaTeX, it has become customary to insert vector graphics as PDF or EPS files. Typst supports neither format as an image format, but you can easily convert both into SVG files with online tools or Inkscape. The web app will automatically convert PDF files to SVG files upon uploading them. You can also use the community-provided muchpdf package to embed PDFs. It internally converts PDFs to SVGs on-the-fly.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/guides/guide-for-latex-users.typ", "filename": "guide-for-latex-users.typ"}
{"text": "= Page setup guide\n\nYour page setup is a big part of the first impression your document gives. Line lengths, margins, and columns influence #link(\"https://practicaltypography.com/page-margins.html\")[appearance] and #link(\"https://designregression.com/article/line-length-revisited-following-the-research\")[legibility] while the right headers and footers will help your reader easily navigate your document. This guide will help you to customize pages, margins, headers, footers, and page numbers so that they are the right fit for your content and you can get started with writing.\n\nIn Typst, each page has a width, a height, and margins on all four sides. The top and bottom margins may contain a header and footer. The set rule of the #link(\"/docs/reference/layout/page/\")[page] element is where you control all of the page setup. If you make changes with this set rule, Typst will ensure that there is a new and conforming empty page afterward, so it may insert a page break. Therefore, it is best to specify your #link(\"/docs/reference/layout/page/\")[page] set rule at the start of your document or in your template.\n\n```typst\n#set rect(\n  width: 100%,\n  height: 100%,\n  inset: 4pt,\n)\n\n#set page(\n  paper: \"iso-b7\",\n  header: rect(fill: aqua)[Header],\n  footer: rect(fill: aqua)[Footer],\n  number-align: center,\n)\n\n#rect(fill: aqua.lighten(40%))\n```\n\nThis example visualizes the dimensions for page content, headers, and footers. The page content is the page size (ISO B7) minus each side's default margin. In the top and the bottom margin, there are stroked rectangles visualizing the header and footer. They do not touch the main content, instead, they are offset by 30% of the respective margin. You can control this offset by specifying the #link(\"/docs/reference/layout/page/#parameters-header-ascent\")[header-ascent] and #link(\"/docs/reference/layout/page/#parameters-footer-descent\")[footer-descent] arguments.\n\nBelow, the guide will go more into detail on how to accomplish common page setup requirements with examples.\n\n== Customize page size and margins\n\nTypst's default page size is A4 paper. Depending on your region and your use case, you will want to change this. You can do this by using the #link(\"/docs/reference/layout/page/\")[page] set rule and passing it a string argument to use a common page size. Options include the complete ISO 216 series (e.g. `\"a4\"` and `\"iso-c2\"`), customary US formats like `\"us-legal\"` or `\"us-letter\"`, and more. Check out the reference for the #link(\"/docs/reference/layout/page/#parameters-paper\")[page's paper argument] to learn about all available options.\n\n```typst\n#set page(\"us-letter\")\n\nThis page likes freedom.\n```\n\nIf you need to customize your page size to some dimensions, you can specify the named arguments #link(\"/docs/reference/layout/page/#parameters-width\")[width] and #link(\"/docs/reference/layout/page/#parameters-height\")[height] instead.\n\n```typst\n#set page(width: 12cm, height: 12cm)\n\nThis page is a square.\n```\n\nMargins are a vital ingredient for good typography: #link(\"http://webtypography.net/2.1.2\")[Typographers consider lines that fit between 45 and 75 characters best length for legibility] and your margins and #link(\"#columns\")[columns] help define line widths. By default, Typst will create margins proportional to the page size of your document. To set custom margins, you will use the #link(\"/docs/reference/layout/page/#parameters-margin\")[margin] argument in the #link(\"/docs/reference/layout/page/\")[page] set rule.\n\nThe `margin` argument will accept a length if you want to set all margins to the same width. However, you often want to set different margins on each side. To do this, you can pass a dictionary:\n\n```typst\n#set page(margin: (\n  top: 3cm,\n  bottom: 2cm,\n  x: 1.5cm,\n))\n\n#lorem(100)\n```\n\nThe page margin dictionary can have keys for each side (`top`, `bottom`, `left`, `right`), but you can also control left and right together by setting the `x` key of the margin dictionary, like in the example. Likewise, the top and bottom margins can be adjusted together by setting the `y` key.\n\nIf you do not specify margins for all sides in the margin dictionary, the old margins will remain in effect for the unset sides. To prevent this and set all remaining margins to a common size, you can use the `rest` key. For example, `#set page(margin: (left: 1.5in, rest: 1in))` will set the left margin to 1.5 inches and the remaining margins to one inch.\n\nSometimes, you'll need to alternate horizontal margins for even and odd pages, for example, to have more room towards the spine of a book than on the outsides of its pages. Typst keeps track of whether a page is to the left or right of the binding. You can use this information and set the `inside` or `outside` keys of the margin dictionary. The `inside` margin points towards the spine, and the `outside` margin points towards the edge of the bound book.\n\nTypst will assume that documents written in Left-to-Right scripts are bound on the left while books written in Right-to-Left scripts are bound on the right. However, you will need to change this in some cases: If your first page is output by a different app, the binding is reversed from Typst's perspective. Also, some books, like English-language Mangas are customarily bound on the right, despite English using Left-to-Right script. To change the binding side and explicitly set where the `inside` and `outside` are, set the #link(\"/docs/reference/layout/page/#parameters-binding\")[binding] argument in the #link(\"/docs/reference/layout/page/\")[page] set rule.\n\nIf `binding` is `left`, `inside` margins will be on the left on odd pages, and vice versa.\n\n== Add headers and footers\n\nHeaders and footers are inserted in the top and bottom margins of every page. You can add custom headers and footers or just insert a page number.\n\nIn case you need more than just a page number, the best way to insert a header and a footer are the #link(\"/docs/reference/layout/page/#parameters-header\")[header] and #link(\"/docs/reference/layout/page/#parameters-footer\")[footer] arguments of the #link(\"/docs/reference/layout/page/\")[page] set rule. You can pass any content as their values:\n\n```typst\n#set page(header: [\n  _Lisa Strassner's Thesis_\n  #h(1fr)\n  National Academy of Sciences\n])\n\n#lorem(150)\n```\n\nHeaders are bottom-aligned by default so that they do not collide with the top edge of the page. You can change this by wrapping your header in the #link(\"/docs/reference/layout/align/\")[align] function.\n\nYou'll need different headers and footers on some pages. For example, you may not want a header and footer on the title page. The example below shows how to conditionally remove the header on the first page:\n\nThis example may look intimidating, but let's break it down: By using the `context` keyword, we are telling Typst that the header depends on where we are in the document. We then ask Typst if the page #link(\"/docs/reference/introspection/counter/\")[counter] is larger than one at our (context-dependent) current position. The page counter starts at one, so we are skipping the header on a single page. Counters may have multiple levels. This feature is used for items like headings, but the page counter will always have a single level, so we can just look at the first one.\n\nYou can, of course, add an `else` to this example to add a different header to the first page instead.\n\nThe technique described in the previous section can be adapted to perform more advanced tasks using Typst's labels. For example, pages with big tables could omit their headers to help keep clutter down. We will mark our tables with a `<big-table>` #link(\"/docs/reference/foundations/label/\")[label] and use the #link(\"/docs/reference/introspection/query/\")[query system] to find out if such a label exists on the current page:\n\nHere, we query for all instances of the `<big-table>` label. We then check that none of the tables are on the page at our current position. If so, we print the header. This example also uses variables to be more concise. Just as above, you could add an `else` to add another header instead of deleting it.\n\n== Add and customize page numbers\n\nPage numbers help readers keep track of and reference your document more easily. The simplest way to insert page numbers is the #link(\"/docs/reference/layout/page/#parameters-numbering\")[numbering] argument of the #link(\"/docs/reference/layout/page/\")[page] set rule. You can pass a #link(\"/docs/reference/model/numbering/#parameters-numbering\")[numbering pattern] string that shows how you want your pages to be numbered.\n\n```typst\n#set page(numbering: \"1\")\n\nThis is a numbered page.\n```\n\nAbove, you can check out the simplest conceivable example. It adds a single Arabic page number at the center of the footer. You can specify other characters than `\"1\"` to get other numerals. For example, `\"i\"` will yield lowercase Roman numerals. Any character that is not interpreted as a number will be output as-is. For example, put dashes around your page number by typing this:\n\n```typst\n#set page(numbering: \"— 1 —\")\n\nThis is a — numbered — page.\n```\n\nYou can add the total number of pages by entering a second number character in the string.\n\n```typst\n#set page(numbering: \"1 of 1\")\n\nThis is one of many numbered pages.\n```\n\nGo to the #link(\"/docs/reference/model/numbering/#parameters-numbering\")[numbering function reference] to learn more about the arguments you can pass here.\n\nIn case you need to right- or left-align the page number, use the #link(\"/docs/reference/layout/page/#parameters-number-align\")[number-align] argument of the #link(\"/docs/reference/layout/page/\")[page] set rule. Alternating alignment between even and odd pages is not currently supported using this property. To do this, you'll need to specify a custom footer with your footnote and query the page counter as described in the section on conditionally omitting headers and footers.\n\nSometimes, you need to add other content than a page number to your footer. However, once a footer is specified, the #link(\"/docs/reference/layout/page/#parameters-numbering\")[numbering] argument of the #link(\"/docs/reference/layout/page/\")[page] set rule is ignored. This section shows you how to add a custom footer with page numbers and more.\n\n```typst\n#set page(footer: context [\n  *American Society of Proceedings*\n  #h(1fr)\n  #counter(page).display(\n    \"1/1\",\n    both: true,\n  )\n])\n\nThis page has a custom footer.\n```\n\nFirst, we add some strongly emphasized text on the left and add free space to fill the line. Then, we call `counter(page)` to retrieve the page counter and use its `display` function to show its current value. We also set `both` to `true` so that our numbering pattern applies to the current _and_ final page number.\n\nWe can also get more creative with the page number. For example, let's insert a circle for each page.\n\n```typst\n#set page(footer: context [\n  *Fun Typography Club*\n  #h(1fr)\n  #let (num,) = counter(page).get()\n  #let circles = num * (\n    box(circle(\n      radius: 2pt,\n      fill: navy,\n    )),\n  )\n  #box(\n    inset: (bottom: 1pt),\n    circles.join(h(1pt))\n  )\n])\n\nThis page has a custom footer.\n```\n\nIn this example, we use the number of pages to create an array of #link(\"/docs/reference/visualize/circle/\")[circles]. The circles are wrapped in a #link(\"/docs/reference/layout/box/\")[box] so they can all appear on the same line because they are blocks and would otherwise create paragraph breaks. The length of this #link(\"/docs/reference/foundations/array/\")[array] depends on the current page number.\n\nWe then insert the circles at the right side of the footer, with 1pt of space between them. The join method of an array will attempt to #link(\"/docs/reference/scripting/#blocks\")[join] the different values of an array into a single value, interspersed with its argument. In our case, we get a single content value with circles and spaces between them that we can use with the align function. Finally, we use another box to ensure that the text and the circles can share a line and use the #link(\"/docs/reference/layout/box/#parameters-inset\")[inset argument] to raise the circles a bit so they line up nicely with the text.\n\nDo you, at some point in your document, need to reset the page number? Maybe you want to start with the first page only after the title page. Or maybe you need to skip a few page numbers because you will insert pages into the final printed product.\n\nThe right way to modify the page number is to manipulate the page #link(\"/docs/reference/introspection/counter/\")[counter]. The simplest manipulation is to set the counter back to 1.\n\nThis line will reset the page counter back to one. It should be placed at the start of a page because it will otherwise create a page break. You can also update the counter given its previous value by passing a function:\n\nIn this example, we skip five pages. `n` is the current value of the page counter and `n + 5` is the return value of our function.\n\nIn case you need to retrieve the actual page number instead of the value of the page counter, you can use the #link(\"/docs/reference/introspection/location/#definitions-page\")[page] method on the return value of the #link(\"/docs/reference/introspection/here/\")[here] function:\n\n```typst\n#counter(page).update(n => n + 5)\n\n// This returns one even though the\n// page counter was incremented by 5.\n#context here().page()\n```\n\nYou can also obtain the page numbering pattern from the location returned by `here` with the #link(\"/docs/reference/introspection/location/#definitions-page-numbering\")[page-numbering] method.\n\n== Add columns\n\nAdd columns to your document to fit more on a page while maintaining legible line lengths. Columns are vertical blocks of text which are separated by some whitespace. This space is called the gutter.\n\nTo lay out your content in columns, just specify the desired number of columns in a #link(\"/docs/reference/layout/page/#parameters-columns\")[page] set rule. To adjust the amount of space between the columns, add a set rule on the #link(\"/docs/reference/layout/columns/\")[columns function], specifying the `gutter` parameter.\n\n```typst\n#set page(columns: 2)\n#set columns(gutter: 12pt)\n\n#lorem(30)\n```\n\nVery commonly, scientific papers have a single-column title and abstract, while the main body is set in two-columns. To achieve this effect, Typst's #link(\"/docs/reference/layout/place/\")[place function] can temporarily escape the two-column layout by specifying `float: true` and `scope: \"parent\"`:\n\n```typst\n#set page(columns: 2)\n#set par(justify: true)\n\n#place(\n  top + center,\n  float: true,\n  scope: \"parent\",\n  text(1.4em, weight: \"bold\")[\n    Impacts of Odobenidae\n  ],\n)\n\n== About seals in the wild\n#lorem(80)\n```\n\n_Floating placement_ refers to elements being pushed to the top or bottom of the column or page, with the remaining content flowing in between. It is also frequently used for #link(\"/docs/reference/model/figure/#parameters-placement\")[figures].\n\nTo create columns within a nested layout, e.g. within a rectangle, you can use the #link(\"/docs/reference/layout/columns/\")[columns function] directly. However, it really should only be used within nested layouts. At the page-level, the page set rule is preferable because it has better interactions with things like page-level floats, footnotes, and line numbers.\n\n```typst\n#rect(\n  width: 6cm,\n  height: 3.5cm,\n  columns(2, gutter: 12pt)[\n    In the dimly lit gas station,\n    a solitary taxi stood silently,\n    its yellow paint fading with\n    time. Its windows were dark,\n    its engine idle, and its tires\n    rested on the cold concrete.\n  ]\n)\n```\n\nIf the columns on the last page of a document differ greatly in length, they may create a lopsided and unappealing layout. That's why typographers will often equalize the length of columns on the last page. This effect is called balancing columns. Typst cannot yet balance columns automatically. However, you can balance columns manually by placing #link(\"/docs/reference/layout/colbreak/\")[#colbreak()] at an appropriate spot in your markup, creating the desired column break manually.\n\n== One-off modifications\n\nYou do not need to override your page settings if you need to insert a single page with a different setup. For example, you may want to insert a page that's flipped to landscape to insert a big table or change the margin and columns for your title page. In this case, you can call #link(\"/docs/reference/layout/page/\")[page] as a function with your content as an argument and the overrides as the other arguments. This will insert enough new pages with your overridden settings to place your content on them. Typst will revert to the page settings from the set rule after the call.\n\n```typst\n#page(flipped: true)[\n  = Multiplication table\n\n  #table(\n    columns: 5 * (1fr,),\n    ..for x in range(1, 10) {\n      for y in range(1, 6) {\n        (str(x*y),)\n      }\n    }\n  )\n]\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/guides/page-setup-guide.typ", "filename": "page-setup-guide.typ"}
{"text": "= Table guide\n\nTables are a great way to present data to your readers in an easily readable, compact, and organized manner. They are not only used for numerical values, but also survey responses, task planning, schedules, and more. Because of this wide set of possible applications, there is no single best way to lay out a table. Instead, think about the data you want to highlight, your document's overarching design, and ultimately how your table can best serve your readers.\n\nTypst can help you with your tables by automating styling, importing data from other applications, and more! This guide takes you through a few of the most common questions you may have when adding a table to your document with Typst. Feel free to skip to the section most relevant to you – we designed this guide to be read out of order.\n\nIf you want to look up a detail of how tables work, you should also #link(\"/docs/reference/model/table/\")[check out their reference page]. And if you are looking for a table of contents rather than a normal table, the reference page of the #link(\"/docs/reference/model/outline/\")[outline function] is the right place to learn more.\n\n== How to create a basic table?\n\nIn order to create a table in Typst, use the #link(\"/docs/reference/model/table/\")[table function]. For a basic table, you need to tell the table function two things:\n\n- The number of columns\n- The content for each of the table cells\n\nSo, let's say you want to create a table with two columns describing the ingredients for a cookie recipe:\n\n```typst\n#table(\n  columns: 2,\n  [*Amount*], [*Ingredient*],\n  [360g], [Baking flour],\n  [250g], [Butter (room temp.)],\n  [150g], [Brown sugar],\n  [100g], [Cane sugar],\n  [100g], [70% cocoa chocolate],\n  [100g], [35-40% cocoa chocolate],\n  [2], [Eggs],\n  [Pinch], [Salt],\n  [Drizzle], [Vanilla extract],\n)\n```\n\nThis example shows how to call, configure, and populate a table. Both the column count and cell contents are passed to the table as arguments. The #link(\"/docs/reference/foundations/function/\")[argument list] is surrounded by round parentheses. In it, we first pass the column count as a named argument. Then, we pass multiple #link(\"/docs/reference/foundations/content/\")[content blocks] as positional arguments. Each content block contains the contents for a single cell.\n\nTo make the example more legible, we have placed two content block arguments on each line, mimicking how they would appear in the table. You could also write each cell on its own line. Typst does not care on which line you place the arguments. Instead, Typst will place the content cells from left to right (or right to left, if that is the writing direction of your language) and then from top to bottom. It will automatically add enough rows to your table so that it fits all of your content.\n\nIt is best to wrap the header row of your table in the #link(\"/docs/reference/model/table/#definitions-header\")[table.header function]. This clarifies your intent and will also allow future versions of Typst to make the output more accessible to users with a screen reader:\n\n```typst\n#table(\n  columns: 2,\n  table.header[*Amount*][*Ingredient*],\n  [360g], [Baking flour],\n // ... the remaining cells\n)\n```\n\nYou could also write a show rule that automatically #link(\"/docs/reference/model/strong/\")[strongly emphasizes] the contents of the first cells for all tables. This quickly becomes useful if your document contains multiple tables!\n\n```typst\n#show table.cell.where(y: 0): strong\n\n#table(\n  columns: 2,\n  table.header[Amount][Ingredient],\n  [360g], [Baking flour],\n // ... the remaining cells\n)\n```\n\nWe are using a show rule with a selector for cell coordinates here instead of applying our styles directly to `table.header`. This is due to a current limitation of Typst that will be fixed in a future release.\n\nCongratulations, you have created your first table! Now you can proceed to #link(\"#column-sizes\")[change column sizes], #link(\"#strokes\")[adjust the strokes], #link(\"#fills\")[add striped rows], and more!\n\n== How to change the column sizes?\n\nIf you create a table and specify the number of columns, Typst will make each column large enough to fit its largest cell. Often, you want something different, for example, to make a table span the whole width of the page. You can provide a list, specifying how wide you want each column to be, through the `columns` argument. There are a few different ways to specify column widths:\n\n- First, there is `auto`. This is the default behavior and tells Typst to grow the column to fit its contents. If there is not enough space, Typst will try its best to distribute the space among the `auto`-sized columns.\n- #link(\"/docs/reference/layout/length/\")[Lengths] like `6cm`, `0.7in`, or `120pt`. As usual, you can also use the font-dependent `em` unit. This is a multiple of your current font size. It's useful if you want to size your table so that it always fits about the same amount of text, independent of font size.\n- A #link(\"/docs/reference/layout/ratio/\")[ratio in percent] such as `40%`. This will make the column take up 40% of the total horizontal space available to the table, so either the inner width of the page or the table's container. You can also mix ratios and lengths into #link(\"/docs/reference/layout/relative/\")[relative lengths]. Be mindful that even if you specify a list of column widths that sum up to 100%, your table could still become larger than its container. This is because there can be #link(\"/docs/reference/model/table/#parameters-gutter\")[gutter] between columns that is not included in the column widths. If you want to make a table fill the page, the next option is often very useful.\n- A #link(\"/docs/reference/layout/fraction/\")[fractional part of the free space] using the `fr` unit, such as `1fr`. This unit allows you to distribute the available space to columns. It works as follows: First, Typst sums up the lengths of all columns that do not use `fr`s. Then, it determines how much horizontal space is left. This horizontal space then gets distributed to all columns denominated in `fr`s. During this process, a `2fr` column will become twice as wide as a `1fr` column. This is where the name comes from: The width of the column is its fraction of the total fractionally sized columns.\n\nLet's put this to use with a table that contains the dates, numbers, and descriptions of some routine checks. The first two columns are `auto`-sized and the last column is `1fr` wide as to fill the whole page.\n\n```typst\n#table(\n  columns: (auto, auto, 1fr),\n  table.header[Date][°No][Description],\n  [24/01/03], [813], [Filtered participant pool],\n  [24/01/03], [477], [Transitioned to sec. regimen],\n  [24/01/11], [051], [Cycled treatment substrate],\n)\n```\n\nHere, we have passed our list of column lengths as an #link(\"/docs/reference/foundations/array/\")[array], enclosed in round parentheses, with its elements separated by commas. The first two columns are automatically sized, so that they take on the size of their content and the third column is sized as `1fr` so that it fills up the remainder of the space on the page. If you wanted to instead change the second column to be a bit more spacious, you could replace its entry in the `columns` array with a value like `6em`.\n\n== How to caption and reference my table?\n\nA table is just as valuable as the information your readers draw from it. You can enhance the effectiveness of both your prose and your table by making a clear connection between the two with a cross-reference. Typst can help you with automatic #link(\"/docs/reference/model/ref/\")[references] and the #link(\"/docs/reference/model/figure/\")[figure function].\n\nJust like with images, wrapping a table in the `figure` function allows you to add a caption and a label, so you can reference the figure elsewhere. Wrapping your table in a figure also lets you use the figure's `placement` parameter to float it to the top or bottom of a page.\n\nLet's take a look at a captioned table and how to reference it in prose:\n\n```typst\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#figure(\n  table(\n    columns: 4,\n    stroke: none,\n\n    table.header[Test Item][Specification][Test Result][Compliance],\n    [Voltage], [220V ± 5%], [218V], [Pass],\n    [Current], [5A ± 0.5A], [4.2A], [Fail],\n  ),\n  caption: [Probe results for design A],\n) <probe-a>\n\nThe results from @probe-a show that the design is not yet optimal.\nWe will show how its performance can be improved in this section.\n```\n\nThe example shows how to wrap a table in a figure, set a caption and a label, and how to reference that label. We start by using the `figure` function. It expects the contents of the figure as a positional argument. We just put the table function call in its argument list, omitting the `#` character because it is only needed when calling a function in markup mode. We also add the caption as a named argument (above or below) the table.\n\nAfter the figure call, we put a label in angle brackets (`<probe-a>`). This tells Typst to remember this element and make it referenceable under this name throughout your document. We can then reference it in prose by using the at sign and the label name `@probe-a`. Typst will print a nicely formatted reference and automatically update the label if the table's number changes.\n\n== How to get a striped table?\n\nMany tables use striped rows or columns instead of strokes to differentiate between rows and columns. This effect is often called _zebra stripes._ Tables with zebra stripes are popular in Business and commercial Data Analytics applications, while academic applications tend to use strokes instead.\n\nTo add zebra stripes to a table, we use the `table` function's `fill` argument. It can take three kinds of arguments:\n\n- A single color (this can also be a gradient or a tiling) to fill all cells with. Because we want some cells to have another color, this is not useful if we want to build zebra tables.\n- An array with colors which Typst cycles through for each column. We can use an array with two elements to get striped columns.\n- A function that takes the horizontal coordinate `x` and the vertical coordinate `y` of a cell and returns its fill. We can use this to create horizontal stripes or #link(\"/docs/reference/layout/grid/#definitions-cell\")[checkerboard patterns].\n\nLet's start with an example of a horizontally striped table:\n\n```typst\n#set text(font: \"IBM Plex Sans\")\n\n// Medium bold table header.\n#show table.cell.where(y: 0): set text(weight: \"medium\")\n\n// Bold titles.\n#show table.cell.where(x: 1): set text(weight: \"bold\")\n\n// See the strokes section for details on this!\n#let frame(stroke) = (x, y) => (\n  left: if x > 0 { 0pt } else { stroke },\n  right: stroke,\n  top: if y < 2 { stroke } else { 0pt },\n  bottom: stroke,\n)\n\n#set table(\n  fill: (rgb(\"EAF2F5\"), none),\n  stroke: frame(rgb(\"21222C\")),\n)\n\n#table(\n  columns: (0.4fr, 1fr, 1fr, 1fr),\n\n  table.header[Month][Title][Author][Genre],\n  [January], [The Great Gatsby], [F. Scott Fitzgerald], [Classic],\n  [February], [To Kill a Mockingbird], [Harper Lee], [Drama],\n  [March], [1984], [George Orwell], [Dystopian],\n  [April], [The Catcher in the Rye], [J.D. Salinger], [Coming-of-Age],\n)\n```\n\nThis example shows a book club reading list. The line `fill: (rgb(\"EAF2F5\"), none)` in `table`'s set rule is all that is needed to add striped columns. It tells Typst to alternate between coloring columns with a light blue (in the #link(\"/docs/reference/visualize/color/#definitions-rgb\")[rgb] function call) and nothing (`none`). Note that we extracted all of our styling from the `table` function call itself into set and show rules, so that we can automatically reuse it for multiple tables.\n\nBecause setting the stripes itself is easy we also added some other styles to make it look nice. The other code in the example provides a dark blue #link(\"#stroke-functions\")[stroke] around the table and below the first line and emboldens the first row and the column with the book title. See the #link(\"#strokes\")[strokes] section for details on how we achieved this stroke configuration.\n\nLet's next take a look at how we can change only the set rule to achieve horizontal stripes instead:\n\n```typst\n#set table(\n  fill: (_, y) => if calc.odd(y) { rgb(\"EAF2F5\") },\n  stroke: frame(rgb(\"21222C\")),\n)\n```\n\nWe just need to replace the set rule from the previous example with this one and get horizontal stripes instead. Here, we are passing a function to `fill`. It discards the horizontal coordinate with an underscore and then checks if the vertical coordinate `y` of the cell is odd. If so, the cell gets a light blue fill, otherwise, no fill is returned.\n\nOf course, you can make this function arbitrarily complex. For example, if you want to stripe the rows with a light and darker shade of blue, you could do something like this:\n\n```typst\n#set table(\n  fill: (_, y) => (none, rgb(\"EAF2F5\"), rgb(\"DDEAEF\")).at(calc.rem(y, 3)),\n  stroke: frame(rgb(\"21222C\")),\n)\n```\n\nThis example shows an alternative approach to write our fill function. The function uses an array with three colors and then cycles between its values for each row by indexing the array with the remainder of `y` divided by 3.\n\nFinally, here is a bonus example that uses the _stroke_ to achieve striped rows:\n\n```typst\n#set table(\n  stroke: (x, y) => (\n    y: 1pt,\n    left: if x > 0 { 0pt } else if calc.even(y) { 1pt },\n    right: if calc.even(y) { 1pt },\n  ),\n)\n```\n\nSometimes, the fill of a cell needs not to vary based on its position in the table, but rather based on its contents. We can use the #link(\"/docs/reference/model/table/#definitions-cell\")[table.cell element] in the `table`'s parameter list to wrap a cell's content and override its fill.\n\nFor example, here is a list of all German presidents, with the cell borders colored in the color of their party.\n\n```typst\n#set text(font: \"Roboto\")\n\n#let cdu(name) = ([CDU], table.cell(fill: black, text(fill: white, name)))\n#let spd(name) = ([SPD], table.cell(fill: red, text(fill: white, name)))\n#let fdp(name) = ([FDP], table.cell(fill: yellow, name))\n\n#table(\n  columns: (auto, auto, 1fr),\n  stroke: (x: none),\n\n  table.header[Tenure][Party][President],\n  [1949-1959], ..fdp[Theodor Heuss],\n  [1959-1969], ..cdu[Heinrich Lübke],\n  [1969-1974], ..spd[Gustav Heinemann],\n  [1974-1979], ..fdp[Walter Scheel],\n  [1979-1984], ..cdu[Karl Carstens],\n  [1984-1994], ..cdu[Richard von Weizsäcker],\n  [1994-1999], ..cdu[Roman Herzog],\n  [1999-2004], ..spd[Johannes Rau],\n  [2004-2010], ..cdu[Horst Köhler],\n  [2010-2012], ..cdu[Christian Wulff],\n  [2012-2017], [n/a], [Joachim Gauck],\n  [2017-],     ..spd[Frank-Walter-Steinmeier],\n)\n```\n\nIn this example, we make use of variables because there only have been a total of three parties whose members have become president (and one unaffiliated president). Their colors will repeat multiple times, so we store a function that produces an array with their party's name and a table cell with that party's color and the president's name (`cdu`, `spd`, and `fdp`). We then use these functions in the `table` argument list instead of directly adding the name. We use the #link(\"/docs/reference/foundations/arguments/#spreading\")[spread operator] `..` to turn the items of the arrays into single cells. We could also write something like `[FDP], table.cell(fill: yellow)[Theodor Heuss]` for each cell directly in the `table`'s argument list, but that becomes unreadable, especially for the parties whose colors are dark so that they require white text. We also delete vertical strokes and set the font to Roboto.\n\nThe party column and the cell color in this example communicate redundant information on purpose: Communicating important data using color only is a bad accessibility practice. It disadvantages users with vision impairment and is in violation of universal access standards, such as the #link(\"https://www.w3.org/WAI/WCAG21/Understanding/use-of-color.html\")[WCAG 2.1 Success Criterion 1.4.1]. To improve this table, we added a column printing the party name. Alternatively, you could have made sure to choose a color-blindness friendly palette and mark up your cells with an additional label that screen readers can read out loud. The latter feature is not currently supported by Typst, but will be added in a future release. You can check how colors look for color-blind readers with #link(\"https://chromewebstore.google.com/detail/colorblindly/floniaahmccleoclneebhhmnjgdfijgg\")[this Chrome extension], #link(\"https://helpx.adobe.com/photoshop/using/proofing-colors.html\")[Photoshop], or #link(\"https://docs.gimp.org/2.10/en/gimp-display-filter-dialog.html\")[GIMP].\n\n== How to adjust the lines in a table?\n\nBy default, Typst adds strokes between each row and column of a table. You can adjust these strokes in a variety of ways. Which one is the most practical, depends on the modification you want to make and your intent:\n\n- Do you want to style all tables in your document, irrespective of their size and content? Use the `table` function's #link(\"/docs/reference/model/table/#parameters-stroke\")[stroke] argument in a set rule.\n- Do you want to customize all lines in a single table? Use the `table` function's #link(\"/docs/reference/model/table/#parameters-stroke\")[stroke] argument when calling the table function.\n- Do you want to change, add, or remove the stroke around a single cell? Use the `table.cell` element in the argument list of your table call.\n- Do you want to change, add, or remove a single horizontal or vertical stroke in a single table? Use the #link(\"/docs/reference/model/table/#definitions-hline\")[table.hline] and #link(\"/docs/reference/model/table/#definitions-vline\")[table.vline] elements in the argument list of your table call.\n\nWe will go over all of these options with examples next! First, we will tackle the `table` function's #link(\"/docs/reference/model/table/#parameters-stroke\")[stroke] argument. Here, you can adjust both how the table's lines get drawn and configure which lines are drawn at all.\n\nLet's start by modifying the color and thickness of the stroke:\n\n```typst\n#table(\n  columns: 4,\n  stroke: 0.5pt + rgb(\"666675\"),\n  [*Monday*], [11.5], [13.0], [4.0],\n  [*Tuesday*], [8.0], [14.5], [5.0],\n  [*Wednesday*], [9.0], [18.5], [13.0],\n)\n```\n\nThis makes the table lines a bit less wide and uses a bluish gray. You can see that we added a width in point to a color to achieve our customized stroke. This addition yields a value of the #link(\"/docs/reference/visualize/stroke/\")[stroke type]. Alternatively, you can use the dictionary representation for strokes which allows you to access advanced features such as dashed lines.\n\nThe previous example showed how to use the stroke argument in the table function's invocation. Alternatively, you can specify the stroke argument in the `table`'s set rule. This will have exactly the same effect on all subsequent `table` calls as if the stroke argument was specified in the argument list. This is useful if you are writing a template or want to style your whole document.\n\nFor small tables, you sometimes want to suppress all strokes because they add too much visual noise. To do this, just set the stroke argument to `none`:\n\n```typst\n#table(\n  columns: 4,\n  stroke: none,\n  [*Monday*], [11.5], [13.0], [4.0],\n  [*Tuesday*], [8.0], [14.5], [5.0],\n  [*Wednesday*], [9.0], [18.5], [13.0],\n)\n```\n\nIf you want more fine-grained control of where lines get placed in your table, you can also pass a dictionary with the keys `top`, `left`, `right`, `bottom` (controlling the respective cell sides), `x`, `y` (controlling vertical and horizontal strokes), and `rest` (covers all strokes not styled by other dictionary entries). All keys are optional; omitted keys will be treated as if their value was the default value. For example, to get a table with only horizontal lines, you can do this:\n\n```typst\n#table(\n  columns: 2,\n  stroke: (x: none),\n  align: horizon,\n  [☒], [Close cabin door],\n  [☐], [Start engines],\n  [☐], [Radio tower],\n  [☐], [Push back],\n)\n```\n\nThis turns off all vertical strokes and leaves the horizontal strokes in place. To achieve the reverse effect (only horizontal strokes), set the stroke argument to `(y: none)` instead.\n\n#link(\"#stroke-functions\")[Further down in the guide], we cover how to use a function in the stroke argument to customize all strokes individually. This is how you achieve more complex stroking patterns.\n\nIf you want to add a single horizontal or vertical line in your table, for example to separate a group of rows, you can use the #link(\"/docs/reference/model/table/#definitions-hline\")[table.hline] and #link(\"/docs/reference/model/table/#definitions-vline\")[table.vline] elements for horizontal and vertical lines, respectively. Add them to the argument list of the `table` function just like you would add individual cells and a header.\n\nLet's take a look at the following example from the reference:\n\n```typst\n#set table.hline(stroke: 0.6pt)\n\n#table(\n  stroke: none,\n  columns: (auto, 1fr),\n  // Morning schedule abridged.\n  [14:00], [Talk: Tracked Layout],\n  [15:00], [Talk: Automations],\n  [16:00], [Workshop: Tables],\n  table.hline(),\n  [19:00], [Day 1 Attendee Mixer],\n)\n```\n\nIn this example, you can see that we have placed a call to `table.hline` between the cells, producing a horizontal line at that spot. We also used a set rule on the element to reduce its stroke width to make it fit better with the weight of the font.\n\nBy default, Typst places horizontal and vertical lines after the current row or column, depending on their position in the argument list. You can also manually move them to a different position by adding the `y` (for `hline`) or `x` (for `vline`) argument. For example, the code below would produce the same result:\n\nLet's imagine you are working with a template that shows none of the table strokes except for one between the first and second row. Now, since you have one table that also has labels in the first column, you want to add an extra vertical line to it. However, you do not want this vertical line to cross into the top row. You can achieve this with the `start` argument:\n\n```typst\n// Base template already configured tables, but we need some\n// extra configuration for this table.\n#{\n  set table(align: (x, _) => if x == 0 { left } else { right })\n  show table.cell.where(x: 0): smallcaps\n  table(\n    columns: (auto, 1fr, 1fr, 1fr),\n    table.vline(x: 1, start: 1),\n    table.header[Trainset][Top Speed][Length][Weight],\n    [TGV Réseau], [320 km/h], [200m], [383t],\n    [ICE 403], [330 km/h], [201m], [409t],\n    [Shinkansen N700], [300 km/h], [405m], [700t],\n  )\n}\n```\n\nIn this example, we have added `table.vline` at the start of our positional argument list. But because the line is not supposed to go to the left of the first column, we specified the `x` argument as `1`. We also set the `start` argument to `1` so that the line does only start after the first row.\n\nThe example also contains two more things: We use the align argument with a function to right-align the data in all but the first column and use a show rule to make the first column of table cells appear in small capitals. Because these styles are specific to this one table, we put everything into a #link(\"/docs/reference/scripting/#blocks\")[code block], so that the styling does not affect any further tables.\n\nImagine you want to change the stroke around a single cell. Maybe your cell is very important and needs highlighting! For this scenario, there is the #link(\"/docs/reference/model/table/#definitions-cell\")[table.cell function]. Instead of adding your content directly in the argument list of the table, you wrap it in a `table.cell` call. Now, you can use `table.cell`'s argument list to override the table properties, such as the stroke, for this cell only.\n\nHere's an example with a matrix of two of the Big Five personality factors, with one intersection highlighted.\n\n```typst\n#table(\n  columns: 3,\n  stroke: (x: none),\n\n  [], [*High Neuroticism*], [*Low Neuroticism*],\n\n  [*High Agreeableness*],\n  table.cell(stroke: orange + 2pt)[\n    _Sensitive_ \\ Prone to emotional distress but very empathetic.\n  ],\n  [_Compassionate_ \\ Caring and stable, often seen as a supportive figure.],\n\n  [*Low Agreeableness*],\n  [_Contentious_ \\ Competitive and easily agitated.],\n  [_Detached_ \\ Independent and calm, may appear aloof.],\n)\n```\n\nAbove, you can see that we used the `table.cell` element in the table's argument list and passed the cell content to it. We have used its `stroke` argument to set a wider orange stroke. Despite the fact that we disabled vertical strokes on the table, the orange stroke appeared on all sides of the modified cell, showing that the table's stroke configuration is overwritten.\n\nThis section explains how to customize all lines at once in one or multiple tables. This allows you to draw only the first horizontal line or omit the outer lines, without knowing how many cells the table has. This is achieved by providing a function to the table's `stroke` parameter. The function should return a stroke given the zero-indexed x and y position of the current cell. You should only need these functions if you are a template author, do not use a template, or need to heavily customize your tables. Otherwise, your template should set appropriate default table strokes.\n\nFor example, this is a set rule that draws all horizontal lines except for the very first and last line.\n\n```typst\n#show table.cell.where(x: 0): set text(style: \"italic\")\n#show table.cell.where(y: 0): set text(style: \"normal\", weight: \"bold\")\n#set table(stroke: (_, y) => if y > 0 { (top: 0.8pt) })\n\n#table(\n  columns: 3,\n  align: center + horizon,\n  table.header[Technique][Advantage][Drawback],\n  [Diegetic], [Immersive], [May be contrived],\n  [Extradiegetic], [Breaks immersion], [Obtrusive],\n  [Omitted], [Fosters engagement], [May fracture audience],\n)\n```\n\nIn the set rule, we pass a function that receives two arguments, assigning the vertical coordinate to `y` and discarding the horizontal coordinate. It then returns a stroke dictionary with a `0.8pt` top stroke for all but the first line. The cells in the first line instead implicitly receive `none` as the return value. You can easily modify this function to just draw the inner vertical lines instead as `(x, _) => if x > 0 { (left: 0.8pt) }`.\n\nLet's try a few more stroking functions. The next function will only draw a line below the first row:\n\n```typst\n#set table(stroke: (_, y) => if y == 0 { (bottom: 1pt) })\n\n// Table as seen above\n```\n\nIf you understood the first example, it becomes obvious what happens here. We check if we are in the first row. If so, we return a bottom stroke. Otherwise, we'll return `none` implicitly.\n\nThe next example shows how to draw all but the outer lines:\n\n```typst\n#set table(stroke: (x, y) => (\n  left: if x > 0 { 0.8pt },\n  top: if y > 0 { 0.8pt },\n))\n\n// Table as seen above\n```\n\nThis example uses both the `x` and `y` coordinates. It omits the left stroke in the first column and the top stroke in the first row. The right and bottom lines are not drawn.\n\nFinally, here is a table that draws all lines except for the vertical lines in the first row and horizontal lines in the table body. It looks a bit like a calendar.\n\n```typst\n#set table(stroke: (x, y) => (\n  left: if x == 0 or y > 0 { 1pt } else { 0pt },\n  right: 1pt,\n  top: if y <= 1 { 1pt } else { 0pt },\n  bottom: 1pt,\n))\n\n// Table as seen above\n```\n\nThis example is a bit more complex. We start by drawing all the strokes on the right of the cells. But this means that we have drawn strokes in the top row, too, and we don't need those! We use the fact that `left` will override `right` and only draw the left line if we are not in the first row or if we are in the first column. In all other cases, we explicitly remove the left line. Finally, we draw the horizontal lines by first setting the bottom line and then for the first two rows with the `top` key, suppressing all other top lines. The last line appears because there is no `top` line that could suppress it.\n\nTypst does not yet have a native way to draw double strokes, but there are multiple ways to emulate them, for example with #link(\"/docs/reference/visualize/tiling/\")[tilings]. We will show a different workaround in this section: Table gutters.\n\nTables can space their cells apart using the `gutter` argument. When a gutter is applied, a stroke is drawn on each of the now separated cells. We can selectively add gutter between the rows or columns for which we want to draw a double line. The `row-gutter` and `column-gutter` arguments allow us to do this. They accept arrays of gutter values. Let's take a look at an example:\n\n```typst\n#table(\n  columns: 3,\n  stroke: (x: none),\n  row-gutter: (2.2pt, auto),\n  table.header[Date][Exercise Type][Calories Burned],\n  [2023-03-15], [Swimming], [400],\n  [2023-03-17], [Weightlifting], [250],\n  [2023-03-18], [Yoga], [200],\n)\n```\n\nWe can see that we used an array for `row-gutter` that specifies a `2.2pt` gap between the first and second row. It then continues with `auto` (which is the default, in this case `0pt` gutter) which will be the gutter between all other rows, since it is the last entry in the array.\n\n== How to align the contents of the cells in my table?\n\nYou can use multiple mechanisms to align the content in your table. You can either use the `table` function's `align` argument to set the alignment for your whole table (or use it in a set rule to set the alignment for tables throughout your document) or the #link(\"/docs/reference/layout/align/\")[align] function (or `table.cell`'s `align` argument) to override the alignment of a single cell.\n\nWhen using the `table` function's align argument, you can choose between three methods to specify an #link(\"/docs/reference/layout/alignment/\")[alignment]:\n\n- Just specify a single alignment like `right` (aligns in the top-right corner) or `center + horizon` (centers all cell content). This changes the alignment of all cells.\n- Provide an array. Typst will cycle through this array for each column.\n- Provide a function that is passed the horizontal `x` and vertical `y` coordinate of a cell and returns an alignment.\n\nFor example, this travel itinerary right-aligns the day column and left-aligns everything else by providing an array in the `align` argument:\n\n```typst\n#set text(font: \"IBM Plex Sans\")\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#table(\n  columns: 4,\n  align: (right, left, left, left),\n  fill: (_, y) => if calc.odd(y) { green.lighten(90%) },\n  stroke: none,\n\n  table.header[Day][Location][Hotel or Apartment][Activities],\n  [1], [Paris, France], [Hôtel de l'Europe], [Arrival, Evening River Cruise],\n  [2], [Paris, France], [Hôtel de l'Europe], [Louvre Museum, Eiffel Tower],\n  [3], [Lyon, France], [Lyon City Hotel], [City Tour, Local Cuisine Tasting],\n  [4], [Geneva, Switzerland], [Lakeview Inn], [Lake Geneva, Red Cross Museum],\n  [5], [Zermatt, Switzerland], [Alpine Lodge], [Visit Matterhorn, Skiing],\n)\n```\n\nHowever, this example does not yet look perfect — the header cells should be bottom-aligned. Let's use a function instead to do so:\n\n```typst\n#set text(font: \"IBM Plex Sans\")\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#table(\n  columns: 4,\n  align: (x, y) =>\n    if x == 0 { right } else { left } +\n    if y == 0 { bottom } else { top },\n  fill: (_, y) => if calc.odd(y) { green.lighten(90%) },\n  stroke: none,\n\n  table.header[Day][Location][Hotel or Apartment][Activities],\n  [1], [Paris, France], [Hôtel de l'Europe], [Arrival, Evening River Cruise],\n  [2], [Paris, France], [Hôtel de l'Europe], [Louvre Museum, Eiffel Tower],\n // ... remaining days omitted\n)\n```\n\nIn the function, we calculate a horizontal and vertical alignment based on whether we are in the first column (`x == 0`) or the first row (`y == 0`). We then make use of the fact that we can add horizontal and vertical alignments with `+` to receive a single, two-dimensional alignment.\n\nYou can find an example of using `table.cell` to change a single cell's alignment on #link(\"/docs/reference/model/table/#definitions-cell\")[its reference page].\n\n== How to merge cells?\n\nWhen a table contains logical groupings or the same data in multiple adjacent cells, merging multiple cells into a single, larger cell can be advantageous. Another use case for cell groups are table headers with multiple rows: That way, you can group for example a sales data table by quarter in the first row and by months in the second row.\n\nA merged cell spans multiple rows and/or columns. You can achieve it with the #link(\"/docs/reference/model/table/#definitions-cell\")[table.cell] function's `rowspan` and `colspan` arguments: Just specify how many rows or columns you want your cell to span.\n\nThe example below contains an attendance calendar for an office with in-person and remote days for each team member. To make the table more glanceable, we merge adjacent cells with the same value:\n\n```typst\n#let ofi = [Office]\n#let rem = [_Remote_]\n#let lea = [*On leave*]\n\n#show table.cell.where(y: 0): set text(\n  fill: white,\n  weight: \"bold\",\n)\n\n#table(\n  columns: 6 * (1fr,),\n  align: (x, y) => if x == 0 or y == 0 { left } else { center },\n  stroke: (x, y) => (\n    // Separate black cells with white strokes.\n    left: if y == 0 and x > 0 { white } else { black },\n    rest: black,\n  ),\n  fill: (_, y) => if y == 0 { black },\n\n  table.header(\n    [Team member],\n    [Monday],\n    [Tuesday],\n    [Wednesday],\n    [Thursday],\n    [Friday]\n  ),\n  [Evelyn Archer],\n    table.cell(colspan: 2, ofi),\n    table.cell(colspan: 2, rem),\n    ofi,\n  [Lila Montgomery],\n    table.cell(colspan: 5, lea),\n  [Nolan Pearce],\n    rem,\n    table.cell(colspan: 2, ofi),\n    rem,\n    ofi,\n)\n```\n\nIn the example, we first define variables with \"Office\", \"Remote\", and \"On leave\" so we don't have to write these labels out every time. We can then use these variables in the table body either directly or in a `table.cell` call if the team member spends multiple consecutive days in office, remote, or on leave.\n\nThe example also contains a black header (created with `table`'s `fill` argument) with white strokes (`table`'s `stroke` argument) and white text (set by the `table.cell` set rule). Finally, we align all the content of all table cells in the body in the center. If you want to know more about the functions passed to `align`, `stroke`, and `fill`, you can check out the sections on #link(\"/docs/reference/layout/alignment/\")[alignment], #link(\"#stroke-functions\")[strokes], and #link(\"#fills\")[striped tables].\n\nThis table would be a great candidate for fully automated generation from an external data source! Check out the #link(\"#importing-data\")[section about importing data] to learn more about that.\n\n== How to rotate a table?\n\nWhen tables have many columns, a portrait paper orientation can quickly get cramped. Hence, you'll sometimes want to switch your tables to landscape orientation. There are two ways to accomplish this in Typst:\n\n- If you want to rotate only the table but not the other content of the page and the page itself, use the #link(\"/docs/reference/layout/rotate/\")[rotate function] with the `reflow` argument set to `true`.\n- If you want to rotate the whole page the table is on, you can use the #link(\"/docs/reference/layout/page/\")[page function] with its `flipped` argument set to `true`. The header, footer, and page number will now also appear on the long edge of the page. This has the advantage that the table will appear right side up when read on a computer, but it also means that a page in your document has different dimensions than all the others, which can be jarring to your readers.\n\nBelow, we will demonstrate both techniques with a student grade book table.\n\nFirst, we will rotate the table on the page. The example also places some text on the right of the table.\n\n```typst\n#set page(\"a5\", columns: 2, numbering: \"— 1 —\")\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#rotate(\n  -90deg,\n  reflow: true,\n\n  table(\n    columns: (1fr,) + 5 * (auto,),\n    inset: (x: 0.6em,),\n    stroke: (_, y) => (\n      x: 1pt,\n      top: if y <= 1 { 1pt } else { 0pt },\n      bottom: 1pt,\n    ),\n    align: (left, right, right, right, right, left),\n\n    table.header(\n      [Student Name],\n      [Assignment 1], [Assignment 2],\n      [Mid-term], [Final Exam],\n      [Total Grade],\n    ),\n    [Jane Smith], [78%], [82%], [75%], [80%], [B],\n    [Alex Johnson], [90%], [95%], [94%], [96%], [A+],\n    [John Doe], [85%], [90%], [88%], [92%], [A],\n    [Maria Garcia], [88%], [84%], [89%], [85%], [B+],\n    [Zhang Wei], [93%], [89%], [90%], [91%], [A-],\n    [Marina Musterfrau], [96%], [91%], [74%], [69%], [B-],\n  ),\n)\n\n#lorem(80)\n```\n\nWhat we have here is a two-column document on ISO A5 paper with page numbers on the bottom. The table has six columns and contains a few customizations to #link(\"#strokes\")[stroke], alignment and spacing. But the most important part is that the table is wrapped in a call to the `rotate` function with the `reflow` argument being `true`. This will make the table rotate 90 degrees counterclockwise. The reflow argument is needed so that the table's rotation affects the layout. If it was omitted, Typst would lay out the page as if the table was not rotated (`true` might become the default in the future).\n\nThe example also shows how to produce many columns of the same size: To the initial `1fr` column, we add an array with five `auto` items that we create by multiplying an array with one `auto` item by five. Note that arrays with just one item need a trailing comma to distinguish them from merely parenthesized expressions.\n\nThe second example shows how to rotate the whole page, so that the table stays upright:\n\n```typst\n#set page(\"a5\", numbering: \"— 1 —\")\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n\n#page(flipped: true)[\n  #table(\n    columns: (1fr,) + 5 * (auto,),\n    inset: (x: 0.6em,),\n    stroke: (_, y) => (\n      x: 1pt,\n      top: if y <= 1 { 1pt } else { 0pt },\n      bottom: 1pt,\n    ),\n    align: (left, right, right, right, right, left),\n\n    table.header(\n      [Student Name],\n      [Assignment 1], [Assignment 2],\n      [Mid-term], [Final Exam],\n      [Total Grade],\n    ),\n    [Jane Smith], [78%], [82%], [75%], [80%], [B],\n    [Alex Johnson], [90%], [95%], [94%], [96%], [A+],\n    [John Doe], [85%], [90%], [88%], [92%], [A],\n    [Maria Garcia], [88%], [84%], [89%], [85%], [B+],\n    [Zhang Wei], [93%], [89%], [90%], [91%], [A-],\n    [Marina Musterfrau], [96%], [91%], [74%], [69%], [B-],\n  )\n\n  #pad(x: 15%, top: 1.5em)[\n    = Winter 2023/24 results\n    #lorem(80)\n  ]\n]\n```\n\nHere, we take the same table and the other content we want to set with it and put it into a call to the #link(\"/docs/reference/layout/page/\")[page] function while supplying `true` to the `flipped` argument. This will instruct Typst to create new pages with width and height swapped and place the contents of the function call onto a new page. Notice how the page number is also on the long edge of the paper now. At the bottom of the page, we use the #link(\"/docs/reference/layout/pad/\")[pad] function to constrain the width of the paragraph to achieve a nice and legible line length.\n\n== How to break a table across pages?\n\nIt is best to contain a table on a single page. However, some tables just have many rows, so breaking them across pages becomes unavoidable. Fortunately, Typst supports breaking tables across pages out of the box. If you are using the #link(\"/docs/reference/model/table/#definitions-header\")[table.header] and #link(\"/docs/reference/model/table/#definitions-footer\")[table.footer] functions, their contents will be repeated on each page as the first and last rows, respectively. If you want to disable this behavior, you can set `repeat` to `false` on either of them.\n\nIf you have placed your table inside of a #link(\"/docs/reference/model/figure/\")[figure], it becomes unable to break across pages by default. However, you can change this behavior. Let's take a look:\n\n```typst\n#set page(width: 9cm, height: 6cm)\n#show table.cell.where(y: 0): set text(weight: \"bold\")\n#show figure: set block(breakable: true)\n\n#figure(\n  caption: [Training regimen for Marathon],\n  table(\n    columns: 3,\n    fill: (_, y) => if y == 0 { gray.lighten(75%) },\n\n    table.header[Week][Distance (km)][Time (hh:mm:ss)],\n    [1], [5],  [00:30:00],\n    [2], [7],  [00:45:00],\n    [3], [10], [01:00:00],\n    [4], [12], [01:10:00],\n    [5], [15], [01:25:00],\n    [6], [18], [01:40:00],\n    [7], [20], [01:50:00],\n    [8], [22], [02:00:00],\n    [...], [...], [...],\n    table.footer[_Goal_][_42.195_][_02:45:00_],\n  )\n)\n```\n\nA figure automatically produces a #link(\"/docs/reference/layout/block/\")[block] which cannot break by default. However, we can reconfigure the block of the figure using a show rule to make it `breakable`. Now, the figure spans multiple pages with the headers and footers repeating.\n\n== How to import data into a table?\n\nOften, you need to put data that you obtained elsewhere into a table. Sometimes, this is from Microsoft Excel or Google Sheets, sometimes it is from a dataset on the web or from your experiment. Fortunately, Typst can load many #link(\"/docs/reference/data-loading/\")[common file formats], so you can use scripting to include their data in a table.\n\nThe most common file format for tabular data is CSV. You can obtain a CSV file from Excel by choosing \"Save as\" in the _File_ menu and choosing the file format \"CSV UTF-8 (Comma-delimited) (.csv)\". Save the file and, if you are using the web app, upload it to your project.\n\nIn our case, we will be building a table about Moore's Law. For this purpose, we are using a statistic with #link(\"https://ourworldindata.org/grapher/transistors-per-microprocessor\")[how many transistors the average microprocessor consists of per year from Our World in Data]. Let's start by pressing the \"Download\" button to get a CSV file with the raw data.\n\nBe sure to move the file to your project or somewhere Typst can see it, if you are using the CLI. Once you did that, we can open the file to see how it is structured:\n\nThe file starts with a header and contains four columns: Entity (which is to whom the metric applies), Code, the year, and the number of transistors per microprocessor. Only the last two columns change between each row, so we can disregard \"Entity\" and \"Code\".\n\nFirst, let's start by loading this file with the #link(\"/docs/reference/data-loading/csv/\")[csv] function. It accepts the file name of the file we want to load as a string argument:\n\nWe have loaded our file (assuming we named it `moore.csv`) and #link(\"/docs/reference/scripting/#bindings\")[bound it] to the new variable `moore`. This will not produce any output, so there's nothing to see yet. If we want to examine what Typst loaded, we can either hover the name of the variable in the web app or print some items from the array:\n\n```typst\n#let moore = csv(\"moore.csv\")\n\n#moore.slice(0, 3)\n```\n\nWith the arguments `(0, 3)`, the #link(\"/docs/reference/foundations/array/#definitions-slice\")[slice] method returns the first three items in the array (with the indices 0, 1, and 2). We can see that each row is its own array with one item per cell.\n\nNow, let's write a loop that will transform this data into an array of cells that we can use with the table function.\n\n```typst\n#let moore = csv(\"moore.csv\")\n\n#table(\n  columns: 2,\n  ..for (.., year, count) in moore {\n    (year, count)\n  }\n)\n```\n\nThe example above uses a for loop that iterates over the rows in our CSV file and returns an array for each iteration. We use the for loop's #link(\"/docs/reference/scripting/#bindings\")[destructuring] capability to discard all but the last two items of each row. We then create a new array with just these two. Because Typst will concatenate the array results of all the loop iterations, we get a one-dimensional array in which the year column and the number of transistors alternate. We can then insert the array as cells. For this we use the #link(\"/docs/reference/foundations/arguments/#spreading\")[spread operator] (`..`). By prefixing an array, or, in our case an expression that yields an array, with two dots, we tell Typst that the array's items should be used as positional arguments.\n\nAlternatively, we can also use the #link(\"/docs/reference/foundations/array/#definitions-map\")[map], #link(\"/docs/reference/foundations/array/#definitions-slice\")[slice], and #link(\"/docs/reference/foundations/array/#definitions-flatten\")[flatten] array methods to write this in a more functional style:\n\nThis example renders the same as the previous one, but first uses the `map` function to change each row of the data. We pass a function to map that gets run on each row of the CSV and returns a new value to replace that row with. We use it to discard the first two columns with `slice`. Then, we spread the data into the `table` function. However, we need to pass a one-dimensional array and `moore`'s value is two-dimensional (that means that each of its row values contains an array with the cell data). That's why we call `flatten` which converts it to a one-dimensional array. We also extract the number of columns from the data itself.\n\nNow that we have nice code for our table, we should try to also make the table itself nice! The transistor counts go from millions in 1995 to trillions in 2021 and changes are difficult to see with so many digits. We could try to present our data logarithmically to make it more digestible:\n\n```typst\n#let moore = csv(\"moore.csv\")\n#let moore-log = moore.slice(1).map(m => {\n  let (.., year, count) = m\n  let log = calc.log(float(count))\n  let rounded = str(calc.round(log, digits: 2))\n  (year, rounded)\n})\n\n#show table.cell.where(x: 0): strong\n\n#table(\n   columns: moore-log.first().len(),\n   align: right,\n   fill: (_, y) => if calc.odd(y) { rgb(\"D7D9E0\") },\n   stroke: none,\n\n   table.header[Year][Transistor count ($log_10$)],\n   table.hline(stroke: rgb(\"4D4C5B\")),\n   ..moore-log.flatten(),\n)\n```\n\nIn this example, we first drop the header row from the data since we are adding our own. Then, we discard all but the last two columns as above. We do this by #link(\"/docs/reference/scripting/#bindings\")[destructuring] the array `m`, discarding all but the two last items. We then convert the string in `count` to a floating point number, calculate its logarithm and store it in the variable `log`. Finally, we round it to two digits, convert it to a string, and store it in the variable `rounded`. Then, we return an array with `year` and `rounded` that replaces the original row. In our table, we have added our custom header that tells the reader that we've applied a logarithm to the values. Then, we spread the flattened data as above.\n\nWe also styled the table with #link(\"#fills\")[stripes], a #link(\"#individual-lines\")[horizontal line] below the first row, #link(\"#alignment\")[aligned] everything to the right, and emboldened the first column. Click on the links to go to the relevant guide sections and see how it's done!\n\n== What if I need the table function for something that isn't a table?\n\nTabular layouts of content can be useful not only for matrices of closely related data, like shown in the examples throughout this guide, but also for presentational purposes. Typst differentiates between grids that are for layout and presentational purposes only and tables, in which the arrangement of the cells itself conveys information.\n\nTo make this difference clear to other software and allow templates to heavily style tables, Typst has two functions for grid and table layout:\n\n- The #link(\"/docs/reference/model/table/\")[table] function explained throughout this guide which is intended for tabular data.\n- The #link(\"/docs/reference/layout/grid/\")[grid] function which is intended for presentational purposes and page layout.\n\nBoth elements work the same way and have the same arguments. You can apply everything you have learned about tables in this guide to grids. There are only three differences:\n\n- You'll need to use the #link(\"/docs/reference/layout/grid/#definitions-cell\")[grid.cell], #link(\"/docs/reference/layout/grid/#definitions-vline\")[grid.vline], and #link(\"/docs/reference/layout/grid/#definitions-hline\")[grid.hline] elements instead of #link(\"/docs/reference/model/table/#definitions-cell\")[table.cell], #link(\"/docs/reference/model/table/#definitions-vline\")[table.vline], and #link(\"/docs/reference/model/table/#definitions-hline\")[table.hline].\n- The grid has different defaults: It draws no strokes by default and has no spacing (`inset`) inside of its cells.\n- Elements like `figure` do not react to grids since they are supposed to have no semantical bearing on the document structure.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/guides/table-guide.typ", "filename": "table-guide.typ"}
{"text": "= Guides\n\nWelcome to the Guides section! Here, you'll find helpful material for specific user groups or use cases. Currently, two guides are available: An introduction to Typst for LaTeX users, and a detailed look at page setup. Feel free to propose other topics for guides!\n\n== List of Guides\n\n- #link(\"/docs/guides/guide-for-latex-users/\")[Guide for LaTeX users]\n- #link(\"/docs/guides/page-setup-guide/\")[Page setup guide]\n- #link(\"/docs/guides/table-guide/\")[Table guide]", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/guides.typ", "filename": "guides.typ"}
{"text": "= Context\n\nSometimes, we want to create content that reacts to its location in the document. This could be a localized phrase that depends on the configured text language or something as simple as a heading number which prints the right value based on how many headings came before it. However, Typst code isn't directly aware of its location in the document. Some code at the beginning of the source text could yield content that ends up at the back of the document.\n\nTo produce content that is reactive to its surroundings, we must thus specifically instruct Typst: We do this with the `context` keyword, which precedes an expression and ensures that it is computed with knowledge of its environment. In return, the context expression itself ends up opaque. We cannot directly access whatever results from it in our code, precisely because it is contextual: There is no one correct result, there may be multiple results in different places of the document. For this reason, everything that depends on the contextual data must happen inside of the context expression.\n\nAside from explicit context expressions, context is also established implicitly in some places that are also aware of their location in the document: #link(\"/docs/reference/styling/#show-rules\")[Show rules] provide context1 and numberings in the outline, for instance, also provide the proper context to resolve counters.\n\n== Style context\n\nWith set rules, we can adjust style properties for parts or the whole of our document. We cannot access these without a known context, as they may change throughout the course of the document. When context is available, we can retrieve them simply by accessing them as fields on the respective element function.\n\n```typst\n#set text(lang: \"de\")\n#context text.lang\n```\n\nAs explained above, a context expression is reactive to the different environments it is placed into. In the example below, we create a single context expression, store it in the `value` variable and use it multiple times. Each use properly reacts to the current surroundings.\n\n```typst\n#let value = context text.lang\n#value\n\n#set text(lang: \"de\")\n#value\n\n#set text(lang: \"fr\")\n#value\n```\n\nCrucially, upon creation, `value` becomes opaque #link(\"/docs/reference/foundations/content/\")[content] that we cannot peek into. It can only be resolved when placed somewhere because only then the context is known. The body of a context expression may be evaluated zero, one, or multiple times, depending on how many different places it is put into.\n\n== Location context\n\nWe've already seen that context gives us access to set rule values. But it can do more: It also lets us know _where_ in the document we currently are, relative to other elements, and absolutely on the pages. We can use this information to create very flexible interactions between different document parts. This underpins features like heading numbering, the table of contents, or page headers dependent on section headings.\n\nSome functions like #link(\"/docs/reference/introspection/counter/#definitions-get\")[counter.get] implicitly access the current location. In the example below, we want to retrieve the value of the heading counter. Since it changes throughout the document, we need to first enter a context expression. Then, we use `get` to retrieve the counter's current value. This function accesses the current location from the context to resolve the counter value. Counters have multiple levels and `get` returns an array with the resolved numbers. Thus, we get the following result:\n\n```typst\n#set heading(numbering: \"1.\")\n\n= Introduction\n#lorem(5)\n\n#context counter(heading).get()\n\n= Background\n#lorem(5)\n\n#context counter(heading).get()\n```\n\nFor more flexibility, we can also use the #link(\"/docs/reference/introspection/here/\")[here] function to directly extract the current #link(\"/docs/reference/introspection/location/\")[location] from the context. The example below demonstrates this:\n\n- We first have `counter(heading).get()`, which resolves to `(2,)` as before.\n- We then use the more powerful #link(\"/docs/reference/introspection/counter/#definitions-at\")[counter.at] with #link(\"/docs/reference/introspection/here/\")[here], which in combination is equivalent to `get`, and thus get `(2,)`.\n- Finally, we use `at` with a #link(\"/docs/reference/foundations/label/\")[label] to retrieve the value of the counter at a _different_ location in the document, in our case that of the introduction heading. This yields `(1,)`. Typst's context system gives us time travel abilities and lets us retrieve the values of any counters and states at _any_ location in the document.\n\n```typst\n#set heading(numbering: \"1.\")\n\n= Introduction <intro>\n#lorem(5)\n\n= Background <back>\n#lorem(5)\n\n#context [\n  #counter(heading).get() \\\n  #counter(heading).at(here()) \\\n  #counter(heading).at(<intro>)\n]\n```\n\nAs mentioned before, we can also use context to get the physical position of elements on the pages. We do this with the #link(\"/docs/reference/introspection/locate/\")[locate] function, which works similarly to `counter.at`: It takes a location or other #link(\"/docs/reference/foundations/selector/\")[selector] that resolves to a unique element (could also be a label) and returns the position on the pages for that element.\n\n```typst\nBackground is at: \\\n#context locate(<back>).position()\n\n= Introduction <intro>\n#lorem(5)\n#pagebreak()\n\n= Background <back>\n#lorem(5)\n```\n\nThere are other functions that make use of the location context, most prominently #link(\"/docs/reference/introspection/query/\")[query]. Take a look at the #link(\"/docs/reference/introspection/\")[introspection] category for more details on those.\n\n== Nested contexts\n\nContext is also accessible from within function calls nested in context blocks. In the example below, `foo` itself becomes a contextual function, just like #link(\"/docs/reference/layout/length/#definitions-to-absolute\")[to-absolute] is.\n\n```typst\n#let foo() = 1em.to-absolute()\n#context {\n  foo() == text.size\n}\n```\n\nContext blocks can be nested. Contextual code will then always access the innermost context. The example below demonstrates this: The first `text.lang` will access the outer context block's styles and as such, it will *not* see the effect of `set text(lang: \"fr\")`. The nested context block around the second `text.lang`, however, starts after the set rule and will thus show its effect.\n\n```typst\n#set text(lang: \"de\")\n#context [\n  #set text(lang: \"fr\")\n  #text.lang \\\n  #context text.lang\n]\n```\n\nYou might wonder why Typst ignores the French set rule when computing the first `text.lang` in the example above. The reason is that, in the general case, Typst cannot know all the styles that will apply as set rules can be applied to content after it has been constructed. Below, `text.lang` is already computed when the template function is applied. As such, it cannot possibly be aware of the language change to French in the template.\n\n```typst\n#let template(body) = {\n  set text(lang: \"fr\")\n  upper(body)\n}\n\n#set text(lang: \"de\")\n#context [\n  #show: template\n  #text.lang \\\n  #context text.lang\n]\n```\n\nThe second `text.lang`, however, _does_ react to the language change because evaluation of its surrounding context block is deferred until the styles for it are known. This illustrates the importance of picking the right insertion point for a context to get access to precisely the right styles.\n\nThe same also holds true for the location context. Below, the first `c.display()` call will access the outer context block and will thus not see the effect of `c.update(2)` while the second `c.display()` accesses the inner context and will thus see it.\n\n```typst\n#let c = counter(\"mycounter\")\n#c.update(1)\n#context [\n  #c.update(2)\n  #c.display() \\\n  #context c.display()\n]\n```\n\n== Compiler iterations\n\nTo resolve contextual interactions, the Typst compiler processes your document multiple times. For instance, to resolve a `locate` call, Typst first provides a placeholder position, layouts your document and then recompiles with the known position from the finished layout. The same approach is taken to resolve counters, states, and queries. In certain cases, Typst may even need more than two iterations to resolve everything. While that's sometimes a necessity, it may also be a sign of misuse of contextual functions (e.g. of #link(\"/docs/reference/introspection/state/#caution\")[state]). If Typst cannot resolve everything within five attempts, it will stop and output the warning \"layout did not converge within 5 attempts.\"\n\nA very careful reader might have noticed that not all of the functions presented above actually make use of the current location. While `counter(heading).get()` definitely depends on it, `counter(heading).at(<intro>)`, for instance, does not. However, it still requires context. While its value is always the same _within_ one compilation iteration, it may change over the course of multiple compiler iterations. If one could call it directly at the top level of a module, the whole module and its exports could change over the course of multiple compiler iterations, which would not be desirable.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/context.typ", "filename": "context.typ"}
{"text": "= cbor\n\nReads structured data from a CBOR file.\n\nThe file must contain a valid CBOR serialization. Mappings will be converted into Typst dictionaries, and sequences will be converted into Typst arrays. Strings and booleans will be converted into the Typst equivalents, null-values (`null`, `~` or empty ``) will be converted into `none`, and numbers will be converted to floats or integers depending on whether they are whole numbers.\n\nBe aware that integers larger than 263-1 will be converted to floating point numbers, which may result in an approximative value.\n\n== Parameters\n\n```\ncbor(\n  str: str | bytes\n) -> bytes\n```\n\n=== `source`: str | bytes (Required, Positional)\n\nA #link(\"/docs/reference/syntax/#paths\")[path] to a CBOR file or raw CBOR bytes.\n\n== Definitions\n\n=== `decode`\n\nReads structured data from CBOR bytes.\n\n```\ndecode(\n  bytes: bytes\n) -> bytes\n```\n\n==== `data`: bytes (Required, Positional)\n\nCBOR data.\n\n=== `encode`\n\nEncode structured data into CBOR bytes.\n\n```\nencode(\n  any\n) -> bytes\n```\n\n==== `value`: any (Required, Positional)\n\nValue to be encoded.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/data-loading/cbor.typ", "filename": "cbor.typ"}
{"text": "= csv\n\nReads structured data from a CSV file.\n\nThe CSV file will be read and parsed into a 2-dimensional array of strings: Each row in the CSV file will be represented as an array of strings, and all rows will be collected into a single array. Header rows will not be stripped.\n\n== Example\n\n```typst\n#let results = csv(\"example.csv\")\n\n#table(\n  columns: 2,\n  [*Condition*], [*Result*],\n  ..results.flatten(),\n)\n```\n\n== Parameters\n\n```\ncsv(\n  str: str | bytes,\n  delimiter: str,\n  row-type: type\n) -> array\n```\n\n=== `source`: str | bytes (Required, Positional)\n\nA #link(\"/docs/reference/syntax/#paths\")[path] to a CSV file or raw CSV bytes.\n\n=== `delimiter`: str\n\nThe delimiter that separates columns in the CSV file. Must be a single ASCII character.\n\nDefault: `\",\"`\n\n=== `row-type`: type\n\nHow to represent the file's rows.\n\n- If set to `array`, each row is represented as a plain array of strings.\n- If set to `dictionary`, each row is represented as a dictionary mapping from header keys to strings. This option only makes sense when a header row is present in the CSV file.\n\nDefault: `array`\n\n== Definitions\n\n=== `decode`\n\nReads structured data from a CSV string/bytes.\n\n```\ndecode(\n  str: str | bytes,\n  delimiter: str,\n  row-type: type\n) -> array\n```\n\n==== `data`: str | bytes (Required, Positional)\n\nCSV data.\n\n==== `delimiter`: str\n\nThe delimiter that separates columns in the CSV file. Must be a single ASCII character.\n\nDefault: `\",\"`\n\n==== `row-type`: type\n\nHow to represent the file's rows.\n\n- If set to `array`, each row is represented as a plain array of strings.\n- If set to `dictionary`, each row is represented as a dictionary mapping from header keys to strings. This option only makes sense when a header row is present in the CSV file.\n\nDefault: `array`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/data-loading/csv.typ", "filename": "csv.typ"}
{"text": "= json\n\nReads structured data from a JSON file.\n\nThe file must contain a valid JSON value, such as object or array. JSON objects will be converted into Typst dictionaries, and JSON arrays will be converted into Typst arrays. Strings and booleans will be converted into the Typst equivalents, `null` will be converted into `none`, and numbers will be converted to floats or integers depending on whether they are whole numbers.\n\nBe aware that integers larger than 263-1 will be converted to floating point numbers, which may result in an approximative value.\n\nThe function returns a dictionary, an array or, depending on the JSON file, another JSON data type.\n\nThe JSON files in the example contain objects with the keys `temperature`, `unit`, and `weather`.\n\n== Example\n\n```typst\n#let forecast(day) = block[\n  #box(square(\n    width: 2cm,\n    inset: 8pt,\n    fill: if day.weather == \"sunny\" {\n      yellow\n    } else {\n      aqua\n    },\n    align(\n      bottom + right,\n      strong(day.weather),\n    ),\n  ))\n  #h(6pt)\n  #set text(22pt, baseline: -8pt)\n  #day.temperature °#day.unit\n]\n\n#forecast(json(\"monday.json\"))\n#forecast(json(\"tuesday.json\"))\n```\n\n== Parameters\n\n```\njson(\n  str: str | bytes\n) -> bytes\n```\n\n=== `source`: str | bytes (Required, Positional)\n\nA #link(\"/docs/reference/syntax/#paths\")[path] to a JSON file or raw JSON bytes.\n\n== Definitions\n\n=== `decode`\n\nReads structured data from a JSON string/bytes.\n\n```\ndecode(\n  str: str | bytes\n) -> bytes\n```\n\n==== `data`: str | bytes (Required, Positional)\n\nJSON data.\n\n=== `encode`\n\nEncodes structured data into a JSON string.\n\n```\nencode(\n  any,\n  pretty: bool\n) -> str\n```\n\n==== `value`: any (Required, Positional)\n\nValue to be encoded.\n\n==== `pretty`: bool\n\nWhether to pretty print the JSON with newlines and indentation.\n\nDefault: `true`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/data-loading/json.typ", "filename": "json.typ"}
{"text": "= read\n\nReads plain text or data from a file.\n\nBy default, the file will be read as UTF-8 and returned as a #link(\"/docs/reference/foundations/str/\")[string].\n\nIf you specify `encoding: none`, this returns raw #link(\"/docs/reference/foundations/bytes/\")[bytes] instead.\n\n== Example\n\n```typst\nAn example for a HTML file: \\\n#let text = read(\"example.html\")\n#raw(text, lang: \"html\")\n\nRaw bytes:\n#read(\"tiger.jpg\", encoding: none)\n```\n\n== Parameters\n\n```\nread(\n  str: str,\n  encoding: none | str\n) -> bytes\n```\n\n=== `path`: str (Required, Positional)\n\nPath to a file.\n\nFor more details, see the #link(\"/docs/reference/syntax/#paths\")[Paths section].\n\n=== `encoding`: none | str\n\nThe encoding to read the file with.\n\nIf set to `none`, this function returns raw bytes.\n\nDefault: `\"utf8\"`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/data-loading/read.typ", "filename": "read.typ"}
{"text": "= toml\n\nReads structured data from a TOML file.\n\nThe file must contain a valid TOML table. TOML tables will be converted into Typst dictionaries, and TOML arrays will be converted into Typst arrays. Strings, booleans and datetimes will be converted into the Typst equivalents and numbers will be converted to floats or integers depending on whether they are whole numbers.\n\nThe TOML file in the example consists of a table with the keys `title`, `version`, and `authors`.\n\n== Example\n\n```typst\n#let details = toml(\"details.toml\")\n\nTitle: #details.title \\\nVersion: #details.version \\\nAuthors: #(details.authors\n  .join(\", \", last: \" and \"))\n```\n\n== Parameters\n\n```\ntoml(\n  str: str | bytes\n) -> bytes\n```\n\n=== `source`: str | bytes (Required, Positional)\n\nA #link(\"/docs/reference/syntax/#paths\")[path] to a TOML file or raw TOML bytes.\n\n== Definitions\n\n=== `decode`\n\nReads structured data from a TOML string/bytes.\n\n```\ndecode(\n  str: str | bytes\n) -> bytes\n```\n\n==== `data`: str | bytes (Required, Positional)\n\nTOML data.\n\n=== `encode`\n\nEncodes structured data into a TOML string.\n\n```\nencode(\n  any,\n  pretty: bool\n) -> str\n```\n\n==== `value`: any (Required, Positional)\n\nValue to be encoded.\n\n==== `pretty`: bool\n\nWhether to pretty-print the resulting TOML.\n\nDefault: `true`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/data-loading/toml.typ", "filename": "toml.typ"}
{"text": "= xml\n\nReads structured data from an XML file.\n\nThe XML file is parsed into an array of dictionaries and strings. XML nodes can be elements or strings. Elements are represented as dictionaries with the following keys:\n\n- `tag`: The name of the element as a string.\n- `attrs`: A dictionary of the element's attributes as strings.\n- `children`: An array of the element's child nodes.\n\nThe XML file in the example contains a root `news` tag with multiple `article` tags. Each article has a `title`, `author`, and `content` tag. The `content` tag contains one or more paragraphs, which are represented as `p` tags.\n\n== Example\n\n```typst\n#let find-child(elem, tag) = {\n  elem.children\n    .find(e => \"tag\" in e and e.tag == tag)\n}\n\n#let article(elem) = {\n  let title = find-child(elem, \"title\")\n  let author = find-child(elem, \"author\")\n  let pars = find-child(elem, \"content\")\n\n  [= #title.children.first()]\n  text(10pt, weight: \"medium\")[\n    Published by\n    #author.children.first()\n  ]\n\n  for p in pars.children {\n    if type(p) == dictionary {\n      parbreak()\n      p.children.first()\n    }\n  }\n}\n\n#let data = xml(\"example.xml\")\n#for elem in data.first().children {\n  if type(elem) == dictionary {\n    article(elem)\n  }\n}\n```\n\n== Parameters\n\n```\nxml(\n  str: str | bytes\n) -> bytes\n```\n\n=== `source`: str | bytes (Required, Positional)\n\nA #link(\"/docs/reference/syntax/#paths\")[path] to an XML file or raw XML bytes.\n\n== Definitions\n\n=== `decode`\n\nReads structured data from an XML string/bytes.\n\n```\ndecode(\n  str: str | bytes\n) -> bytes\n```\n\n==== `data`: str | bytes (Required, Positional)\n\nXML data.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/data-loading/xml.typ", "filename": "xml.typ"}
{"text": "= yaml\n\nReads structured data from a YAML file.\n\nThe file must contain a valid YAML object or array. YAML mappings will be converted into Typst dictionaries, and YAML sequences will be converted into Typst arrays. Strings and booleans will be converted into the Typst equivalents, null-values (`null`, `~` or empty ``) will be converted into `none`, and numbers will be converted to floats or integers depending on whether they are whole numbers. Custom YAML tags are ignored, though the loaded value will still be present.\n\nBe aware that integers larger than 263-1 will be converted to floating point numbers, which may give an approximative value.\n\nThe YAML files in the example contain objects with authors as keys, each with a sequence of their own submapping with the keys \"title\" and \"published\"\n\n== Example\n\n```typst\n#let bookshelf(contents) = {\n  for (author, works) in contents {\n    author\n    for work in works [\n      - #work.title (#work.published)\n    ]\n  }\n}\n\n#bookshelf(\n  yaml(\"scifi-authors.yaml\")\n)\n```\n\n== Parameters\n\n```\nyaml(\n  str: str | bytes\n) -> bytes\n```\n\n=== `source`: str | bytes (Required, Positional)\n\nA #link(\"/docs/reference/syntax/#paths\")[path] to a YAML file or raw YAML bytes.\n\n== Definitions\n\n=== `decode`\n\nReads structured data from a YAML string/bytes.\n\n```\ndecode(\n  str: str | bytes\n) -> bytes\n```\n\n==== `data`: str | bytes (Required, Positional)\n\nYAML data.\n\n=== `encode`\n\nEncode structured data into a YAML string.\n\n```\nencode(\n  any\n) -> str\n```\n\n==== `value`: any (Required, Positional)\n\nValue to be encoded.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/data-loading/yaml.typ", "filename": "yaml.typ"}
{"text": "= Data Loading\n\nData loading from external files.\n\nThese functions help you with loading and embedding data, for example from the results of an experiment.\n\n== Definitions\n\n- #link(\"/docs/reference/data-loading/cbor/\")[cbor]Reads structured data from a CBOR file.\n- #link(\"/docs/reference/data-loading/csv/\")[csv]Reads structured data from a CSV file.\n- #link(\"/docs/reference/data-loading/json/\")[json]Reads structured data from a JSON file.\n- #link(\"/docs/reference/data-loading/read/\")[read]Reads plain text or data from a file.\n- #link(\"/docs/reference/data-loading/toml/\")[toml]Reads structured data from a TOML file.\n- #link(\"/docs/reference/data-loading/xml/\")[xml]Reads structured data from an XML file.\n- #link(\"/docs/reference/data-loading/yaml/\")[yaml]Reads structured data from a YAML file.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/data-loading.typ", "filename": "data-loading.typ"}
{"text": "= arguments\n\nCaptured arguments to a function.\n\n== Argument Sinks\n\nLike built-in functions, custom functions can also take a variable number of arguments. You can specify an _argument sink_ which collects all excess arguments as `..sink`. The resulting `sink` value is of the `arguments` type. It exposes methods to access the positional and named arguments.\n\n```typst\n#let format(title, ..authors) = {\n  let by = authors\n    .pos()\n    .join(\", \", last: \" and \")\n\n  [*#title* \\ _Written by #by;_]\n}\n\n#format(\"ArtosFlow\", \"Jane\", \"Joe\")\n```\n\n== Spreading\n\nInversely to an argument sink, you can _spread_ arguments, arrays and dictionaries into a function call with the `..spread` operator:\n\n```typst\n#let array = (2, 3, 5)\n#calc.min(..array)\n#let dict = (fill: blue)\n#text(..dict)[Hello]\n```\n\n== Constructor\n\nConstruct spreadable arguments in place.\n\nThis function behaves like `let args(..sink) = sink`.\n\n```\narguments(\n  ..: any\n) -> arguments\n```\n\n```typst\n#let args = arguments(stroke: red, inset: 1em, [Body])\n#box(..args)\n```\n\n==== `arguments`: any (Required, Positional, Variadic)\n\nThe arguments to construct.\n\n== Definitions\n\n=== `at`\n\nReturns the positional argument at the specified index, or the named argument with the specified name.\n\nIf the key is an #link(\"/docs/reference/foundations/int/\")[integer], this is equivalent to first calling #link(\"/docs/reference/foundations/arguments/#definitions-pos\")[pos] and then #link(\"/docs/reference/foundations/array/#definitions-at\")[array.at]. If it is a #link(\"/docs/reference/foundations/str/\")[string], this is equivalent to first calling #link(\"/docs/reference/foundations/arguments/#definitions-named\")[named] and then #link(\"/docs/reference/foundations/dictionary/#definitions-at\")[dictionary.at].\n\n```\nat(\n  int: int | str,\n  default: any\n) -> str\n```\n\n==== `key`: int | str (Required, Positional)\n\nThe index or name of the argument to get.\n\n==== `default`: any\n\nA default value to return if the key is invalid.\n\n=== `pos`\n\nReturns the captured positional arguments as an array.\n\n```\npos(\n  \n) -> array\n```\n\n=== `named`\n\nReturns the captured named arguments as a dictionary.\n\n```\nnamed(\n  \n) -> dictionary\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/arguments.typ", "filename": "arguments.typ"}
{"text": "= array\n\nA sequence of values.\n\nYou can construct an array by enclosing a comma-separated sequence of values in parentheses. The values do not have to be of the same type.\n\nYou can access and update array items with the `.at()` method. Indices are zero-based and negative indices wrap around to the end of the array. You can iterate over an array using a #link(\"/docs/reference/scripting/#loops\")[for loop]. Arrays can be added together with the `+` operator, #link(\"/docs/reference/scripting/#blocks\")[joined together] and multiplied with integers.\n\n*Note:* An array of length one needs a trailing comma, as in `(1,)`. This is to disambiguate from a simple parenthesized expressions like `(1 + 2) * 3`. An empty array is written as `()`.\n\n== Example\n\n```typst\n#let values = (1, 7, 4, -3, 2)\n\n#values.at(0) \\\n#(values.at(0) = 3)\n#values.at(-1) \\\n#values.find(calc.even) \\\n#values.filter(calc.odd) \\\n#values.map(calc.abs) \\\n#values.rev() \\\n#(1, (2, 3)).flatten() \\\n#((\"A\", \"B\", \"C\")\n    .join(\", \", last: \" and \"))\n```\n\n== Constructor\n\nConverts a value to an array.\n\nNote that this function is only intended for conversion of a collection-like value to an array, not for creation of an array from individual items. Use the array syntax `(1, 2, 3)` (or `(1,)` for a single-element array) instead.\n\n```\narray(\n  bytes: bytes | array | version\n) -> array\n```\n\n```typst\n#let hi = \"Hello 😃\"\n#array(bytes(hi))\n```\n\n==== `value`: bytes | array | version (Required, Positional)\n\nThe value that should be converted to an array.\n\n== Definitions\n\n=== `len`\n\nThe number of values in the array.\n\n```\nlen(\n  \n) -> int\n```\n\n=== `first`\n\nReturns the first item in the array. May be used on the left-hand side of an assignment. Fails with an error if the array is empty.\n\n```\nfirst(\n  \n) -> \n```\n\n=== `last`\n\nReturns the last item in the array. May be used on the left-hand side of an assignment. Fails with an error if the array is empty.\n\n```\nlast(\n  \n) -> \n```\n\n=== `at`\n\nReturns the item at the specified index in the array. May be used on the left-hand side of an assignment. Returns the default value if the index is out of bounds or fails with an error if no default value was specified.\n\n```\nat(\n  int: int,\n  default: any\n) -> int\n```\n\n==== `index`: int (Required, Positional)\n\nThe index at which to retrieve the item. If negative, indexes from the back.\n\n==== `default`: any\n\nA default value to return if the index is out of bounds.\n\n=== `push`\n\nAdds a value to the end of the array.\n\n```\npush(\n  any\n) -> \n```\n\n==== `value`: any (Required, Positional)\n\nThe value to insert at the end of the array.\n\n=== `pop`\n\nRemoves the last item from the array and returns it. Fails with an error if the array is empty.\n\n```\npop(\n  \n) -> \n```\n\n=== `insert`\n\nInserts a value into the array at the specified index, shifting all subsequent elements to the right. Fails with an error if the index is out of bounds.\n\nTo replace an element of an array, use #link(\"/docs/reference/foundations/array/#definitions-at\")[at].\n\n```\ninsert(\n  int: int,\n  any\n) -> int\n```\n\n==== `index`: int (Required, Positional)\n\nThe index at which to insert the item. If negative, indexes from the back.\n\n==== `value`: any (Required, Positional)\n\nThe value to insert into the array.\n\n=== `remove`\n\nRemoves the value at the specified index from the array and return it.\n\n```\nremove(\n  int: int,\n  default: any\n) -> int\n```\n\n==== `index`: int (Required, Positional)\n\nThe index at which to remove the item. If negative, indexes from the back.\n\n==== `default`: any\n\nA default value to return if the index is out of bounds.\n\n=== `slice`\n\nExtracts a subslice of the array. Fails with an error if the start or end index is out of bounds.\n\n```\nslice(\n  int: int,\n  none: none | int,\n  count: int\n) -> array\n```\n\n==== `start`: int (Required, Positional)\n\nThe start index (inclusive). If negative, indexes from the back.\n\n==== `end`: none | int (Positional)\n\nThe end index (exclusive). If omitted, the whole slice until the end of the array is extracted. If negative, indexes from the back.\n\nDefault: `none`\n\n==== `count`: int\n\nThe number of items to extract. This is equivalent to passing `start + count` as the `end` position. Mutually exclusive with `end`.\n\n=== `contains`\n\nWhether the array contains the specified value.\n\nThis method also has dedicated syntax: You can write `2 in (1, 2, 3)` instead of `(1, 2, 3).contains(2)`.\n\n```\ncontains(\n  any\n) -> bool\n```\n\n==== `value`: any (Required, Positional)\n\nThe value to search for.\n\n=== `find`\n\nSearches for an item for which the given function returns `true` and returns the first match or `none` if there is no match.\n\n```\nfind(\n  function: function\n) -> none\n```\n\n==== `searcher`: function (Required, Positional)\n\nThe function to apply to each item. Must return a boolean.\n\n=== `position`\n\nSearches for an item for which the given function returns `true` and returns the index of the first match or `none` if there is no match.\n\n```\nposition(\n  function: function\n) -> int\n```\n\n==== `searcher`: function (Required, Positional)\n\nThe function to apply to each item. Must return a boolean.\n\n=== `range`\n\nCreate an array consisting of a sequence of numbers.\n\nIf you pass just one positional parameter, it is interpreted as the `end` of the range. If you pass two, they describe the `start` and `end` of the range.\n\nThis function is available both in the array function's scope and globally.\n\n```\nrange(\n  int: int,\n  int: int,\n  step: int\n) -> array\n```\n\n```typst\n#range(5) \\\n#range(2, 5) \\\n#range(20, step: 4) \\\n#range(21, step: 4) \\\n#range(5, 2, step: -1)\n```\n\n==== `start`: int (Positional)\n\nThe start of the range (inclusive).\n\nDefault: `0`\n\n==== `end`: int (Required, Positional)\n\nThe end of the range (exclusive).\n\n==== `step`: int\n\nThe distance between the generated numbers.\n\nDefault: `1`\n\n=== `filter`\n\nProduces a new array with only the items from the original one for which the given function returns true.\n\n```\nfilter(\n  function: function\n) -> array\n```\n\n==== `test`: function (Required, Positional)\n\nThe function to apply to each item. Must return a boolean.\n\n=== `map`\n\nProduces a new array in which all items from the original one were transformed with the given function.\n\n```\nmap(\n  function: function\n) -> array\n```\n\n==== `mapper`: function (Required, Positional)\n\nThe function to apply to each item.\n\n=== `enumerate`\n\nReturns a new array with the values alongside their indices.\n\nThe returned array consists of `(index, value)` pairs in the form of length-2 arrays. These can be #link(\"/docs/reference/scripting/#bindings\")[destructured] with a let binding or for loop.\n\n```\nenumerate(\n  start: int\n) -> array\n```\n\n==== `start`: int\n\nThe index returned for the first pair of the returned list.\n\nDefault: `0`\n\n=== `zip`\n\nZips the array with other arrays.\n\nReturns an array of arrays, where the `i`th inner array contains all the `i`th elements from each original array.\n\nIf the arrays to be zipped have different lengths, they are zipped up to the last element of the shortest array and all remaining elements are ignored.\n\nThis function is variadic, meaning that you can zip multiple arrays together at once: `(1, 2).zip((\"A\", \"B\"), (10, 20))` yields `((1, \"A\", 10), (2, \"B\", 20))`.\n\n```\nzip(\n  exact: bool,\n  ..: array\n) -> array\n```\n\n==== `exact`: bool\n\nWhether all arrays have to have the same length. For example, `(1, 2).zip((1, 2, 3), exact: true)` produces an error.\n\nDefault: `false`\n\n==== `others`: array (Required, Positional, Variadic)\n\nThe arrays to zip with.\n\n=== `fold`\n\nFolds all items into a single value using an accumulator function.\n\n```\nfold(\n  any,\n  function: function\n) -> function\n```\n\n==== `init`: any (Required, Positional)\n\nThe initial value to start with.\n\n==== `folder`: function (Required, Positional)\n\nThe folding function. Must have two parameters: One for the accumulated value and one for an item.\n\n=== `sum`\n\nSums all items (works for all types that can be added).\n\n```\nsum(\n  default: any\n) -> \n```\n\n==== `default`: any\n\nWhat to return if the array is empty. Must be set if the array can be empty.\n\n=== `product`\n\nCalculates the product all items (works for all types that can be multiplied).\n\n```\nproduct(\n  default: any\n) -> \n```\n\n==== `default`: any\n\nWhat to return if the array is empty. Must be set if the array can be empty.\n\n=== `any`\n\nWhether the given function returns `true` for any item in the array.\n\n```\nany(\n  function: function\n) -> bool\n```\n\n==== `test`: function (Required, Positional)\n\nThe function to apply to each item. Must return a boolean.\n\n=== `all`\n\nWhether the given function returns `true` for all items in the array.\n\n```\nall(\n  function: function\n) -> bool\n```\n\n==== `test`: function (Required, Positional)\n\nThe function to apply to each item. Must return a boolean.\n\n=== `flatten`\n\nCombine all nested arrays into a single flat one.\n\n```\nflatten(\n  \n) -> array\n```\n\n=== `rev`\n\nReturn a new array with the same items, but in reverse order.\n\n```\nrev(\n  \n) -> array\n```\n\n=== `split`\n\nSplit the array at occurrences of the specified value.\n\n```\nsplit(\n  any\n) -> array\n```\n\n==== `at`: any (Required, Positional)\n\nThe value to split at.\n\n=== `join`\n\nCombine all items in the array into one.\n\n```\njoin(\n  none: any | none,\n  last: any\n) -> none\n```\n\n==== `separator`: any | none (Positional)\n\nA value to insert between each item of the array.\n\nDefault: `none`\n\n==== `last`: any\n\nAn alternative separator between the last two items.\n\n=== `intersperse`\n\nReturns an array with a copy of the separator value placed between adjacent elements.\n\n```\nintersperse(\n  any\n) -> array\n```\n\n==== `separator`: any (Required, Positional)\n\nThe value that will be placed between each adjacent element.\n\n=== `chunks`\n\nSplits an array into non-overlapping chunks, starting at the beginning, ending with a single remainder chunk.\n\nAll chunks but the last have `chunk-size` elements. If `exact` is set to `true`, the remainder is dropped if it contains less than `chunk-size` elements.\n\n```\nchunks(\n  int: int,\n  exact: bool\n) -> array\n```\n\n```typst\n#let array = (1, 2, 3, 4, 5, 6, 7, 8)\n#array.chunks(3) \\\n#array.chunks(3, exact: true)\n```\n\n==== `chunk-size`: int (Required, Positional)\n\nHow many elements each chunk may at most contain.\n\n==== `exact`: bool\n\nWhether to keep the remainder if its size is less than `chunk-size`.\n\nDefault: `false`\n\n=== `windows`\n\nReturns sliding windows of `window-size` elements over an array.\n\nIf the array length is less than `window-size`, this will return an empty array.\n\n```\nwindows(\n  int: int\n) -> array\n```\n\n```typst\n#let array = (1, 2, 3, 4, 5, 6, 7, 8)\n#array.windows(5)\n```\n\n==== `window-size`: int (Required, Positional)\n\nHow many elements each window will contain.\n\n=== `sorted`\n\nReturn a sorted version of this array, optionally by a given key function. The sorting algorithm used is stable.\n\nReturns an error if two values could not be compared or if the key function (if given) yields an error.\n\nTo sort according to multiple criteria at once, e.g. in case of equality between some criteria, the key function can return an array. The results are in lexicographic order.\n\n```\nsorted(\n  key: function\n) -> array\n```\n\n```typst\n#let array = (\n  (a: 2, b: 4),\n  (a: 1, b: 5),\n  (a: 2, b: 3),\n)\n#array.sorted(key: it => (it.a, it.b))\n```\n\n==== `key`: function\n\nIf given, applies this function to the elements in the array to determine the keys to sort by.\n\n=== `dedup`\n\nDeduplicates all items in the array.\n\nReturns a new array with all duplicate items removed. Only the first element of each duplicate is kept.\n\n```\ndedup(\n  key: function\n) -> array\n```\n\n```typst\n#(1, 1, 2, 3, 1).dedup()\n```\n\n==== `key`: function\n\nIf given, applies this function to the elements in the array to determine the keys to deduplicate by.\n\n=== `to-dict`\n\nConverts an array of pairs into a dictionary. The first value of each pair is the key, the second the value.\n\nIf the same key occurs multiple times, the last value is selected.\n\n```\nto-dict(\n  \n) -> dictionary\n```\n\n```typst\n#(\n  (\"apples\", 2),\n  (\"peaches\", 3),\n  (\"apples\", 5),\n).to-dict()\n```\n\n=== `reduce`\n\nReduces the elements to a single one, by repeatedly applying a reducing operation.\n\nIf the array is empty, returns `none`, otherwise, returns the result of the reduction.\n\nThe reducing function is a closure with two arguments: an \"accumulator\", and an element.\n\nFor arrays with at least one element, this is the same as #link(\"/docs/reference/foundations/array/#definitions-fold\")[array.fold] with the first element of the array as the initial accumulator value, folding every subsequent element into it.\n\n```\nreduce(\n  function: function\n) -> function\n```\n\n==== `reducer`: function (Required, Positional)\n\nThe reducing function. Must have two parameters: One for the accumulated value and one for an item.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/array.typ", "filename": "array.typ"}
{"text": "= assert\n\nEnsures that a condition is fulfilled.\n\nFails with an error if the condition is not fulfilled. Does not produce any output in the document.\n\nIf you wish to test equality between two values, see #link(\"/docs/reference/foundations/assert/#definitions-eq\")[assert.eq] and #link(\"/docs/reference/foundations/assert/#definitions-ne\")[assert.ne].\n\n== Example\n\n== Parameters\n\n```\nassert(\n  bool: bool,\n  message: str\n) -> str\n```\n\n=== `condition`: bool (Required, Positional)\n\nThe condition that must be true for the assertion to pass.\n\n=== `message`: str\n\nThe error message when the assertion fails.\n\n== Definitions\n\n=== `eq`\n\nEnsures that two values are equal.\n\nFails with an error if the first value is not equal to the second. Does not produce any output in the document.\n\n```\neq(\n  any,\n  any,\n  message: str\n) -> str\n```\n\n==== `left`: any (Required, Positional)\n\nThe first value to compare.\n\n==== `right`: any (Required, Positional)\n\nThe second value to compare.\n\n==== `message`: str\n\nAn optional message to display on error instead of the representations of the compared values.\n\n=== `ne`\n\nEnsures that two values are not equal.\n\nFails with an error if the first value is equal to the second. Does not produce any output in the document.\n\n```\nne(\n  any,\n  any,\n  message: str\n) -> str\n```\n\n==== `left`: any (Required, Positional)\n\nThe first value to compare.\n\n==== `right`: any (Required, Positional)\n\nThe second value to compare.\n\n==== `message`: str\n\nAn optional message to display on error instead of the representations of the compared values.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/assert.typ", "filename": "assert.typ"}
{"text": "= auto\n\nA value that indicates a smart default.\n\nThe auto type has exactly one value: `auto`.\n\nParameters that support the `auto` value have some smart default or contextual behaviour. A good example is the #link(\"/docs/reference/text/text/#parameters-dir\")[text direction] parameter. Setting it to `auto` lets Typst automatically determine the direction from the #link(\"/docs/reference/text/text/#parameters-lang\")[text language].", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/auto.typ", "filename": "auto.typ"}
{"text": "= bool\n\nA type with two states.\n\nThe boolean type has two values: `true` and `false`. It denotes whether something is active or enabled.\n\n== Example\n\n```typst\n#false \\\n#true \\\n#(1 < 2)\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/bool.typ", "filename": "bool.typ"}
{"text": "= bytes\n\nA sequence of bytes.\n\nThis is conceptually similar to an array of #link(\"/docs/reference/foundations/int/\")[integers] between `0` and `255`, but represented much more efficiently. You can iterate over it using a #link(\"/docs/reference/scripting/#loops\")[for loop].\n\nYou can convert\n\n- a #link(\"/docs/reference/foundations/str/\")[string] or an #link(\"/docs/reference/foundations/array/\")[array] of integers to bytes with the #link(\"/docs/reference/foundations/bytes/\")[bytes] constructor\n- bytes to a string with the #link(\"/docs/reference/foundations/str/\")[str] constructor, with UTF-8 encoding\n- bytes to an array of integers with the #link(\"/docs/reference/foundations/array/\")[array] constructor\n\nWhen #link(\"/docs/reference/data-loading/read/\")[reading] data from a file, you can decide whether to load it as a string or as raw bytes.\n\n```typst\n#bytes((123, 160, 22, 0)) \\\n#bytes(\"Hello 😃\")\n\n#let data = read(\n  \"rhino.png\",\n  encoding: none,\n)\n\n// Magic bytes.\n#array(data.slice(0, 4)) \\\n#str(data.slice(1, 4))\n```\n\n== Constructor\n\nConverts a value to bytes.\n\n- Strings are encoded in UTF-8.\n- Arrays of integers between `0` and `255` are converted directly. The dedicated byte representation is much more efficient than the array representation and thus typically used for large byte buffers (e.g. image data).\n\n```\nbytes(\n  str: str | bytes | array\n) -> bytes\n```\n\n```typst\n#bytes(\"Hello 😃\") \\\n#bytes((123, 160, 22, 0))\n```\n\n==== `value`: str | bytes | array (Required, Positional)\n\nThe value that should be converted to bytes.\n\n== Definitions\n\n=== `len`\n\nThe length in bytes.\n\n```\nlen(\n  \n) -> int\n```\n\n=== `at`\n\nReturns the byte at the specified index. Returns the default value if the index is out of bounds or fails with an error if no default value was specified.\n\n```\nat(\n  int: int,\n  default: any\n) -> int\n```\n\n==== `index`: int (Required, Positional)\n\nThe index at which to retrieve the byte.\n\n==== `default`: any\n\nA default value to return if the index is out of bounds.\n\n=== `slice`\n\nExtracts a subslice of the bytes. Fails with an error if the start or end index is out of bounds.\n\n```\nslice(\n  int: int,\n  none: none | int,\n  count: int\n) -> bytes\n```\n\n==== `start`: int (Required, Positional)\n\nThe start index (inclusive).\n\n==== `end`: none | int (Positional)\n\nThe end index (exclusive). If omitted, the whole slice until the end is extracted.\n\nDefault: `none`\n\n==== `count`: int\n\nThe number of items to extract. This is equivalent to passing `start + count` as the `end` position. Mutually exclusive with `end`.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/bytes.typ", "filename": "bytes.typ"}
{"text": "= Calculation\n\nModule for calculations and processing of numeric values.\n\nThese definitions are part of the `calc` module and not imported by default. In addition to the functions listed below, the `calc` module also defines the constants `pi`, `tau`, `e`, and `inf`.\n\n== Functions\n\n=== `abs`\n\nCalculates the absolute value of a numeric value.\n\n```\nabs(\n  int: int | float | length | angle | ratio | fraction | decimal\n) -> decimal\n```\n\n```typst\n#calc.abs(-5) \\\n#calc.abs(5pt - 2cm) \\\n#calc.abs(2fr) \\\n#calc.abs(decimal(\"-342.440\"))\n```\n\n==== `value`: int | float | length | angle | ratio | fraction | decimal (Required, Positional)\n\nThe value whose absolute value to calculate.\n\n=== `pow`\n\nRaises a value to some exponent.\n\n```\npow(\n  int: int | float | decimal,\n  int: int | float\n) -> decimal\n```\n\n```typst\n#calc.pow(2, 3) \\\n#calc.pow(decimal(\"2.5\"), 2)\n```\n\n==== `base`: int | float | decimal (Required, Positional)\n\nThe base of the power.\n\nIf this is a #link(\"/docs/reference/foundations/decimal/\")[decimal], the exponent can only be an #link(\"/docs/reference/foundations/int/\")[integer].\n\n==== `exponent`: int | float (Required, Positional)\n\nThe exponent of the power.\n\n=== `exp`\n\nRaises a value to some exponent of e.\n\n```\nexp(\n  int: int | float\n) -> float\n```\n\n```typst\n#calc.exp(1)\n```\n\n==== `exponent`: int | float (Required, Positional)\n\nThe exponent of the power.\n\n=== `sqrt`\n\nCalculates the square root of a number.\n\n```\nsqrt(\n  int: int | float\n) -> float\n```\n\n```typst\n#calc.sqrt(16) \\\n#calc.sqrt(2.5)\n```\n\n==== `value`: int | float (Required, Positional)\n\nThe number whose square root to calculate. Must be non-negative.\n\n=== `root`\n\nCalculates the real nth root of a number.\n\nIf the number is negative, then n must be odd.\n\n```\nroot(\n  float: float,\n  int: int\n) -> float\n```\n\n```typst\n#calc.root(16.0, 4) \\\n#calc.root(27.0, 3)\n```\n\n==== `radicand`: float (Required, Positional)\n\nThe expression to take the root of\n\n==== `index`: int (Required, Positional)\n\nWhich root of the radicand to take\n\n=== `sin`\n\nCalculates the sine of an angle.\n\nWhen called with an integer or a float, they will be interpreted as radians.\n\n```\nsin(\n  int: int | float | angle\n) -> float\n```\n\n```typst\n#calc.sin(1.5) \\\n#calc.sin(90deg)\n```\n\n==== `angle`: int | float | angle (Required, Positional)\n\nThe angle whose sine to calculate.\n\n=== `cos`\n\nCalculates the cosine of an angle.\n\nWhen called with an integer or a float, they will be interpreted as radians.\n\n```\ncos(\n  int: int | float | angle\n) -> float\n```\n\n```typst\n#calc.cos(1.5) \\\n#calc.cos(90deg)\n```\n\n==== `angle`: int | float | angle (Required, Positional)\n\nThe angle whose cosine to calculate.\n\n=== `tan`\n\nCalculates the tangent of an angle.\n\nWhen called with an integer or a float, they will be interpreted as radians.\n\n```\ntan(\n  int: int | float | angle\n) -> float\n```\n\n```typst\n#calc.tan(1.5) \\\n#calc.tan(90deg)\n```\n\n==== `angle`: int | float | angle (Required, Positional)\n\nThe angle whose tangent to calculate.\n\n=== `asin`\n\nCalculates the arcsine of a number.\n\n```\nasin(\n  int: int | float\n) -> angle\n```\n\n```typst\n#calc.asin(0) \\\n#calc.asin(1)\n```\n\n==== `value`: int | float (Required, Positional)\n\nThe number whose arcsine to calculate. Must be between -1 and 1.\n\n=== `acos`\n\nCalculates the arccosine of a number.\n\n```\nacos(\n  int: int | float\n) -> angle\n```\n\n```typst\n#calc.acos(0) \\\n#calc.acos(1)\n```\n\n==== `value`: int | float (Required, Positional)\n\nThe number whose arcsine to calculate. Must be between -1 and 1.\n\n=== `atan`\n\nCalculates the arctangent of a number.\n\n```\natan(\n  int: int | float\n) -> angle\n```\n\n```typst\n#calc.atan(0) \\\n#calc.atan(1)\n```\n\n==== `value`: int | float (Required, Positional)\n\nThe number whose arctangent to calculate.\n\n=== `atan2`\n\nCalculates the four-quadrant arctangent of a coordinate.\n\nThe arguments are `(x, y)`, not `(y, x)`.\n\n```\natan2(\n  int: int | float,\n  int: int | float\n) -> angle\n```\n\n```typst\n#calc.atan2(1, 1) \\\n#calc.atan2(-2, -3)\n```\n\n==== `x`: int | float (Required, Positional)\n\nThe X coordinate.\n\n==== `y`: int | float (Required, Positional)\n\nThe Y coordinate.\n\n=== `sinh`\n\nCalculates the hyperbolic sine of a hyperbolic angle.\n\n```\nsinh(\n  float: float\n) -> float\n```\n\n```typst\n#calc.sinh(0) \\\n#calc.sinh(1.5)\n```\n\n==== `value`: float (Required, Positional)\n\nThe hyperbolic angle whose hyperbolic sine to calculate.\n\n=== `cosh`\n\nCalculates the hyperbolic cosine of a hyperbolic angle.\n\n```\ncosh(\n  float: float\n) -> float\n```\n\n```typst\n#calc.cosh(0) \\\n#calc.cosh(1.5)\n```\n\n==== `value`: float (Required, Positional)\n\nThe hyperbolic angle whose hyperbolic cosine to calculate.\n\n=== `tanh`\n\nCalculates the hyperbolic tangent of an hyperbolic angle.\n\n```\ntanh(\n  float: float\n) -> float\n```\n\n```typst\n#calc.tanh(0) \\\n#calc.tanh(1.5)\n```\n\n==== `value`: float (Required, Positional)\n\nThe hyperbolic angle whose hyperbolic tangent to calculate.\n\n=== `log`\n\nCalculates the logarithm of a number.\n\nIf the base is not specified, the logarithm is calculated in base 10.\n\n```\nlog(\n  int: int | float,\n  base: float\n) -> float\n```\n\n```typst\n#calc.log(100)\n```\n\n==== `value`: int | float (Required, Positional)\n\nThe number whose logarithm to calculate. Must be strictly positive.\n\n==== `base`: float\n\nThe base of the logarithm. May not be zero.\n\nDefault: `10.0`\n\n=== `ln`\n\nCalculates the natural logarithm of a number.\n\n```\nln(\n  int: int | float\n) -> float\n```\n\n```typst\n#calc.ln(calc.e)\n```\n\n==== `value`: int | float (Required, Positional)\n\nThe number whose logarithm to calculate. Must be strictly positive.\n\n=== `fact`\n\nCalculates the factorial of a number.\n\n```\nfact(\n  int: int\n) -> int\n```\n\n```typst\n#calc.fact(5)\n```\n\n==== `number`: int (Required, Positional)\n\nThe number whose factorial to calculate. Must be non-negative.\n\n=== `perm`\n\nCalculates a permutation.\n\nReturns the `k`-permutation of `n`, or the number of ways to choose `k` items from a set of `n` with regard to order.\n\n```\nperm(\n  int: int,\n  int: int\n) -> int\n```\n\n```typst\n$ \"perm\"(n, k) &= n!/((n - k)!) \\\n  \"perm\"(5, 3) &= #calc.perm(5, 3) $\n```\n\n==== `base`: int (Required, Positional)\n\nThe base number. Must be non-negative.\n\n==== `numbers`: int (Required, Positional)\n\nThe number of permutations. Must be non-negative.\n\n=== `binom`\n\nCalculates a binomial coefficient.\n\nReturns the `k`-combination of `n`, or the number of ways to choose `k` items from a set of `n` without regard to order.\n\n```\nbinom(\n  int: int,\n  int: int\n) -> int\n```\n\n```typst\n#calc.binom(10, 5)\n```\n\n==== `n`: int (Required, Positional)\n\nThe upper coefficient. Must be non-negative.\n\n==== `k`: int (Required, Positional)\n\nThe lower coefficient. Must be non-negative.\n\n=== `gcd`\n\nCalculates the greatest common divisor of two integers.\n\n```\ngcd(\n  int: int,\n  int: int\n) -> int\n```\n\n```typst\n#calc.gcd(7, 42)\n```\n\n==== `a`: int (Required, Positional)\n\nThe first integer.\n\n==== `b`: int (Required, Positional)\n\nThe second integer.\n\n=== `lcm`\n\nCalculates the least common multiple of two integers.\n\n```\nlcm(\n  int: int,\n  int: int\n) -> int\n```\n\n```typst\n#calc.lcm(96, 13)\n```\n\n==== `a`: int (Required, Positional)\n\nThe first integer.\n\n==== `b`: int (Required, Positional)\n\nThe second integer.\n\n=== `floor`\n\nRounds a number down to the nearest integer.\n\nIf the number is already an integer, it is returned unchanged.\n\nNote that this function will always return an #link(\"/docs/reference/foundations/int/\")[integer], and will error if the resulting #link(\"/docs/reference/foundations/float/\")[float] or #link(\"/docs/reference/foundations/decimal/\")[decimal] is larger than the maximum 64-bit signed integer or smaller than the minimum for that type.\n\n```\nfloor(\n  int: int | float | decimal\n) -> int\n```\n\n```typst\n#calc.floor(500.1)\n#assert(calc.floor(3) == 3)\n#assert(calc.floor(3.14) == 3)\n#assert(calc.floor(decimal(\"-3.14\")) == -4)\n```\n\n==== `value`: int | float | decimal (Required, Positional)\n\nThe number to round down.\n\n=== `ceil`\n\nRounds a number up to the nearest integer.\n\nIf the number is already an integer, it is returned unchanged.\n\nNote that this function will always return an #link(\"/docs/reference/foundations/int/\")[integer], and will error if the resulting #link(\"/docs/reference/foundations/float/\")[float] or #link(\"/docs/reference/foundations/decimal/\")[decimal] is larger than the maximum 64-bit signed integer or smaller than the minimum for that type.\n\n```\nceil(\n  int: int | float | decimal\n) -> int\n```\n\n```typst\n#calc.ceil(500.1)\n#assert(calc.ceil(3) == 3)\n#assert(calc.ceil(3.14) == 4)\n#assert(calc.ceil(decimal(\"-3.14\")) == -3)\n```\n\n==== `value`: int | float | decimal (Required, Positional)\n\nThe number to round up.\n\n=== `trunc`\n\nReturns the integer part of a number.\n\nIf the number is already an integer, it is returned unchanged.\n\nNote that this function will always return an #link(\"/docs/reference/foundations/int/\")[integer], and will error if the resulting #link(\"/docs/reference/foundations/float/\")[float] or #link(\"/docs/reference/foundations/decimal/\")[decimal] is larger than the maximum 64-bit signed integer or smaller than the minimum for that type.\n\n```\ntrunc(\n  int: int | float | decimal\n) -> int\n```\n\n```typst\n#calc.trunc(15.9)\n#assert(calc.trunc(3) == 3)\n#assert(calc.trunc(-3.7) == -3)\n#assert(calc.trunc(decimal(\"8493.12949582390\")) == 8493)\n```\n\n==== `value`: int | float | decimal (Required, Positional)\n\nThe number to truncate.\n\n=== `fract`\n\nReturns the fractional part of a number.\n\nIf the number is an integer, returns `0`.\n\n```\nfract(\n  int: int | float | decimal\n) -> decimal\n```\n\n```typst\n#calc.fract(-3.1)\n#assert(calc.fract(3) == 0)\n#assert(calc.fract(decimal(\"234.23949211\")) == decimal(\"0.23949211\"))\n```\n\n==== `value`: int | float | decimal (Required, Positional)\n\nThe number to truncate.\n\n=== `round`\n\nRounds a number to the nearest integer away from zero.\n\nOptionally, a number of decimal places can be specified.\n\nIf the number of digits is negative, its absolute value will indicate the amount of significant integer digits to remove before the decimal point.\n\nNote that this function will return the same type as the operand. That is, applying `round` to a #link(\"/docs/reference/foundations/float/\")[float] will return a `float`, and to a #link(\"/docs/reference/foundations/decimal/\")[decimal], another `decimal`. You may explicitly convert the output of this function to an integer with #link(\"/docs/reference/foundations/int/\")[int], but note that such a conversion will error if the `float` or `decimal` is larger than the maximum 64-bit signed integer or smaller than the minimum integer.\n\nIn addition, this function can error if there is an attempt to round beyond the maximum or minimum integer or `decimal`. If the number is a `float`, such an attempt will cause `float.inf` or `-float.inf` to be returned for maximum and minimum respectively.\n\n```\nround(\n  int: int | float | decimal,\n  digits: int\n) -> decimal\n```\n\n```typst\n#calc.round(3.1415, digits: 2)\n#assert(calc.round(3) == 3)\n#assert(calc.round(3.14) == 3)\n#assert(calc.round(3.5) == 4.0)\n#assert(calc.round(3333.45, digits: -2) == 3300.0)\n#assert(calc.round(-48953.45, digits: -3) == -49000.0)\n#assert(calc.round(3333, digits: -2) == 3300)\n#assert(calc.round(-48953, digits: -3) == -49000)\n#assert(calc.round(decimal(\"-6.5\")) == decimal(\"-7\"))\n#assert(calc.round(decimal(\"7.123456789\"), digits: 6) == decimal(\"7.123457\"))\n#assert(calc.round(decimal(\"3333.45\"), digits: -2) == decimal(\"3300\"))\n#assert(calc.round(decimal(\"-48953.45\"), digits: -3) == decimal(\"-49000\"))\n```\n\n==== `value`: int | float | decimal (Required, Positional)\n\nThe number to round.\n\n==== `digits`: int\n\nIf positive, the number of decimal places.\n\nIf negative, the number of significant integer digits that should be removed before the decimal point.\n\nDefault: `0`\n\n=== `clamp`\n\nClamps a number between a minimum and maximum value.\n\n```\nclamp(\n  int: int | float | decimal,\n  int: int | float | decimal,\n  int: int | float | decimal\n) -> decimal\n```\n\n```typst\n#calc.clamp(5, 0, 4)\n#assert(calc.clamp(5, 0, 10) == 5)\n#assert(calc.clamp(5, 6, 10) == 6)\n#assert(calc.clamp(decimal(\"5.45\"), 2, decimal(\"45.9\")) == decimal(\"5.45\"))\n#assert(calc.clamp(decimal(\"5.45\"), decimal(\"6.75\"), 12) == decimal(\"6.75\"))\n```\n\n==== `value`: int | float | decimal (Required, Positional)\n\nThe number to clamp.\n\n==== `min`: int | float | decimal (Required, Positional)\n\nThe inclusive minimum value.\n\n==== `max`: int | float | decimal (Required, Positional)\n\nThe inclusive maximum value.\n\n=== `min`\n\nDetermines the minimum of a sequence of values.\n\n```\nmin(\n  ..: any\n) -> \n```\n\n```typst\n#calc.min(1, -3, -5, 20, 3, 6) \\\n#calc.min(\"typst\", \"is\", \"cool\")\n```\n\n==== `values`: any (Required, Positional, Variadic)\n\nThe sequence of values from which to extract the minimum. Must not be empty.\n\n=== `max`\n\nDetermines the maximum of a sequence of values.\n\n```\nmax(\n  ..: any\n) -> \n```\n\n```typst\n#calc.max(1, -3, -5, 20, 3, 6) \\\n#calc.max(\"typst\", \"is\", \"cool\")\n```\n\n==== `values`: any (Required, Positional, Variadic)\n\nThe sequence of values from which to extract the maximum. Must not be empty.\n\n=== `even`\n\nDetermines whether an integer is even.\n\n```\neven(\n  int: int\n) -> bool\n```\n\n```typst\n#calc.even(4) \\\n#calc.even(5) \\\n#range(10).filter(calc.even)\n```\n\n==== `value`: int (Required, Positional)\n\nThe number to check for evenness.\n\n=== `odd`\n\nDetermines whether an integer is odd.\n\n```\nodd(\n  int: int\n) -> bool\n```\n\n```typst\n#calc.odd(4) \\\n#calc.odd(5) \\\n#range(10).filter(calc.odd)\n```\n\n==== `value`: int (Required, Positional)\n\nThe number to check for oddness.\n\n=== `rem`\n\nCalculates the remainder of two numbers.\n\nThe value `calc.rem(x, y)` always has the same sign as `x`, and is smaller in magnitude than `y`.\n\nThis can error if given a #link(\"/docs/reference/foundations/decimal/\")[decimal] input and the dividend is too small in magnitude compared to the divisor.\n\n```\nrem(\n  int: int | float | decimal,\n  int: int | float | decimal\n) -> decimal\n```\n\n```typst\n#calc.rem(7, 3) \\\n#calc.rem(7, -3) \\\n#calc.rem(-7, 3) \\\n#calc.rem(-7, -3) \\\n#calc.rem(1.75, 0.5)\n```\n\n==== `dividend`: int | float | decimal (Required, Positional)\n\nThe dividend of the remainder.\n\n==== `divisor`: int | float | decimal (Required, Positional)\n\nThe divisor of the remainder.\n\n=== `div-euclid`\n\nPerforms euclidean division of two numbers.\n\nThe result of this computation is that of a division rounded to the integer `n` such that the dividend is greater than or equal to `n` times the divisor.\n\n```\ndiv-euclid(\n  int: int | float | decimal,\n  int: int | float | decimal\n) -> decimal\n```\n\n```typst\n#calc.div-euclid(7, 3) \\\n#calc.div-euclid(7, -3) \\\n#calc.div-euclid(-7, 3) \\\n#calc.div-euclid(-7, -3) \\\n#calc.div-euclid(1.75, 0.5) \\\n#calc.div-euclid(decimal(\"1.75\"), decimal(\"0.5\"))\n```\n\n==== `dividend`: int | float | decimal (Required, Positional)\n\nThe dividend of the division.\n\n==== `divisor`: int | float | decimal (Required, Positional)\n\nThe divisor of the division.\n\n=== `rem-euclid`\n\nThis calculates the least nonnegative remainder of a division.\n\nWarning: Due to a floating point round-off error, the remainder may equal the absolute value of the divisor if the dividend is much smaller in magnitude than the divisor and the dividend is negative. This only applies for floating point inputs.\n\nIn addition, this can error if given a #link(\"/docs/reference/foundations/decimal/\")[decimal] input and the dividend is too small in magnitude compared to the divisor.\n\n```\nrem-euclid(\n  int: int | float | decimal,\n  int: int | float | decimal\n) -> decimal\n```\n\n```typst\n#calc.rem-euclid(7, 3) \\\n#calc.rem-euclid(7, -3) \\\n#calc.rem-euclid(-7, 3) \\\n#calc.rem-euclid(-7, -3) \\\n#calc.rem-euclid(1.75, 0.5) \\\n#calc.rem-euclid(decimal(\"1.75\"), decimal(\"0.5\"))\n```\n\n==== `dividend`: int | float | decimal (Required, Positional)\n\nThe dividend of the remainder.\n\n==== `divisor`: int | float | decimal (Required, Positional)\n\nThe divisor of the remainder.\n\n=== `quo`\n\nCalculates the quotient (floored division) of two numbers.\n\nNote that this function will always return an #link(\"/docs/reference/foundations/int/\")[integer], and will error if the resulting #link(\"/docs/reference/foundations/float/\")[float] or #link(\"/docs/reference/foundations/decimal/\")[decimal] is larger than the maximum 64-bit signed integer or smaller than the minimum for that type.\n\n```\nquo(\n  int: int | float | decimal,\n  int: int | float | decimal\n) -> int\n```\n\n```typst\n$ \"quo\"(a, b) &= floor(a/b) \\\n  \"quo\"(14, 5) &= #calc.quo(14, 5) \\\n  \"quo\"(3.46, 0.5) &= #calc.quo(3.46, 0.5) $\n```\n\n==== `dividend`: int | float | decimal (Required, Positional)\n\nThe dividend of the quotient.\n\n==== `divisor`: int | float | decimal (Required, Positional)\n\nThe divisor of the quotient.\n\n=== `norm`\n\nCalculates the p-norm of a sequence of values.\n\n```\nnorm(\n  p: float,\n  ..: float\n) -> float\n```\n\n```typst\n#calc.norm(1, 2, -3, 0.5) \\\n#calc.norm(p: 3, 1, 2)\n```\n\n==== `p`: float\n\nThe p value to calculate the p-norm of.\n\nDefault: `2.0`\n\n==== `values`: float (Required, Positional, Variadic)\n\nThe sequence of values from which to calculate the p-norm. Returns `0.0` if empty.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/calc.typ", "filename": "calc.typ"}
{"text": "= content\n\nA piece of document content.\n\nThis type is at the heart of Typst. All markup you write and most #link(\"/docs/reference/foundations/function/\")[functions] you call produce content values. You can create a content value by enclosing markup in square brackets. This is also how you pass content to functions.\n\n== Example\n\n```typst\nType of *Hello!* is\n#type([*Hello!*])\n```\n\nContent can be added with the `+` operator, #link(\"/docs/reference/scripting/#blocks\")[joined together] and multiplied with integers. Wherever content is expected, you can also pass a #link(\"/docs/reference/foundations/str/\")[string] or `none`.\n\n== Representation\n\nContent consists of elements with fields. When constructing an element with its _element function,_ you provide these fields as arguments and when you have a content value, you can access its fields with #link(\"/docs/reference/scripting/#field-access\")[field access syntax].\n\nSome fields are required: These must be provided when constructing an element and as a consequence, they are always available through field access on content of that type. Required fields are marked as such in the documentation.\n\nMost fields are optional: Like required fields, they can be passed to the element function to configure them for a single element. However, these can also be configured with #link(\"/docs/reference/styling/#set-rules\")[set rules] to apply them to all elements within a scope. Optional fields are only available with field access syntax when they were explicitly passed to the element function, not when they result from a set rule.\n\nEach element has a default appearance. However, you can also completely customize its appearance with a #link(\"/docs/reference/styling/#show-rules\")[show rule]. The show rule is passed the element. It can access the element's field and produce arbitrary content from it.\n\nIn the web app, you can hover over a content variable to see exactly which elements the content is composed of and what fields they have. Alternatively, you can inspect the output of the #link(\"/docs/reference/foundations/repr/\")[repr] function.\n\n== Definitions\n\n=== `func`\n\nThe content's element function. This function can be used to create the element contained in this content. It can be used in set and show rules for the element. Can be compared with global functions to check whether you have a specific kind of element.\n\n```\nfunc(\n  \n) -> function\n```\n\n=== `has`\n\nWhether the content has the specified field.\n\n```\nhas(\n  str: str\n) -> bool\n```\n\n==== `field`: str (Required, Positional)\n\nThe field to look for.\n\n=== `at`\n\nAccess the specified field on the content. Returns the default value if the field does not exist or fails with an error if no default value was specified.\n\n```\nat(\n  str: str,\n  default: any\n) -> str\n```\n\n==== `field`: str (Required, Positional)\n\nThe field to access.\n\n==== `default`: any\n\nA default value to return if the field does not exist.\n\n=== `fields`\n\nReturns the fields of this content.\n\n```\nfields(\n  \n) -> dictionary\n```\n\n```typst\n#rect(\n  width: 10cm,\n  height: 10cm,\n).fields()\n```\n\n=== `location`\n\nThe location of the content. This is only available on content returned by #link(\"/docs/reference/introspection/query/\")[query] or provided by a #link(\"/docs/reference/styling/#show-rules\")[show rule], for other content it will be `none`. The resulting location can be used with #link(\"/docs/reference/introspection/counter/\")[counters], #link(\"/docs/reference/introspection/state/\")[state] and #link(\"/docs/reference/introspection/query/\")[queries].\n\n```\nlocation(\n  \n) -> location\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/content.typ", "filename": "content.typ"}
{"text": "= datetime\n\nRepresents a date, a time, or a combination of both.\n\nCan be created by either specifying a custom datetime using this type's constructor function or getting the current date with #link(\"/docs/reference/foundations/datetime/#definitions-today\")[datetime.today].\n\n== Example\n\n```typst\n#let date = datetime(\n  year: 2020,\n  month: 10,\n  day: 4,\n)\n\n#date.display() \\\n#date.display(\n  \"y:[year repr:last_two]\"\n)\n\n#let time = datetime(\n  hour: 18,\n  minute: 2,\n  second: 23,\n)\n\n#time.display() \\\n#time.display(\n  \"h:[hour repr:12][period]\"\n)\n```\n\n== Datetime and Duration\n\nYou can get a #link(\"/docs/reference/foundations/duration/\")[duration] by subtracting two datetime:\n\n```typst\n#let first-of-march = datetime(day: 1, month: 3, year: 2024)\n#let first-of-jan = datetime(day: 1, month: 1, year: 2024)\n#let distance = first-of-march - first-of-jan\n#distance.hours()\n```\n\nYou can also add/subtract a datetime and a duration to retrieve a new, offset datetime:\n\n```typst\n#let date = datetime(day: 1, month: 3, year: 2024)\n#let two-days = duration(days: 2)\n#let two-days-earlier = date - two-days\n#let two-days-later = date + two-days\n\n#date.display() \\\n#two-days-earlier.display() \\\n#two-days-later.display()\n```\n\n== Format\n\nYou can specify a customized formatting using the #link(\"/docs/reference/foundations/datetime/#definitions-display\")[display] method. The format of a datetime is specified by providing _components_ with a specified number of _modifiers_. A component represents a certain part of the datetime that you want to display, and with the help of modifiers you can define how you want to display that component. In order to display a component, you wrap the name of the component in square brackets (e.g. `[year]` will display the year). In order to add modifiers, you add a space after the component name followed by the name of the modifier, a colon and the value of the modifier (e.g. `[month repr:short]` will display the short representation of the month).\n\nThe possible combination of components and their respective modifiers is as follows:\n\n- `year`: Displays the year of the datetime. padding: Can be either zero, space or none. Specifies how the year is padded. repr Can be either full in which case the full year is displayed or last_two in which case only the last two digits are displayed. sign: Can be either automatic or mandatory. Specifies when the sign should be displayed.\n- `month`: Displays the month of the datetime. padding: Can be either zero, space or none. Specifies how the month is padded. repr: Can be either numerical, long or short. Specifies if the month should be displayed as a number or a word. Unfortunately, when choosing the word representation, it can currently only display the English version. In the future, it is planned to support localization.\n- `day`: Displays the day of the datetime. padding: Can be either zero, space or none. Specifies how the day is padded.\n- `week_number`: Displays the week number of the datetime. padding: Can be either zero, space or none. Specifies how the week number is padded. repr: Can be either ISO, sunday or monday. In the case of ISO, week numbers are between 1 and 53, while the other ones are between 0 and 53.\n- `weekday`: Displays the weekday of the date. repr Can be either long, short, sunday or monday. In the case of long and short, the corresponding English name will be displayed (same as for the month, other languages are currently not supported). In the case of sunday and monday, the numerical value will be displayed (assuming Sunday and Monday as the first day of the week, respectively). one_indexed: Can be either true or false. Defines whether the numerical representation of the week starts with 0 or 1.\n- `hour`: Displays the hour of the date. padding: Can be either zero, space or none. Specifies how the hour is padded. repr: Can be either 24 or 12. Changes whether the hour is displayed in the 24-hour or 12-hour format.\n- `period`: The AM/PM part of the hour case: Can be lower to display it in lower case and upper to display it in upper case.\n- `minute`: Displays the minute of the date. padding: Can be either zero, space or none. Specifies how the minute is padded.\n- `second`: Displays the second of the date. padding: Can be either zero, space or none. Specifies how the second is padded.\n\nKeep in mind that not always all components can be used. For example, if you create a new datetime with `datetime(year: 2023, month: 10, day: 13)`, it will be stored as a plain date internally, meaning that you cannot use components such as `hour` or `minute`, which would only work on datetimes that have a specified time.\n\n== Constructor\n\nCreates a new datetime.\n\nYou can specify the #link(\"/docs/reference/foundations/datetime/\")[datetime] using a year, month, day, hour, minute, and second.\n\n_Note_: Depending on which components of the datetime you specify, Typst will store it in one of the following three ways:\n\n- If you specify year, month and day, Typst will store just a date.\n- If you specify hour, minute and second, Typst will store just a time.\n- If you specify all of year, month, day, hour, minute and second, Typst will store a full datetime.\n\nDepending on how it is stored, the #link(\"/docs/reference/foundations/datetime/#definitions-display\")[display] method will choose a different formatting by default.\n\n```\ndatetime(\n  year: int,\n  month: int,\n  day: int,\n  hour: int,\n  minute: int,\n  second: int\n) -> datetime\n```\n\n```typst\n#datetime(\n  year: 2012,\n  month: 8,\n  day: 3,\n).display()\n```\n\n==== `year`: int\n\nThe year of the datetime.\n\n==== `month`: int\n\nThe month of the datetime.\n\n==== `day`: int\n\nThe day of the datetime.\n\n==== `hour`: int\n\nThe hour of the datetime.\n\n==== `minute`: int\n\nThe minute of the datetime.\n\n==== `second`: int\n\nThe second of the datetime.\n\n== Definitions\n\n=== `today`\n\nReturns the current date.\n\n```\ntoday(\n  offset: auto | int\n) -> datetime\n```\n\n```typst\nToday's date is\n#datetime.today().display().\n```\n\n==== `offset`: auto | int\n\nAn offset to apply to the current UTC date. If set to `auto`, the offset will be the local offset.\n\nDefault: `auto`\n\n=== `display`\n\nDisplays the datetime in a specified format.\n\nDepending on whether you have defined just a date, a time or both, the default format will be different. If you specified a date, it will be `[year]-[month]-[day]`. If you specified a time, it will be `[hour]:[minute]:[second]`. In the case of a datetime, it will be `[year]-[month]-[day] [hour]:[minute]:[second]`.\n\nSee the #link(\"/docs/reference/foundations/datetime/#format\")[format syntax] for more information.\n\n```\ndisplay(\n  auto: auto | str\n) -> str\n```\n\n==== `pattern`: auto | str (Positional)\n\nThe format used to display the datetime.\n\nDefault: `auto`\n\n=== `year`\n\nThe year if it was specified, or `none` for times without a date.\n\n```\nyear(\n  \n) -> int\n```\n\n=== `month`\n\nThe month if it was specified, or `none` for times without a date.\n\n```\nmonth(\n  \n) -> int\n```\n\n=== `weekday`\n\nThe weekday (counting Monday as 1) or `none` for times without a date.\n\n```\nweekday(\n  \n) -> int\n```\n\n=== `day`\n\nThe day if it was specified, or `none` for times without a date.\n\n```\nday(\n  \n) -> int\n```\n\n=== `hour`\n\nThe hour if it was specified, or `none` for dates without a time.\n\n```\nhour(\n  \n) -> int\n```\n\n=== `minute`\n\nThe minute if it was specified, or `none` for dates without a time.\n\n```\nminute(\n  \n) -> int\n```\n\n=== `second`\n\nThe second if it was specified, or `none` for dates without a time.\n\n```\nsecond(\n  \n) -> int\n```\n\n=== `ordinal`\n\nThe ordinal (day of the year), or `none` for times without a date.\n\n```\nordinal(\n  \n) -> int\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/datetime.typ", "filename": "datetime.typ"}
{"text": "= decimal\n\nA fixed-point decimal number type.\n\nThis type should be used for precise arithmetic operations on numbers represented in base 10. A typical use case is representing currency.\n\n== Example\n\n```typst\nDecimal: #(decimal(\"0.1\") + decimal(\"0.2\")) \\\nFloat: #(0.1 + 0.2)\n```\n\n== Construction and casts\n\nTo create a decimal number, use the `decimal(string)` constructor, such as in `decimal(\"3.141592653\")` *(note the double quotes!)*. This constructor preserves all given fractional digits, provided they are representable as per the limits specified below (otherwise, an error is raised).\n\nYou can also convert any #link(\"/docs/reference/foundations/int/\")[integer] to a decimal with the `decimal(int)` constructor, e.g. `decimal(59)`. However, note that constructing a decimal from a #link(\"/docs/reference/foundations/float/\")[floating-point number], while supported, *is an imprecise conversion and therefore discouraged.* A warning will be raised if Typst detects that there was an accidental `float` to `decimal` cast through its constructor, e.g. if writing `decimal(3.14)` (note the lack of double quotes, indicating this is an accidental `float` cast and therefore imprecise). It is recommended to use strings for constant decimal values instead (e.g. `decimal(\"3.14\")`).\n\nThe precision of a `float` to `decimal` cast can be slightly improved by rounding the result to 15 digits with #link(\"/docs/reference/foundations/calc/#functions-round\")[calc.round], but there are still no precision guarantees for that kind of conversion.\n\n== Operations\n\nBasic arithmetic operations are supported on two decimals and on pairs of decimals and integers.\n\nBuilt-in operations between `float` and `decimal` are not supported in order to guard against accidental loss of precision. They will raise an error instead.\n\nCertain `calc` functions, such as trigonometric functions and power between two real numbers, are also only supported for `float` (although raising `decimal` to integer exponents is supported). You can opt into potentially imprecise operations with the `float(decimal)` constructor, which casts the `decimal` number into a `float`, allowing for operations without precision guarantees.\n\n== Displaying decimals\n\nTo display a decimal, simply insert the value into the document. To only display a certain number of digits, #link(\"/docs/reference/foundations/calc/#functions-round\")[round] the decimal first. Localized formatting of decimals and other numbers is not yet supported, but planned for the future.\n\nYou can convert decimals to strings using the #link(\"/docs/reference/foundations/str/\")[str] constructor. This way, you can post-process the displayed representation, e.g. to replace the period with a comma (as a stand-in for proper built-in localization to languages that use the comma).\n\n== Precision and limits\n\nA `decimal` number has a limit of 28 to 29 significant base-10 digits. This includes the sum of digits before and after the decimal point. As such, numbers with more fractional digits have a smaller range. The maximum and minimum `decimal` numbers have a value of `79228162514264337593543950335` and `-79228162514264337593543950335` respectively. In contrast with #link(\"/docs/reference/foundations/float/\")[float], this type does not support infinity or NaN, so overflowing or underflowing operations will raise an error.\n\nTypical operations between `decimal` numbers, such as addition, multiplication, and #link(\"/docs/reference/foundations/calc/#functions-pow\")[power] to an integer, will be highly precise due to their fixed-point representation. Note, however, that multiplication and division may not preserve all digits in some edge cases: while they are considered precise, digits past the limits specified above are rounded off and lost, so some loss of precision beyond the maximum representable digits is possible. Note that this behavior can be observed not only when dividing, but also when multiplying by numbers between 0 and 1, as both operations can push a number's fractional digits beyond the limits described above, leading to rounding. When those two operations do not surpass the digit limits, they are fully precise.\n\n== Constructor\n\nConverts a value to a `decimal`.\n\nIt is recommended to use a string to construct the decimal number, or an #link(\"/docs/reference/foundations/int/\")[integer] (if desired). The string must contain a number in the format `\"3.14159\"` (or `\"-3.141519\"` for negative numbers). The fractional digits are fully preserved; if that's not possible due to the limit of significant digits (around 28 to 29) having been reached, an error is raised as the given decimal number wouldn't be representable.\n\nWhile this constructor can be used with #link(\"/docs/reference/foundations/float/\")[floating-point numbers] to cast them to `decimal`, doing so is *discouraged* as *this cast is inherently imprecise.* It is easy to accidentally perform this cast by writing `decimal(1.234)` (note the lack of double quotes), which is why Typst will emit a warning in that case. Please write `decimal(\"1.234\")` instead for that particular case (initialization of a constant decimal). Also note that floats that are NaN or infinite cannot be cast to decimals and will raise an error.\n\n```\ndecimal(\n  bool: bool | int | float | str | decimal\n) -> decimal\n```\n\n```typst\n#decimal(\"1.222222222222222\")\n```\n\n==== `value`: bool | int | float | str | decimal (Required, Positional)\n\nThe value that should be converted to a decimal.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/decimal.typ", "filename": "decimal.typ"}
{"text": "= dictionary\n\nA map from string keys to values.\n\nYou can construct a dictionary by enclosing comma-separated `key: value` pairs in parentheses. The values do not have to be of the same type. Since empty parentheses already yield an empty array, you have to use the special `(:)` syntax to create an empty dictionary.\n\nA dictionary is conceptually similar to an array, but it is indexed by strings instead of integers. You can access and create dictionary entries with the `.at()` method. If you know the key statically, you can alternatively use #link(\"/docs/reference/scripting/#fields\")[field access notation] (`.key`) to access the value. Dictionaries can be added with the `+` operator and #link(\"/docs/reference/scripting/#blocks\")[joined together]. To check whether a key is present in the dictionary, use the `in` keyword.\n\nYou can iterate over the pairs in a dictionary using a #link(\"/docs/reference/scripting/#loops\")[for loop]. This will iterate in the order the pairs were inserted / declared.\n\n== Example\n\n```typst\n#let dict = (\n  name: \"Typst\",\n  born: 2019,\n)\n\n#dict.name \\\n#(dict.launch = 20)\n#dict.len() \\\n#dict.keys() \\\n#dict.values() \\\n#dict.at(\"born\") \\\n#dict.insert(\"city\", \"Berlin \")\n#(\"name\" in dict)\n```\n\n== Constructor\n\nConverts a value into a dictionary.\n\nNote that this function is only intended for conversion of a dictionary-like value to a dictionary, not for creation of a dictionary from individual pairs. Use the dictionary syntax `(key: value)` instead.\n\n```\ndictionary(\n  module: module\n) -> dictionary\n```\n\n```typst\n#dictionary(sys).at(\"version\")\n```\n\n==== `value`: module (Required, Positional)\n\nThe value that should be converted to a dictionary.\n\n== Definitions\n\n=== `len`\n\nThe number of pairs in the dictionary.\n\n```\nlen(\n  \n) -> int\n```\n\n=== `at`\n\nReturns the value associated with the specified key in the dictionary. May be used on the left-hand side of an assignment if the key is already present in the dictionary. Returns the default value if the key is not part of the dictionary or fails with an error if no default value was specified.\n\n```\nat(\n  str: str,\n  default: any\n) -> str\n```\n\n==== `key`: str (Required, Positional)\n\nThe key at which to retrieve the item.\n\n==== `default`: any\n\nA default value to return if the key is not part of the dictionary.\n\n=== `insert`\n\nInserts a new pair into the dictionary. If the dictionary already contains this key, the value is updated.\n\n```\ninsert(\n  str: str,\n  any\n) -> str\n```\n\n==== `key`: str (Required, Positional)\n\nThe key of the pair that should be inserted.\n\n==== `value`: any (Required, Positional)\n\nThe value of the pair that should be inserted.\n\n=== `remove`\n\nRemoves a pair from the dictionary by key and return the value.\n\n```\nremove(\n  str: str,\n  default: any\n) -> str\n```\n\n==== `key`: str (Required, Positional)\n\nThe key of the pair to remove.\n\n==== `default`: any\n\nA default value to return if the key does not exist.\n\n=== `keys`\n\nReturns the keys of the dictionary as an array in insertion order.\n\n```\nkeys(\n  \n) -> array\n```\n\n=== `values`\n\nReturns the values of the dictionary as an array in insertion order.\n\n```\nvalues(\n  \n) -> array\n```\n\n=== `pairs`\n\nReturns the keys and values of the dictionary as an array of pairs. Each pair is represented as an array of length two.\n\n```\npairs(\n  \n) -> array\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/dictionary.typ", "filename": "dictionary.typ"}
{"text": "= duration\n\nRepresents a positive or negative span of time.\n\n== Constructor\n\nCreates a new duration.\n\nYou can specify the #link(\"/docs/reference/foundations/duration/\")[duration] using weeks, days, hours, minutes and seconds. You can also get a duration by subtracting two #link(\"/docs/reference/foundations/datetime/\")[datetimes].\n\n```\nduration(\n  seconds: int,\n  minutes: int,\n  hours: int,\n  days: int,\n  weeks: int\n) -> duration\n```\n\n```typst\n#duration(\n  days: 3,\n  hours: 12,\n).hours()\n```\n\n==== `seconds`: int\n\nThe number of seconds.\n\nDefault: `0`\n\n==== `minutes`: int\n\nThe number of minutes.\n\nDefault: `0`\n\n==== `hours`: int\n\nThe number of hours.\n\nDefault: `0`\n\n==== `days`: int\n\nThe number of days.\n\nDefault: `0`\n\n==== `weeks`: int\n\nThe number of weeks.\n\nDefault: `0`\n\n== Definitions\n\n=== `seconds`\n\nThe duration expressed in seconds.\n\nThis function returns the total duration represented in seconds as a floating-point number rather than the second component of the duration.\n\n```\nseconds(\n  \n) -> float\n```\n\n=== `minutes`\n\nThe duration expressed in minutes.\n\nThis function returns the total duration represented in minutes as a floating-point number rather than the second component of the duration.\n\n```\nminutes(\n  \n) -> float\n```\n\n=== `hours`\n\nThe duration expressed in hours.\n\nThis function returns the total duration represented in hours as a floating-point number rather than the second component of the duration.\n\n```\nhours(\n  \n) -> float\n```\n\n=== `days`\n\nThe duration expressed in days.\n\nThis function returns the total duration represented in days as a floating-point number rather than the second component of the duration.\n\n```\ndays(\n  \n) -> float\n```\n\n=== `weeks`\n\nThe duration expressed in weeks.\n\nThis function returns the total duration represented in weeks as a floating-point number rather than the second component of the duration.\n\n```\nweeks(\n  \n) -> float\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/duration.typ", "filename": "duration.typ"}
{"text": "= eval\n\nEvaluates a string as Typst code.\n\nThis function should only be used as a last resort.\n\n== Example\n\n```typst\n#eval(\"1 + 1\") \\\n#eval(\"(1, 2, 3, 4)\").len() \\\n#eval(\"*Markup!*\", mode: \"markup\") \\\n```\n\n== Parameters\n\n```\neval(\n  str: str,\n  mode: str,\n  scope: dictionary\n) -> dictionary\n```\n\n=== `source`: str (Required, Positional)\n\nA string of Typst code to evaluate.\n\n=== `mode`: str\n\nThe #link(\"/docs/reference/syntax/#modes\")[syntactical mode] in which the string is parsed.\n\nDefault: `\"code\"`\n\n*Example:*\n```typst\n#eval(\"= Heading\", mode: \"markup\")\n#eval(\"1_2^3\", mode: \"math\")\n```\n\n=== `scope`: dictionary\n\nA scope of definitions that are made available.\n\nDefault: `(:)`\n\n*Example:*\n```typst\n#eval(\"x + 1\", scope: (x: 2)) \\\n#eval(\n  \"abc/xyz\",\n  mode: \"math\",\n  scope: (\n    abc: $a + b + c$,\n    xyz: $x + y + z$,\n  ),\n)\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/eval.typ", "filename": "eval.typ"}
{"text": "= float\n\nA floating-point number.\n\nA limited-precision representation of a real number. Typst uses 64 bits to store floats. Wherever a float is expected, you can also pass an #link(\"/docs/reference/foundations/int/\")[integer].\n\nYou can convert a value to a float with this type's constructor.\n\nNaN and positive infinity are available as `float.nan` and `float.inf` respectively.\n\n== Example\n\n```typst\n#3.14 \\\n#1e4 \\\n#(10 / 4)\n```\n\n== Constructor\n\nConverts a value to a float.\n\n- Booleans are converted to `0.0` or `1.0`.\n- Integers are converted to the closest 64-bit float. For integers with absolute value less than `calc.pow(2, 53)`, this conversion is exact.\n- Ratios are divided by 100%.\n- Strings are parsed in base 10 to the closest 64-bit float. Exponential notation is supported.\n\n```\nfloat(\n  bool: bool | int | float | ratio | str | decimal\n) -> float\n```\n\n```typst\n#float(false) \\\n#float(true) \\\n#float(4) \\\n#float(40%) \\\n#float(\"2.7\") \\\n#float(\"1e5\")\n```\n\n==== `value`: bool | int | float | ratio | str | decimal (Required, Positional)\n\nThe value that should be converted to a float.\n\n== Definitions\n\n=== `is-nan`\n\nChecks if a float is not a number.\n\nIn IEEE 754, more than one bit pattern represents a NaN. This function returns `true` if the float is any of those bit patterns.\n\n```\nis-nan(\n  \n) -> bool\n```\n\n```typst\n#float.is-nan(0) \\\n#float.is-nan(1) \\\n#float.is-nan(float.nan)\n```\n\n=== `is-infinite`\n\nChecks if a float is infinite.\n\nFloats can represent positive infinity and negative infinity. This function returns `true` if the float is an infinity.\n\n```\nis-infinite(\n  \n) -> bool\n```\n\n```typst\n#float.is-infinite(0) \\\n#float.is-infinite(1) \\\n#float.is-infinite(float.inf)\n```\n\n=== `signum`\n\nCalculates the sign of a floating point number.\n\n- If the number is positive (including `+0.0`), returns `1.0`.\n- If the number is negative (including `-0.0`), returns `-1.0`.\n- If the number is NaN, returns `float.nan`.\n\n```\nsignum(\n  \n) -> float\n```\n\n```typst\n#(5.0).signum() \\\n#(-5.0).signum() \\\n#(0.0).signum() \\\n#float.nan.signum()\n```\n\n=== `from-bytes`\n\nInterprets bytes as a float.\n\n```\nfrom-bytes(\n  bytes: bytes,\n  endian: str\n) -> float\n```\n\n```typst\n#float.from-bytes(bytes((0, 0, 0, 0, 0, 0, 240, 63))) \\\n#float.from-bytes(bytes((63, 240, 0, 0, 0, 0, 0, 0)), endian: \"big\")\n```\n\n==== `bytes`: bytes (Required, Positional)\n\nThe bytes that should be converted to a float.\n\nMust have a length of either 4 or 8. The bytes are then interpreted in #link(\"https://en.wikipedia.org/wiki/IEEE_754\")[IEEE 754]'s binary32 (single-precision) or binary64 (double-precision) format depending on the length of the bytes.\n\n==== `endian`: str\n\nThe endianness of the conversion.\n\nDefault: `\"little\"`\n\n=== `to-bytes`\n\nConverts a float to bytes.\n\n```\nto-bytes(\n  endian: str,\n  size: int\n) -> bytes\n```\n\n```typst\n#array(1.0.to-bytes(endian: \"big\")) \\\n#array(1.0.to-bytes())\n```\n\n==== `endian`: str\n\nThe endianness of the conversion.\n\nDefault: `\"little\"`\n\n==== `size`: int\n\nThe size of the resulting bytes.\n\nThis must be either 4 or 8. The call will return the representation of this float in either #link(\"https://en.wikipedia.org/wiki/IEEE_754\")[IEEE 754]'s binary32 (single-precision) or binary64 (double-precision) format depending on the provided size.\n\nDefault: `8`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/float.typ", "filename": "float.typ"}
{"text": "= function\n\nA mapping from argument values to a return value.\n\nYou can call a function by writing a comma-separated list of function _arguments_ enclosed in parentheses directly after the function name. Additionally, you can pass any number of trailing content blocks arguments to a function _after_ the normal argument list. If the normal argument list would become empty, it can be omitted. Typst supports positional and named arguments. The former are identified by position and type, while the latter are written as `name: value`.\n\nWithin math mode, function calls have special behaviour. See the #link(\"/docs/reference/math/\")[math documentation] for more details.\n\n== Example\n\n```typst\n// Call a function.\n#list([A], [B])\n\n// Named arguments and trailing\n// content blocks.\n#enum(start: 2)[A][B]\n\n// Version without parentheses.\n#list[A][B]\n```\n\nFunctions are a fundamental building block of Typst. Typst provides functions for a variety of typesetting tasks. Moreover, the markup you write is backed by functions and all styling happens through functions. This reference lists all available functions and how you can use them. Please also refer to the documentation about #link(\"/docs/reference/styling/#set-rules\")[set] and #link(\"/docs/reference/styling/#show-rules\")[show] rules to learn about additional ways you can work with functions in Typst.\n\n== Element functions\n\nSome functions are associated with _elements_ like #link(\"/docs/reference/model/heading/\")[headings] or #link(\"/docs/reference/model/table/\")[tables]. When called, these create an element of their respective kind. In contrast to normal functions, they can further be used in #link(\"/docs/reference/styling/#set-rules\")[set rules], #link(\"/docs/reference/styling/#show-rules\")[show rules], and #link(\"/docs/reference/foundations/selector/\")[selectors].\n\n== Function scopes\n\nFunctions can hold related definitions in their own scope, similar to a #link(\"/docs/reference/scripting/#modules\")[module]. Examples of this are #link(\"/docs/reference/foundations/assert/#definitions-eq\")[assert.eq] or #link(\"/docs/reference/model/list/#definitions-item\")[list.item]. However, this feature is currently only available for built-in functions.\n\n== Defining functions\n\nYou can define your own function with a #link(\"/docs/reference/scripting/#bindings\")[let binding] that has a parameter list after the binding's name. The parameter list can contain mandatory positional parameters, named parameters with default values and #link(\"/docs/reference/foundations/arguments/\")[argument sinks].\n\nThe right-hand side of a function binding is the function body, which can be a block or any other expression. It defines the function's return value and can depend on the parameters. If the function body is a #link(\"/docs/reference/scripting/#blocks\")[code block], the return value is the result of joining the values of each expression in the block.\n\nWithin a function body, the `return` keyword can be used to exit early and optionally specify a return value. If no explicit return value is given, the body evaluates to the result of joining all expressions preceding the `return`.\n\nFunctions that don't return any meaningful value return #link(\"/docs/reference/foundations/none/\")[none] instead. The return type of such functions is not explicitly specified in the documentation. (An example of this is #link(\"/docs/reference/foundations/array/#definitions-push\")[array.push]).\n\n```typst\n#let alert(body, fill: red) = {\n  set text(white)\n  set align(center)\n  rect(\n    fill: fill,\n    inset: 8pt,\n    radius: 4pt,\n    [*Warning:\\ #body*],\n  )\n}\n\n#alert[\n  Danger is imminent!\n]\n\n#alert(fill: blue)[\n  KEEP OFF TRACKS\n]\n```\n\n== Importing functions\n\nFunctions can be imported from one file (#link(\"/docs/reference/scripting/#modules\")[module]) into another using `import`. For example, assume that we have defined the `alert` function from the previous example in a file called `foo.typ`. We can import it into another file by writing `import \"foo.typ\": alert`.\n\n== Unnamed functions\n\nYou can also created an unnamed function without creating a binding by specifying a parameter list followed by `=>` and the function body. If your function has just one parameter, the parentheses around the parameter list are optional. Unnamed functions are mainly useful for show rules, but also for settable properties that take functions like the page function's #link(\"/docs/reference/layout/page/#parameters-footer\")[footer] property.\n\n```typst\n#show \"once?\": it => [#it #it]\nonce?\n```\n\n== Note on function purity\n\nIn Typst, all functions are _pure._ This means that for the same arguments, they always return the same result. They cannot \"remember\" things to produce another value when they are called a second time.\n\nThe only exception are built-in methods like #link(\"/docs/reference/foundations/array/#definitions-push\")[array.push(value)]. These can modify the values they are called on.\n\n== Definitions\n\n=== `with`\n\nReturns a new function that has the given arguments pre-applied.\n\n```\nwith(\n  ..: any\n) -> function\n```\n\n==== `arguments`: any (Required, Positional, Variadic)\n\nThe arguments to apply to the function.\n\n=== `where`\n\nReturns a selector that filters for elements belonging to this function whose fields have the values of the given arguments.\n\n```\nwhere(\n  ..: any\n) -> selector\n```\n\n```typst\n#show heading.where(level: 2): set text(blue)\n= Section\n== Subsection\n=== Sub-subsection\n```\n\n==== `fields`: any (Required, Positional, Variadic)\n\nThe fields to filter for.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/function.typ", "filename": "function.typ"}
{"text": "= int\n\nA whole number.\n\nThe number can be negative, zero, or positive. As Typst uses 64 bits to store integers, integers cannot be smaller than `-9223372036854775808` or larger than `9223372036854775807`. Integer literals are always positive, so a negative integer such as `-1` is semantically the negation `-` of the positive literal `1`. A positive integer greater than the maximum value and a negative integer less than or equal to the minimum value cannot be represented as an integer literal, and are instead parsed as a `float`. The minimum integer value can still be obtained through integer arithmetic.\n\nThe number can also be specified as hexadecimal, octal, or binary by starting it with a zero followed by either `x`, `o`, or `b`.\n\nYou can convert a value to an integer with this type's constructor.\n\n== Example\n\n```typst\n#(1 + 2) \\\n#(2 - 5) \\\n#(3 + 4 < 8)\n\n#0xff \\\n#0o10 \\\n#0b1001\n```\n\n== Constructor\n\nConverts a value to an integer. Raises an error if there is an attempt to produce an integer larger than the maximum 64-bit signed integer or smaller than the minimum 64-bit signed integer.\n\n- Booleans are converted to `0` or `1`.\n- Floats and decimals are truncated to the next 64-bit integer.\n- Strings are parsed in base 10.\n\n```\nint(\n  bool: bool | int | float | str | decimal\n) -> int\n```\n\n```typst\n#int(false) \\\n#int(true) \\\n#int(2.7) \\\n#int(decimal(\"3.8\")) \\\n#(int(\"27\") + int(\"4\"))\n```\n\n==== `value`: bool | int | float | str | decimal (Required, Positional)\n\nThe value that should be converted to an integer.\n\n== Definitions\n\n=== `signum`\n\nCalculates the sign of an integer.\n\n- If the number is positive, returns `1`.\n- If the number is negative, returns `-1`.\n- If the number is zero, returns `0`.\n\n```\nsignum(\n  \n) -> int\n```\n\n```typst\n#(5).signum() \\\n#(-5).signum() \\\n#(0).signum()\n```\n\n=== `bit-not`\n\nCalculates the bitwise NOT of an integer.\n\nFor the purposes of this function, the operand is treated as a signed integer of 64 bits.\n\n```\nbit-not(\n  \n) -> int\n```\n\n```typst\n#4.bit-not() \\\n#(-1).bit-not()\n```\n\n=== `bit-and`\n\nCalculates the bitwise AND between two integers.\n\nFor the purposes of this function, the operands are treated as signed integers of 64 bits.\n\n```\nbit-and(\n  int: int\n) -> int\n```\n\n```typst\n#128.bit-and(192)\n```\n\n==== `rhs`: int (Required, Positional)\n\nThe right-hand operand of the bitwise AND.\n\n=== `bit-or`\n\nCalculates the bitwise OR between two integers.\n\nFor the purposes of this function, the operands are treated as signed integers of 64 bits.\n\n```\nbit-or(\n  int: int\n) -> int\n```\n\n```typst\n#64.bit-or(32)\n```\n\n==== `rhs`: int (Required, Positional)\n\nThe right-hand operand of the bitwise OR.\n\n=== `bit-xor`\n\nCalculates the bitwise XOR between two integers.\n\nFor the purposes of this function, the operands are treated as signed integers of 64 bits.\n\n```\nbit-xor(\n  int: int\n) -> int\n```\n\n```typst\n#64.bit-xor(96)\n```\n\n==== `rhs`: int (Required, Positional)\n\nThe right-hand operand of the bitwise XOR.\n\n=== `bit-lshift`\n\nShifts the operand's bits to the left by the specified amount.\n\nFor the purposes of this function, the operand is treated as a signed integer of 64 bits. An error will occur if the result is too large to fit in a 64-bit integer.\n\n```\nbit-lshift(\n  int: int\n) -> int\n```\n\n```typst\n#33.bit-lshift(2) \\\n#(-1).bit-lshift(3)\n```\n\n==== `shift`: int (Required, Positional)\n\nThe amount of bits to shift. Must not be negative.\n\n=== `bit-rshift`\n\nShifts the operand's bits to the right by the specified amount. Performs an arithmetic shift by default (extends the sign bit to the left, such that negative numbers stay negative), but that can be changed by the `logical` parameter.\n\nFor the purposes of this function, the operand is treated as a signed integer of 64 bits.\n\n```\nbit-rshift(\n  int: int,\n  logical: bool\n) -> int\n```\n\n```typst\n#64.bit-rshift(2) \\\n#(-8).bit-rshift(2) \\\n#(-8).bit-rshift(2, logical: true)\n```\n\n==== `shift`: int (Required, Positional)\n\nThe amount of bits to shift. Must not be negative.\n\nShifts larger than 63 are allowed and will cause the return value to saturate. For non-negative numbers, the return value saturates at `0`, while, for negative numbers, it saturates at `-1` if `logical` is set to `false`, or `0` if it is `true`. This behavior is consistent with just applying this operation multiple times. Therefore, the shift will always succeed.\n\n==== `logical`: bool\n\nToggles whether a logical (unsigned) right shift should be performed instead of arithmetic right shift. If this is `true`, negative operands will not preserve their sign bit, and bits which appear to the left after the shift will be `0`. This parameter has no effect on non-negative operands.\n\nDefault: `false`\n\n=== `from-bytes`\n\nConverts bytes to an integer.\n\n```\nfrom-bytes(\n  bytes: bytes,\n  endian: str,\n  signed: bool\n) -> int\n```\n\n```typst\n#int.from-bytes(bytes((0, 0, 0, 0, 0, 0, 0, 1))) \\\n#int.from-bytes(bytes((1, 0, 0, 0, 0, 0, 0, 0)), endian: \"big\")\n```\n\n==== `bytes`: bytes (Required, Positional)\n\nThe bytes that should be converted to an integer.\n\nMust be of length at most 8 so that the result fits into a 64-bit signed integer.\n\n==== `endian`: str\n\nThe endianness of the conversion.\n\nDefault: `\"little\"`\n\n==== `signed`: bool\n\nWhether the bytes should be treated as a signed integer. If this is `true` and the most significant bit is set, the resulting number will negative.\n\nDefault: `true`\n\n=== `to-bytes`\n\nConverts an integer to bytes.\n\n```\nto-bytes(\n  endian: str,\n  size: int\n) -> bytes\n```\n\n```typst\n#array(10000.to-bytes(endian: \"big\")) \\\n#array(10000.to-bytes(size: 4))\n```\n\n==== `endian`: str\n\nThe endianness of the conversion.\n\nDefault: `\"little\"`\n\n==== `size`: int\n\nThe size in bytes of the resulting bytes (must be at least zero). If the integer is too large to fit in the specified size, the conversion will truncate the remaining bytes based on the endianness. To keep the same resulting value, if the endianness is big-endian, the truncation will happen at the rightmost bytes. Otherwise, if the endianness is little-endian, the truncation will happen at the leftmost bytes.\n\nBe aware that if the integer is negative and the size is not enough to make the number fit, when passing the resulting bytes to `int.from-bytes`, the resulting number might be positive, as the most significant bit might not be set to 1.\n\nDefault: `8`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/int.typ", "filename": "int.typ"}
{"text": "= label\n\nA label for an element.\n\nInserting a label into content attaches it to the closest preceding element that is not a space. The preceding element must be in the same scope as the label, which means that `Hello #[<label>]`, for instance, wouldn't work.\n\nA labelled element can be #link(\"/docs/reference/model/ref/\")[referenced], #link(\"/docs/reference/introspection/query/\")[queried] for, and #link(\"/docs/reference/styling/\")[styled] through its label.\n\nOnce constructed, you can get the name of a label using #link(\"/docs/reference/foundations/str/#constructor\")[str].\n\n== Example\n\n```typst\n#show <a>: set text(blue)\n#show label(\"b\"): set text(red)\n\n= Heading <a>\n*Strong* #label(\"b\")\n```\n\n== Syntax\n\nThis function also has dedicated syntax: You can create a label by enclosing its name in angle brackets. This works both in markup and code. A label's name can contain letters, numbers, `_`, `-`, `:`, and `.`.\n\nNote that there is a syntactical difference when using the dedicated syntax for this function. In the code below, the `<a>` terminates the heading and thus attaches to the heading itself, whereas the `#label(\"b\")` is part of the heading and thus attaches to the heading's text.\n\nCurrently, labels can only be attached to elements in markup mode, not in code mode. This might change in the future.\n\n== Constructor\n\nCreates a label from a string.\n\n```\nlabel(\n  str: str\n) -> label\n```\n\n==== `name`: str (Required, Positional)\n\nThe name of the label.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/label.typ", "filename": "label.typ"}
{"text": "= module\n\nAn module of definitions.\n\nA module\n\n- be built-in\n- stem from a #link(\"/docs/reference/scripting/#modules\")[file import]\n- stem from a #link(\"/docs/reference/scripting/#packages\")[package import] (and thus indirectly its entrypoint file)\n- result from a call to the #link(\"/docs/reference/foundations/plugin/\")[plugin] function\n\nYou can access definitions from the module using #link(\"/docs/reference/scripting/#fields\")[field access notation] and interact with it using the #link(\"/docs/reference/scripting/#modules\")[import and include syntaxes]. Alternatively, it is possible to convert a module to a dictionary, and therefore access its contents dynamically, using the #link(\"/docs/reference/foundations/dictionary/#constructor\")[dictionary constructor].\n\n== Example\n\n```typst\n#import \"utils.typ\"\n#utils.add(2, 5)\n\n#import utils: sub\n#sub(1, 4)\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/module.typ", "filename": "module.typ"}
{"text": "= none\n\nA value that indicates the absence of any other value.\n\nThe none type has exactly one value: `none`.\n\nWhen inserted into the document, it is not visible. This is also the value that is produced by empty code blocks. It can be #link(\"/docs/reference/scripting/#blocks\")[joined] with any value, yielding the other value.\n\n== Example\n\n```typst\nNot visible: #none\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/none.typ", "filename": "none.typ"}
{"text": "= panic\n\nFails with an error.\n\nArguments are displayed to the user (not rendered in the document) as strings, converting with `repr` if necessary.\n\n== Example\n\nThe code below produces the error `panicked with: \"this is wrong\"`.\n\n== Parameters\n\n```\npanic(\n  ..: any\n) -> \n```\n\n=== `values`: any (Required, Positional, Variadic)\n\nThe values to panic with and display to the user.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/panic.typ", "filename": "panic.typ"}
{"text": "= plugin\n\nLoads a WebAssembly module.\n\nThe resulting #link(\"/docs/reference/foundations/module/\")[module] will contain one Typst #link(\"/docs/reference/foundations/function/\")[function] for each function export of the loaded WebAssembly module.\n\nTypst WebAssembly plugins need to follow a specific #link(\"/docs/reference/foundations/plugin/#protocol\")[protocol]. To run as a plugin, a program needs to be compiled to a 32-bit shared WebAssembly library. Plugin functions may accept multiple #link(\"/docs/reference/foundations/bytes/\")[byte buffers] as arguments and return a single byte buffer. They should typically be wrapped in idiomatic Typst functions that perform the necessary conversions between native Typst types and bytes.\n\nFor security reasons, plugins run in isolation from your system. This means that printing, reading files, or similar things are not supported.\n\n== Example\n\n```typst\n#let myplugin = plugin(\"hello.wasm\")\n#let concat(a, b) = str(\n  myplugin.concatenate(\n    bytes(a),\n    bytes(b),\n  )\n)\n\n#concat(\"hello\", \"world\")\n```\n\nSince the plugin function returns a module, it can be used with import syntax:\n\n== Purity\n\nPlugin functions *must be pure:* A plugin function call most not have any observable side effects on future plugin calls and given the same arguments, it must always return the same value.\n\nThe reason for this is that Typst functions must be pure (which is quite fundamental to the language design) and, since Typst function can call plugin functions, this requirement is inherited. In particular, if a plugin function is called twice with the same arguments, Typst might cache the results and call your function only once. Moreover, Typst may run multiple instances of your plugin in multiple threads, with no state shared between them.\n\nTypst does not enforce plugin function purity (for efficiency reasons), but calling an impure function will lead to unpredictable and irreproducible results and must be avoided.\n\nThat said, mutable operations _can be_ useful for plugins that require costly runtime initialization. Due to the purity requirement, such initialization cannot be performed through a normal function call. Instead, Typst exposes a #link(\"/docs/reference/foundations/plugin/#definitions-transition\")[plugin transition API], which executes a function call and then creates a derived module with new functions which will observe the side effects produced by the transition call. The original plugin remains unaffected.\n\n== Plugins and Packages\n\nAny Typst code can make use of a plugin simply by including a WebAssembly file and loading it. However, because the byte-based plugin interface is quite low-level, plugins are typically exposed through a package containing the plugin and idiomatic wrapper functions.\n\n== WASI\n\nMany compilers will use the #link(\"https://wasi.dev/\")[WASI ABI] by default or as their only option (e.g. emscripten), which allows printing, reading files, etc. This ABI will not directly work with Typst. You will either need to compile to a different target or #link(\"https://github.com/astrale-sharp/wasm-minimal-protocol/tree/master/crates/wasi-stub\")[stub all functions].\n\n== Protocol\n\nTo be used as a plugin, a WebAssembly module must conform to the following protocol:\n\nA plugin module can export functions to make them callable from Typst. To conform to the protocol, an exported function should:\n\n- Take n 32-bit integer arguments a_1, a_2, ..., a_n (interpreted as lengths, so usize/size_t may be preferable), and return one 32-bit integer.\n- The function should first allocate a buffer buf of length a_1 + a_2 + ... + a_n, and then call wasm_minimal_protocol_write_args_to_buffer(buf.ptr).\n- The a_1 first bytes of the buffer now constitute the first argument, the a_2 next bytes the second argument, and so on.\n- The function can now do its job with the arguments and produce an output buffer. Before returning, it should call wasm_minimal_protocol_send_result_to_host to send its result back to the host.\n- To signal success, the function should return 0.\n- To signal an error, the function should return 1. The written buffer is then interpreted as an UTF-8 encoded error message.\n\nPlugin modules need to import two functions that are provided by the runtime. (Types and functions are described using WAT syntax.)\n\n- (import \"typst_env\" \"wasm_minimal_protocol_write_args_to_buffer\" (func (param i32))) Writes the arguments for the current function into a plugin-allocated buffer. When a plugin function is called, it receives the lengths of its input buffers as arguments. It should then allocate a buffer whose capacity is at least the sum of these lengths. It should then call this function with a ptr to the buffer to fill it with the arguments, one after another.\n- (import \"typst_env\" \"wasm_minimal_protocol_send_result_to_host\" (func (param i32 i32))) Sends the output of the current function to the host (Typst). The first parameter shall be a pointer to a buffer (ptr), while the second is the length of that buffer (len). The memory pointed at by ptr can be freed immediately after this function returns. If the message should be interpreted as an error message, it should be encoded as UTF-8.\n\n== Resources\n\nFor more resources, check out the #link(\"https://github.com/astrale-sharp/wasm-minimal-protocol\")[wasm-minimal-protocol repository]. It contains:\n\n- A list of example plugin implementations and a test runner for these examples\n- Wrappers to help you write your plugin in Rust (Zig wrapper in development)\n- A stubber for WASI\n\n== Parameters\n\n```\nplugin(\n  str: str | bytes\n) -> module\n```\n\n=== `source`: str | bytes (Required, Positional)\n\nA #link(\"/docs/reference/syntax/#paths\")[path] to a WebAssembly file or raw WebAssembly bytes.\n\n== Definitions\n\n=== `transition`\n\nCalls a plugin function that has side effects and returns a new module with plugin functions that are guaranteed to have observed the results of the mutable call.\n\nNote that calling an impure function through a normal function call (without use of the transition API) is forbidden and leads to unpredictable behaviour. Read the #link(\"/docs/reference/foundations/plugin/#purity\")[section on purity] for more details.\n\nIn the example below, we load the plugin `hello-mut.wasm` which exports two functions: The `get()` function retrieves a global array as a string. The `add(value)` function adds a value to the global array.\n\nWe call `add` via the transition API. The call `mutated.get()` on the derived module will observe the addition. Meanwhile the original module remains untouched as demonstrated by the `base.get()` call.\n\n_Note:_ Due to limitations in the internal WebAssembly implementation, the transition API can only guarantee to reflect changes in the plugin's memory, not in WebAssembly globals. If your plugin relies on changes to globals being visible after transition, you might want to avoid use of the transition API for now. We hope to lift this limitation in the future.\n\n```\ntransition(\n  function: function,\n  ..: bytes\n) -> module\n```\n\n==== `func`: function (Required, Positional)\n\nThe plugin function to call.\n\n==== `arguments`: bytes (Required, Positional, Variadic)\n\nThe byte buffers to call the function with.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/plugin.typ", "filename": "plugin.typ"}
{"text": "= regex\n\nA regular expression.\n\nCan be used as a #link(\"/docs/reference/styling/#show-rules\")[show rule selector] and with #link(\"/docs/reference/foundations/str/\")[string methods] like `find`, `split`, and `replace`.\n\n#link(\"https://docs.rs/regex/latest/regex/#syntax\")[See here] for a specification of the supported syntax.\n\n== Example\n\n```typst\n// Works with string methods.\n#\"a,b;c\".split(regex(\"[,;]\"))\n\n// Works with show rules.\n#show regex(\"\\d+\"): set text(red)\n\nThe numbers 1 to 10.\n```\n\n== Constructor\n\nCreate a regular expression from a string.\n\n```\nregex(\n  str: str\n) -> regex\n```\n\n==== `regex`: str (Required, Positional)\n\nThe regular expression as a string.\n\nMost regex escape sequences just work because they are not valid Typst escape sequences. To produce regex escape sequences that are also valid in Typst (e.g. `\\\\`), you need to escape twice. Thus, to match a verbatim backslash, you would need to write `regex(\"\\\\\\\\\")`.\n\nIf you need many escape sequences, you can also create a raw element and extract its text to use it for your regular expressions:", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/regex.typ", "filename": "regex.typ"}
{"text": "= repr\n\nReturns the string representation of a value.\n\nWhen inserted into content, most values are displayed as this representation in monospace with syntax-highlighting. The exceptions are `none`, integers, floats, strings, content, and functions.\n\n*Note:* This function is for debugging purposes. Its output should not be considered stable and may change at any time!\n\n== Example\n\n```typst\n#none vs #repr(none) \\\n#\"hello\" vs #repr(\"hello\") \\\n#(1, 2) vs #repr((1, 2)) \\\n#[*Hi*] vs #repr([*Hi*])\n```\n\n== Parameters\n\n```\nrepr(\n  any\n) -> str\n```\n\n=== `value`: any (Required, Positional)\n\nThe value whose string representation to produce.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/repr.typ", "filename": "repr.typ"}
{"text": "= selector\n\nA filter for selecting elements within the document.\n\nYou can construct a selector in the following ways:\n\n- you can use an element #link(\"/docs/reference/foundations/function/\")[function]\n- you can filter for an element function with #link(\"/docs/reference/foundations/function/#definitions-where\")[specific fields]\n- you can use a #link(\"/docs/reference/foundations/str/\")[string] or #link(\"/docs/reference/foundations/regex/\")[regular expression]\n- you can use a #link(\"/docs/reference/foundations/label/\")[<label>]\n- you can use a #link(\"/docs/reference/introspection/location/\")[location]\n- call the #link(\"/docs/reference/foundations/selector/\")[selector] constructor to convert any of the above types into a selector value and use the methods below to refine it\n\nSelectors are used to #link(\"/docs/reference/styling/#show-rules\")[apply styling rules] to elements. You can also use selectors to #link(\"/docs/reference/introspection/query/\")[query] the document for certain types of elements.\n\nFurthermore, you can pass a selector to several of Typst's built-in functions to configure their behaviour. One such example is the #link(\"/docs/reference/model/outline/\")[outline] where it can be used to change which elements are listed within the outline.\n\nMultiple selectors can be combined using the methods shown below. However, not all kinds of selectors are supported in all places, at the moment.\n\n== Example\n\n```typst\n#context query(\n  heading.where(level: 1)\n    .or(heading.where(level: 2))\n)\n\n= This will be found\n== So will this\n=== But this will not.\n```\n\n== Constructor\n\nTurns a value into a selector. The following values are accepted:\n\n- An element function like a `heading` or `figure`.\n- A `<label>`.\n- A more complex selector like `heading.where(level: 1)`.\n\n```\nselector(\n  str: str | regex | label | selector | location | function\n) -> selector\n```\n\n==== `target`: str | regex | label | selector | location | function (Required, Positional)\n\nCan be an element function like a `heading` or `figure`, a `<label>` or a more complex selector like `heading.where(level: 1)`.\n\n== Definitions\n\n=== `or`\n\nSelects all elements that match this or any of the other selectors.\n\n```\nor(\n  ..: str | regex | label | selector | location | function\n) -> selector\n```\n\n==== `others`: str | regex | label | selector | location | function (Required, Positional, Variadic)\n\nThe other selectors to match on.\n\n=== `and`\n\nSelects all elements that match this and all of the other selectors.\n\n```\nand(\n  ..: str | regex | label | selector | location | function\n) -> selector\n```\n\n==== `others`: str | regex | label | selector | location | function (Required, Positional, Variadic)\n\nThe other selectors to match on.\n\n=== `before`\n\nReturns a modified selector that will only match elements that occur before the first match of `end`.\n\n```\nbefore(\n  label: label | selector | location | function,\n  inclusive: bool\n) -> selector\n```\n\n==== `end`: label | selector | location | function (Required, Positional)\n\nThe original selection will end at the first match of `end`.\n\n==== `inclusive`: bool\n\nWhether `end` itself should match or not. This is only relevant if both selectors match the same type of element. Defaults to `true`.\n\nDefault: `true`\n\n=== `after`\n\nReturns a modified selector that will only match elements that occur after the first match of `start`.\n\n```\nafter(\n  label: label | selector | location | function,\n  inclusive: bool\n) -> selector\n```\n\n==== `start`: label | selector | location | function (Required, Positional)\n\nThe original selection will start at the first match of `start`.\n\n==== `inclusive`: bool\n\nWhether `start` itself should match or not. This is only relevant if both selectors match the same type of element. Defaults to `true`.\n\nDefault: `true`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/selector.typ", "filename": "selector.typ"}
{"text": "= str\n\nA sequence of Unicode codepoints.\n\nYou can iterate over the grapheme clusters of the string using a #link(\"/docs/reference/scripting/#loops\")[for loop]. Grapheme clusters are basically characters but keep together things that belong together, e.g. multiple codepoints that together form a flag emoji. Strings can be added with the `+` operator, #link(\"/docs/reference/scripting/#blocks\")[joined together] and multiplied with integers.\n\nTypst provides utility methods for string manipulation. Many of these methods (e.g., `split`, `trim` and `replace`) operate on _patterns:_ A pattern can be either a string or a #link(\"/docs/reference/foundations/regex/\")[regular expression]. This makes the methods quite versatile.\n\nAll lengths and indices are expressed in terms of UTF-8 bytes. Indices are zero-based and negative indices wrap around to the end of the string.\n\nYou can convert a value to a string with this type's constructor.\n\n== Example\n\n```typst\n#\"hello world!\" \\\n#\"\\\"hello\\n  world\\\"!\" \\\n#\"1 2 3\".split() \\\n#\"1,2;3\".split(regex(\"[,;]\")) \\\n#(regex(\"\\d+\") in \"ten euros\") \\\n#(regex(\"\\d+\") in \"10 euros\")\n```\n\n== Escape sequences\n\nJust like in markup, you can escape a few symbols in strings:\n\n- `\\\\` for a backslash\n- `\\\"` for a quote\n- `\\n` for a newline\n- `\\r` for a carriage return\n- `\\t` for a tab\n- `\\u{1f600}` for a hexadecimal Unicode escape sequence\n\n== Constructor\n\nConverts a value to a string.\n\n- Integers are formatted in base 10. This can be overridden with the optional `base` parameter.\n- Floats are formatted in base 10 and never in exponential notation.\n- Negative integers and floats are formatted with the Unicode minus sign (\"−\" U+2212) instead of the ASCII minus sign (\"-\" U+002D).\n- From labels the name is extracted.\n- Bytes are decoded as UTF-8.\n\nIf you wish to convert from and to Unicode code points, see the #link(\"/docs/reference/foundations/str/#definitions-to-unicode\")[to-unicode] and #link(\"/docs/reference/foundations/str/#definitions-from-unicode\")[from-unicode] functions.\n\n```\nstr(\n  int: int | float | str | bytes | label | decimal | version | type,\n  base: int\n) -> str\n```\n\n```typst\n#str(10) \\\n#str(4000, base: 16) \\\n#str(2.7) \\\n#str(1e8) \\\n#str(<intro>)\n```\n\n==== `value`: int | float | str | bytes | label | decimal | version | type (Required, Positional)\n\nThe value that should be converted to a string.\n\n==== `base`: int\n\nThe base (radix) to display integers in, between 2 and 36.\n\nDefault: `10`\n\n== Definitions\n\n=== `len`\n\nThe length of the string in UTF-8 encoded bytes.\n\n```\nlen(\n  \n) -> int\n```\n\n=== `first`\n\nExtracts the first grapheme cluster of the string. Fails with an error if the string is empty.\n\n```\nfirst(\n  \n) -> str\n```\n\n=== `last`\n\nExtracts the last grapheme cluster of the string. Fails with an error if the string is empty.\n\n```\nlast(\n  \n) -> str\n```\n\n=== `at`\n\nExtracts the first grapheme cluster after the specified index. Returns the default value if the index is out of bounds or fails with an error if no default value was specified.\n\n```\nat(\n  int: int,\n  default: any\n) -> int\n```\n\n==== `index`: int (Required, Positional)\n\nThe byte index. If negative, indexes from the back.\n\n==== `default`: any\n\nA default value to return if the index is out of bounds.\n\n=== `slice`\n\nExtracts a substring of the string. Fails with an error if the start or end index is out of bounds.\n\n```\nslice(\n  int: int,\n  none: none | int,\n  count: int\n) -> str\n```\n\n==== `start`: int (Required, Positional)\n\nThe start byte index (inclusive). If negative, indexes from the back.\n\n==== `end`: none | int (Positional)\n\nThe end byte index (exclusive). If omitted, the whole slice until the end of the string is extracted. If negative, indexes from the back.\n\nDefault: `none`\n\n==== `count`: int\n\nThe number of bytes to extract. This is equivalent to passing `start + count` as the `end` position. Mutually exclusive with `end`.\n\n=== `clusters`\n\nReturns the grapheme clusters of the string as an array of substrings.\n\n```\nclusters(\n  \n) -> array\n```\n\n=== `codepoints`\n\nReturns the Unicode codepoints of the string as an array of substrings.\n\n```\ncodepoints(\n  \n) -> array\n```\n\n=== `to-unicode`\n\nConverts a character into its corresponding code point.\n\n```\nto-unicode(\n  str: str\n) -> int\n```\n\n```typst\n#\"a\".to-unicode() \\\n#(\"a\\u{0300}\"\n   .codepoints()\n   .map(str.to-unicode))\n```\n\n==== `character`: str (Required, Positional)\n\nThe character that should be converted.\n\n=== `from-unicode`\n\nConverts a unicode code point into its corresponding string.\n\n```\nfrom-unicode(\n  int: int\n) -> str\n```\n\n```typst\n#str.from-unicode(97)\n```\n\n==== `value`: int (Required, Positional)\n\nThe code point that should be converted.\n\n=== `contains`\n\nWhether the string contains the specified pattern.\n\nThis method also has dedicated syntax: You can write `\"bc\" in \"abcd\"` instead of `\"abcd\".contains(\"bc\")`.\n\n```\ncontains(\n  str: str | regex\n) -> bool\n```\n\n==== `pattern`: str | regex (Required, Positional)\n\nThe pattern to search for.\n\n=== `starts-with`\n\nWhether the string starts with the specified pattern.\n\n```\nstarts-with(\n  str: str | regex\n) -> bool\n```\n\n==== `pattern`: str | regex (Required, Positional)\n\nThe pattern the string might start with.\n\n=== `ends-with`\n\nWhether the string ends with the specified pattern.\n\n```\nends-with(\n  str: str | regex\n) -> bool\n```\n\n==== `pattern`: str | regex (Required, Positional)\n\nThe pattern the string might end with.\n\n=== `find`\n\nSearches for the specified pattern in the string and returns the first match as a string or `none` if there is no match.\n\n```\nfind(\n  str: str | regex\n) -> str\n```\n\n==== `pattern`: str | regex (Required, Positional)\n\nThe pattern to search for.\n\n=== `position`\n\nSearches for the specified pattern in the string and returns the index of the first match as an integer or `none` if there is no match.\n\n```\nposition(\n  str: str | regex\n) -> int\n```\n\n==== `pattern`: str | regex (Required, Positional)\n\nThe pattern to search for.\n\n=== `match`\n\nSearches for the specified pattern in the string and returns a dictionary with details about the first match or `none` if there is no match.\n\nThe returned dictionary has the following keys:\n\n- `start`: The start offset of the match\n- `end`: The end offset of the match\n- `text`: The text that matched.\n- `captures`: An array containing a string for each matched capturing group. The first item of the array contains the first matched capturing, not the whole match! This is empty unless the `pattern` was a regex with capturing groups.\n\n```\nmatch(\n  str: str | regex\n) -> dictionary\n```\n\n==== `pattern`: str | regex (Required, Positional)\n\nThe pattern to search for.\n\n=== `matches`\n\nSearches for the specified pattern in the string and returns an array of dictionaries with details about all matches. For details about the returned dictionaries, see above.\n\n```\nmatches(\n  str: str | regex\n) -> array\n```\n\n==== `pattern`: str | regex (Required, Positional)\n\nThe pattern to search for.\n\n=== `replace`\n\nReplace at most `count` occurrences of the given pattern with a replacement string or function (beginning from the start). If no count is given, all occurrences are replaced.\n\n```\nreplace(\n  str: str | regex,\n  str: str | function,\n  count: int\n) -> str\n```\n\n==== `pattern`: str | regex (Required, Positional)\n\nThe pattern to search for.\n\n==== `replacement`: str | function (Required, Positional)\n\nThe string to replace the matches with or a function that gets a dictionary for each match and can return individual replacement strings.\n\n==== `count`: int\n\nIf given, only the first `count` matches of the pattern are placed.\n\n=== `trim`\n\nRemoves matches of a pattern from one or both sides of the string, once or repeatedly and returns the resulting string.\n\n```\ntrim(\n  none: none | str | regex,\n  at: alignment,\n  repeat: bool\n) -> str\n```\n\n==== `pattern`: none | str | regex (Positional)\n\nThe pattern to search for. If `none`, trims white spaces.\n\nDefault: `none`\n\n==== `at`: alignment\n\nCan be `start` or `end` to only trim the start or end of the string. If omitted, both sides are trimmed.\n\n==== `repeat`: bool\n\nWhether to repeatedly removes matches of the pattern or just once. Defaults to `true`.\n\nDefault: `true`\n\n=== `split`\n\nSplits a string at matches of a specified pattern and returns an array of the resulting parts.\n\nWhen the empty string is used as a separator, it separates every character (i.e., Unicode code point) in the string, along with the beginning and end of the string. In practice, this means that the resulting list of parts will contain the empty string at the start and end of the list.\n\n```\nsplit(\n  none: none | str | regex\n) -> array\n```\n\n==== `pattern`: none | str | regex (Positional)\n\nThe pattern to split at. Defaults to whitespace.\n\nDefault: `none`\n\n=== `rev`\n\nReverse the string.\n\n```\nrev(\n  \n) -> str\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/str.typ", "filename": "str.typ"}
{"text": "= symbol\n\nA Unicode symbol.\n\nTypst defines common symbols so that they can easily be written with standard keyboards. The symbols are defined in modules, from which they can be accessed using #link(\"/docs/reference/scripting/#fields\")[field access notation]:\n\n- General symbols are defined in the #link(\"/docs/reference/symbols/sym/\")[sym module]\n- Emoji are defined in the #link(\"/docs/reference/symbols/emoji/\")[emoji module]\n\nMoreover, you can define custom symbols with this type's constructor function.\n\n```typst\n#sym.arrow.r \\\n#sym.gt.eq.not \\\n$gt.eq.not$ \\\n#emoji.face.halo\n```\n\nMany symbols have different variants, which can be selected by appending the modifiers with dot notation. The order of the modifiers is not relevant. Visit the documentation pages of the symbol modules and click on a symbol to see its available variants.\n\n```typst\n$arrow.l$ \\\n$arrow.r$ \\\n$arrow.t.quad$\n```\n\n== Constructor\n\nCreate a custom symbol with modifiers.\n\n```\nsymbol(\n  ..: str | array\n) -> symbol\n```\n\n```typst\n#let envelope = symbol(\n  \"🖂\",\n  (\"stamped\", \"🖃\"),\n  (\"stamped.pen\", \"🖆\"),\n  (\"lightning\", \"🖄\"),\n  (\"fly\", \"🖅\"),\n)\n\n#envelope\n#envelope.stamped\n#envelope.stamped.pen\n#envelope.lightning\n#envelope.fly\n```\n\n==== `variants`: str | array (Required, Positional, Variadic)\n\nThe variants of the symbol.\n\nCan be a just a string consisting of a single character for the modifierless variant or an array with two strings specifying the modifiers and the symbol. Individual modifiers should be separated by dots. When displaying a symbol, Typst selects the first from the variants that have all attached modifiers and the minimum number of other modifiers.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/symbol.typ", "filename": "symbol.typ"}
{"text": "= System\n\nModule for system interactions.\n\nThis module defines the following items:\n\n- The sys.version constant (of type version) that specifies the currently active Typst compiler version.\n- The sys.inputs dictionary, which makes external inputs available to the project. An input specified in the command line as --input key=value becomes available under sys.inputs.key as \"value\". To include spaces in the value, it may be enclosed with single or double quotes. The value is always of type string. More complex data may be parsed manually using functions like json.decode.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/sys.typ", "filename": "sys.typ"}
{"text": "= target\n\nReturns the current export target.\n\nThis function returns either\n\n- `\"paged\"` (for PDF, PNG, and SVG export), or\n- `\"html\"` (for HTML export).\n\nThe design of this function is not yet finalized and for this reason it is guarded behind the `html` feature. Visit the #link(\"/docs/reference/html/\")[HTML documentation page] for more details.\n\n== When to use it\n\nThis function allows you to format your document properly across both HTML and paged export targets. It should primarily be used in templates and show rules, rather than directly in content. This way, the document's contents can be fully agnostic to the export target and content can be shared between PDF and HTML export.\n\n== Varying targets\n\nThis function is #link(\"/docs/reference/context/\")[contextual] as the target can vary within a single compilation: When exporting to HTML, the target will be `\"paged\"` while within an #link(\"/docs/reference/html/frame/\")[html.frame].\n\n== Example\n\n```typst\n#let kbd(it) = context {\n  if target() == \"html\" {\n    html.elem(\"kbd\", it)\n  } else {\n    set text(fill: rgb(\"#1f2328\"))\n    let r = 3pt\n    box(\n      fill: rgb(\"#f6f8fa\"),\n      stroke: rgb(\"#d1d9e0b3\"),\n      outset: (y: r),\n      inset: (x: r),\n      radius: r,\n      raw(it)\n    )\n  }\n}\n\nPress #kbd(\"F1\") for help.\n```\n\n== Parameters\n\n```\ntarget(\n  \n) -> str\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/target.typ", "filename": "target.typ"}
{"text": "= type\n\nDescribes a kind of value.\n\nTo style your document, you need to work with values of different kinds: Lengths specifying the size of your elements, colors for your text and shapes, and more. Typst categorizes these into clearly defined _types_ and tells you where it expects which type of value.\n\nApart from basic types for numeric values and #link(\"/docs/reference/foundations/int/\")[typical] #link(\"/docs/reference/foundations/float/\")[types] #link(\"/docs/reference/foundations/str/\")[known] #link(\"/docs/reference/foundations/array/\")[from] #link(\"/docs/reference/foundations/dictionary/\")[programming] languages, Typst provides a special type for #link(\"/docs/reference/foundations/content/\")[content.] A value of this type can hold anything that you can enter into your document: Text, elements like headings and shapes, and style information.\n\n== Example\n\n```typst\n#let x = 10\n#if type(x) == int [\n  #x is an integer!\n] else [\n  #x is another value...\n]\n\nAn image is of type\n#type(image(\"glacier.jpg\")).\n```\n\nThe type of `10` is `int`. Now, what is the type of `int` or even `type`?\n\n```typst\n#type(int) \\\n#type(type)\n```\n\n== Compatibility\n\nIn Typst 0.7 and lower, the `type` function returned a string instead of a type. Compatibility with the old way will remain until Typst 0.14 to give package authors time to upgrade.\n\n- Checks like `int == \"integer\"` evaluate to `true`\n- Adding/joining a type and string will yield a string\n- The `in` operator on a type and a dictionary will evaluate to `true` if the dictionary has a string key matching the type's name\n\n== Constructor\n\nDetermines a value's type.\n\n```\ntype(\n  any\n) -> type\n```\n\n```typst\n#type(12) \\\n#type(14.7) \\\n#type(\"hello\") \\\n#type(<glacier>) \\\n#type([Hi]) \\\n#type(x => x + 1) \\\n#type(type)\n```\n\n==== `value`: any (Required, Positional)\n\nThe value whose type's to determine.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/type.typ", "filename": "type.typ"}
{"text": "= version\n\nA version with an arbitrary number of components.\n\nThe first three components have names that can be used as fields: `major`, `minor`, `patch`. All following components do not have names.\n\nThe list of components is semantically extended by an infinite list of zeros. This means that, for example, `0.8` is the same as `0.8.0`. As a special case, the empty version (that has no components at all) is the same as `0`, `0.0`, `0.0.0`, and so on.\n\nThe current version of the Typst compiler is available as `sys.version`.\n\nYou can convert a version to an array of explicitly given components using the #link(\"/docs/reference/foundations/array/\")[array] constructor.\n\n== Constructor\n\nCreates a new version.\n\nIt can have any number of components (even zero).\n\n```\nversion(\n  ..: int | array\n) -> version\n```\n\n```typst\n#version() \\\n#version(1) \\\n#version(1, 2, 3, 4) \\\n#version((1, 2, 3, 4)) \\\n#version((1, 2), 3)\n```\n\n==== `components`: int | array (Required, Positional, Variadic)\n\nThe components of the version (array arguments are flattened)\n\n== Definitions\n\n=== `at`\n\nRetrieves a component of a version.\n\nThe returned integer is always non-negative. Returns `0` if the version isn't specified to the necessary length.\n\n```\nat(\n  int: int\n) -> int\n```\n\n==== `index`: int (Required, Positional)\n\nThe index at which to retrieve the component. If negative, indexes from the back of the explicitly given components.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations/version.typ", "filename": "version.typ"}
{"text": "= Foundations\n\nFoundational types and functions.\n\nHere, you'll find documentation for basic data types like #link(\"/docs/reference/foundations/int/\")[integers] and #link(\"/docs/reference/foundations/str/\")[strings] as well as details about core computational functions.\n\n== Definitions\n\n- #link(\"/docs/reference/foundations/arguments/\")[arguments]Captured arguments to a function.\n- #link(\"/docs/reference/foundations/array/\")[array]A sequence of values.\n- #link(\"/docs/reference/foundations/assert/\")[assert]Ensures that a condition is fulfilled.\n- #link(\"/docs/reference/foundations/auto/\")[auto]A value that indicates a smart default.\n- #link(\"/docs/reference/foundations/bool/\")[bool]A type with two states.\n- #link(\"/docs/reference/foundations/bytes/\")[bytes]A sequence of bytes.\n- #link(\"/docs/reference/foundations/calc\")[calc]Module for calculations and processing of numeric values.\n- #link(\"/docs/reference/foundations/content/\")[content]A piece of document content.\n- #link(\"/docs/reference/foundations/datetime/\")[datetime]Represents a date, a time, or a combination of both.\n- #link(\"/docs/reference/foundations/decimal/\")[decimal]A fixed-point decimal number type.\n- #link(\"/docs/reference/foundations/dictionary/\")[dictionary]A map from string keys to values.\n- #link(\"/docs/reference/foundations/duration/\")[duration]Represents a positive or negative span of time.\n- #link(\"/docs/reference/foundations/eval/\")[eval]Evaluates a string as Typst code.\n- #link(\"/docs/reference/foundations/float/\")[float]A floating-point number.\n- #link(\"/docs/reference/foundations/function/\")[function]A mapping from argument values to a return value.\n- #link(\"/docs/reference/foundations/int/\")[int]A whole number.\n- #link(\"/docs/reference/foundations/label/\")[label]A label for an element.\n- #link(\"/docs/reference/foundations/module/\")[module]An module of definitions.\n- #link(\"/docs/reference/foundations/none/\")[none]A value that indicates the absence of any other value.\n- #link(\"/docs/reference/foundations/panic/\")[panic]Fails with an error.\n- #link(\"/docs/reference/foundations/plugin/\")[plugin]Loads a WebAssembly module.\n- #link(\"/docs/reference/foundations/regex/\")[regex]A regular expression.\n- #link(\"/docs/reference/foundations/repr/\")[repr]Returns the string representation of a value.\n- #link(\"/docs/reference/foundations/selector/\")[selector]A filter for selecting elements within the document.\n- #link(\"/docs/reference/foundations/str/\")[str]A sequence of Unicode codepoints.\n- #link(\"/docs/reference/foundations/symbol/\")[symbol]A Unicode symbol.\n- #link(\"/docs/reference/foundations/sys\")[sys]Module for system interactions.\n- #link(\"/docs/reference/foundations/target/\")[target]Returns the current export target.\n- #link(\"/docs/reference/foundations/type/\")[type]Describes a kind of value.\n- #link(\"/docs/reference/foundations/version/\")[version]A version with an arbitrary number of components.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/foundations.typ", "filename": "foundations.typ"}
{"text": "= elem\n\nAn HTML element that can contain Typst content.\n\nTypst's HTML export automatically generates the appropriate tags for most elements. However, sometimes, it is desirable to retain more control. For example, when using Typst to generate your blog, you could use this function to wrap each article in an `<article>` tag.\n\nTypst is aware of what is valid HTML. A tag and its attributes must form syntactically valid HTML. Some tags, like `meta` do not accept content. Hence, you must not provide a body for them. We may add more checks in the future, so be sure that you are generating valid HTML when using this function.\n\nNormally, Typst will generate `html`, `head`, and `body` tags for you. If you instead create them with this function, Typst will omit its own tags.\n\n== Parameters\n\n```\nelem(\n  str: str,\n  attrs: dictionary,\n  body: none | content\n) -> content\n```\n\n=== `tag`: str (Required, Positional)\n\nThe element's tag.\n\n=== `attrs`: dictionary (Settable)\n\nThe element's HTML attributes.\n\nDefault: `(:)`\n\n=== `body`: none | content (Positional, Settable)\n\nThe contents of the HTML element.\n\nThe body can be arbitrary Typst content.\n\nDefault: `none`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/html/elem.typ", "filename": "elem.typ"}
{"text": "= frame\n\nAn element that lays out its content as an inline SVG.\n\nSometimes, converting Typst content to HTML is not desirable. This can be the case for plots and other content that relies on positioning and styling to convey its message.\n\nThis function allows you to use the Typst layout engine that would also be used for PDF, SVG, and PNG export to render a part of your document exactly how it would appear when exported in one of these formats. It embeds the content as an inline SVG.\n\n== Parameters\n\n```\nframe(\n  content: content\n) -> content\n```\n\n=== `body`: content (Required, Positional)\n\nThe content that shall be laid out.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/html/frame.typ", "filename": "frame.typ"}
{"text": "= HTML\n\nHTML files describe a document structurally. The aim of Typst's HTML export is to capture the structure of an input document and produce semantically rich HTML that retains this structure. The resulting HTML should be accessible, human-readable, and editable by hand and downstream tools.\n\nPDF, PNG, and SVG export, in contrast, all produce _visual_ representations of a fully-laid out document. This divergence in the formats' intents means that Typst cannot simply produce perfect HTML for your existing Typst documents. It cannot always know what the best semantic HTML representation of your content is.\n\nInstead, it gives _you_ full control: You can check the current export format through the #link(\"/docs/reference/foundations/target/\")[target] function and when it is set to HTML, generate #link(\"/docs/reference/html/elem/\")[raw HTML elements]. The primary intended use of these elements is in templates and show rules. This way, the document's contents can be fully agnostic to the export target and content can be shared between PDF and HTML export.\n\nCurrently, Typst will always output a single HTML file. Support for outputting directories with multiple HTML documents and assets, as well as support for outputting fragments that can be integrated into other HTML documents is planned.\n\nTypst currently does not output CSS style sheets, instead focussing on emitting semantic markup. You can of course write your own CSS styles and still benefit from sharing your _content_ between PDF and HTML. For the future, we plan to give you the option of automatically emitting CSS, taking more of your existing set rules into account.\n\n== Exporting as HTML\n\nPass `--format html` to the `compile` or `watch` subcommand or provide an output file name that ends with `.html`. Note that you must also pass `--features html` or set `TYPST_FEATURES=html` to enable this experimental export target.\n\nWhen using `typst watch`, Typst will spin up a live-reloading HTTP server. You can configure it as follows:\n\n- Pass `--port` to change the port. (Defaults to the first free port in the range 3000-3005.)\n- Pass `--no-reload` to disable injection of a live reload script. (The HTML that is written to disk isn't affected either way.)\n- Pass `--no-serve` to disable the server altogether.\n\nNot currently available.\n\n== HTML-specific functionality\n\nTypst exposes HTML-specific functionality in the global `html` module. See below for the definitions it contains.\n\n== Definitions\n\n- #link(\"/docs/reference/html/elem/\")[elem]An HTML element that can contain Typst content.\n- #link(\"/docs/reference/html/frame/\")[frame]An element that lays out its content as an inline SVG.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/html.typ", "filename": "html.typ"}
{"text": "= counter\n\nCounts through pages, elements, and more.\n\nWith the counter function, you can access and modify counters for pages, headings, figures, and more. Moreover, you can define custom counters for other things you want to count.\n\nSince counters change throughout the course of the document, their current value is _contextual._ It is recommended to read the chapter on #link(\"/docs/reference/context/\")[context] before continuing here.\n\n== Accessing a counter\n\nTo access the raw value of a counter, we can use the #link(\"/docs/reference/introspection/counter/#definitions-get\")[get] function. This function returns an #link(\"/docs/reference/foundations/array/\")[array]: Counters can have multiple levels (in the case of headings for sections, subsections, and so on), and each item in the array corresponds to one level.\n\n```typst\n#set heading(numbering: \"1.\")\n\n= Introduction\nRaw value of heading counter is\n#context counter(heading).get()\n```\n\n== Displaying a counter\n\nOften, we want to display the value of a counter in a more human-readable way. To do that, we can call the #link(\"/docs/reference/introspection/counter/#definitions-display\")[display] function on the counter. This function retrieves the current counter value and formats it either with a provided or with an automatically inferred #link(\"/docs/reference/model/numbering/\")[numbering].\n\n```typst\n#set heading(numbering: \"1.\")\n\n= Introduction\nSome text here.\n\n= Background\nThe current value is: #context {\n  counter(heading).display()\n}\n\nOr in roman numerals: #context {\n  counter(heading).display(\"I\")\n}\n```\n\n== Modifying a counter\n\nTo modify a counter, you can use the `step` and `update` methods:\n\n- The step method increases the value of the counter by one. Because counters can have multiple levels , it optionally takes a level argument. If given, the counter steps at the given depth.\n- The update method allows you to arbitrarily modify the counter. In its basic form, you give it an integer (or an array for multiple levels). For more flexibility, you can instead also give it a function that receives the current value and returns a new value.\n\nThe heading counter is stepped before the heading is displayed, so `Analysis` gets the number seven even though the counter is at six after the second update.\n\n```typst\n#set heading(numbering: \"1.\")\n\n= Introduction\n#counter(heading).step()\n\n= Background\n#counter(heading).update(3)\n#counter(heading).update(n => n * 2)\n\n= Analysis\nLet's skip 7.1.\n#counter(heading).step(level: 2)\n\n== Analysis\nStill at #context {\n  counter(heading).display()\n}\n```\n\n== Page counter\n\nThe page counter is special. It is automatically stepped at each pagebreak. But like other counters, you can also step it manually. For example, you could have Roman page numbers for your preface, then switch to Arabic page numbers for your main content and reset the page counter to one.\n\n```typst\n#set page(numbering: \"(i)\")\n\n= Preface\nThe preface is numbered with\nroman numerals.\n\n#set page(numbering: \"1 / 1\")\n#counter(page).update(1)\n\n= Main text\nHere, the counter is reset to one.\nWe also display both the current\npage and total number of pages in\nArabic numbers.\n```\n\n== Custom counters\n\nTo define your own counter, call the `counter` function with a string as a key. This key identifies the counter globally.\n\n```typst\n#let mine = counter(\"mycounter\")\n#context mine.display() \\\n#mine.step()\n#context mine.display() \\\n#mine.update(c => c * 3)\n#context mine.display()\n```\n\n== How to step\n\nWhen you define and use a custom counter, in general, you should first step the counter and then display it. This way, the stepping behaviour of a counter can depend on the element it is stepped for. If you were writing a counter for, let's say, theorems, your theorem's definition would thus first include the counter step and only then display the counter and the theorem's contents.\n\n```typst\n#let c = counter(\"theorem\")\n#let theorem(it) = block[\n  #c.step()\n  *Theorem #context c.display():*\n  #it\n]\n\n#theorem[$1 = 1$]\n#theorem[$2 < 3$]\n```\n\nThe rationale behind this is best explained on the example of the heading counter: An update to the heading counter depends on the heading's level. By stepping directly before the heading, we can correctly step from `1` to `1.1` when encountering a level 2 heading. If we were to step after the heading, we wouldn't know what to step to.\n\nBecause counters should always be stepped before the elements they count, they always start at zero. This way, they are at one for the first display (which happens after the first step).\n\n== Time travel\n\nCounters can travel through time! You can find out the final value of the counter before it is reached and even determine what the value was at any particular location in the document.\n\n```typst\n#let mine = counter(\"mycounter\")\n\n= Values\n#context [\n  Value here: #mine.get() \\\n  At intro: #mine.at(<intro>) \\\n  Final value: #mine.final()\n]\n\n#mine.update(n => n + 3)\n\n= Introduction <intro>\n#lorem(10)\n\n#mine.step()\n#mine.step()\n```\n\n== Other kinds of state\n\nThe `counter` type is closely related to #link(\"/docs/reference/introspection/state/\")[state] type. Read its documentation for more details on state management in Typst and why it doesn't just use normal variables for counters.\n\n== Constructor\n\nCreate a new counter identified by a key.\n\n```\ncounter(\n  str: str | label | selector | location | function\n) -> counter\n```\n\n==== `key`: str | label | selector | location | function (Required, Positional)\n\nThe key that identifies this counter.\n\n- If it is a string, creates a custom counter that is only affected by manual updates,\n- If it is the #link(\"/docs/reference/layout/page/\")[page] function, counts through pages,\n- If it is a #link(\"/docs/reference/foundations/selector/\")[selector], counts through elements that matches with the selector. For example, provide an element function: counts elements of that type, provide a <label>: counts elements with that label.\n\n== Definitions\n\n=== `get`\n\nRetrieves the value of the counter at the current location. Always returns an array of integers, even if the counter has just one number.\n\nThis is equivalent to `counter.at(here())`.\n\n```\nget(\n  \n) -> array\n```\n\n=== `display`\n\nDisplays the current value of the counter with a numbering and returns the formatted output.\n\n```\ndisplay(\n  auto: auto | str | function,\n  both: bool\n) -> bool\n```\n\n==== `numbering`: auto | str | function (Positional)\n\nA #link(\"/docs/reference/model/numbering/\")[numbering pattern or a function], which specifies how to display the counter. If given a function, that function receives each number of the counter as a separate argument. If the amount of numbers varies, e.g. for the heading argument, you can use an #link(\"/docs/reference/foundations/arguments/\")[argument sink].\n\nIf this is omitted or set to `auto`, displays the counter with the numbering style for the counted element or with the pattern `\"1.1\"` if no such style exists.\n\nDefault: `auto`\n\n==== `both`: bool\n\nIf enabled, displays the current and final top-level count together. Both can be styled through a single numbering pattern. This is used by the page numbering property to display the current and total number of pages when a pattern like `\"1 / 1\"` is given.\n\nDefault: `false`\n\n=== `at`\n\nRetrieves the value of the counter at the given location. Always returns an array of integers, even if the counter has just one number.\n\nThe `selector` must match exactly one element in the document. The most useful kinds of selectors for this are #link(\"/docs/reference/foundations/label/\")[labels] and #link(\"/docs/reference/introspection/location/\")[locations].\n\n```\nat(\n  label: label | selector | location | function\n) -> array\n```\n\n==== `selector`: label | selector | location | function (Required, Positional)\n\nThe place at which the counter's value should be retrieved.\n\n=== `final`\n\nRetrieves the value of the counter at the end of the document. Always returns an array of integers, even if the counter has just one number.\n\n```\nfinal(\n  \n) -> array\n```\n\n=== `step`\n\nIncreases the value of the counter by one.\n\nThe update will be in effect at the position where the returned content is inserted into the document. If you don't put the output into the document, nothing happens! This would be the case, for example, if you write `let _ = counter(page).step()`. Counter updates are always applied in layout order and in that case, Typst wouldn't know when to step the counter.\n\n```\nstep(\n  level: int\n) -> content\n```\n\n==== `level`: int\n\nThe depth at which to step the counter. Defaults to `1`.\n\nDefault: `1`\n\n=== `update`\n\nUpdates the value of the counter.\n\nJust like with `step`, the update only occurs if you put the resulting content into the document.\n\n```\nupdate(\n  int: int | array | function\n) -> content\n```\n\n==== `update`: int | array | function (Required, Positional)\n\nIf given an integer or array of integers, sets the counter to that value. If given a function, that function receives the previous counter value (with each number as a separate argument) and has to return the new value (integer or array).", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/introspection/counter.typ", "filename": "counter.typ"}
{"text": "= here\n\nProvides the current location in the document.\n\nYou can think of `here` as a low-level building block that directly extracts the current location from the active #link(\"/docs/reference/context/\")[context]. Some other functions use it internally: For instance, `counter.get()` is equivalent to `counter.at(here())`.\n\nWithin show rules on #link(\"/docs/reference/introspection/location/#locatable\")[locatable] elements, `here()` will match the location of the shown element.\n\nIf you want to display the current page number, refer to the documentation of the #link(\"/docs/reference/introspection/counter/\")[counter] type. While `here` can be used to determine the physical page number, typically you want the logical page number that may, for instance, have been reset after a preface.\n\n== Examples\n\nDetermining the current position in the document in combination with the #link(\"/docs/reference/introspection/location/#definitions-position\")[position] method:\n\n```typst\n#context [\n  I am located at\n  #here().position()\n]\n```\n\nRunning a #link(\"/docs/reference/introspection/query/\")[query] for elements before the current position:\n\n```typst\n= Introduction\n= Background\n\nThere are\n#context query(\n  selector(heading).before(here())\n).len()\nheadings before me.\n\n= Conclusion\n```\n\nRefer to the #link(\"/docs/reference/foundations/selector/\")[selector] type for more details on before/after selectors.\n\n== Parameters\n\n```\nhere(\n  \n) -> location\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/introspection/here.typ", "filename": "here.typ"}
{"text": "= locate\n\nDetermines the location of an element in the document.\n\nTakes a selector that must match exactly one element and returns that element's #link(\"/docs/reference/introspection/location/\")[location]. This location can, in particular, be used to retrieve the physical #link(\"/docs/reference/introspection/location/#definitions-page\")[page] number and #link(\"/docs/reference/introspection/location/#definitions-position\")[position] (page, x, y) for that element.\n\n== Examples\n\nLocating a specific element:\n\n```typst\n#context [\n  Introduction is at: \\\n  #locate(<intro>).position()\n]\n\n= Introduction <intro>\n```\n\n== Parameters\n\n```\nlocate(\n  label: label | selector | location | function\n) -> location\n```\n\n=== `selector`: label | selector | location | function (Required, Positional)\n\nA selector that should match exactly one element. This element will be located.\n\nEspecially useful in combination with\n\n- #link(\"/docs/reference/introspection/here/\")[here] to locate the current context,\n- a #link(\"/docs/reference/introspection/location/\")[location] retrieved from some queried element via the #link(\"/docs/reference/foundations/content/#definitions-location\")[location()] method on content.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/introspection/locate.typ", "filename": "locate.typ"}
{"text": "= location\n\nIdentifies an element in the document.\n\nA location uniquely identifies an element in the document and lets you access its absolute position on the pages. You can retrieve the current location with the #link(\"/docs/reference/introspection/here/\")[here] function and the location of a queried or shown element with the #link(\"/docs/reference/foundations/content/#definitions-location\")[location()] method on content.\n\n== Locatable elements\n\nCurrently, only a subset of element functions is locatable. Aside from headings and figures, this includes equations, references, quotes and all elements with an explicit label. As a result, you _can_ query for e.g. #link(\"/docs/reference/model/strong/\")[strong] elements, but you will find only those that have an explicit label attached to them. This limitation will be resolved in the future.\n\n== Definitions\n\n=== `page`\n\nReturns the page number for this location.\n\nNote that this does not return the value of the #link(\"/docs/reference/introspection/counter/\")[page counter] at this location, but the true page number (starting from one).\n\nIf you want to know the value of the page counter, use `counter(page).at(loc)` instead.\n\nCan be used with #link(\"/docs/reference/introspection/here/\")[here] to retrieve the physical page position of the current context:\n\n```\npage(\n  \n) -> int\n```\n\n```typst\n#context [\n  I am located on\n  page #here().page()\n]\n```\n\n=== `position`\n\nReturns a dictionary with the page number and the x, y position for this location. The page number starts at one and the coordinates are measured from the top-left of the page.\n\nIf you only need the page number, use `page()` instead as it allows Typst to skip unnecessary work.\n\n```\nposition(\n  \n) -> dictionary\n```\n\n=== `page-numbering`\n\nReturns the page numbering pattern of the page at this location. This can be used when displaying the page counter in order to obtain the local numbering. This is useful if you are building custom indices or outlines.\n\nIf the page numbering is set to `none` at that location, this function returns `none`.\n\n```\npage-numbering(\n  \n) -> function\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/introspection/location.typ", "filename": "location.typ"}
{"text": "= metadata\n\nExposes a value to the query system without producing visible content.\n\nThis element can be retrieved with the #link(\"/docs/reference/introspection/query/\")[query] function and from the command line with #link(\"/docs/reference/introspection/query/#command-line-queries\")[typst query]. Its purpose is to expose an arbitrary value to the introspection system. To identify a metadata value among others, you can attach a #link(\"/docs/reference/foundations/label/\")[label] to it and query for that label.\n\nThe `metadata` element is especially useful for command line queries because it allows you to expose arbitrary values to the outside world.\n\n```typst\n// Put metadata somewhere.\n#metadata(\"This is a note\") <note>\n\n// And find it from anywhere else.\n#context {\n  query(<note>).first().value\n}\n```\n\n== Parameters\n\n```\nmetadata(\n  any\n) -> content\n```\n\n=== `value`: any (Required, Positional)\n\nThe value to embed into the document.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/introspection/metadata.typ", "filename": "metadata.typ"}
{"text": "= query\n\nFinds elements in the document.\n\nThe `query` functions lets you search your document for elements of a particular type or with a particular label. To use it, you first need to ensure that #link(\"/docs/reference/context/\")[context] is available.\n\n== Finding elements\n\nIn the example below, we manually create a table of contents instead of using the #link(\"/docs/reference/model/outline/\")[outline] function.\n\nTo do this, we first query for all headings in the document at level 1 and where `outlined` is true. Querying only for headings at level 1 ensures that, for the purpose of this example, sub-headings are not included in the table of contents. The `outlined` field is used to exclude the \"Table of Contents\" heading itself.\n\nNote that we open a `context` to be able to use the `query` function.\n\n```typst\n#set page(numbering: \"1\")\n\n#heading(outlined: false)[\n  Table of Contents\n]\n#context {\n  let chapters = query(\n    heading.where(\n      level: 1,\n      outlined: true,\n    )\n  )\n  for chapter in chapters {\n    let loc = chapter.location()\n    let nr = numbering(\n      loc.page-numbering(),\n      ..counter(page).at(loc),\n    )\n    [#chapter.body #h(1fr) #nr \\ ]\n  }\n}\n\n= Introduction\n#lorem(10)\n#pagebreak()\n\n== Sub-Heading\n#lorem(8)\n\n= Discussion\n#lorem(18)\n```\n\nTo get the page numbers, we first get the location of the elements returned by `query` with #link(\"/docs/reference/foundations/content/#definitions-location\")[location]. We then also retrieve the #link(\"/docs/reference/introspection/location/#definitions-page-numbering\")[page numbering] and #link(\"/docs/reference/introspection/counter/#page-counter\")[page counter] at that location and apply the numbering to the counter.\n\n== A word of caution\n\nTo resolve all your queries, Typst evaluates and layouts parts of the document multiple times. However, there is no guarantee that your queries can actually be completely resolved. If you aren't careful a query can affect itself—leading to a result that never stabilizes.\n\nIn the example below, we query for all headings in the document. We then generate as many headings. In the beginning, there's just one heading, titled `Real`. Thus, `count` is `1` and one `Fake` heading is generated. Typst sees that the query's result has changed and processes it again. This time, `count` is `2` and two `Fake` headings are generated. This goes on and on. As we can see, the output has a finite amount of headings. This is because Typst simply gives up after a few attempts.\n\nIn general, you should try not to write queries that affect themselves. The same words of caution also apply to other introspection features like #link(\"/docs/reference/introspection/counter/\")[counters] and #link(\"/docs/reference/introspection/state/\")[state].\n\n```typst\n= Real\n#context {\n  let elems = query(heading)\n  let count = elems.len()\n  count * [= Fake]\n}\n```\n\n== Command line queries\n\nYou can also perform queries from the command line with the `typst query` command. This command executes an arbitrary query on the document and returns the resulting elements in serialized form. Consider the following `example.typ` file which contains some invisible #link(\"/docs/reference/introspection/metadata/\")[metadata]:\n\nYou can execute a query on it as follows using Typst's CLI:\n\nFrequently, you're interested in only one specific field of the resulting elements. In the case of the `metadata` element, the `value` field is the interesting one. You can extract just this field with the `--field` argument.\n\nIf you are interested in just a single element, you can use the `--one` flag to extract just it.\n\n== Parameters\n\n```\nquery(\n  label: label | selector | location | function\n) -> array\n```\n\n=== `target`: label | selector | location | function (Required, Positional)\n\nCan be\n\n- an element function like a `heading` or `figure`,\n- a `<label>`,\n- a more complex selector like `heading.where(level: 1)`,\n- or `selector(heading).before(here())`.\n\nOnly #link(\"/docs/reference/introspection/location/#locatable\")[locatable] element functions are supported.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/introspection/query.typ", "filename": "query.typ"}
{"text": "= state\n\nManages stateful parts of your document.\n\nLet's say you have some computations in your document and want to remember the result of your last computation to use it in the next one. You might try something similar to the code below and expect it to output 10, 13, 26, and 21. However this *does not work* in Typst. If you test this code, you will see that Typst complains with the following error message: _Variables from outside the function are read-only and cannot be modified._\n\n== State and document markup\n\nWhy does it do that? Because, in general, this kind of computation with side effects is problematic in document markup and Typst is upfront about that. For the results to make sense, the computation must proceed in the same order in which the results will be laid out in the document. In our simple example, that's the case, but in general it might not be.\n\nLet's look at a slightly different, but similar kind of state: The heading numbering. We want to increase the heading counter at each heading. Easy enough, right? Just add one. Well, it's not that simple. Consider the following example:\n\n```typst\n#set heading(numbering: \"1.\")\n#let template(body) = [\n  = Outline\n  ...\n  #body\n]\n\n#show: template\n\n= Introduction\n...\n```\n\nHere, Typst first processes the body of the document after the show rule, sees the `Introduction` heading, then passes the resulting content to the `template` function and only then sees the `Outline`. Just counting up would number the `Introduction` with `1` and the `Outline` with `2`.\n\n== Managing state in Typst\n\nSo what do we do instead? We use Typst's state management system. Calling the `state` function with an identifying string key and an optional initial value gives you a state value which exposes a few functions. The two most important ones are `get` and `update`:\n\n- The get function retrieves the current value of the state. Because the value can vary over the course of the document, it is a contextual function that can only be used when context is available.\n- The update function modifies the state. You can give it any value. If given a non-function value, it sets the state to that value. If given a function, that function receives the previous state and has to return the new state.\n\nOur initial example would now look like this:\n\n```typst\n#let s = state(\"x\", 0)\n#let compute(expr) = [\n  #s.update(x =>\n    eval(expr.replace(\"x\", str(x)))\n  )\n  New value is #context s.get().\n]\n\n#compute(\"10\") \\\n#compute(\"x + 3\") \\\n#compute(\"x * 2\") \\\n#compute(\"x - 5\")\n```\n\nState managed by Typst is always updated in layout order, not in evaluation order. The `update` method returns content and its effect occurs at the position where the returned content is inserted into the document.\n\nAs a result, we can now also store some of the computations in variables, but they still show the correct results:\n\n```typst\n...\n\n#let more = [\n  #compute(\"x * 2\") \\\n  #compute(\"x - 5\")\n]\n\n#compute(\"10\") \\\n#compute(\"x + 3\") \\\n#more\n```\n\nThis example is of course a bit silly, but in practice this is often exactly what you want! A good example are heading counters, which is why Typst's #link(\"/docs/reference/introspection/counter/\")[counting system] is very similar to its state system.\n\n== Time Travel\n\nBy using Typst's state management system you also get time travel capabilities! We can find out what the value of the state will be at any position in the document from anywhere else. In particular, the `at` method gives us the value of the state at any particular location and the `final` methods gives us the value of the state at the end of the document.\n\n```typst\n...\n\nValue at `<here>` is\n#context s.at(<here>)\n\n#compute(\"10\") \\\n#compute(\"x + 3\") \\\n*Here.* <here> \\\n#compute(\"x * 2\") \\\n#compute(\"x - 5\")\n```\n\n== A word of caution\n\nTo resolve the values of all states, Typst evaluates parts of your code multiple times. However, there is no guarantee that your state manipulation can actually be completely resolved.\n\nFor instance, if you generate state updates depending on the final value of a state, the results might never converge. The example below illustrates this. We initialize our state with `1` and then update it to its own final value plus 1. So it should be `2`, but then its final value is `2`, so it should be `3`, and so on. This example displays a finite value because Typst simply gives up after a few attempts.\n\n```typst\n// This is bad!\n#let s = state(\"x\", 1)\n#context s.update(s.final() + 1)\n#context s.get()\n```\n\nIn general, you should try not to generate state updates from within context expressions. If possible, try to express your updates as non-contextual values or functions that compute the new value from the previous value. Sometimes, it cannot be helped, but in those cases it is up to you to ensure that the result converges.\n\n== Constructor\n\nCreate a new state identified by a key.\n\n```\nstate(\n  str: str,\n  any\n) -> state\n```\n\n==== `key`: str (Required, Positional)\n\nThe key that identifies this state.\n\n==== `init`: any (Positional)\n\nThe initial value of the state.\n\nDefault: `none`\n\n== Definitions\n\n=== `get`\n\nRetrieves the value of the state at the current location.\n\nThis is equivalent to `state.at(here())`.\n\n```\nget(\n  \n) -> \n```\n\n=== `at`\n\nRetrieves the value of the state at the given selector's unique match.\n\nThe `selector` must match exactly one element in the document. The most useful kinds of selectors for this are #link(\"/docs/reference/foundations/label/\")[labels] and #link(\"/docs/reference/introspection/location/\")[locations].\n\n```\nat(\n  label: label | selector | location | function\n) -> function\n```\n\n==== `selector`: label | selector | location | function (Required, Positional)\n\nThe place at which the state's value should be retrieved.\n\n=== `final`\n\nRetrieves the value of the state at the end of the document.\n\n```\nfinal(\n  \n) -> \n```\n\n=== `update`\n\nUpdate the value of the state.\n\nThe update will be in effect at the position where the returned content is inserted into the document. If you don't put the output into the document, nothing happens! This would be the case, for example, if you write `let _ = state(\"key\").update(7)`. State updates are always applied in layout order and in that case, Typst wouldn't know when to update the state.\n\n```\nupdate(\n  function: any | function\n) -> content\n```\n\n==== `update`: any | function (Required, Positional)\n\nIf given a non function-value, sets the state to that value. If given a function, that function receives the previous state and has to return the new state.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/introspection/state.typ", "filename": "state.typ"}
{"text": "= Introspection\n\nInteractions between document parts.\n\nThis category is home to Typst's introspection capabilities: With the `counter` function, you can access and manipulate page, section, figure, and equation counters or create custom ones. Meanwhile, the `query` function lets you search for elements in the document to construct things like a list of figures or headers which show the current chapter title.\n\nMost of the functions are _contextual._ It is recommended to read the chapter on #link(\"/docs/reference/context/\")[context] before continuing here.\n\n== Definitions\n\n- #link(\"/docs/reference/introspection/counter/\")[counter]Counts through pages, elements, and more.\n- #link(\"/docs/reference/introspection/here/\")[here]Provides the current location in the document.\n- #link(\"/docs/reference/introspection/locate/\")[locate]Determines the location of an element in the document.\n- #link(\"/docs/reference/introspection/location/\")[location]Identifies an element in the document.\n- #link(\"/docs/reference/introspection/metadata/\")[metadata]Exposes a value to the query system without producing visible content.\n- #link(\"/docs/reference/introspection/query/\")[query]Finds elements in the document.\n- #link(\"/docs/reference/introspection/state/\")[state]Manages stateful parts of your document.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/introspection.typ", "filename": "introspection.typ"}
{"text": "= align\n\nAligns content horizontally and vertically.\n\n== Example\n\nLet's start with centering our content horizontally:\n\n```typst\n#set page(height: 120pt)\n#set align(center)\n\nCentered text, a sight to see \\\nIn perfect balance, visually \\\nNot left nor right, it stands alone \\\nA work of art, a visual throne\n```\n\nTo center something vertically, use _horizon_ alignment:\n\n```typst\n#set page(height: 120pt)\n#set align(horizon)\n\nVertically centered, \\\nthe stage had entered, \\\na new paragraph.\n```\n\n== Combining alignments\n\nYou can combine two alignments with the `+` operator. Let's also only apply this to one piece of content by using the function form instead of a set rule:\n\n```typst\n#set page(height: 120pt)\nThough left in the beginning ...\n\n#align(right + bottom)[\n  ... they were right in the end, \\\n  and with addition had gotten, \\\n  the paragraph to the bottom!\n]\n```\n\n== Nested alignment\n\nYou can use varying alignments for layout containers and the elements within them. This way, you can create intricate layouts:\n\n```typst\n#align(center, block[\n  #set align(left)\n  Though centered together \\\n  alone \\\n  we \\\n  are \\\n  left.\n])\n```\n\n== Alignment within the same line\n\nThe `align` function performs block-level alignment and thus always interrupts the current paragraph. To have different alignment for parts of the same line, you should use #link(\"/docs/reference/layout/h/\")[fractional spacing] instead:\n\n```typst\nStart #h(1fr) End\n```\n\n== Parameters\n\n```\nalign(\n  alignment: alignment,\n  content: content\n) -> content\n```\n\n=== `alignment`: alignment (Positional, Settable)\n\nThe #link(\"/docs/reference/layout/alignment/\")[alignment] along both axes.\n\nDefault: `start + top`\n\n*Example:*\n```typst\n#set page(height: 6cm)\n#set text(lang: \"ar\")\n\nمثال\n#align(\n  end + horizon,\n  rect(inset: 12pt)[ركن]\n)\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to align.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/align.typ", "filename": "align.typ"}
{"text": "= alignment\n\nWhere to #link(\"/docs/reference/layout/align/\")[align] something along an axis.\n\nPossible values are:\n\n- `start`: Aligns at the #link(\"/docs/reference/layout/direction/#definitions-start\")[start] of the #link(\"/docs/reference/text/text/#parameters-dir\")[text direction].\n- `end`: Aligns at the #link(\"/docs/reference/layout/direction/#definitions-end\")[end] of the #link(\"/docs/reference/text/text/#parameters-dir\")[text direction].\n- `left`: Align at the left.\n- `center`: Aligns in the middle, horizontally.\n- `right`: Aligns at the right.\n- `top`: Aligns at the top.\n- `horizon`: Aligns in the middle, vertically.\n- `bottom`: Align at the bottom.\n\nThese values are available globally and also in the alignment type's scope, so you can write either of the following two:\n\n```typst\n#align(center)[Hi]\n#align(alignment.center)[Hi]\n```\n\n== 2D alignments\n\nTo align along both axes at the same time, add the two alignments using the `+` operator. For example, `top + right` aligns the content to the top right corner.\n\n```typst\n#set page(height: 3cm)\n#align(center + bottom)[Hi]\n```\n\n== Fields\n\nThe `x` and `y` fields hold the alignment's horizontal and vertical components, respectively (as yet another `alignment`). They may be `none`.\n\n```typst\n#(top + right).x \\\n#left.x \\\n#left.y (none)\n```\n\n== Definitions\n\n=== `axis`\n\nThe axis this alignment belongs to.\n\n- `\"horizontal\"` for `start`, `left`, `center`, `right`, and `end`\n- `\"vertical\"` for `top`, `horizon`, and `bottom`\n- `none` for 2-dimensional alignments\n\n```\naxis(\n  \n) -> str\n```\n\n```typst\n#left.axis() \\\n#bottom.axis()\n```\n\n=== `inv`\n\nThe inverse alignment.\n\n```\ninv(\n  \n) -> alignment\n```\n\n```typst\n#top.inv() \\\n#left.inv() \\\n#center.inv() \\\n#(left + bottom).inv()\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/alignment.typ", "filename": "alignment.typ"}
{"text": "= angle\n\nAn angle describing a rotation.\n\nTypst supports the following angular units:\n\n- Degrees: `180deg`\n- Radians: `3.14rad`\n\n== Example\n\n```typst\n#rotate(10deg)[Hello there!]\n```\n\n== Definitions\n\n=== `rad`\n\nConverts this angle to radians.\n\n```\nrad(\n  \n) -> float\n```\n\n=== `deg`\n\nConverts this angle to degrees.\n\n```\ndeg(\n  \n) -> float\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/angle.typ", "filename": "angle.typ"}
{"text": "= block\n\nA block-level container.\n\nSuch a container can be used to separate content, size it, and give it a background or border.\n\nBlocks are also the primary way to control whether text becomes part of a paragraph or not. See #link(\"/docs/reference/model/par/#what-becomes-a-paragraph\")[the paragraph documentation] for more details.\n\n== Examples\n\nWith a block, you can give a background to content while still allowing it to break across multiple pages.\n\n```typst\n#set page(height: 100pt)\n#block(\n  fill: luma(230),\n  inset: 8pt,\n  radius: 4pt,\n  lorem(30),\n)\n```\n\nBlocks are also useful to force elements that would otherwise be inline to become block-level, especially when writing show rules.\n\n```typst\n#show heading: it => it.body\n= Blockless\nMore text.\n\n#show heading: it => block(it.body)\n= Blocky\nMore text.\n```\n\n== Parameters\n\n```\nblock(\n  width: auto | relative,\n  height: auto | relative | fraction,\n  breakable: bool,\n  fill: none | color | gradient | tiling,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  radius: relative | dictionary,\n  inset: relative | dictionary,\n  outset: relative | dictionary,\n  spacing: relative | fraction,\n  above: auto | relative | fraction,\n  below: auto | relative | fraction,\n  clip: bool,\n  sticky: bool,\n  body: none | content\n) -> content\n```\n\n=== `width`: auto | relative (Settable)\n\nThe block's width.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set align(center)\n#block(\n  width: 60%,\n  inset: 8pt,\n  fill: silver,\n  lorem(10),\n)\n```\n\n=== `height`: auto | relative | fraction (Settable)\n\nThe block's height. When the height is larger than the remaining space on a page and #link(\"/docs/reference/layout/block/#parameters-breakable\")[breakable] is `true`, the block will continue on the next page with the remaining height.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set page(height: 80pt)\n#set align(center)\n#block(\n  width: 80%,\n  height: 150%,\n  fill: aqua,\n)\n```\n\n=== `breakable`: bool (Settable)\n\nWhether the block can be broken and continue on the next page.\n\nDefault: `true`\n\n*Example:*\n```typst\n#set page(height: 80pt)\nThe following block will\njump to its own page.\n#block(\n  breakable: false,\n  lorem(15),\n)\n```\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nThe block's background color. See the #link(\"/docs/reference/visualize/rect/#parameters-fill\")[rectangle's documentation] for more details.\n\nDefault: `none`\n\n=== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nThe block's border color. See the #link(\"/docs/reference/visualize/rect/#parameters-stroke\")[rectangle's documentation] for more details.\n\nDefault: `(:)`\n\n=== `radius`: relative | dictionary (Settable)\n\nHow much to round the block's corners. See the #link(\"/docs/reference/visualize/rect/#parameters-radius\")[rectangle's documentation] for more details.\n\nDefault: `(:)`\n\n=== `inset`: relative | dictionary (Settable)\n\nHow much to pad the block's content. See the #link(\"/docs/reference/layout/box/#parameters-inset\")[box's documentation] for more details.\n\nDefault: `(:)`\n\n=== `outset`: relative | dictionary (Settable)\n\nHow much to expand the block's size without affecting the layout. See the #link(\"/docs/reference/layout/box/#parameters-outset\")[box's documentation] for more details.\n\nDefault: `(:)`\n\n=== `spacing`: relative | fraction (Settable)\n\nThe spacing around the block. When `auto`, inherits the paragraph #link(\"/docs/reference/model/par/#parameters-spacing\")[spacing].\n\nFor two adjacent blocks, the larger of the first block's `above` and the second block's `below` spacing wins. Moreover, block spacing takes precedence over paragraph #link(\"/docs/reference/model/par/#parameters-spacing\")[spacing].\n\nNote that this is only a shorthand to set `above` and `below` to the same value. Since the values for `above` and `below` might differ, a #link(\"/docs/reference/context/\")[context] block only provides access to `block.above` and `block.below`, not to `block.spacing` directly.\n\nThis property can be used in combination with a show rule to adjust the spacing around arbitrary block-level elements.\n\nDefault: `1.2em`\n\n*Example:*\n```typst\n#set align(center)\n#show math.equation: set block(above: 8pt, below: 16pt)\n\nThis sum of $x$ and $y$:\n$ x + y = z $\nA second paragraph.\n```\n\n=== `above`: auto | relative | fraction (Settable)\n\nThe spacing between this block and its predecessor.\n\nDefault: `auto`\n\n=== `below`: auto | relative | fraction (Settable)\n\nThe spacing between this block and its successor.\n\nDefault: `auto`\n\n=== `clip`: bool (Settable)\n\nWhether to clip the content inside the block.\n\nClipping is useful when the block's content is larger than the block itself, as any content that exceeds the block's bounds will be hidden.\n\nDefault: `false`\n\n*Example:*\n```typst\n#block(\n  width: 50pt,\n  height: 50pt,\n  clip: true,\n  image(\"tiger.jpg\", width: 100pt, height: 100pt)\n)\n```\n\n=== `sticky`: bool (Settable)\n\nWhether this block must stick to the following one, with no break in between.\n\nThis is, by default, set on heading blocks to prevent orphaned headings at the bottom of the page.\n\nDefault: `false`\n\n*Example:*\n```typst\n// Disable stickiness of headings.\n#show heading: set block(sticky: false)\n#lorem(20)\n\n= Chapter\n#lorem(10)\n```\n\n=== `body`: none | content (Positional, Settable)\n\nThe contents of the block.\n\nDefault: `none`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/block.typ", "filename": "block.typ"}
{"text": "= box\n\nAn inline-level container that sizes content.\n\nAll elements except inline math, text, and boxes are block-level and cannot occur inside of a #link(\"/docs/reference/model/par/\")[paragraph]. The box function can be used to integrate such elements into a paragraph. Boxes take the size of their contents by default but can also be sized explicitly.\n\n== Example\n\n```typst\nRefer to the docs\n#box(\n  height: 9pt,\n  image(\"docs.svg\")\n)\nfor more information.\n```\n\n== Parameters\n\n```\nbox(\n  width: auto | relative | fraction,\n  height: auto | relative,\n  baseline: relative,\n  fill: none | color | gradient | tiling,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  radius: relative | dictionary,\n  inset: relative | dictionary,\n  outset: relative | dictionary,\n  clip: bool,\n  body: none | content\n) -> content\n```\n\n=== `width`: auto | relative | fraction (Settable)\n\nThe width of the box.\n\nBoxes can have #link(\"/docs/reference/layout/fraction/\")[fractional] widths, as the example below demonstrates.\n\n_Note:_ Currently, only boxes and only their widths might be fractionally sized within paragraphs. Support for fractionally sized images, shapes, and more might be added in the future.\n\nDefault: `auto`\n\n*Example:*\n```typst\nLine in #box(width: 1fr, line(length: 100%)) between.\n```\n\n=== `height`: auto | relative (Settable)\n\nThe height of the box.\n\nDefault: `auto`\n\n=== `baseline`: relative (Settable)\n\nAn amount to shift the box's baseline by.\n\nDefault: `0% + 0pt`\n\n*Example:*\n```typst\nImage: #box(baseline: 40%, image(\"tiger.jpg\", width: 2cm)).\n```\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nThe box's background color. See the #link(\"/docs/reference/visualize/rect/#parameters-fill\")[rectangle's documentation] for more details.\n\nDefault: `none`\n\n=== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nThe box's border color. See the #link(\"/docs/reference/visualize/rect/#parameters-stroke\")[rectangle's documentation] for more details.\n\nDefault: `(:)`\n\n=== `radius`: relative | dictionary (Settable)\n\nHow much to round the box's corners. See the #link(\"/docs/reference/visualize/rect/#parameters-radius\")[rectangle's documentation] for more details.\n\nDefault: `(:)`\n\n=== `inset`: relative | dictionary (Settable)\n\nHow much to pad the box's content.\n\n_Note:_ When the box contains text, its exact size depends on the current #link(\"/docs/reference/text/text/#parameters-top-edge\")[text edges].\n\nDefault: `(:)`\n\n*Example:*\n```typst\n#rect(inset: 0pt)[Tight]\n```\n\n=== `outset`: relative | dictionary (Settable)\n\nHow much to expand the box's size without affecting the layout.\n\nThis is useful to prevent padding from affecting line layout. For a generalized version of the example below, see the documentation for the #link(\"/docs/reference/text/raw/#parameters-block\")[raw text's block parameter].\n\nDefault: `(:)`\n\n*Example:*\n```typst\nAn inline\n#box(\n  fill: luma(235),\n  inset: (x: 3pt, y: 0pt),\n  outset: (y: 3pt),\n  radius: 2pt,\n)[rectangle].\n```\n\n=== `clip`: bool (Settable)\n\nWhether to clip the content inside the box.\n\nClipping is useful when the box's content is larger than the box itself, as any content that exceeds the box's bounds will be hidden.\n\nDefault: `false`\n\n*Example:*\n```typst\n#box(\n  width: 50pt,\n  height: 50pt,\n  clip: true,\n  image(\"tiger.jpg\", width: 100pt, height: 100pt)\n)\n```\n\n=== `body`: none | content (Positional, Settable)\n\nThe contents of the box.\n\nDefault: `none`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/box.typ", "filename": "box.typ"}
{"text": "= colbreak\n\nForces a column break.\n\nThe function will behave like a #link(\"/docs/reference/layout/pagebreak/\")[page break] when used in a single column layout or the last column on a page. Otherwise, content after the column break will be placed in the next column.\n\n== Example\n\n```typst\n#set page(columns: 2)\nPreliminary findings from our\nongoing research project have\nrevealed a hitherto unknown\nphenomenon of extraordinary\nsignificance.\n\n#colbreak()\nThrough rigorous experimentation\nand analysis, we have discovered\na hitherto uncharacterized process\nthat defies our current\nunderstanding of the fundamental\nlaws of nature.\n```\n\n== Parameters\n\n```\ncolbreak(\n  weak: bool\n) -> content\n```\n\n=== `weak`: bool (Settable)\n\nIf `true`, the column break is skipped if the current column is already empty.\n\nDefault: `false`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/colbreak.typ", "filename": "colbreak.typ"}
{"text": "= columns\n\nSeparates a region into multiple equally sized columns.\n\nThe `column` function lets you separate the interior of any container into multiple columns. It will currently not balance the height of the columns. Instead, the columns will take up the height of their container or the remaining height on the page. Support for balanced columns is planned for the future.\n\n== Page-level columns\n\nIf you need to insert columns across your whole document, use the `page` function's #link(\"/docs/reference/layout/page/#parameters-columns\")[columns parameter] instead. This will create the columns directly at the page-level rather than wrapping all of your content in a layout container. As a result, things like #link(\"/docs/reference/layout/pagebreak/\")[pagebreaks], #link(\"/docs/reference/model/footnote/\")[footnotes], and #link(\"/docs/reference/model/par/#definitions-line\")[line numbers] will continue to work as expected. For more information, also read the #link(\"/docs/guides/page-setup-guide/#columns\")[relevant part of the page setup guide].\n\n== Breaking out of columns\n\nTo temporarily break out of columns (e.g. for a paper's title), use parent-scoped floating placement:\n\n```typst\n#set page(columns: 2, height: 150pt)\n\n#place(\n  top + center,\n  scope: \"parent\",\n  float: true,\n  text(1.4em, weight: \"bold\")[\n    My document\n  ],\n)\n\n#lorem(40)\n```\n\n== Parameters\n\n```\ncolumns(\n  count: int,\n  gutter: relative,\n  content: content\n) -> content\n```\n\n=== `count`: int (Positional, Settable)\n\nThe number of columns.\n\nDefault: `2`\n\n=== `gutter`: relative (Settable)\n\nThe size of the gutter space between each column.\n\nDefault: `4% + 0pt`\n\n=== `body`: content (Required, Positional)\n\nThe content that should be layouted into the columns.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/columns.typ", "filename": "columns.typ"}
{"text": "= direction\n\nThe four directions into which content can be laid out.\n\nPossible values are:\n\n- `ltr`: Left to right.\n- `rtl`: Right to left.\n- `ttb`: Top to bottom.\n- `btt`: Bottom to top.\n\nThese values are available globally and also in the direction type's scope, so you can write either of the following two:\n\n```typst\n#stack(dir: rtl)[A][B][C]\n#stack(dir: direction.rtl)[A][B][C]\n```\n\n== Definitions\n\n=== `axis`\n\nThe axis this direction belongs to, either `\"horizontal\"` or `\"vertical\"`.\n\n```\naxis(\n  \n) -> str\n```\n\n```typst\n#ltr.axis() \\\n#ttb.axis()\n```\n\n=== `start`\n\nThe start point of this direction, as an alignment.\n\n```\nstart(\n  \n) -> alignment\n```\n\n```typst\n#ltr.start() \\\n#rtl.start() \\\n#ttb.start() \\\n#btt.start()\n```\n\n=== `end`\n\nThe end point of this direction, as an alignment.\n\n```\nend(\n  \n) -> alignment\n```\n\n```typst\n#ltr.end() \\\n#rtl.end() \\\n#ttb.end() \\\n#btt.end()\n```\n\n=== `inv`\n\nThe inverse direction.\n\n```\ninv(\n  \n) -> direction\n```\n\n```typst\n#ltr.inv() \\\n#rtl.inv() \\\n#ttb.inv() \\\n#btt.inv()\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/direction.typ", "filename": "direction.typ"}
{"text": "= fraction\n\nDefines how the remaining space in a layout is distributed.\n\nEach fractionally sized element gets space based on the ratio of its fraction to the sum of all fractions.\n\nFor more details, also see the #link(\"/docs/reference/layout/h/\")[h] and #link(\"/docs/reference/layout/v/\")[v] functions and the #link(\"/docs/reference/layout/grid/\")[grid function].\n\n== Example\n\n```typst\nLeft #h(1fr) Left-ish #h(2fr) Right\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/fraction.typ", "filename": "fraction.typ"}
{"text": "= grid\n\nArranges content in a grid.\n\nThe grid element allows you to arrange content in a grid. You can define the number of rows and columns, as well as the size of the gutters between them. There are multiple sizing modes for columns and rows that can be used to create complex layouts.\n\nWhile the grid and table elements work very similarly, they are intended for different use cases and carry different semantics. The grid element is intended for presentational and layout purposes, while the #link(\"/docs/reference/model/table/\")[table] element is intended for, in broad terms, presenting multiple related data points. In the future, Typst will annotate its output such that screenreaders will announce content in `table` as tabular while a grid's content will be announced no different than multiple content blocks in the document flow. Set and show rules on one of these elements do not affect the other.\n\nA grid's sizing is determined by the track sizes specified in the arguments. Because each of the sizing parameters accepts the same values, we will explain them just once, here. Each sizing argument accepts an array of individual track sizes. A track size is either:\n\n- auto: The track will be sized to fit its contents. It will be at most as large as the remaining space. If there is more than one auto track width, and together they claim more than the available space, the auto tracks will fairly distribute the available space among themselves.\n- A fixed or relative length (e.g. 10pt or 20% - 1cm): The track will be exactly of this size.\n- A fractional length (e.g. 1fr): Once all other tracks have been sized, the remaining space will be divided among the fractional tracks according to their fractions. For example, if there are two fractional tracks, each with a fraction of 1fr, they will each take up half of the remaining space.\n\nTo specify a single track, the array can be omitted in favor of a single value. To specify multiple `auto` tracks, enter the number of tracks instead of an array. For example, `columns:` `3` is equivalent to `columns:` `(auto, auto, auto)`.\n\n== Examples\n\nThe example below demonstrates the different track sizing options. It also shows how you can use #link(\"/docs/reference/layout/grid/#definitions-cell\")[grid.cell] to make an individual cell span two grid tracks.\n\n```typst\n// We use `rect` to emphasize the\n// area of cells.\n#set rect(\n  inset: 8pt,\n  fill: rgb(\"e4e5ea\"),\n  width: 100%,\n)\n\n#grid(\n  columns: (60pt, 1fr, 2fr),\n  rows: (auto, 60pt),\n  gutter: 3pt,\n  rect[Fixed width, auto height],\n  rect[1/3 of the remains],\n  rect[2/3 of the remains],\n  rect(height: 100%)[Fixed height],\n  grid.cell(\n    colspan: 2,\n    image(\"tiger.jpg\", width: 100%),\n  ),\n)\n```\n\nYou can also #link(\"/docs/reference/foundations/arguments/#spreading\")[spread] an array of strings or content into a grid to populate its cells.\n\n```typst\n#grid(\n  columns: 5,\n  gutter: 5pt,\n  ..range(25).map(str)\n)\n```\n\n== Styling the grid\n\nThe grid's appearance can be customized through different parameters. These are the most important ones:\n\n- #link(\"/docs/reference/layout/grid/#parameters-fill\")[fill] to give all cells a background\n- #link(\"/docs/reference/layout/grid/#parameters-align\")[align] to change how cells are aligned\n- #link(\"/docs/reference/layout/grid/#parameters-inset\")[inset] to optionally add internal padding to each cell\n- #link(\"/docs/reference/layout/grid/#parameters-stroke\")[stroke] to optionally enable grid lines with a certain stroke\n\nIf you need to override one of the above options for a single cell, you can use the #link(\"/docs/reference/layout/grid/#definitions-cell\")[grid.cell] element. Likewise, you can override individual grid lines with the #link(\"/docs/reference/layout/grid/#definitions-hline\")[grid.hline] and #link(\"/docs/reference/layout/grid/#definitions-vline\")[grid.vline] elements.\n\nAlternatively, if you need the appearance options to depend on a cell's position (column and row), you may specify a function to `fill` or `align` of the form `(column, row) => value`. You may also use a show rule on #link(\"/docs/reference/layout/grid/#definitions-cell\")[grid.cell] - see that element's examples or the examples below for more information.\n\nLocating most of your styling in set and show rules is recommended, as it keeps the grid's or table's actual usages clean and easy to read. It also allows you to easily change the grid's appearance in one place.\n\nThere are three ways to set the stroke of a grid cell: through #link(\"/docs/reference/layout/grid/#definitions-cell-stroke\")[grid.cell's stroke field], by using #link(\"/docs/reference/layout/grid/#definitions-hline\")[grid.hline] and #link(\"/docs/reference/layout/grid/#definitions-vline\")[grid.vline], or by setting the #link(\"/docs/reference/layout/grid/#parameters-stroke\")[grid's stroke field]. When multiple of these settings are present and conflict, the `hline` and `vline` settings take the highest precedence, followed by the `cell` settings, and finally the `grid` settings.\n\nFurthermore, strokes of a repeated grid header or footer will take precedence over regular cell strokes.\n\n== Parameters\n\n```\ngrid(\n  columns: auto | int | relative | fraction | array,\n  rows: auto | int | relative | fraction | array,\n  gutter: auto | int | relative | fraction | array,\n  column-gutter: auto | int | relative | fraction | array,\n  row-gutter: auto | int | relative | fraction | array,\n  fill: none | color | gradient | array | tiling | function,\n  align: auto | array | alignment | function,\n  stroke: none | length | color | gradient | array | stroke | tiling | dictionary | function,\n  inset: relative | array | dictionary | function,\n  ..: content\n) -> content\n```\n\n=== `columns`: auto | int | relative | fraction | array (Settable)\n\nThe column sizes.\n\nEither specify a track size array or provide an integer to create a grid with that many `auto`-sized columns. Note that opposed to rows and gutters, providing a single track size will only ever create a single column.\n\nDefault: `()`\n\n=== `rows`: auto | int | relative | fraction | array (Settable)\n\nThe row sizes.\n\nIf there are more cells than fit the defined rows, the last row is repeated until there are no more cells.\n\nDefault: `()`\n\n=== `gutter`: auto | int | relative | fraction | array (Settable)\n\nThe gaps between rows and columns.\n\nIf there are more gutters than defined sizes, the last gutter is repeated.\n\nThis is a shorthand to set `column-gutter` and `row-gutter` to the same value.\n\nDefault: `()`\n\n=== `column-gutter`: auto | int | relative | fraction | array (Settable)\n\nThe gaps between columns.\n\nDefault: `()`\n\n=== `row-gutter`: auto | int | relative | fraction | array (Settable)\n\nThe gaps between rows.\n\nDefault: `()`\n\n=== `fill`: none | color | gradient | array | tiling | function (Settable)\n\nHow to fill the cells.\n\nThis can be a color or a function that returns a color. The function receives the cells' column and row indices, starting from zero. This can be used to implement striped grids.\n\nDefault: `none`\n\n*Example:*\n```typst\n#grid(\n  fill: (x, y) =>\n    if calc.even(x + y) { luma(230) }\n    else { white },\n  align: center + horizon,\n  columns: 4,\n  inset: 2pt,\n  [X], [O], [X], [O],\n  [O], [X], [O], [X],\n  [X], [O], [X], [O],\n  [O], [X], [O], [X],\n)\n```\n\n=== `align`: auto | array | alignment | function (Settable)\n\nHow to align the cells' content.\n\nThis can either be a single alignment, an array of alignments (corresponding to each column) or a function that returns an alignment. The function receives the cells' column and row indices, starting from zero. If set to `auto`, the outer alignment is used.\n\nYou can find an example for this argument at the #link(\"/docs/reference/model/table/#parameters-align\")[table.align] parameter.\n\nDefault: `auto`\n\n=== `stroke`: none | length | color | gradient | array | stroke | tiling | dictionary | function (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the cells.\n\nGrids have no strokes by default, which can be changed by setting this option to the desired stroke.\n\nIf it is necessary to place lines which can cross spacing between cells produced by the `gutter` option, or to override the stroke between multiple specific cells, consider specifying one or more of #link(\"/docs/reference/layout/grid/#definitions-hline\")[grid.hline] and #link(\"/docs/reference/layout/grid/#definitions-vline\")[grid.vline] alongside your grid cells.\n\nDefault: `(:)`\n\n*Example:*\n```typst\n#set page(height: 13em, width: 26em)\n\n#let cv(..jobs) = grid(\n  columns: 2,\n  inset: 5pt,\n  stroke: (x, y) => if x == 0 and y > 0 {\n    (right: (\n      paint: luma(180),\n      thickness: 1.5pt,\n      dash: \"dotted\"\n    ))\n  },\n  grid.header(grid.cell(colspan: 2)[\n    *Professional Experience*\n    #box(width: 1fr, line(length: 100%, stroke: luma(180)))\n  ]),\n  ..{\n    let last = none\n    for job in jobs.pos() {\n      (\n        if job.year != last [*#job.year*],\n        [\n          *#job.company* - #job.role _(#job.timeframe)_ \\\n          #job.details\n        ]\n      )\n      last = job.year\n    }\n  }\n)\n\n#cv(\n  (\n    year: 2012,\n    company: [Pear Seed & Co.],\n    role: [Lead Engineer],\n    timeframe: [Jul - Dec],\n    details: [\n      - Raised engineers from 3x to 10x\n      - Did a great job\n    ],\n  ),\n  (\n    year: 2012,\n    company: [Mega Corp.],\n    role: [VP of Sales],\n    timeframe: [Mar - Jun],\n    details: [- Closed tons of customers],\n  ),\n  (\n    year: 2013,\n    company: [Tiny Co.],\n    role: [CEO],\n    timeframe: [Jan - Dec],\n    details: [- Delivered 4x more shareholder value],\n  ),\n  (\n    year: 2014,\n    company: [Glorbocorp Ltd],\n    role: [CTO],\n    timeframe: [Jan - Mar],\n    details: [- Drove containerization forward],\n  ),\n)\n```\n\n=== `inset`: relative | array | dictionary | function (Settable)\n\nHow much to pad the cells' content.\n\nYou can find an example for this argument at the #link(\"/docs/reference/model/table/#parameters-inset\")[table.inset] parameter.\n\nDefault: `(:)`\n\n=== `children`: content (Required, Positional, Variadic)\n\nThe contents of the grid cells, plus any extra grid lines specified with the #link(\"/docs/reference/layout/grid/#definitions-hline\")[grid.hline] and #link(\"/docs/reference/layout/grid/#definitions-vline\")[grid.vline] elements.\n\nThe cells are populated in row-major order.\n\n== Definitions\n\n=== `cell`\n\nA cell in the grid. You can use this function in the argument list of a grid to override grid style properties for an individual cell or manually positioning it within the grid. You can also use this function in show rules to apply certain styles to multiple cells at once.\n\nFor example, you can override the position and stroke for a single cell:\n\n```\ncell(\n  content: content,\n  x: auto | int,\n  y: auto | int,\n  colspan: int,\n  rowspan: int,\n  fill: none | auto | color | gradient | tiling,\n  align: auto | alignment,\n  inset: auto | relative | dictionary,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  breakable: auto | bool\n) -> content\n```\n\n```typst\n#set text(15pt, font: \"Noto Sans Symbols 2\")\n#show regex(\"[♚-♟︎]\"): set text(fill: rgb(\"21212A\"))\n#show regex(\"[♔-♙]\"): set text(fill: rgb(\"111015\"))\n\n#grid(\n  fill: (x, y) => rgb(\n    if calc.odd(x + y) { \"7F8396\" }\n    else { \"EFF0F3\" }\n  ),\n  columns: (1em,) * 8,\n  rows: 1em,\n  align: center + horizon,\n\n  [♖], [♘], [♗], [♕], [♔], [♗], [♘], [♖],\n  [♙], [♙], [♙], [♙], [],  [♙], [♙], [♙],\n  grid.cell(\n    x: 4, y: 3,\n    stroke: blue.transparentize(60%)\n  )[♙],\n\n  ..(grid.cell(y: 6)[♟],) * 8,\n  ..([♜], [♞], [♝], [♛], [♚], [♝], [♞], [♜])\n    .map(grid.cell.with(y: 7)),\n)\n```\n\nYou may also apply a show rule on `grid.cell` to style all cells at once, which allows you, for example, to apply styles based on a cell's position. Refer to the examples of the #link(\"/docs/reference/model/table/#definitions-cell\")[table.cell] element to learn more about this.\n\n==== `body`: content (Required, Positional)\n\nThe cell's body.\n\n==== `x`: auto | int (Settable)\n\nThe cell's column (zero-indexed). This field may be used in show rules to style a cell depending on its column.\n\nYou may override this field to pick in which column the cell must be placed. If no row (`y`) is chosen, the cell will be placed in the first row (starting at row 0) with that column available (or a new row if none). If both `x` and `y` are chosen, however, the cell will be placed in that exact position. An error is raised if that position is not available (thus, it is usually wise to specify cells with a custom position before cells with automatic positions).\n\nDefault: `auto`\n\n*Example:*\n```typst\n#let circ(c) = circle(\n    fill: c, width: 5mm\n)\n\n#grid(\n  columns: 4,\n  rows: 7mm,\n  stroke: .5pt + blue,\n  align: center + horizon,\n  inset: 1mm,\n\n  grid.cell(x: 2, y: 2, circ(aqua)),\n  circ(yellow),\n  grid.cell(x: 3, circ(green)),\n  circ(black),\n)\n```\n\n==== `y`: auto | int (Settable)\n\nThe cell's row (zero-indexed). This field may be used in show rules to style a cell depending on its row.\n\nYou may override this field to pick in which row the cell must be placed. If no column (`x`) is chosen, the cell will be placed in the first column (starting at column 0) available in the chosen row. If all columns in the chosen row are already occupied, an error is raised.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#let tri(c) = polygon.regular(\n  fill: c,\n  size: 5mm,\n  vertices: 3,\n)\n\n#grid(\n  columns: 2,\n  stroke: blue,\n  inset: 1mm,\n\n  tri(black),\n  grid.cell(y: 1, tri(teal)),\n  grid.cell(y: 1, tri(red)),\n  grid.cell(y: 2, tri(orange))\n)\n```\n\n==== `colspan`: int (Settable)\n\nThe amount of columns spanned by this cell.\n\nDefault: `1`\n\n==== `rowspan`: int (Settable)\n\nThe amount of rows spanned by this cell.\n\nDefault: `1`\n\n==== `fill`: none | auto | color | gradient | tiling (Settable)\n\nThe cell's #link(\"/docs/reference/layout/grid/#parameters-fill\")[fill] override.\n\nDefault: `auto`\n\n==== `align`: auto | alignment (Settable)\n\nThe cell's #link(\"/docs/reference/layout/grid/#parameters-align\")[alignment] override.\n\nDefault: `auto`\n\n==== `inset`: auto | relative | dictionary (Settable)\n\nThe cell's #link(\"/docs/reference/layout/grid/#parameters-inset\")[inset] override.\n\nDefault: `auto`\n\n==== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nThe cell's #link(\"/docs/reference/layout/grid/#parameters-stroke\")[stroke] override.\n\nDefault: `(:)`\n\n==== `breakable`: auto | bool (Settable)\n\nWhether rows spanned by this cell can be placed in different pages. When equal to `auto`, a cell spanning only fixed-size rows is unbreakable, while a cell spanning at least one `auto`-sized row is breakable.\n\nDefault: `auto`\n\n=== `hline`\n\nA horizontal line in the grid.\n\nOverrides any per-cell stroke, including stroke specified through the grid's `stroke` field. Can cross spacing between cells created through the grid's `column-gutter` option.\n\nAn example for this function can be found at the #link(\"/docs/reference/model/table/#definitions-hline\")[table.hline] element.\n\n```\nhline(\n  y: auto | int,\n  start: int,\n  end: none | int,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  position: alignment\n) -> content\n```\n\n==== `y`: auto | int (Settable)\n\nThe row above which the horizontal line is placed (zero-indexed). If the `position` field is set to `bottom`, the line is placed below the row with the given index instead (see that field's docs for details).\n\nSpecifying `auto` causes the line to be placed at the row below the last automatically positioned cell (that is, cell without coordinate overrides) before the line among the grid's children. If there is no such cell before the line, it is placed at the top of the grid (row 0). Note that specifying for this option exactly the total amount of rows in the grid causes this horizontal line to override the bottom border of the grid, while a value of 0 overrides the top border.\n\nDefault: `auto`\n\n==== `start`: int (Settable)\n\nThe column at which the horizontal line starts (zero-indexed, inclusive).\n\nDefault: `0`\n\n==== `end`: none | int (Settable)\n\nThe column before which the horizontal line ends (zero-indexed, exclusive). Therefore, the horizontal line will be drawn up to and across column `end - 1`.\n\nA value equal to `none` or to the amount of columns causes it to extend all the way towards the end of the grid.\n\nDefault: `none`\n\n==== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nThe line's stroke.\n\nSpecifying `none` removes any lines previously placed across this line's range, including hlines or per-cell stroke below it.\n\nDefault: `1pt + black`\n\n==== `position`: alignment (Settable)\n\nThe position at which the line is placed, given its row (`y`) - either `top` to draw above it or `bottom` to draw below it.\n\nThis setting is only relevant when row gutter is enabled (and shouldn't be used otherwise - prefer just increasing the `y` field by one instead), since then the position below a row becomes different from the position above the next row due to the spacing between both.\n\nDefault: `top`\n\n=== `vline`\n\nA vertical line in the grid.\n\nOverrides any per-cell stroke, including stroke specified through the grid's `stroke` field. Can cross spacing between cells created through the grid's `row-gutter` option.\n\n```\nvline(\n  x: auto | int,\n  start: int,\n  end: none | int,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  position: alignment\n) -> content\n```\n\n==== `x`: auto | int (Settable)\n\nThe column before which the horizontal line is placed (zero-indexed). If the `position` field is set to `end`, the line is placed after the column with the given index instead (see that field's docs for details).\n\nSpecifying `auto` causes the line to be placed at the column after the last automatically positioned cell (that is, cell without coordinate overrides) before the line among the grid's children. If there is no such cell before the line, it is placed before the grid's first column (column 0). Note that specifying for this option exactly the total amount of columns in the grid causes this vertical line to override the end border of the grid (right in LTR, left in RTL), while a value of 0 overrides the start border (left in LTR, right in RTL).\n\nDefault: `auto`\n\n==== `start`: int (Settable)\n\nThe row at which the vertical line starts (zero-indexed, inclusive).\n\nDefault: `0`\n\n==== `end`: none | int (Settable)\n\nThe row on top of which the vertical line ends (zero-indexed, exclusive). Therefore, the vertical line will be drawn up to and across row `end - 1`.\n\nA value equal to `none` or to the amount of rows causes it to extend all the way towards the bottom of the grid.\n\nDefault: `none`\n\n==== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nThe line's stroke.\n\nSpecifying `none` removes any lines previously placed across this line's range, including vlines or per-cell stroke below it.\n\nDefault: `1pt + black`\n\n==== `position`: alignment (Settable)\n\nThe position at which the line is placed, given its column (`x`) - either `start` to draw before it or `end` to draw after it.\n\nThe values `left` and `right` are also accepted, but discouraged as they cause your grid to be inconsistent between left-to-right and right-to-left documents.\n\nThis setting is only relevant when column gutter is enabled (and shouldn't be used otherwise - prefer just increasing the `x` field by one instead), since then the position after a column becomes different from the position before the next column due to the spacing between both.\n\nDefault: `start`\n\n=== `header`\n\nA repeatable grid header.\n\nIf `repeat` is set to `true`, the header will be repeated across pages. For an example, refer to the #link(\"/docs/reference/model/table/#definitions-header\")[table.header] element and the #link(\"/docs/reference/layout/grid/#parameters-stroke\")[grid.stroke] parameter.\n\n```\nheader(\n  repeat: bool,\n  ..: content\n) -> content\n```\n\n==== `repeat`: bool (Settable)\n\nWhether this header should be repeated across pages.\n\nDefault: `true`\n\n==== `children`: content (Required, Positional, Variadic)\n\nThe cells and lines within the header.\n\n=== `footer`\n\nA repeatable grid footer.\n\nJust like the #link(\"/docs/reference/layout/grid/#definitions-header\")[grid.header] element, the footer can repeat itself on every page of the table.\n\nNo other grid cells may be placed after the footer.\n\n```\nfooter(\n  repeat: bool,\n  ..: content\n) -> content\n```\n\n==== `repeat`: bool (Settable)\n\nWhether this footer should be repeated across pages.\n\nDefault: `true`\n\n==== `children`: content (Required, Positional, Variadic)\n\nThe cells and lines within the footer.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/grid.typ", "filename": "grid.typ"}
{"text": "= h\n\nInserts horizontal spacing into a paragraph.\n\nThe spacing can be absolute, relative, or fractional. In the last case, the remaining space on the line is distributed among all fractional spacings according to their relative fractions.\n\n== Example\n\n```typst\nFirst #h(1cm) Second \\\nFirst #h(30%) Second\n```\n\n== Fractional spacing\n\nWith fractional spacing, you can align things within a line without forcing a paragraph break (like #link(\"/docs/reference/layout/align/\")[align] would). Each fractionally sized element gets space based on the ratio of its fraction to the sum of all fractions.\n\n```typst\nFirst #h(1fr) Second \\\nFirst #h(1fr) Second #h(1fr) Third \\\nFirst #h(2fr) Second #h(1fr) Third\n```\n\n== Mathematical Spacing\n\nIn #link(\"/docs/reference/math/\")[mathematical formulas], you can additionally use these constants to add spacing between elements: `thin` (1/6 em), `med` (2/9 em), `thick` (5/18 em), `quad` (1 em), `wide` (2 em).\n\n== Parameters\n\n```\nh(\n  relative: relative | fraction,\n  weak: bool\n) -> content\n```\n\n=== `amount`: relative | fraction (Required, Positional)\n\nHow much spacing to insert.\n\n=== `weak`: bool (Settable)\n\nIf `true`, the spacing collapses at the start or end of a paragraph. Moreover, from multiple adjacent weak spacings all but the largest one collapse.\n\nWeak spacing in markup also causes all adjacent markup spaces to be removed, regardless of the amount of spacing inserted. To force a space next to weak spacing, you can explicitly write `#\" \"` (for a normal space) or `~` (for a non-breaking space). The latter can be useful to create a construct that always attaches to the preceding word with one non-breaking space, independently of whether a markup space existed in front or not.\n\nDefault: `false`\n\n*Example:*\n```typst\n#h(1cm, weak: true)\nWe identified a group of _weak_\nspecimens that fail to manifest\nin most cases. However, when\n#h(8pt, weak: true) supported\n#h(8pt, weak: true) on both sides,\nthey do show up.\n\nFurther #h(0pt, weak: true) more,\neven the smallest of them swallow\nadjacent markup spaces.\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/h.typ", "filename": "h.typ"}
{"text": "= hide\n\nHides content without affecting layout.\n\nThe `hide` function allows you to hide content while the layout still 'sees' it. This is useful to create whitespace that is exactly as large as some content. It may also be useful to redact content because its arguments are not included in the output.\n\n== Example\n\n```typst\nHello Jane \\\n#hide[Hello] Joe\n```\n\n== Parameters\n\n```\nhide(\n  content: content\n) -> content\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to hide.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/hide.typ", "filename": "hide.typ"}
{"text": "= layout\n\nProvides access to the current outer container's (or page's, if none) dimensions (width and height).\n\nAccepts a function that receives a single parameter, which is a dictionary with keys `width` and `height`, both of type #link(\"/docs/reference/layout/length/\")[length]. The function is provided #link(\"/docs/reference/context/\")[context], meaning you don't need to use it in combination with the `context` keyword. This is why #link(\"/docs/reference/layout/measure/\")[measure] can be called in the example below.\n\n```typst\n#let text = lorem(30)\n#layout(size => [\n  #let (height,) = measure(\n    block(width: size.width, text),\n  )\n  This text is #height high with\n  the current page width: \\\n  #text\n])\n```\n\nNote that the `layout` function forces its contents into a #link(\"/docs/reference/layout/block/\")[block]-level container, so placement relative to the page or pagebreaks are not possible within it.\n\nIf the `layout` call is placed inside a box with a width of `800pt` and a height of `400pt`, then the specified function will be given the argument `(width: 800pt, height: 400pt)`. If it is placed directly into the page, it receives the page's dimensions minus its margins. This is mostly useful in combination with #link(\"/docs/reference/layout/measure/\")[measurement].\n\nYou can also use this function to resolve #link(\"/docs/reference/layout/ratio/\")[ratio] to fixed lengths. This might come in handy if you're building your own layout abstractions.\n\n```typst\n#layout(size => {\n  let half = 50% * size.width\n  [Half a page is #half wide.]\n})\n```\n\nNote that the width or height provided by `layout` will be infinite if the corresponding page dimension is set to `auto`.\n\n== Parameters\n\n```\nlayout(\n  function: function\n) -> content\n```\n\n=== `func`: function (Required, Positional)\n\nA function to call with the outer container's size. Its return value is displayed in the document.\n\nThe container's size is given as a #link(\"/docs/reference/foundations/dictionary/\")[dictionary] with the keys `width` and `height`.\n\nThis function is called once for each time the content returned by `layout` appears in the document. This makes it possible to generate content that depends on the dimensions of its container.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/layout.typ", "filename": "layout.typ"}
{"text": "= length\n\nA size or distance, possibly expressed with contextual units.\n\nTypst supports the following length units:\n\n- Points: `72pt`\n- Millimeters: `254mm`\n- Centimeters: `2.54cm`\n- Inches: `1in`\n- Relative to font size: `2.5em`\n\nYou can multiply lengths with and divide them by integers and floats.\n\n== Example\n\n```typst\n#rect(width: 20pt)\n#rect(width: 2em)\n#rect(width: 1in)\n\n#(3em + 5pt).em \\\n#(20pt).em \\\n#(40em + 2pt).abs \\\n#(5em).abs\n```\n\n== Fields\n\n- `abs`: A length with just the absolute component of the current length (that is, excluding the `em` component).\n- `em`: The amount of `em` units in this length, as a #link(\"/docs/reference/foundations/float/\")[float].\n\n== Definitions\n\n=== `pt`\n\nConverts this length to points.\n\nFails with an error if this length has non-zero `em` units (such as `5em + 2pt` instead of just `2pt`). Use the `abs` field (such as in `(5em + 2pt).abs.pt()`) to ignore the `em` component of the length (thus converting only its absolute component).\n\n```\npt(\n  \n) -> float\n```\n\n=== `mm`\n\nConverts this length to millimeters.\n\nFails with an error if this length has non-zero `em` units. See the #link(\"/docs/reference/layout/length/#definitions-pt\")[pt] method for more details.\n\n```\nmm(\n  \n) -> float\n```\n\n=== `cm`\n\nConverts this length to centimeters.\n\nFails with an error if this length has non-zero `em` units. See the #link(\"/docs/reference/layout/length/#definitions-pt\")[pt] method for more details.\n\n```\ncm(\n  \n) -> float\n```\n\n=== `inches`\n\nConverts this length to inches.\n\nFails with an error if this length has non-zero `em` units. See the #link(\"/docs/reference/layout/length/#definitions-pt\")[pt] method for more details.\n\n```\ninches(\n  \n) -> float\n```\n\n=== `to-absolute`\n\nResolve this length to an absolute length.\n\n```\nto-absolute(\n  \n) -> length\n```\n\n```typst\n#set text(size: 12pt)\n#context [\n  #(6pt).to-absolute() \\\n  #(6pt + 10em).to-absolute() \\\n  #(10em).to-absolute()\n]\n\n#set text(size: 6pt)\n#context [\n  #(6pt).to-absolute() \\\n  #(6pt + 10em).to-absolute() \\\n  #(10em).to-absolute()\n]\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/length.typ", "filename": "length.typ"}
{"text": "= measure\n\nMeasures the layouted size of content.\n\nThe `measure` function lets you determine the layouted size of content. By default an infinite space is assumed, so the measured dimensions may not necessarily match the final dimensions of the content. If you want to measure in the current layout dimensions, you can combine `measure` and #link(\"/docs/reference/layout/layout/\")[layout].\n\n== Example\n\nThe same content can have a different size depending on the #link(\"/docs/reference/context/\")[context] that it is placed into. In the example below, the `#content` is of course bigger when we increase the font size.\n\n```typst\n#let content = [Hello!]\n#content\n#set text(14pt)\n#content\n```\n\nFor this reason, you can only measure when context is available.\n\n```typst\n#let thing(body) = context {\n  let size = measure(body)\n  [Width of \"#body\" is #size.width]\n}\n\n#thing[Hey] \\\n#thing[Welcome]\n```\n\nThe measure function returns a dictionary with the entries `width` and `height`, both of type #link(\"/docs/reference/layout/length/\")[length].\n\n== Parameters\n\n```\nmeasure(\n  width: auto | length,\n  height: auto | length,\n  content: content\n) -> dictionary\n```\n\n=== `width`: auto | length\n\nThe width available to layout the content.\n\nSetting this to `auto` indicates infinite available width.\n\nNote that using the `width` and `height` parameters of this function is different from measuring a sized #link(\"/docs/reference/layout/block/\")[block] containing the content. In the following example, the former will get the dimensions of the inner content instead of the dimensions of the block.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#context measure(lorem(100), width: 400pt)\n\n#context measure(block(lorem(100), width: 400pt))\n```\n\n=== `height`: auto | length\n\nThe height available to layout the content.\n\nSetting this to `auto` indicates infinite available height.\n\nDefault: `auto`\n\n=== `content`: content (Required, Positional)\n\nThe content whose size to measure.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/measure.typ", "filename": "measure.typ"}
{"text": "= move\n\nMoves content without affecting layout.\n\nThe `move` function allows you to move content while the layout still 'sees' it at the original positions. Containers will still be sized as if the content was not moved.\n\n== Example\n\n```typst\n#rect(inset: 0pt, move(\n  dx: 6pt, dy: 6pt,\n  rect(\n    inset: 8pt,\n    fill: white,\n    stroke: black,\n    [Abra cadabra]\n  )\n))\n```\n\n== Parameters\n\n```\nmove(\n  dx: relative,\n  dy: relative,\n  content: content\n) -> content\n```\n\n=== `dx`: relative (Settable)\n\nThe horizontal displacement of the content.\n\nDefault: `0% + 0pt`\n\n=== `dy`: relative (Settable)\n\nThe vertical displacement of the content.\n\nDefault: `0% + 0pt`\n\n=== `body`: content (Required, Positional)\n\nThe content to move.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/move.typ", "filename": "move.typ"}
{"text": "= pad\n\nAdds spacing around content.\n\nThe spacing can be specified for each side individually, or for all sides at once by specifying a positional argument.\n\n== Example\n\n```typst\n#set align(center)\n\n#pad(x: 16pt, image(\"typing.jpg\"))\n_Typing speeds can be\n measured in words per minute._\n```\n\n== Parameters\n\n```\npad(\n  left: relative,\n  top: relative,\n  right: relative,\n  bottom: relative,\n  x: relative,\n  y: relative,\n  rest: relative,\n  content: content\n) -> content\n```\n\n=== `left`: relative (Settable)\n\nThe padding at the left side.\n\nDefault: `0% + 0pt`\n\n=== `top`: relative (Settable)\n\nThe padding at the top side.\n\nDefault: `0% + 0pt`\n\n=== `right`: relative (Settable)\n\nThe padding at the right side.\n\nDefault: `0% + 0pt`\n\n=== `bottom`: relative (Settable)\n\nThe padding at the bottom side.\n\nDefault: `0% + 0pt`\n\n=== `x`: relative (Settable)\n\nA shorthand to set `left` and `right` to the same value.\n\nDefault: `0% + 0pt`\n\n=== `y`: relative (Settable)\n\nA shorthand to set `top` and `bottom` to the same value.\n\nDefault: `0% + 0pt`\n\n=== `rest`: relative (Settable)\n\nA shorthand to set all four sides to the same value.\n\nDefault: `0% + 0pt`\n\n=== `body`: content (Required, Positional)\n\nThe content to pad at the sides.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/pad.typ", "filename": "pad.typ"}
{"text": "= page\n\nLayouts its child onto one or multiple pages.\n\nAlthough this function is primarily used in set rules to affect page properties, it can also be used to explicitly render its argument onto a set of pages of its own.\n\nPages can be set to use `auto` as their width or height. In this case, the pages will grow to fit their content on the respective axis.\n\nThe #link(\"/docs/guides/page-setup-guide/\")[Guide for Page Setup] explains how to use this and related functions to set up a document with many examples.\n\n== Example\n\n```typst\n#set page(\"us-letter\")\n\nThere you go, US friends!\n```\n\n== Parameters\n\n```\npage(\n  paper: str,\n  width: auto | length,\n  height: auto | length,\n  flipped: bool,\n  margin: auto | relative | dictionary,\n  binding: auto | alignment,\n  columns: int,\n  fill: none | auto | color | gradient | tiling,\n  numbering: none | str | function,\n  supplement: none | auto | content,\n  number-align: alignment,\n  header: none | auto | content,\n  header-ascent: relative,\n  footer: none | auto | content,\n  footer-descent: relative,\n  background: none | content,\n  foreground: none | content,\n  content: content\n) -> content\n```\n\n=== `paper`: str (Settable)\n\nA standard paper size to set width and height.\n\nThis is just a shorthand for setting `width` and `height` and, as such, cannot be retrieved in a context expression.\n\nDefault: `\"a4\"`\n\n=== `width`: auto | length (Settable)\n\nThe width of the page.\n\nDefault: `595.28pt`\n\n*Example:*\n```typst\n#set page(\n  width: 3cm,\n  margin: (x: 0cm),\n)\n\n#for i in range(3) {\n  box(square(width: 1cm))\n}\n```\n\n=== `height`: auto | length (Settable)\n\nThe height of the page.\n\nIf this is set to `auto`, page breaks can only be triggered manually by inserting a #link(\"/docs/reference/layout/pagebreak/\")[page break]. Most examples throughout this documentation use `auto` for the height of the page to dynamically grow and shrink to fit their content.\n\nDefault: `841.89pt`\n\n=== `flipped`: bool (Settable)\n\nWhether the page is flipped into landscape orientation.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set page(\n  \"us-business-card\",\n  flipped: true,\n  fill: rgb(\"f2e5dd\"),\n)\n\n#set align(bottom + end)\n#text(14pt)[*Sam H. Richards*] \\\n_Procurement Manager_\n\n#set text(10pt)\n17 Main Street \\\nNew York, NY 10001 \\\n+1 555 555 5555\n```\n\n=== `margin`: auto | relative | dictionary (Settable)\n\nThe page's margins.\n\n- `auto`: The margins are set automatically to 2.5/21 times the smaller dimension of the page. This results in 2.5cm margins for an A4 page.\n- A single length: The same margin on all sides.\n- A dictionary: With a dictionary, the margins can be set individually. The dictionary can contain the following keys in order of precedence: top: The top margin. right: The right margin. bottom: The bottom margin. left: The left margin. inside: The margin at the inner side of the page (where the binding is). outside: The margin at the outer side of the page (opposite to the binding). x: The horizontal margins. y: The vertical margins. rest: The margins on all sides except those for which the dictionary explicitly sets a size.\n\nThe values for `left` and `right` are mutually exclusive with the values for `inside` and `outside`.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set page(\n width: 3cm,\n height: 4cm,\n margin: (x: 8pt, y: 4pt),\n)\n\n#rect(\n  width: 100%,\n  height: 100%,\n  fill: aqua,\n)\n```\n\n=== `binding`: auto | alignment (Settable)\n\nOn which side the pages will be bound.\n\n- `auto`: Equivalent to `left` if the #link(\"/docs/reference/text/text/#parameters-dir\")[text direction] is left-to-right and `right` if it is right-to-left.\n- `left`: Bound on the left side.\n- `right`: Bound on the right side.\n\nThis affects the meaning of the `inside` and `outside` options for margins.\n\nDefault: `auto`\n\n=== `columns`: int (Settable)\n\nHow many columns the page has.\n\nIf you need to insert columns into a page or other container, you can also use the #link(\"/docs/reference/layout/columns/\")[columns function].\n\nDefault: `1`\n\n*Example:*\n```typst\n#set page(columns: 2, height: 4.8cm)\nClimate change is one of the most\npressing issues of our time, with\nthe potential to devastate\ncommunities, ecosystems, and\neconomies around the world. It's\nclear that we need to take urgent\naction to reduce our carbon\nemissions and mitigate the impacts\nof a rapidly changing climate.\n```\n\n=== `fill`: none | auto | color | gradient | tiling (Settable)\n\nThe page's background fill.\n\nSetting this to something non-transparent instructs the printer to color the complete page. If you are considering larger production runs, it may be more environmentally friendly and cost-effective to source pre-dyed pages and not set this property.\n\nWhen set to `none`, the background becomes transparent. Note that PDF pages will still appear with a (usually white) background in viewers, but they are actually transparent. (If you print them, no color is used for the background.)\n\nThe default of `auto` results in `none` for PDF output, and `white` for PNG and SVG.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set page(fill: rgb(\"444352\"))\n#set text(fill: rgb(\"fdfdfd\"))\n*Dark mode enabled.*\n```\n\n=== `numbering`: none | str | function (Settable)\n\nHow to #link(\"/docs/reference/model/numbering/\")[number] the pages.\n\nIf an explicit `footer` (or `header` for top-aligned numbering) is given, the numbering is ignored.\n\nDefault: `none`\n\n*Example:*\n```typst\n#set page(\n  height: 100pt,\n  margin: (top: 16pt, bottom: 24pt),\n  numbering: \"1 / 1\",\n)\n\n#lorem(48)\n```\n\n=== `supplement`: none | auto | content (Settable)\n\nA supplement for the pages.\n\nFor page references, this is added before the page number.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set page(numbering: \"1.\", supplement: [p.])\n\n= Introduction <intro>\nWe are on #ref(<intro>, form: \"page\")!\n```\n\n=== `number-align`: alignment (Settable)\n\nThe alignment of the page numbering.\n\nIf the vertical component is `top`, the numbering is placed into the header and if it is `bottom`, it is placed in the footer. Horizon alignment is forbidden. If an explicit matching `header` or `footer` is given, the numbering is ignored.\n\nDefault: `center + bottom`\n\n*Example:*\n```typst\n#set page(\n  margin: (top: 16pt, bottom: 24pt),\n  numbering: \"1\",\n  number-align: right,\n)\n\n#lorem(30)\n```\n\n=== `header`: none | auto | content (Settable)\n\nThe page's header. Fills the top margin of each page.\n\n- Content: Shows the content as the header.\n- `auto`: Shows the page number if a `numbering` is set and `number-align` is `top`.\n- `none`: Suppresses the header.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set par(justify: true)\n#set page(\n  margin: (top: 32pt, bottom: 20pt),\n  header: [\n    #set text(8pt)\n    #smallcaps[Typst Academy]\n    #h(1fr) _Exercise Sheet 3_\n  ],\n)\n\n#lorem(19)\n```\n\n=== `header-ascent`: relative (Settable)\n\nThe amount the header is raised into the top margin.\n\nDefault: `30% + 0pt`\n\n=== `footer`: none | auto | content (Settable)\n\nThe page's footer. Fills the bottom margin of each page.\n\n- Content: Shows the content as the footer.\n- `auto`: Shows the page number if a `numbering` is set and `number-align` is `bottom`.\n- `none`: Suppresses the footer.\n\nFor just a page number, the `numbering` property typically suffices. If you want to create a custom footer but still display the page number, you can directly access the #link(\"/docs/reference/introspection/counter/\")[page counter].\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set par(justify: true)\n#set page(\n  height: 100pt,\n  margin: 20pt,\n  footer: context [\n    #set align(right)\n    #set text(8pt)\n    #counter(page).display(\n      \"1 of I\",\n      both: true,\n    )\n  ]\n)\n\n#lorem(48)\n```\n\n=== `footer-descent`: relative (Settable)\n\nThe amount the footer is lowered into the bottom margin.\n\nDefault: `30% + 0pt`\n\n=== `background`: none | content (Settable)\n\nContent in the page's background.\n\nThis content will be placed behind the page's body. It can be used to place a background image or a watermark.\n\nDefault: `none`\n\n*Example:*\n```typst\n#set page(background: rotate(24deg,\n  text(18pt, fill: rgb(\"FFCBC4\"))[\n    *CONFIDENTIAL*\n  ]\n))\n\n= Typst's secret plans\nIn the year 2023, we plan to take\nover the world (of typesetting).\n```\n\n=== `foreground`: none | content (Settable)\n\nContent in the page's foreground.\n\nThis content will overlay the page's body.\n\nDefault: `none`\n\n*Example:*\n```typst\n#set page(foreground: text(24pt)[🥸])\n\nReviewer 2 has marked our paper\n\"Weak Reject\" because they did\nnot understand our approach...\n```\n\n=== `body`: content (Required, Positional)\n\nThe contents of the page(s).\n\nMultiple pages will be created if the content does not fit on a single page. A new page with the page properties prior to the function invocation will be created after the body has been typeset.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/page.typ", "filename": "page.typ"}
{"text": "= pagebreak\n\nA manual page break.\n\nMust not be used inside any containers.\n\n== Example\n\n```typst\nThe next page contains\nmore details on compound theory.\n#pagebreak()\n\n== Compound Theory\nIn 1984, the first ...\n```\n\n== Parameters\n\n```\npagebreak(\n  weak: bool,\n  to: none | str\n) -> content\n```\n\n=== `weak`: bool (Settable)\n\nIf `true`, the page break is skipped if the current page is already empty.\n\nDefault: `false`\n\n=== `to`: none | str (Settable)\n\nIf given, ensures that the next page will be an even/odd page, with an empty page in between if necessary.\n\nDefault: `none`\n\n*Example:*\n```typst\n#set page(height: 30pt)\n\nFirst.\n#pagebreak(to: \"odd\")\nThird.\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/pagebreak.typ", "filename": "pagebreak.typ"}
{"text": "= place\n\nPlaces content relatively to its parent container.\n\nPlaced content can be either overlaid (the default) or floating. Overlaid content is aligned with the parent container according to the given #link(\"/docs/reference/layout/place/#parameters-alignment\")[alignment], and shown over any other content added so far in the container. Floating content is placed at the top or bottom of the container, displacing other content down or up respectively. In both cases, the content position can be adjusted with #link(\"/docs/reference/layout/place/#parameters-dx\")[dx] and #link(\"/docs/reference/layout/place/#parameters-dy\")[dy] offsets without affecting the layout.\n\nThe parent can be any container such as a #link(\"/docs/reference/layout/block/\")[block], #link(\"/docs/reference/layout/box/\")[box], #link(\"/docs/reference/visualize/rect/\")[rect], etc. A top level `place` call will place content directly in the text area of the current page. This can be used for absolute positioning on the page: with a `top + left` #link(\"/docs/reference/layout/place/#parameters-alignment\")[alignment], the offsets `dx` and `dy` will set the position of the element's top left corner relatively to the top left corner of the text area. For absolute positioning on the full page including margins, you can use `place` in #link(\"/docs/reference/layout/page/#parameters-foreground\")[page.foreground] or #link(\"/docs/reference/layout/page/#parameters-background\")[page.background].\n\n== Examples\n\n```typst\n#set page(height: 120pt)\nHello, world!\n\n#rect(\n  width: 100%,\n  height: 2cm,\n  place(horizon + right, square()),\n)\n\n#place(\n  top + left,\n  dx: -5pt,\n  square(size: 5pt, fill: red),\n)\n```\n\n== Effect on the position of other elements\n\nOverlaid elements don't take space in the flow of content, but a `place` call inserts an invisible block-level element in the flow. This can affect the layout by breaking the current paragraph. To avoid this, you can wrap the `place` call in a #link(\"/docs/reference/layout/box/\")[box] when the call is made in the middle of a paragraph. The alignment and offsets will then be relative to this zero-size box. To make sure it doesn't interfere with spacing, the box should be attached to a word using a word joiner.\n\nFor example, the following defines a function for attaching an annotation to the following word:\n\n```typst\n#let annotate(..args) = {\n  box(place(..args))\n  sym.wj\n  h(0pt, weak: true)\n}\n\nA placed #annotate(square(), dy: 2pt)\nsquare in my text.\n```\n\nThe zero-width weak spacing serves to discard spaces between the function call and the next word.\n\n== Parameters\n\n```\nplace(\n  alignment: auto | alignment,\n  scope: str,\n  float: bool,\n  clearance: length,\n  dx: relative,\n  dy: relative,\n  content: content\n) -> content\n```\n\n=== `alignment`: auto | alignment (Positional, Settable)\n\nRelative to which position in the parent container to place the content.\n\n- If `float` is `false`, then this can be any alignment other than `auto`.\n- If `float` is `true`, then this must be `auto`, `top`, or `bottom`.\n\nWhen `float` is `false` and no vertical alignment is specified, the content is placed at the current position on the vertical axis.\n\nDefault: `start`\n\n=== `scope`: str (Settable)\n\nRelative to which containing scope something is placed.\n\nThe parent scope is primarily used with figures and, for this reason, the figure function has a mirrored #link(\"/docs/reference/model/figure/#parameters-scope\")[scope parameter]. Nonetheless, it can also be more generally useful to break out of the columns. A typical example would be to #link(\"/docs/guides/page-setup-guide/#columns\")[create a single-column title section] in a two-column document.\n\nNote that parent-scoped placement is currently only supported if `float` is `true`. This may change in the future.\n\nDefault: `\"column\"`\n\n*Example:*\n```typst\n#set page(height: 150pt, columns: 2)\n#place(\n  top + center,\n  scope: \"parent\",\n  float: true,\n  rect(width: 80%, fill: aqua),\n)\n\n#lorem(25)\n```\n\n=== `float`: bool (Settable)\n\nWhether the placed element has floating layout.\n\nFloating elements are positioned at the top or bottom of the parent container, displacing in-flow content. They are always placed in the in-flow order relative to each other, as well as before any content following a later #link(\"/docs/reference/layout/place/#definitions-flush\")[place.flush] element.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set page(height: 150pt)\n#let note(where, body) = place(\n  center + where,\n  float: true,\n  clearance: 6pt,\n  rect(body),\n)\n\n#lorem(10)\n#note(bottom)[Bottom 1]\n#note(bottom)[Bottom 2]\n#lorem(40)\n#note(top)[Top]\n#lorem(10)\n```\n\n=== `clearance`: length (Settable)\n\nThe spacing between the placed element and other elements in a floating layout.\n\nHas no effect if `float` is `false`.\n\nDefault: `1.5em`\n\n=== `dx`: relative (Settable)\n\nThe horizontal displacement of the placed content.\n\nDefault: `0% + 0pt`\n\n*Example:*\n```typst\n#set page(height: 100pt)\n#for i in range(16) {\n  let amount = i * 4pt\n  place(center, dx: amount - 32pt, dy: amount)[A]\n}\n```\n\n=== `dy`: relative (Settable)\n\nThe vertical displacement of the placed content.\n\nThis does not affect the layout of in-flow content. In other words, the placed content is treated as if it were wrapped in a #link(\"/docs/reference/layout/move/\")[move] element.\n\nDefault: `0% + 0pt`\n\n=== `body`: content (Required, Positional)\n\nThe content to place.\n\n== Definitions\n\n=== `flush`\n\nAsks the layout algorithm to place pending floating elements before continuing with the content.\n\nThis is useful for preventing floating figures from spilling into the next section.\n\n```\nflush(\n  \n) -> content\n```\n\n```typst\n#lorem(15)\n\n#figure(\n  rect(width: 100%, height: 50pt),\n  placement: auto,\n  caption: [A rectangle],\n)\n\n#place.flush()\n\nThis text appears after the figure.\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/place.typ", "filename": "place.typ"}
{"text": "= ratio\n\nA ratio of a whole.\n\nWritten as a number, followed by a percent sign.\n\n== Example\n\n```typst\n#set align(center)\n#scale(x: 150%)[\n  Scaled apart.\n]\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/ratio.typ", "filename": "ratio.typ"}
{"text": "= relative\n\nA length in relation to some known length.\n\nThis type is a combination of a #link(\"/docs/reference/layout/length/\")[length] with a #link(\"/docs/reference/layout/ratio/\")[ratio]. It results from addition and subtraction of a length and a ratio. Wherever a relative length is expected, you can also use a bare length or ratio.\n\n== Example\n\n```typst\n#rect(width: 100% - 50pt)\n\n#(100% - 50pt).length \\\n#(100% - 50pt).ratio\n```\n\nA relative length has the following fields:\n\n- `length`: Its length component.\n- `ratio`: Its ratio component.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/relative.typ", "filename": "relative.typ"}
{"text": "= repeat\n\nRepeats content to the available space.\n\nThis can be useful when implementing a custom index, reference, or outline.\n\nSpace may be inserted between the instances of the body parameter, so be sure to adjust the #link(\"/docs/reference/layout/repeat/#parameters-justify\")[justify] parameter accordingly.\n\nErrors if there are no bounds on the available space, as it would create infinite content.\n\n== Example\n\n```typst\nSign on the dotted line:\n#box(width: 1fr, repeat[.])\n\n#set text(10pt)\n#v(8pt, weak: true)\n#align(right)[\n  Berlin, the 22nd of December, 2022\n]\n```\n\n== Parameters\n\n```\nrepeat(\n  content: content,\n  gap: length,\n  justify: bool\n) -> content\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to repeat.\n\n=== `gap`: length (Settable)\n\nThe gap between each instance of the body.\n\nDefault: `0pt`\n\n=== `justify`: bool (Settable)\n\nWhether to increase the gap between instances to completely fill the available space.\n\nDefault: `true`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/repeat.typ", "filename": "repeat.typ"}
{"text": "= rotate\n\nRotates content without affecting layout.\n\nRotates an element by a given angle. The layout will act as if the element was not rotated unless you specify `reflow: true`.\n\n== Example\n\n```typst\n#stack(\n  dir: ltr,\n  spacing: 1fr,\n  ..range(16)\n    .map(i => rotate(24deg * i)[X]),\n)\n```\n\n== Parameters\n\n```\nrotate(\n  angle: angle,\n  origin: alignment,\n  reflow: bool,\n  content: content\n) -> content\n```\n\n=== `angle`: angle (Positional, Settable)\n\nThe amount of rotation.\n\nDefault: `0deg`\n\n*Example:*\n```typst\n#rotate(-1.571rad)[Space!]\n```\n\n=== `origin`: alignment (Settable)\n\nThe origin of the rotation.\n\nIf, for instance, you wanted the bottom left corner of the rotated element to stay aligned with the baseline, you would set it to `bottom + left` instead.\n\nDefault: `center + horizon`\n\n*Example:*\n```typst\n#set text(spacing: 8pt)\n#let square = square.with(width: 8pt)\n\n#box(square())\n#box(rotate(30deg, origin: center, square()))\n#box(rotate(30deg, origin: top + left, square()))\n#box(rotate(30deg, origin: bottom + right, square()))\n```\n\n=== `reflow`: bool (Settable)\n\nWhether the rotation impacts the layout.\n\nIf set to `false`, the rotated content will retain the bounding box of the original content. If set to `true`, the bounding box will take the rotation of the content into account and adjust the layout accordingly.\n\nDefault: `false`\n\n*Example:*\n```typst\nHello #rotate(90deg, reflow: true)[World]!\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to rotate.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/rotate.typ", "filename": "rotate.typ"}
{"text": "= scale\n\nScales content without affecting layout.\n\nLets you mirror content by specifying a negative scale on a single axis.\n\n== Example\n\n```typst\n#set align(center)\n#scale(x: -100%)[This is mirrored.]\n#scale(x: -100%, reflow: true)[This is mirrored.]\n```\n\n== Parameters\n\n```\nscale(\n  factor: auto | length | ratio,\n  x: auto | length | ratio,\n  y: auto | length | ratio,\n  origin: alignment,\n  reflow: bool,\n  content: content\n) -> content\n```\n\n=== `factor`: auto | length | ratio (Positional, Settable)\n\nThe scaling factor for both axes, as a positional argument. This is just an optional shorthand notation for setting `x` and `y` to the same value.\n\nDefault: `100%`\n\n=== `x`: auto | length | ratio (Settable)\n\nThe horizontal scaling factor.\n\nThe body will be mirrored horizontally if the parameter is negative.\n\nDefault: `100%`\n\n=== `y`: auto | length | ratio (Settable)\n\nThe vertical scaling factor.\n\nThe body will be mirrored vertically if the parameter is negative.\n\nDefault: `100%`\n\n=== `origin`: alignment (Settable)\n\nThe origin of the transformation.\n\nDefault: `center + horizon`\n\n*Example:*\n```typst\nA#box(scale(75%)[A])A \\\nB#box(scale(75%, origin: bottom + left)[B])B\n```\n\n=== `reflow`: bool (Settable)\n\nWhether the scaling impacts the layout.\n\nIf set to `false`, the scaled content will be allowed to overlap other content. If set to `true`, it will compute the new size of the scaled content and adjust the layout accordingly.\n\nDefault: `false`\n\n*Example:*\n```typst\nHello #scale(x: 20%, y: 40%, reflow: true)[World]!\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to scale.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/scale.typ", "filename": "scale.typ"}
{"text": "= skew\n\nSkews content.\n\nSkews an element in horizontal and/or vertical direction. The layout will act as if the element was not skewed unless you specify `reflow: true`.\n\n== Example\n\n```typst\n#skew(ax: -12deg)[\n  This is some fake italic text.\n]\n```\n\n== Parameters\n\n```\nskew(\n  ax: angle,\n  ay: angle,\n  origin: alignment,\n  reflow: bool,\n  content: content\n) -> content\n```\n\n=== `ax`: angle (Settable)\n\nThe horizontal skewing angle.\n\nDefault: `0deg`\n\n*Example:*\n```typst\n#skew(ax: 30deg)[Skewed]\n```\n\n=== `ay`: angle (Settable)\n\nThe vertical skewing angle.\n\nDefault: `0deg`\n\n*Example:*\n```typst\n#skew(ay: 30deg)[Skewed]\n```\n\n=== `origin`: alignment (Settable)\n\nThe origin of the skew transformation.\n\nThe origin will stay fixed during the operation.\n\nDefault: `center + horizon`\n\n*Example:*\n```typst\nX #box(skew(ax: -30deg, origin: center + horizon)[X]) X \\\nX #box(skew(ax: -30deg, origin: bottom + left)[X]) X \\\nX #box(skew(ax: -30deg, origin: top + right)[X]) X\n```\n\n=== `reflow`: bool (Settable)\n\nWhether the skew transformation impacts the layout.\n\nIf set to `false`, the skewed content will retain the bounding box of the original content. If set to `true`, the bounding box will take the transformation of the content into account and adjust the layout accordingly.\n\nDefault: `false`\n\n*Example:*\n```typst\nHello #skew(ay: 30deg, reflow: true, \"World\")!\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to skew.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/skew.typ", "filename": "skew.typ"}
{"text": "= stack\n\nArranges content and spacing horizontally or vertically.\n\nThe stack places a list of items along an axis, with optional spacing between each item.\n\n== Example\n\n```typst\n#stack(\n  dir: ttb,\n  rect(width: 40pt),\n  rect(width: 120pt),\n  rect(width: 90pt),\n)\n```\n\n== Parameters\n\n```\nstack(\n  dir: direction,\n  spacing: none | relative | fraction,\n  ..: relative | fraction | content\n) -> content\n```\n\n=== `dir`: direction (Settable)\n\nThe direction along which the items are stacked. Possible values are:\n\n- `ltr`: Left to right.\n- `rtl`: Right to left.\n- `ttb`: Top to bottom.\n- `btt`: Bottom to top.\n\nYou can use the `start` and `end` methods to obtain the initial and final points (respectively) of a direction, as `alignment`. You can also use the `axis` method to determine whether a direction is `\"horizontal\"` or `\"vertical\"`. The `inv` method returns a direction's inverse direction.\n\nFor example, `ttb.start()` is `top`, `ttb.end()` is `bottom`, `ttb.axis()` is `\"vertical\"` and `ttb.inv()` is equal to `btt`.\n\nDefault: `ttb`\n\n=== `spacing`: none | relative | fraction (Settable)\n\nSpacing to insert between items where no explicit spacing was provided.\n\nDefault: `none`\n\n=== `children`: relative | fraction | content (Required, Positional, Variadic)\n\nThe children to stack along the axis.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/stack.typ", "filename": "stack.typ"}
{"text": "= v\n\nInserts vertical spacing into a flow of blocks.\n\nThe spacing can be absolute, relative, or fractional. In the last case, the remaining space on the page is distributed among all fractional spacings according to their relative fractions.\n\n== Example\n\n```typst\n#grid(\n  rows: 3cm,\n  columns: 6,\n  gutter: 1fr,\n  [A #parbreak() B],\n  [A #v(0pt) B],\n  [A #v(10pt) B],\n  [A #v(0pt, weak: true) B],\n  [A #v(40%, weak: true) B],\n  [A #v(1fr) B],\n)\n```\n\n== Parameters\n\n```\nv(\n  relative: relative | fraction,\n  weak: bool\n) -> content\n```\n\n=== `amount`: relative | fraction (Required, Positional)\n\nHow much spacing to insert.\n\n=== `weak`: bool (Settable)\n\nIf `true`, the spacing collapses at the start or end of a flow. Moreover, from multiple adjacent weak spacings all but the largest one collapse. Weak spacings will always collapse adjacent paragraph spacing, even if the paragraph spacing is larger.\n\nDefault: `false`\n\n*Example:*\n```typst\nThe following theorem is\nfoundational to the field:\n#v(4pt, weak: true)\n$ x^2 + y^2 = r^2 $\n#v(4pt, weak: true)\nThe proof is simple:\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout/v.typ", "filename": "v.typ"}
{"text": "= Layout\n\nArranging elements on the page in different ways.\n\nBy combining layout functions, you can create complex and automatic layouts.\n\n== Definitions\n\n- #link(\"/docs/reference/layout/align/\")[align]Aligns content horizontally and vertically.\n- #link(\"/docs/reference/layout/alignment/\")[alignment]Where to [align] something along an axis.\n- #link(\"/docs/reference/layout/angle/\")[angle]An angle describing a rotation.\n- #link(\"/docs/reference/layout/block/\")[block]A block-level container.\n- #link(\"/docs/reference/layout/box/\")[box]An inline-level container that sizes content.\n- #link(\"/docs/reference/layout/colbreak/\")[colbreak]Forces a column break.\n- #link(\"/docs/reference/layout/columns/\")[columns]Separates a region into multiple equally sized columns.\n- #link(\"/docs/reference/layout/direction/\")[direction]The four directions into which content can be laid out.\n- #link(\"/docs/reference/layout/fraction/\")[fraction]Defines how the remaining space in a layout is distributed.\n- #link(\"/docs/reference/layout/grid/\")[grid]Arranges content in a grid.\n- #link(\"/docs/reference/layout/h/\")[h]Inserts horizontal spacing into a paragraph.\n- #link(\"/docs/reference/layout/hide/\")[hide]Hides content without affecting layout.\n- #link(\"/docs/reference/layout/layout/\")[layout]Provides access to the current outer container's (or page's, if none)\n- #link(\"/docs/reference/layout/length/\")[length]A size or distance, possibly expressed with contextual units.\n- #link(\"/docs/reference/layout/measure/\")[measure]Measures the layouted size of content.\n- #link(\"/docs/reference/layout/move/\")[move]Moves content without affecting layout.\n- #link(\"/docs/reference/layout/pad/\")[pad]Adds spacing around content.\n- #link(\"/docs/reference/layout/page/\")[page]Layouts its child onto one or multiple pages.\n- #link(\"/docs/reference/layout/pagebreak/\")[pagebreak]A manual page break.\n- #link(\"/docs/reference/layout/place/\")[place]Places content relatively to its parent container.\n- #link(\"/docs/reference/layout/ratio/\")[ratio]A ratio of a whole.\n- #link(\"/docs/reference/layout/relative/\")[relative]A length in relation to some known length.\n- #link(\"/docs/reference/layout/repeat/\")[repeat]Repeats content to the available space.\n- #link(\"/docs/reference/layout/rotate/\")[rotate]Rotates content without affecting layout.\n- #link(\"/docs/reference/layout/scale/\")[scale]Scales content without affecting layout.\n- #link(\"/docs/reference/layout/skew/\")[skew]Skews content.\n- #link(\"/docs/reference/layout/stack/\")[stack]Arranges content and spacing horizontally or vertically.\n- #link(\"/docs/reference/layout/v/\")[v]Inserts vertical spacing into a flow of blocks.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/layout.typ", "filename": "layout.typ"}
{"text": "= accent\n\nAttaches an accent to a base.\n\n== Example\n\n```typst\n$grave(a) = accent(a, `)$ \\\n$arrow(a) = accent(a, arrow)$ \\\n$tilde(a) = accent(a, \\u{0303})$\n```\n\n== Parameters\n\n```\naccent(\n  content: content,\n  str: str | content,\n  size: relative\n) -> content\n```\n\n=== `base`: content (Required, Positional)\n\nThe base to which the accent is applied. May consist of multiple letters.\n\n*Example:*\n```typst\n$arrow(A B C)$\n```\n\n=== `accent`: str | content (Required, Positional)\n\nThe accent to apply to the base.\n\nSupported accents include:\n\n=== `size`: relative (Settable)\n\nThe size of the accent, relative to the width of the base.\n\nDefault: `100% + 0pt`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/accent.typ", "filename": "accent.typ"}
{"text": "= Attach\n\nSubscript, superscripts, and limits.\n\nAttachments can be displayed either as sub/superscripts, or limits. Typst automatically decides which is more suitable depending on the base, but you can also control this manually with the `scripts` and `limits` functions.\n\nIf you want the base to stretch to fit long top and bottom attachments (for example, an arrow with text above it), use the #link(\"/docs/reference/math/stretch/\")[stretch] function.\n\n== Example\n\n```typst\n$ sum_(i=0)^n a_i = 2^(1+i) $\n```\n\n== Syntax\n\nThis function also has dedicated syntax for attachments after the base: Use the underscore (`_`) to indicate a subscript i.e. bottom attachment and the hat (`^`) to indicate a superscript i.e. top attachment.\n\n== Functions\n\n=== `attach`\n\nA base with optional attachments.\n\n```\nattach(\n  content: content,\n  t: none | content,\n  b: none | content,\n  tl: none | content,\n  bl: none | content,\n  tr: none | content,\n  br: none | content\n) -> content\n```\n\n```typst\n$ attach(\n  Pi, t: alpha, b: beta,\n  tl: 1, tr: 2+3, bl: 4+5, br: 6,\n) $\n```\n\n==== `base`: content (Required, Positional)\n\nThe base to which things are attached.\n\n==== `t`: none | content (Settable)\n\nThe top attachment, smartly positioned at top-right or above the base.\n\nYou can wrap the base in `limits()` or `scripts()` to override the smart positioning.\n\nDefault: `none`\n\n==== `b`: none | content (Settable)\n\nThe bottom attachment, smartly positioned at the bottom-right or below the base.\n\nYou can wrap the base in `limits()` or `scripts()` to override the smart positioning.\n\nDefault: `none`\n\n==== `tl`: none | content (Settable)\n\nThe top-left attachment (before the base).\n\nDefault: `none`\n\n==== `bl`: none | content (Settable)\n\nThe bottom-left attachment (before base).\n\nDefault: `none`\n\n==== `tr`: none | content (Settable)\n\nThe top-right attachment (after the base).\n\nDefault: `none`\n\n==== `br`: none | content (Settable)\n\nThe bottom-right attachment (after the base).\n\nDefault: `none`\n\n=== `scripts`\n\nForces a base to display attachments as scripts.\n\n```\nscripts(\n  content: content\n) -> content\n```\n\n```typst\n$ scripts(sum)_1^2 != sum_1^2 $\n```\n\n==== `body`: content (Required, Positional)\n\nThe base to attach the scripts to.\n\n=== `limits`\n\nForces a base to display attachments as limits.\n\n```\nlimits(\n  content: content,\n  inline: bool\n) -> content\n```\n\n```typst\n$ limits(A)_1^2 != A_1^2 $\n```\n\n==== `body`: content (Required, Positional)\n\nThe base to attach the limits to.\n\n==== `inline`: bool (Settable)\n\nWhether to also force limits in inline equations.\n\nWhen applying limits globally (e.g., through a show rule), it is typically a good idea to disable this.\n\nDefault: `true`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/attach.typ", "filename": "attach.typ"}
{"text": "= binom\n\nA binomial expression.\n\n== Example\n\n```typst\n$ binom(n, k) $\n$ binom(n, k_1, k_2, k_3, ..., k_m) $\n```\n\n== Parameters\n\n```\nbinom(\n  content: content,\n  ..: content\n) -> content\n```\n\n=== `upper`: content (Required, Positional)\n\nThe binomial's upper index.\n\n=== `lower`: content (Required, Positional, Variadic)\n\nThe binomial's lower index.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/binom.typ", "filename": "binom.typ"}
{"text": "= cancel\n\nDisplays a diagonal line over a part of an equation.\n\nThis is commonly used to show the elimination of a term.\n\n== Example\n\n```typst\nHere, we can simplify:\n$ (a dot b dot cancel(x)) /\n    cancel(x) $\n```\n\n== Parameters\n\n```\ncancel(\n  content: content,\n  length: relative,\n  inverted: bool,\n  cross: bool,\n  angle: auto | angle | function,\n  stroke: length | color | gradient | stroke | tiling | dictionary\n) -> content\n```\n\n=== `body`: content (Required, Positional)\n\nThe content over which the line should be placed.\n\n=== `length`: relative (Settable)\n\nThe length of the line, relative to the length of the diagonal spanning the whole element being \"cancelled\". A value of `100%` would then have the line span precisely the element's diagonal.\n\nDefault: `100% + 3pt`\n\n*Example:*\n```typst\n$ a + cancel(x, length: #200%)\n    - cancel(x, length: #200%) $\n```\n\n=== `inverted`: bool (Settable)\n\nWhether the cancel line should be inverted (flipped along the y-axis). For the default angle setting, inverted means the cancel line points to the top left instead of top right.\n\nDefault: `false`\n\n*Example:*\n```typst\n$ (a cancel((b + c), inverted: #true)) /\n    cancel(b + c, inverted: #true) $\n```\n\n=== `cross`: bool (Settable)\n\nWhether two opposing cancel lines should be drawn, forming a cross over the element. Overrides `inverted`.\n\nDefault: `false`\n\n*Example:*\n```typst\n$ cancel(Pi, cross: #true) $\n```\n\n=== `angle`: auto | angle | function (Settable)\n\nHow much to rotate the cancel line.\n\n- If given an angle, the line is rotated by that angle clockwise with respect to the y-axis.\n- If `auto`, the line assumes the default angle; that is, along the rising diagonal of the content box.\n- If given a function `angle => angle`, the line is rotated, with respect to the y-axis, by the angle returned by that function. The function receives the default angle as its input.\n\nDefault: `auto`\n\n*Example:*\n```typst\n$ cancel(Pi)\n  cancel(Pi, angle: #0deg)\n  cancel(Pi, angle: #45deg)\n  cancel(Pi, angle: #90deg)\n  cancel(1/(1+x), angle: #(a => a + 45deg))\n  cancel(1/(1+x), angle: #(a => a + 90deg)) $\n```\n\n=== `stroke`: length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the cancel line.\n\nDefault: `0.5pt`\n\n*Example:*\n```typst\n$ cancel(\n  sum x,\n  stroke: #(\n    paint: red,\n    thickness: 1.5pt,\n    dash: \"dashed\",\n  ),\n) $\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/cancel.typ", "filename": "cancel.typ"}
{"text": "= cases\n\nA case distinction.\n\nContent across different branches can be aligned with the `&` symbol.\n\n== Example\n\n```typst\n$ f(x, y) := cases(\n  1 \"if\" (x dot y)/2 <= 0,\n  2 \"if\" x \"is even\",\n  3 \"if\" x in NN,\n  4 \"else\",\n) $\n```\n\n== Parameters\n\n```\ncases(\n  delim: none | str | array | symbol,\n  reverse: bool,\n  gap: relative,\n  ..: content\n) -> content\n```\n\n=== `delim`: none | str | array | symbol (Settable)\n\nThe delimiter to use.\n\nCan be a single character specifying the left delimiter, in which case the right delimiter is inferred. Otherwise, can be an array containing a left and a right delimiter.\n\nDefault: `(\"{\", \"}\")`\n\n*Example:*\n```typst\n#set math.cases(delim: \"[\")\n$ x = cases(1, 2) $\n```\n\n=== `reverse`: bool (Settable)\n\nWhether the direction of cases should be reversed.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set math.cases(reverse: true)\n$ cases(1, 2) = x $\n```\n\n=== `gap`: relative (Settable)\n\nThe gap between branches.\n\nDefault: `0% + 0.2em`\n\n*Example:*\n```typst\n#set math.cases(gap: 1em)\n$ x = cases(1, 2) $\n```\n\n=== `children`: content (Required, Positional, Variadic)\n\nThe branches of the case distinction.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/cases.typ", "filename": "cases.typ"}
{"text": "= class\n\nForced use of a certain math class.\n\nThis is useful to treat certain symbols as if they were of a different class, e.g. to make a symbol behave like a relation. The class of a symbol defines the way it is laid out, including spacing around it, and how its scripts are attached by default. Note that the latter can always be overridden using #link(\"/docs/reference/math/attach/#functions-limits\")[limits] and #link(\"/docs/reference/math/attach/#functions-scripts\")[scripts].\n\n== Example\n\n```typst\n#let loves = math.class(\n  \"relation\",\n  sym.suit.heart,\n)\n\n$x loves y and y loves 5$\n```\n\n== Parameters\n\n```\nclass(\n  str: str,\n  content: content\n) -> content\n```\n\n=== `class`: str (Required, Positional)\n\nThe class to apply to the content.\n\n=== `body`: content (Required, Positional)\n\nThe content to which the class is applied.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/class.typ", "filename": "class.typ"}
{"text": "= equation\n\nA mathematical equation.\n\nCan be displayed inline with text or as a separate block. An equation becomes block-level through the presence of at least one space after the opening dollar sign and one space before the closing dollar sign.\n\n== Example\n\n```typst\n#set text(font: \"New Computer Modern\")\n\nLet $a$, $b$, and $c$ be the side\nlengths of right-angled triangle.\nThen, we know that:\n$ a^2 + b^2 = c^2 $\n\nProve by induction:\n$ sum_(k=1)^n k = (n(n+1)) / 2 $\n```\n\nBy default, block-level equations will not break across pages. This can be changed through `show math.equation: set block(breakable: true)`.\n\n== Syntax\n\nThis function also has dedicated syntax: Write mathematical markup within dollar signs to create an equation. Starting and ending the equation with at least one space lifts it into a separate block that is centered horizontally. For more details about math syntax, see the #link(\"/docs/reference/math/\")[main math page].\n\n== Parameters\n\n```\nequation(\n  block: bool,\n  numbering: none | str | function,\n  number-align: alignment,\n  supplement: none | auto | content | function,\n  content: content\n) -> content\n```\n\n=== `block`: bool (Settable)\n\nWhether the equation is displayed as a separate block.\n\nDefault: `false`\n\n=== `numbering`: none | str | function (Settable)\n\nHow to #link(\"/docs/reference/model/numbering/\")[number] block-level equations.\n\nDefault: `none`\n\n*Example:*\n```typst\n#set math.equation(numbering: \"(1)\")\n\nWe define:\n$ phi.alt := (1 + sqrt(5)) / 2 $ <ratio>\n\nWith @ratio, we get:\n$ F_n = floor(1 / sqrt(5) phi.alt^n) $\n```\n\n=== `number-align`: alignment (Settable)\n\nThe alignment of the equation numbering.\n\nBy default, the alignment is `end + horizon`. For the horizontal component, you can use `right`, `left`, or `start` and `end` of the text direction; for the vertical component, you can use `top`, `horizon`, or `bottom`.\n\nDefault: `end + horizon`\n\n*Example:*\n```typst\n#set math.equation(numbering: \"(1)\", number-align: bottom)\n\nWe can calculate:\n$ E &= sqrt(m_0^2 + p^2) \\\n    &approx 125 \"GeV\" $\n```\n\n=== `supplement`: none | auto | content | function (Settable)\n\nA supplement for the equation.\n\nFor references to equations, this is added before the referenced number.\n\nIf a function is specified, it is passed the referenced equation and should return content.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set math.equation(numbering: \"(1)\", supplement: [Eq.])\n\nWe define:\n$ phi.alt := (1 + sqrt(5)) / 2 $ <ratio>\n\nWith @ratio, we get:\n$ F_n = floor(1 / sqrt(5) phi.alt^n) $\n```\n\n=== `body`: content (Required, Positional)\n\nThe contents of the equation.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/equation.typ", "filename": "equation.typ"}
{"text": "= frac\n\nA mathematical fraction.\n\n== Example\n\n```typst\n$ 1/2 < (x+1)/2 $\n$ ((x+1)) / 2 = frac(a, b) $\n```\n\n== Syntax\n\nThis function also has dedicated syntax: Use a slash to turn neighbouring expressions into a fraction. Multiple atoms can be grouped into a single expression using round grouping parenthesis. Such parentheses are removed from the output, but you can nest multiple to force them.\n\n== Parameters\n\n```\nfrac(\n  content: content,\n  content: content\n) -> content\n```\n\n=== `num`: content (Required, Positional)\n\nThe fraction's numerator.\n\n=== `denom`: content (Required, Positional)\n\nThe fraction's denominator.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/frac.typ", "filename": "frac.typ"}
{"text": "= Left/Right\n\nDelimiter matching.\n\nThe `lr` function allows you to match two delimiters and scale them with the content they contain. While this also happens automatically for delimiters that match syntactically, `lr` allows you to match two arbitrary delimiters and control their size exactly. Apart from the `lr` function, Typst provides a few more functions that create delimiter pairings for absolute, ceiled, and floored values as well as norms.\n\n== Example\n\n```typst\n$ [a, b/2] $\n$ lr(]sum_(x=1)^n], size: #50%) x $\n$ abs((x + y) / 2) $\n```\n\n== Functions\n\n=== `lr`\n\nScales delimiters.\n\nWhile matched delimiters scale by default, this can be used to scale unmatched delimiters and to control the delimiter scaling more precisely.\n\n```\nlr(\n  size: relative,\n  content: content\n) -> content\n```\n\n==== `size`: relative (Settable)\n\nThe size of the brackets, relative to the height of the wrapped content.\n\nDefault: `100% + 0pt`\n\n==== `body`: content (Required, Positional)\n\nThe delimited content, including the delimiters.\n\n=== `mid`\n\nScales delimiters vertically to the nearest surrounding `lr()` group.\n\n```\nmid(\n  content: content\n) -> content\n```\n\n```typst\n$ { x mid(|) sum_(i=1)^n w_i|f_i (x)| < 1 } $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to be scaled.\n\n=== `abs`\n\nTakes the absolute value of an expression.\n\n```\nabs(\n  size: relative,\n  content: content\n) -> content\n```\n\n```typst\n$ abs(x/2) $\n```\n\n==== `size`: relative\n\nThe size of the brackets, relative to the height of the wrapped content.\n\n==== `body`: content (Required, Positional)\n\nThe expression to take the absolute value of.\n\n=== `norm`\n\nTakes the norm of an expression.\n\n```\nnorm(\n  size: relative,\n  content: content\n) -> content\n```\n\n```typst\n$ norm(x/2) $\n```\n\n==== `size`: relative\n\nThe size of the brackets, relative to the height of the wrapped content.\n\n==== `body`: content (Required, Positional)\n\nThe expression to take the norm of.\n\n=== `floor`\n\nFloors an expression.\n\n```\nfloor(\n  size: relative,\n  content: content\n) -> content\n```\n\n```typst\n$ floor(x/2) $\n```\n\n==== `size`: relative\n\nThe size of the brackets, relative to the height of the wrapped content.\n\n==== `body`: content (Required, Positional)\n\nThe expression to floor.\n\n=== `ceil`\n\nCeils an expression.\n\n```\nceil(\n  size: relative,\n  content: content\n) -> content\n```\n\n```typst\n$ ceil(x/2) $\n```\n\n==== `size`: relative\n\nThe size of the brackets, relative to the height of the wrapped content.\n\n==== `body`: content (Required, Positional)\n\nThe expression to ceil.\n\n=== `round`\n\nRounds an expression.\n\n```\nround(\n  size: relative,\n  content: content\n) -> content\n```\n\n```typst\n$ round(x/2) $\n```\n\n==== `size`: relative\n\nThe size of the brackets, relative to the height of the wrapped content.\n\n==== `body`: content (Required, Positional)\n\nThe expression to round.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/lr.typ", "filename": "lr.typ"}
{"text": "= mat\n\nA matrix.\n\nThe elements of a row should be separated by commas, while the rows themselves should be separated by semicolons. The semicolon syntax merges preceding arguments separated by commas into an array. You can also use this special syntax of math function calls to define custom functions that take 2D data.\n\nContent in cells can be aligned with the #link(\"/docs/reference/math/mat/#parameters-align\")[align] parameter, or content in cells that are in the same row can be aligned with the `&` symbol.\n\n== Example\n\n```typst\n$ mat(\n  1, 2, ..., 10;\n  2, 2, ..., 10;\n  dots.v, dots.v, dots.down, dots.v;\n  10, 10, ..., 10;\n) $\n```\n\n== Parameters\n\n```\nmat(\n  delim: none | str | array | symbol,\n  align: alignment,\n  augment: none | int | dictionary,\n  gap: relative,\n  row-gap: relative,\n  column-gap: relative,\n  ..: array\n) -> content\n```\n\n=== `delim`: none | str | array | symbol (Settable)\n\nThe delimiter to use.\n\nCan be a single character specifying the left delimiter, in which case the right delimiter is inferred. Otherwise, can be an array containing a left and a right delimiter.\n\nDefault: `(\"(\", \")\")`\n\n*Example:*\n```typst\n#set math.mat(delim: \"[\")\n$ mat(1, 2; 3, 4) $\n```\n\n=== `align`: alignment (Settable)\n\nThe horizontal alignment that each cell should have.\n\nDefault: `center`\n\n*Example:*\n```typst\n#set math.mat(align: right)\n$ mat(-1, 1, 1; 1, -1, 1; 1, 1, -1) $\n```\n\n=== `augment`: none | int | dictionary (Settable)\n\nDraws augmentation lines in a matrix.\n\n- `none`: No lines are drawn.\n- A single number: A vertical augmentation line is drawn after the specified column number. Negative numbers start from the end.\n- A dictionary: With a dictionary, multiple augmentation lines can be drawn both horizontally and vertically. Additionally, the style of the lines can be set. The dictionary can contain the following keys: hline: The offsets at which horizontal lines should be drawn. For example, an offset of 2 would result in a horizontal line being drawn after the second row of the matrix. Accepts either an integer for a single line, or an array of integers for multiple lines. Like for a single number, negative numbers start from the end. vline: The offsets at which vertical lines should be drawn. For example, an offset of 2 would result in a vertical line being drawn after the second column of the matrix. Accepts either an integer for a single line, or an array of integers for multiple lines. Like for a single number, negative numbers start from the end. stroke: How to stroke the line. If set to auto, takes on a thickness of 0.05em and square line caps.\n\nDefault: `none`\n\n*Example:*\n```typst\n$ mat(1, 0, 1; 0, 1, 2; augment: #2) $\n// Equivalent to:\n$ mat(1, 0, 1; 0, 1, 2; augment: #(-1)) $\n```\n\n=== `gap`: relative (Settable)\n\nThe gap between rows and columns.\n\nThis is a shorthand to set `row-gap` and `column-gap` to the same value.\n\nDefault: `0% + 0pt`\n\n*Example:*\n```typst\n#set math.mat(gap: 1em)\n$ mat(1, 2; 3, 4) $\n```\n\n=== `row-gap`: relative (Settable)\n\nThe gap between rows.\n\nDefault: `0% + 0.2em`\n\n*Example:*\n```typst\n#set math.mat(row-gap: 1em)\n$ mat(1, 2; 3, 4) $\n```\n\n=== `column-gap`: relative (Settable)\n\nThe gap between columns.\n\nDefault: `0% + 0.5em`\n\n*Example:*\n```typst\n#set math.mat(column-gap: 1em)\n$ mat(1, 2; 3, 4) $\n```\n\n=== `rows`: array (Required, Positional, Variadic)\n\nAn array of arrays with the rows of the matrix.\n\n*Example:*\n```typst\n#let data = ((1, 2, 3), (4, 5, 6))\n#let matrix = math.mat(..data)\n$ v := matrix $\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/mat.typ", "filename": "mat.typ"}
{"text": "= op\n\nA text operator in an equation.\n\n== Example\n\n```typst\n$ tan x = (sin x)/(cos x) $\n$ op(\"custom\",\n     limits: #true)_(n->oo) n $\n```\n\n== Predefined Operators\n\nTypst predefines the operators `arccos`, `arcsin`, `arctan`, `arg`, `cos`, `cosh`, `cot`, `coth`, `csc`, `csch`, `ctg`, `deg`, `det`, `dim`, `exp`, `gcd`, `lcm`, `hom`, `id`, `im`, `inf`, `ker`, `lg`, `lim`, `liminf`, `limsup`, `ln`, `log`, `max`, `min`, `mod`, `Pr`, `sec`, `sech`, `sin`, `sinc`, `sinh`, `sup`, `tan`, `tanh`, `tg` and `tr`.\n\n== Parameters\n\n```\nop(\n  content: content,\n  limits: bool\n) -> content\n```\n\n=== `text`: content (Required, Positional)\n\nThe operator's text.\n\n=== `limits`: bool (Settable)\n\nWhether the operator should show attachments as limits in display mode.\n\nDefault: `false`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/op.typ", "filename": "op.typ"}
{"text": "= primes\n\nGrouped primes.\n\n```typst\n$ a'''_b = a^'''_b $\n```\n\n== Syntax\n\nThis function has dedicated syntax: use apostrophes instead of primes. They will automatically attach to the previous element, moving superscripts to the next level.\n\n== Parameters\n\n```\nprimes(\n  int: int\n) -> content\n```\n\n=== `count`: int (Required, Positional)\n\nThe number of grouped primes.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/primes.typ", "filename": "primes.typ"}
{"text": "= Roots\n\nSquare and non-square roots.\n\n== Example\n\n```typst\n$ sqrt(3 - 2 sqrt(2)) = sqrt(2) - 1 $\n$ root(3, x) $\n```\n\n== Functions\n\n=== `root`\n\nA general root.\n\n```\nroot(\n  none | content,\n  content: content\n) -> content\n```\n\n```typst\n$ root(3, x) $\n```\n\n==== `index`: none | content (Positional, Settable)\n\nWhich root of the radicand to take.\n\nDefault: `none`\n\n==== `radicand`: content (Required, Positional)\n\nThe expression to take the root of.\n\n=== `sqrt`\n\nA square root.\n\n```\nsqrt(\n  content: content\n) -> content\n```\n\n```typst\n$ sqrt(3 - 2 sqrt(2)) = sqrt(2) - 1 $\n```\n\n==== `radicand`: content (Required, Positional)\n\nThe expression to take the square root of.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/roots.typ", "filename": "roots.typ"}
{"text": "= Sizes\n\nForced size styles for expressions within formulas.\n\nThese functions allow manual configuration of the size of equation elements to make them look as in a display/inline equation or as if used in a root or sub/superscripts.\n\n== Functions\n\n=== `display`\n\nForced display style in math.\n\nThis is the normal size for block equations.\n\n```\ndisplay(\n  content: content,\n  cramped: bool\n) -> content\n```\n\n```typst\n$sum_i x_i/2 = display(sum_i x_i/2)$\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to size.\n\n==== `cramped`: bool\n\nWhether to impose a height restriction for exponents, like regular sub- and superscripts do.\n\nDefault: `false`\n\n=== `inline`\n\nForced inline (text) style in math.\n\nThis is the normal size for inline equations.\n\n```\ninline(\n  content: content,\n  cramped: bool\n) -> content\n```\n\n```typst\n$ sum_i x_i/2\n    = inline(sum_i x_i/2) $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to size.\n\n==== `cramped`: bool\n\nWhether to impose a height restriction for exponents, like regular sub- and superscripts do.\n\nDefault: `false`\n\n=== `script`\n\nForced script style in math.\n\nThis is the smaller size used in powers or sub- or superscripts.\n\n```\nscript(\n  content: content,\n  cramped: bool\n) -> content\n```\n\n```typst\n$sum_i x_i/2 = script(sum_i x_i/2)$\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to size.\n\n==== `cramped`: bool\n\nWhether to impose a height restriction for exponents, like regular sub- and superscripts do.\n\nDefault: `true`\n\n=== `sscript`\n\nForced second script style in math.\n\nThis is the smallest size, used in second-level sub- and superscripts (script of the script).\n\n```\nsscript(\n  content: content,\n  cramped: bool\n) -> content\n```\n\n```typst\n$sum_i x_i/2 = sscript(sum_i x_i/2)$\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to size.\n\n==== `cramped`: bool\n\nWhether to impose a height restriction for exponents, like regular sub- and superscripts do.\n\nDefault: `true`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/sizes.typ", "filename": "sizes.typ"}
{"text": "= stretch\n\nStretches a glyph.\n\nThis function can also be used to automatically stretch the base of an attachment, so that it fits the top and bottom attachments.\n\nNote that only some glyphs can be stretched, and which ones can depend on the math font being used. However, most math fonts are the same in this regard.\n\n```typst\n$ H stretch(=)^\"define\" U + p V $\n$ f : X stretch(->>, size: #150%)_\"surjective\" Y $\n$ x stretch(harpoons.ltrb, size: #3em) y\n    stretch(\\[, size: #150%) z $\n```\n\n== Parameters\n\n```\nstretch(\n  content: content,\n  size: relative\n) -> content\n```\n\n=== `body`: content (Required, Positional)\n\nThe glyph to stretch.\n\n=== `size`: relative (Settable)\n\nThe size to stretch to, relative to the maximum size of the glyph and its attachments.\n\nDefault: `100% + 0pt`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/stretch.typ", "filename": "stretch.typ"}
{"text": "= Styles\n\nAlternate letterforms within formulas.\n\nThese functions are distinct from the #link(\"/docs/reference/text/text/\")[text] function because math fonts contain multiple variants of each letter.\n\n== Functions\n\n=== `upright`\n\nUpright (non-italic) font style in math.\n\n```\nupright(\n  content: content\n) -> content\n```\n\n```typst\n$ upright(A) != A $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to style.\n\n=== `italic`\n\nItalic font style in math.\n\nFor roman letters and greek lowercase letters, this is already the default.\n\n```\nitalic(\n  content: content\n) -> content\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to style.\n\n=== `bold`\n\nBold font style in math.\n\n```\nbold(\n  content: content\n) -> content\n```\n\n```typst\n$ bold(A) := B^+ $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to style.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/styles.typ", "filename": "styles.typ"}
{"text": "= Under/Over\n\nDelimiters above or below parts of an equation.\n\nThe braces and brackets further allow you to add an optional annotation below or above themselves.\n\n== Functions\n\n=== `underline`\n\nA horizontal line under content.\n\n```\nunderline(\n  content: content\n) -> content\n```\n\n```typst\n$ underline(1 + 2 + ... + 5) $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content above the line.\n\n=== `overline`\n\nA horizontal line over content.\n\n```\noverline(\n  content: content\n) -> content\n```\n\n```typst\n$ overline(1 + 2 + ... + 5) $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content below the line.\n\n=== `underbrace`\n\nA horizontal brace under content, with an optional annotation below.\n\n```\nunderbrace(\n  content: content,\n  none | content\n) -> content\n```\n\n```typst\n$ underbrace(1 + 2 + ... + 5, \"numbers\") $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content above the brace.\n\n==== `annotation`: none | content (Positional, Settable)\n\nThe optional content below the brace.\n\nDefault: `none`\n\n=== `overbrace`\n\nA horizontal brace over content, with an optional annotation above.\n\n```\noverbrace(\n  content: content,\n  none | content\n) -> content\n```\n\n```typst\n$ overbrace(1 + 2 + ... + 5, \"numbers\") $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content below the brace.\n\n==== `annotation`: none | content (Positional, Settable)\n\nThe optional content above the brace.\n\nDefault: `none`\n\n=== `underbracket`\n\nA horizontal bracket under content, with an optional annotation below.\n\n```\nunderbracket(\n  content: content,\n  none | content\n) -> content\n```\n\n```typst\n$ underbracket(1 + 2 + ... + 5, \"numbers\") $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content above the bracket.\n\n==== `annotation`: none | content (Positional, Settable)\n\nThe optional content below the bracket.\n\nDefault: `none`\n\n=== `overbracket`\n\nA horizontal bracket over content, with an optional annotation above.\n\n```\noverbracket(\n  content: content,\n  none | content\n) -> content\n```\n\n```typst\n$ overbracket(1 + 2 + ... + 5, \"numbers\") $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content below the bracket.\n\n==== `annotation`: none | content (Positional, Settable)\n\nThe optional content above the bracket.\n\nDefault: `none`\n\n=== `underparen`\n\nA horizontal parenthesis under content, with an optional annotation below.\n\n```\nunderparen(\n  content: content,\n  none | content\n) -> content\n```\n\n```typst\n$ underparen(1 + 2 + ... + 5, \"numbers\") $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content above the parenthesis.\n\n==== `annotation`: none | content (Positional, Settable)\n\nThe optional content below the parenthesis.\n\nDefault: `none`\n\n=== `overparen`\n\nA horizontal parenthesis over content, with an optional annotation above.\n\n```\noverparen(\n  content: content,\n  none | content\n) -> content\n```\n\n```typst\n$ overparen(1 + 2 + ... + 5, \"numbers\") $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content below the parenthesis.\n\n==== `annotation`: none | content (Positional, Settable)\n\nThe optional content above the parenthesis.\n\nDefault: `none`\n\n=== `undershell`\n\nA horizontal tortoise shell bracket under content, with an optional annotation below.\n\n```\nundershell(\n  content: content,\n  none | content\n) -> content\n```\n\n```typst\n$ undershell(1 + 2 + ... + 5, \"numbers\") $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content above the tortoise shell bracket.\n\n==== `annotation`: none | content (Positional, Settable)\n\nThe optional content below the tortoise shell bracket.\n\nDefault: `none`\n\n=== `overshell`\n\nA horizontal tortoise shell bracket over content, with an optional annotation above.\n\n```\novershell(\n  content: content,\n  none | content\n) -> content\n```\n\n```typst\n$ overshell(1 + 2 + ... + 5, \"numbers\") $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content below the tortoise shell bracket.\n\n==== `annotation`: none | content (Positional, Settable)\n\nThe optional content above the tortoise shell bracket.\n\nDefault: `none`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/underover.typ", "filename": "underover.typ"}
{"text": "= Variants\n\nAlternate typefaces within formulas.\n\nThese functions are distinct from the #link(\"/docs/reference/text/text/\")[text] function because math fonts contain multiple variants of each letter.\n\n== Functions\n\n=== `serif`\n\nSerif (roman) font style in math.\n\nThis is already the default.\n\n```\nserif(\n  content: content\n) -> content\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to style.\n\n=== `sans`\n\nSans-serif font style in math.\n\n```\nsans(\n  content: content\n) -> content\n```\n\n```typst\n$ sans(A B C) $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to style.\n\n=== `frak`\n\nFraktur font style in math.\n\n```\nfrak(\n  content: content\n) -> content\n```\n\n```typst\n$ frak(P) $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to style.\n\n=== `mono`\n\nMonospace font style in math.\n\n```\nmono(\n  content: content\n) -> content\n```\n\n```typst\n$ mono(x + y = z) $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to style.\n\n=== `bb`\n\nBlackboard bold (double-struck) font style in math.\n\nFor uppercase latin letters, blackboard bold is additionally available through #link(\"/docs/reference/symbols/sym/\")[symbols] of the form `NN` and `RR`.\n\n```\nbb(\n  content: content\n) -> content\n```\n\n```typst\n$ bb(b) $\n$ bb(N) = NN $\n$ f: NN -> RR $\n```\n\n==== `body`: content (Required, Positional)\n\nThe content to style.\n\n=== `cal`\n\nCalligraphic font style in math.\n\n```\ncal(\n  content: content\n) -> content\n```\n\n```typst\nLet $cal(P)$ be the set of ...\n```\n\nThis corresponds both to LaTeX's `\\mathcal` and `\\mathscr` as both of these styles share the same Unicode codepoints. Switching between the styles is thus only possible if supported by the font via #link(\"/docs/reference/text/text/#parameters-features\")[font features].\n\nFor the default math font, the roundhand style is available through the `ss01` feature. Therefore, you could define your own version of `\\mathscr` like this:\n\n```typst\n#let scr(it) = text(\n  features: (\"ss01\",),\n  box($cal(it)$),\n)\n\nWe establish $cal(P) != scr(P)$.\n```\n\n(The box is not conceptually necessary, but unfortunately currently needed due to limitations in Typst's text style handling in math.)\n\n==== `body`: content (Required, Positional)\n\nThe content to style.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/variants.typ", "filename": "variants.typ"}
{"text": "= vec\n\nA column vector.\n\nContent in the vector's elements can be aligned with the #link(\"/docs/reference/math/vec/#parameters-align\")[align] parameter, or the `&` symbol.\n\n== Example\n\n```typst\n$ vec(a, b, c) dot vec(1, 2, 3)\n    = a + 2b + 3c $\n```\n\n== Parameters\n\n```\nvec(\n  delim: none | str | array | symbol,\n  align: alignment,\n  gap: relative,\n  ..: content\n) -> content\n```\n\n=== `delim`: none | str | array | symbol (Settable)\n\nThe delimiter to use.\n\nCan be a single character specifying the left delimiter, in which case the right delimiter is inferred. Otherwise, can be an array containing a left and a right delimiter.\n\nDefault: `(\"(\", \")\")`\n\n*Example:*\n```typst\n#set math.vec(delim: \"[\")\n$ vec(1, 2) $\n```\n\n=== `align`: alignment (Settable)\n\nThe horizontal alignment that each element should have.\n\nDefault: `center`\n\n*Example:*\n```typst\n#set math.vec(align: right)\n$ vec(-1, 1, -1) $\n```\n\n=== `gap`: relative (Settable)\n\nThe gap between elements.\n\nDefault: `0% + 0.2em`\n\n*Example:*\n```typst\n#set math.vec(gap: 1em)\n$ vec(1, 2) $\n```\n\n=== `children`: content (Required, Positional, Variadic)\n\nThe elements of the vector.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math/vec.typ", "filename": "vec.typ"}
{"text": "= Math\n\nTypst has special #link(\"/docs/reference/syntax/#math\")[syntax] and library functions to typeset mathematical formulas. Math formulas can be displayed inline with text or as separate blocks. They will be typeset into their own block if they start and end with at least one space (e.g. `$ x^2 $`).\n\n== Variables\n\nIn math, single letters are always displayed as is. Multiple letters, however, are interpreted as variables and functions. To display multiple letters verbatim, you can place them into quotes and to access single letter variables, you can use the #link(\"/docs/reference/scripting/#expressions\")[hash syntax].\n\n```typst\n$ A = pi r^2 $\n$ \"area\" = pi dot \"radius\"^2 $\n$ cal(A) :=\n    { x in RR | x \"is natural\" } $\n#let x = 5\n$ #x < 17 $\n```\n\n== Symbols\n\nMath mode makes a wide selection of #link(\"/docs/reference/symbols/sym/\")[symbols] like `pi`, `dot`, or `RR` available. Many mathematical symbols are available in different variants. You can select between different variants by applying #link(\"/docs/reference/foundations/symbol/\")[modifiers] to the symbol. Typst further recognizes a number of shorthand sequences like `=>` that approximate a symbol. When such a shorthand exists, the symbol's documentation lists it.\n\n```typst\n$ x < y => x gt.eq.not y $\n```\n\n== Line Breaks\n\nFormulas can also contain line breaks. Each line can contain one or multiple _alignment points_ (`&`) which are then aligned.\n\n```typst\n$ sum_(k=0)^n k\n    &= 1 + ... + n \\\n    &= (n(n+1)) / 2 $\n```\n\n== Function calls\n\nMath mode supports special function calls without the hash prefix. In these \"math calls\", the argument list works a little differently than in code:\n\n- Within them, Typst is still in \"math mode\". Thus, you can write math directly into them, but need to use hash syntax to pass code expressions (except for strings, which are available in the math syntax).\n- They support positional and named arguments, as well as argument spreading.\n- They don't support trailing content blocks.\n- They provide additional syntax for 2-dimensional argument lists. The semicolon (`;`) merges preceding arguments separated by commas into an array argument.\n\n```typst\n$ frac(a^2, 2) $\n$ vec(1, 2, delim: \"[\") $\n$ mat(1, 2; 3, 4) $\n$ mat(..#range(1, 5).chunks(2)) $\n$ lim_x =\n    op(\"lim\", limits: #true)_x $\n```\n\nTo write a verbatim comma or semicolon in a math call, escape it with a backslash. The colon on the other hand is only recognized in a special way if directly preceded by an identifier, so to display it verbatim in those cases, you can just insert a space before it.\n\nFunctions calls preceded by a hash are normal code function calls and not affected by these rules.\n\n== Alignment\n\nWhen equations include multiple _alignment points_ (`&`), this creates blocks of alternatingly right- and left-aligned columns. In the example below, the expression `(3x + y) / 7` is right-aligned and `= 9` is left-aligned. The word \"given\" is also left-aligned because `&&` creates two alignment points in a row, alternating the alignment twice. `& &` and `&&` behave exactly the same way. Meanwhile, \"multiply by 7\" is right-aligned because just one `&` precedes it. Each alignment point simply alternates between right-aligned/left-aligned.\n\n```typst\n$ (3x + y) / 7 &= 9 && \"given\" \\\n  3x + y &= 63 & \"multiply by 7\" \\\n  3x &= 63 - y && \"subtract y\" \\\n  x &= 21 - y/3 & \"divide by 3\" $\n```\n\n== Math fonts\n\nYou can set the math font by with a #link(\"/docs/reference/styling/#show-rules\")[show-set rule] as demonstrated below. Note that only special OpenType math fonts are suitable for typesetting maths.\n\n```typst\n#show math.equation: set text(font: \"Fira Math\")\n$ sum_(i in NN) 1 + i $\n```\n\n== Math module\n\nAll math functions are part of the `math` #link(\"/docs/reference/scripting/#modules\")[module], which is available by default in equations. Outside of equations, they can be accessed with the `math.` prefix.\n\n== Definitions\n\n- #link(\"/docs/reference/math/accent/\")[accent]Attaches an accent to a base.\n- #link(\"/docs/reference/math/attach\")[attach]Subscript, superscripts, and limits.\n- #link(\"/docs/reference/math/binom/\")[binom]A binomial expression.\n- #link(\"/docs/reference/math/cancel/\")[cancel]Displays a diagonal line over a part of an equation.\n- #link(\"/docs/reference/math/cases/\")[cases]A case distinction.\n- #link(\"/docs/reference/math/class/\")[class]Forced use of a certain math class.\n- #link(\"/docs/reference/math/equation/\")[equation]A mathematical equation.\n- #link(\"/docs/reference/math/frac/\")[frac]A mathematical fraction.\n- #link(\"/docs/reference/math/lr\")[lr]Delimiter matching.\n- #link(\"/docs/reference/math/mat/\")[mat]A matrix.\n- #link(\"/docs/reference/math/op/\")[op]A text operator in an equation.\n- #link(\"/docs/reference/math/primes/\")[primes]Grouped primes.\n- #link(\"/docs/reference/math/roots\")[roots]Square and non-square roots.\n- #link(\"/docs/reference/math/sizes\")[sizes]Forced size styles for expressions within formulas.\n- #link(\"/docs/reference/math/stretch/\")[stretch]Stretches a glyph.\n- #link(\"/docs/reference/math/styles\")[styles]Alternate letterforms within formulas.\n- #link(\"/docs/reference/math/underover\")[underover]Delimiters above or below parts of an equation.\n- #link(\"/docs/reference/math/variants\")[variants]Alternate typefaces within formulas.\n- #link(\"/docs/reference/math/vec/\")[vec]A column vector.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/math.typ", "filename": "math.typ"}
{"text": "= bibliography\n\nA bibliography / reference listing.\n\nYou can create a new bibliography by calling this function with a path to a bibliography file in either one of two formats:\n\n- A Hayagriva `.yml` file. Hayagriva is a new bibliography file format designed for use with Typst. Visit its #link(\"https://github.com/typst/hayagriva/blob/main/docs/file-format.md\")[documentation] for more details.\n- A BibLaTeX `.bib` file.\n\nAs soon as you add a bibliography somewhere in your document, you can start citing things with reference syntax (`@key`) or explicit calls to the #link(\"/docs/reference/model/cite/\")[citation] function (`#cite(<key>)`). The bibliography will only show entries for works that were referenced in the document.\n\n== Styles\n\nTypst offers a wide selection of built-in #link(\"/docs/reference/model/bibliography/#parameters-style\")[citation and bibliography styles]. Beyond those, you can add and use custom #link(\"https://citationstyles.org/\")[CSL] (Citation Style Language) files. Wondering which style to use? Here are some good defaults based on what discipline you're working in:\n\n== Example\n\n```typst\nThis was already noted by\npirates long ago. @arrgh\n\nMultiple sources say ...\n@arrgh @netwok.\n\n#bibliography(\"works.bib\")\n```\n\n== Parameters\n\n```\nbibliography(\n  str: str | bytes | array,\n  title: none | auto | content,\n  full: bool,\n  style: str | bytes\n) -> content\n```\n\n=== `sources`: str | bytes | array (Required, Positional)\n\nOne or multiple paths to or raw bytes for Hayagriva `.yml` and/or BibLaTeX `.bib` files.\n\nThis can be a:\n\n- A path string to load a bibliography file from the given path. For more details about paths, see the #link(\"/docs/reference/syntax/#paths\")[Paths section].\n- Raw bytes from which the bibliography should be decoded.\n- An array where each item is one the above.\n\n=== `title`: none | auto | content (Settable)\n\nThe title of the bibliography.\n\n- When set to `auto`, an appropriate title for the #link(\"/docs/reference/text/text/#parameters-lang\")[text language] will be used. This is the default.\n- When set to `none`, the bibliography will not have a title.\n- A custom title can be set by passing content.\n\nThe bibliography's heading will not be numbered by default, but you can force it to be with a show-set rule: `show bibliography: set heading(numbering: \"1.\")`\n\nDefault: `auto`\n\n=== `full`: bool (Settable)\n\nWhether to include all works from the given bibliography files, even those that weren't cited in the document.\n\nTo selectively add individual cited works without showing them, you can also use the `cite` function with #link(\"/docs/reference/model/cite/#parameters-form\")[form] set to `none`.\n\nDefault: `false`\n\n=== `style`: str | bytes (Settable)\n\nThe bibliography style.\n\nThis can be:\n\n- A string with the name of one of the built-in styles (see below). Some of the styles listed below appear twice, once with their full name and once with a short alias.\n- A path string to a #link(\"https://citationstyles.org/\")[CSL file]. For more details about paths, see the #link(\"/docs/reference/syntax/#paths\")[Paths section].\n- Raw bytes from which a CSL style should be decoded.\n\nDefault: `\"ieee\"`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/bibliography.typ", "filename": "bibliography.typ"}
{"text": "= cite\n\nCite a work from the bibliography.\n\nBefore you starting citing, you need to add a #link(\"/docs/reference/model/bibliography/\")[bibliography] somewhere in your document.\n\n== Example\n\n```typst\nThis was already noted by\npirates long ago. @arrgh\n\nMultiple sources say ...\n@arrgh @netwok.\n\nYou can also call `cite`\nexplicitly. #cite(<arrgh>)\n\n#bibliography(\"works.bib\")\n```\n\nIf your source name contains certain characters such as slashes, which are not recognized by the `<>` syntax, you can explicitly call `label` instead.\n\n== Syntax\n\nThis function indirectly has dedicated syntax. #link(\"/docs/reference/model/ref/\")[References] can be used to cite works from the bibliography. The label then corresponds to the citation key.\n\n== Parameters\n\n```\ncite(\n  label: label,\n  supplement: none | content,\n  form: none | str,\n  style: auto | str | bytes\n) -> content\n```\n\n=== `key`: label (Required, Positional)\n\nThe citation key that identifies the entry in the bibliography that shall be cited, as a label.\n\n*Example:*\n```typst\n// All the same\n@netwok \\\n#cite(<netwok>) \\\n#cite(label(\"netwok\"))\n```\n\n=== `supplement`: none | content (Settable)\n\nA supplement for the citation such as page or chapter number.\n\nIn reference syntax, the supplement can be added in square brackets:\n\nDefault: `none`\n\n*Example:*\n```typst\nThis has been proven. @distress[p.~7]\n\n#bibliography(\"works.bib\")\n```\n\n=== `form`: none | str (Settable)\n\nThe kind of citation to produce. Different forms are useful in different scenarios: A normal citation is useful as a source at the end of a sentence, while a \"prose\" citation is more suitable for inclusion in the flow of text.\n\nIf set to `none`, the cited work is included in the bibliography, but nothing will be displayed.\n\nDefault: `\"normal\"`\n\n*Example:*\n```typst\n#cite(<netwok>, form: \"prose\")\nshow the outsized effects of\npirate life on the human psyche.\n```\n\n=== `style`: auto | str | bytes (Settable)\n\nThe citation style.\n\nThis can be:\n\n- `auto` to automatically use the #link(\"/docs/reference/model/bibliography/#parameters-style\")[bibliography's style] for citations.\n- A string with the name of one of the built-in styles (see below). Some of the styles listed below appear twice, once with their full name and once with a short alias.\n- A path string to a #link(\"https://citationstyles.org/\")[CSL file]. For more details about paths, see the #link(\"/docs/reference/syntax/#paths\")[Paths section].\n- Raw bytes from which a CSL style should be decoded.\n\nDefault: `auto`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/cite.typ", "filename": "cite.typ"}
{"text": "= document\n\nThe root element of a document and its metadata.\n\nAll documents are automatically wrapped in a `document` element. You cannot create a document element yourself. This function is only used with #link(\"/docs/reference/styling/#set-rules\")[set rules] to specify document metadata. Such a set rule must not occur inside of any layout container.\n\n```typst\n#set document(title: [Hello])\n\nThis has no visible output, but\nembeds metadata into the PDF!\n```\n\nNote that metadata set with this function is not rendered within the document. Instead, it is embedded in the compiled PDF file.\n\n== Parameters\n\n```\ndocument(\n  title: none | content,\n  author: str | array,\n  description: none | content,\n  keywords: str | array,\n  date: none | auto | datetime\n) -> content\n```\n\n=== `title`: none | content (Settable)\n\nThe document's title. This is often rendered as the title of the PDF viewer window.\n\nWhile this can be arbitrary content, PDF viewers only support plain text titles, so the conversion might be lossy.\n\nDefault: `none`\n\n=== `author`: str | array (Settable)\n\nThe document's authors.\n\nDefault: `()`\n\n=== `description`: none | content (Settable)\n\nThe document's description.\n\nDefault: `none`\n\n=== `keywords`: str | array (Settable)\n\nThe document's keywords.\n\nDefault: `()`\n\n=== `date`: none | auto | datetime (Settable)\n\nThe document's creation date.\n\nIf this is `auto` (default), Typst uses the current date and time. Setting it to `none` prevents Typst from embedding any creation date into the PDF metadata.\n\nThe year component must be at least zero in order to be embedded into a PDF.\n\nIf you want to create byte-by-byte reproducible PDFs, set this to something other than `auto`.\n\nDefault: `auto`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/document.typ", "filename": "document.typ"}
{"text": "= emph\n\nEmphasizes content by toggling italics.\n\n- If the current #link(\"/docs/reference/text/text/#parameters-style\")[text style] is `\"normal\"`, this turns it into `\"italic\"`.\n- If it is already `\"italic\"` or `\"oblique\"`, it turns it back to `\"normal\"`.\n\n== Example\n\n```typst\nThis is _emphasized._ \\\nThis is #emph[too.]\n\n#show emph: it => {\n  text(blue, it.body)\n}\n\nThis is _emphasized_ differently.\n```\n\n== Syntax\n\nThis function also has dedicated syntax: To emphasize content, simply enclose it in underscores (`_`). Note that this only works at word boundaries. To emphasize part of a word, you have to use the function.\n\n== Parameters\n\n```\nemph(\n  content: content\n) -> content\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to emphasize.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/emph.typ", "filename": "emph.typ"}
{"text": "= enum\n\nA numbered list.\n\nDisplays a sequence of items vertically and numbers them consecutively.\n\n== Example\n\n```typst\nAutomatically numbered:\n+ Preparations\n+ Analysis\n+ Conclusions\n\nManually numbered:\n2. What is the first step?\n5. I am confused.\n+  Moving on ...\n\nMultiple lines:\n+ This enum item has multiple\n  lines because the next line\n  is indented.\n\nFunction call.\n#enum[First][Second]\n```\n\nYou can easily switch all your enumerations to a different numbering style with a set rule.\n\n```typst\n#set enum(numbering: \"a)\")\n\n+ Starting off ...\n+ Don't forget step two\n```\n\nYou can also use #link(\"/docs/reference/model/enum/#definitions-item\")[enum.item] to programmatically customize the number of each item in the enumeration:\n\n```typst\n#enum(\n  enum.item(1)[First step],\n  enum.item(5)[Fifth step],\n  enum.item(10)[Tenth step]\n)\n```\n\n== Syntax\n\nThis functions also has dedicated syntax:\n\n- Starting a line with a plus sign creates an automatically numbered enumeration item.\n- Starting a line with a number followed by a dot creates an explicitly numbered enumeration item.\n\nEnumeration items can contain multiple paragraphs and other block-level content. All content that is indented more than an item's marker becomes part of that item.\n\n== Parameters\n\n```\nenum(\n  tight: bool,\n  numbering: str | function,\n  start: auto | int,\n  full: bool,\n  reversed: bool,\n  indent: length,\n  body-indent: length,\n  spacing: auto | length,\n  number-align: alignment,\n  ..: content | array\n) -> content\n```\n\n=== `tight`: bool (Settable)\n\nDefines the default #link(\"/docs/reference/model/enum/#parameters-spacing\")[spacing] of the enumeration. If it is `false`, the items are spaced apart with #link(\"/docs/reference/model/par/#parameters-spacing\")[paragraph spacing]. If it is `true`, they use #link(\"/docs/reference/model/par/#parameters-leading\")[paragraph leading] instead. This makes the list more compact, which can look better if the items are short.\n\nIn markup mode, the value of this parameter is determined based on whether items are separated with a blank line. If items directly follow each other, this is set to `true`; if items are separated by a blank line, this is set to `false`. The markup-defined tightness cannot be overridden with set rules.\n\nDefault: `true`\n\n*Example:*\n```typst\n+ If an enum has a lot of text, and\n  maybe other inline content, it\n  should not be tight anymore.\n\n+ To make an enum wide, simply\n  insert a blank line between the\n  items.\n```\n\n=== `numbering`: str | function (Settable)\n\nHow to number the enumeration. Accepts a #link(\"/docs/reference/model/numbering/\")[numbering pattern or function].\n\nIf the numbering pattern contains multiple counting symbols, they apply to nested enums. If given a function, the function receives one argument if `full` is `false` and multiple arguments if `full` is `true`.\n\nDefault: `\"1.\"`\n\n*Example:*\n```typst\n#set enum(numbering: \"1.a)\")\n+ Different\n+ Numbering\n  + Nested\n  + Items\n+ Style\n\n#set enum(numbering: n => super[#n])\n+ Superscript\n+ Numbering!\n```\n\n=== `start`: auto | int (Settable)\n\nWhich number to start the enumeration with.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#enum(\n  start: 3,\n  [Skipping],\n  [Ahead],\n)\n```\n\n=== `full`: bool (Settable)\n\nWhether to display the full numbering, including the numbers of all parent enumerations.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set enum(numbering: \"1.a)\", full: true)\n+ Cook\n  + Heat water\n  + Add ingredients\n+ Eat\n```\n\n=== `reversed`: bool (Settable)\n\nWhether to reverse the numbering for this enumeration.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set enum(reversed: true)\n+ Coffee\n+ Tea\n+ Milk\n```\n\n=== `indent`: length (Settable)\n\nThe indentation of each item.\n\nDefault: `0pt`\n\n=== `body-indent`: length (Settable)\n\nThe space between the numbering and the body of each item.\n\nDefault: `0.5em`\n\n=== `spacing`: auto | length (Settable)\n\nThe spacing between the items of the enumeration.\n\nIf set to `auto`, uses paragraph #link(\"/docs/reference/model/par/#parameters-leading\")[leading] for tight enumerations and paragraph #link(\"/docs/reference/model/par/#parameters-spacing\")[spacing] for wide (non-tight) enumerations.\n\nDefault: `auto`\n\n=== `number-align`: alignment (Settable)\n\nThe alignment that enum numbers should have.\n\nBy default, this is set to `end + top`, which aligns enum numbers towards end of the current text direction (in left-to-right script, for example, this is the same as `right`) and at the top of the line. The choice of `end` for horizontal alignment of enum numbers is usually preferred over `start`, as numbers then grow away from the text instead of towards it, avoiding certain visual issues. This option lets you override this behaviour, however. (Also to note is that the #link(\"/docs/reference/model/list/\")[unordered list] uses a different method for this, by giving the `marker` content an alignment directly.).\n\nDefault: `end + top`\n\n*Example:*\n```typst\n#set enum(number-align: start + bottom)\n\nHere are some powers of two:\n1. One\n2. Two\n4. Four\n8. Eight\n16. Sixteen\n32. Thirty two\n```\n\n=== `children`: content | array (Required, Positional, Variadic)\n\nThe numbered list's items.\n\nWhen using the enum syntax, adjacent items are automatically collected into enumerations, even through constructs like for loops.\n\n*Example:*\n```typst\n#for phase in (\n   \"Launch\",\n   \"Orbit\",\n   \"Descent\",\n) [+ #phase]\n```\n\n== Definitions\n\n=== `item`\n\nAn enumeration item.\n\n```\nitem(\n  none | int,\n  content: content\n) -> content\n```\n\n==== `number`: none | int (Positional, Settable)\n\nThe item's number.\n\nDefault: `none`\n\n==== `body`: content (Required, Positional)\n\nThe item's body.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/enum.typ", "filename": "enum.typ"}
{"text": "= figure\n\nA figure with an optional caption.\n\nAutomatically detects its kind to select the correct counting track. For example, figures containing images will be numbered separately from figures containing tables.\n\n== Examples\n\nThe example below shows a basic figure with an image:\n\n```typst\n@glacier shows a glacier. Glaciers\nare complex systems.\n\n#figure(\n  image(\"glacier.jpg\", width: 80%),\n  caption: [A curious figure.],\n) <glacier>\n```\n\nYou can also insert #link(\"/docs/reference/model/table/\")[tables] into figures to give them a caption. The figure will detect this and automatically use a separate counter.\n\n```typst\n#figure(\n  table(\n    columns: 4,\n    [t], [1], [2], [3],\n    [y], [0.3s], [0.4s], [0.8s],\n  ),\n  caption: [Timing results],\n)\n```\n\nThis behaviour can be overridden by explicitly specifying the figure's `kind`. All figures of the same kind share a common counter.\n\n== Figure behaviour\n\nBy default, figures are placed within the flow of content. To make them float to the top or bottom of the page, you can use the #link(\"/docs/reference/model/figure/#parameters-placement\")[placement] argument.\n\nIf your figure is too large and its contents are breakable across pages (e.g. if it contains a large table), then you can make the figure itself breakable across pages as well with this show rule:\n\nSee the #link(\"/docs/reference/layout/block/#parameters-breakable\")[block] documentation for more information about breakable and non-breakable blocks.\n\n== Caption customization\n\nYou can modify the appearance of the figure's caption with its associated #link(\"/docs/reference/model/figure/#definitions-caption\")[caption] function. In the example below, we emphasize all captions:\n\n```typst\n#show figure.caption: emph\n\n#figure(\n  rect[Hello],\n  caption: [I am emphasized!],\n)\n```\n\nBy using a #link(\"/docs/reference/foundations/function/#definitions-where\")[where] selector, we can scope such rules to specific kinds of figures. For example, to position the caption above tables, but keep it below for all other kinds of figures, we could write the following show-set rule:\n\n```typst\n#show figure.where(\n  kind: table\n): set figure.caption(position: top)\n\n#figure(\n  table(columns: 2)[A][B][C][D],\n  caption: [I'm up here],\n)\n```\n\n== Parameters\n\n```\nfigure(\n  content: content,\n  placement: none | auto | alignment,\n  scope: str,\n  caption: none | content,\n  kind: auto | str | function,\n  supplement: none | auto | content | function,\n  numbering: none | str | function,\n  gap: length,\n  outlined: bool\n) -> content\n```\n\n=== `body`: content (Required, Positional)\n\nThe content of the figure. Often, an #link(\"/docs/reference/visualize/image/\")[image].\n\n=== `placement`: none | auto | alignment (Settable)\n\nThe figure's placement on the page.\n\n- `none`: The figure stays in-flow exactly where it was specified like other content.\n- `auto`: The figure picks `top` or `bottom` depending on which is closer.\n- `top`: The figure floats to the top of the page.\n- `bottom`: The figure floats to the bottom of the page.\n\nThe gap between the main flow content and the floating figure is controlled by the #link(\"/docs/reference/layout/place/#parameters-clearance\")[clearance] argument on the `place` function.\n\nDefault: `none`\n\n*Example:*\n```typst\n#set page(height: 200pt)\n\n= Introduction\n#figure(\n  placement: bottom,\n  caption: [A glacier],\n  image(\"glacier.jpg\", width: 60%),\n)\n#lorem(60)\n```\n\n=== `scope`: str (Settable)\n\nRelative to which containing scope the figure is placed.\n\nSet this to `\"parent\"` to create a full-width figure in a two-column document.\n\nHas no effect if `placement` is `none`.\n\nDefault: `\"column\"`\n\n*Example:*\n```typst\n#set page(height: 250pt, columns: 2)\n\n= Introduction\n#figure(\n  placement: bottom,\n  scope: \"parent\",\n  caption: [A glacier],\n  image(\"glacier.jpg\", width: 60%),\n)\n#lorem(60)\n```\n\n=== `caption`: none | content (Settable)\n\nThe figure's caption.\n\nDefault: `none`\n\n=== `kind`: auto | str | function (Settable)\n\nThe kind of figure this is.\n\nAll figures of the same kind share a common counter.\n\nIf set to `auto`, the figure will try to automatically determine its kind based on the type of its body. Automatically detected kinds are #link(\"/docs/reference/model/table/\")[tables] and #link(\"/docs/reference/text/raw/\")[code]. In other cases, the inferred kind is that of an #link(\"/docs/reference/visualize/image/\")[image].\n\nSetting this to something other than `auto` will override the automatic detection. This can be useful if\n\n- you wish to create a custom figure type that is not an #link(\"/docs/reference/visualize/image/\")[image], a #link(\"/docs/reference/model/table/\")[table] or #link(\"/docs/reference/text/raw/\")[code],\n- you want to force the figure to use a specific counter regardless of its content.\n\nYou can set the kind to be an element function or a string. If you set it to an element function other than #link(\"/docs/reference/model/table/\")[table], #link(\"/docs/reference/text/raw/\")[raw] or #link(\"/docs/reference/visualize/image/\")[image], you will need to manually specify the figure's supplement.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#figure(\n  circle(radius: 10pt),\n  caption: [A curious atom.],\n  kind: \"atom\",\n  supplement: [Atom],\n)\n```\n\n=== `supplement`: none | auto | content | function (Settable)\n\nThe figure's supplement.\n\nIf set to `auto`, the figure will try to automatically determine the correct supplement based on the `kind` and the active #link(\"/docs/reference/text/text/#parameters-lang\")[text language]. If you are using a custom figure type, you will need to manually specify the supplement.\n\nIf a function is specified, it is passed the first descendant of the specified `kind` (typically, the figure's body) and should return content.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#figure(\n  [The contents of my figure!],\n  caption: [My custom figure],\n  supplement: [Bar],\n  kind: \"foo\",\n)\n```\n\n=== `numbering`: none | str | function (Settable)\n\nHow to number the figure. Accepts a #link(\"/docs/reference/model/numbering/\")[numbering pattern or function].\n\nDefault: `\"1\"`\n\n=== `gap`: length (Settable)\n\nThe vertical gap between the body and caption.\n\nDefault: `0.65em`\n\n=== `outlined`: bool (Settable)\n\nWhether the figure should appear in an #link(\"/docs/reference/model/outline/\")[outline] of figures.\n\nDefault: `true`\n\n== Definitions\n\n=== `caption`\n\nThe caption of a figure. This element can be used in set and show rules to customize the appearance of captions for all figures or figures of a specific kind.\n\nIn addition to its `pos` and `body`, the `caption` also provides the figure's `kind`, `supplement`, `counter`, and `numbering` as fields. These parts can be used in #link(\"/docs/reference/foundations/function/#definitions-where\")[where] selectors and show rules to build a completely custom caption.\n\n```\ncaption(\n  position: alignment,\n  separator: auto | content,\n  content: content\n) -> content\n```\n\n```typst\n#show figure.caption: emph\n\n#figure(\n  rect[Hello],\n  caption: [A rectangle],\n)\n```\n\n==== `position`: alignment (Settable)\n\nThe caption's position in the figure. Either `top` or `bottom`.\n\nDefault: `bottom`\n\n*Example:*\n```typst\n#show figure.where(\n  kind: table\n): set figure.caption(position: top)\n\n#figure(\n  table(columns: 2)[A][B],\n  caption: [I'm up here],\n)\n\n#figure(\n  rect[Hi],\n  caption: [I'm down here],\n)\n\n#figure(\n  table(columns: 2)[A][B],\n  caption: figure.caption(\n    position: bottom,\n    [I'm down here too!]\n  )\n)\n```\n\n==== `separator`: auto | content (Settable)\n\nThe separator which will appear between the number and body.\n\nIf set to `auto`, the separator will be adapted to the current #link(\"/docs/reference/text/text/#parameters-lang\")[language] and #link(\"/docs/reference/text/text/#parameters-region\")[region].\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set figure.caption(separator: [ --- ])\n\n#figure(\n  rect[Hello],\n  caption: [A rectangle],\n)\n```\n\n==== `body`: content (Required, Positional)\n\nThe caption's body.\n\nCan be used alongside `kind`, `supplement`, `counter`, `numbering`, and `location` to completely customize the caption.\n\n*Example:*\n```typst\n#show figure.caption: it => [\n  #underline(it.body) |\n  #it.supplement\n  #context it.counter.display(it.numbering)\n]\n\n#figure(\n  rect[Hello],\n  caption: [A rectangle],\n)\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/figure.typ", "filename": "figure.typ"}
{"text": "= footnote\n\nA footnote.\n\nIncludes additional remarks and references on the same page with footnotes. A footnote will insert a superscript number that links to the note at the bottom of the page. Notes are numbered sequentially throughout your document and can break across multiple pages.\n\nTo customize the appearance of the entry in the footnote listing, see #link(\"/docs/reference/model/footnote/#definitions-entry\")[footnote.entry]. The footnote itself is realized as a normal superscript, so you can use a set rule on the #link(\"/docs/reference/text/super/\")[super] function to customize it. You can also apply a show rule to customize only the footnote marker (superscript number) in the running text.\n\n== Example\n\n```typst\nCheck the docs for more details.\n#footnote[https://typst.app/docs]\n```\n\nThe footnote automatically attaches itself to the preceding word, even if there is a space before it in the markup. To force space, you can use the string `#\" \"` or explicit #link(\"/docs/reference/layout/h/\")[horizontal spacing].\n\nBy giving a label to a footnote, you can have multiple references to it.\n\n```typst\nYou can edit Typst documents online.\n#footnote[https://typst.app/app] <fn>\nCheckout Typst's website. @fn\nAnd the online app. #footnote(<fn>)\n```\n\n_Note:_ Set and show rules in the scope where `footnote` is called may not apply to the footnote's content. See #link(\"https://github.com/typst/typst/issues/1467#issuecomment-1588799440\")[here] for more information.\n\n== Parameters\n\n```\nfootnote(\n  numbering: str | function,\n  label: label | content\n) -> content\n```\n\n=== `numbering`: str | function (Settable)\n\nHow to number footnotes.\n\nBy default, the footnote numbering continues throughout your document. If you prefer per-page footnote numbering, you can reset the footnote #link(\"/docs/reference/introspection/counter/\")[counter] in the page #link(\"/docs/reference/layout/page/#parameters-header\")[header]. In the future, there might be a simpler way to achieve this.\n\nDefault: `\"1\"`\n\n*Example:*\n```typst\n#set footnote(numbering: \"*\")\n\nFootnotes:\n#footnote[Star],\n#footnote[Dagger]\n```\n\n=== `body`: label | content (Required, Positional)\n\nThe content to put into the footnote. Can also be the label of another footnote this one should point to.\n\n== Definitions\n\n=== `entry`\n\nAn entry in a footnote list.\n\nThis function is not intended to be called directly. Instead, it is used in set and show rules to customize footnote listings.\n\n```\nentry(\n  content: content,\n  separator: content,\n  clearance: length,\n  gap: length,\n  indent: length\n) -> content\n```\n\n```typst\n#show footnote.entry: set text(red)\n\nMy footnote listing\n#footnote[It's down here]\nhas red text!\n```\n\n_Note:_ Footnote entry properties must be uniform across each page run (a page run is a sequence of pages without an explicit pagebreak in between). For this reason, set and show rules for footnote entries should be defined before any page content, typically at the very start of the document.\n\n==== `note`: content (Required, Positional)\n\nThe footnote for this entry. Its location can be used to determine the footnote counter state.\n\n*Example:*\n```typst\n#show footnote.entry: it => {\n  let loc = it.note.location()\n  numbering(\n    \"1: \",\n    ..counter(footnote).at(loc),\n  )\n  it.note.body\n}\n\nCustomized #footnote[Hello]\nlisting #footnote[World! 🌏]\n```\n\n==== `separator`: content (Settable)\n\nThe separator between the document body and the footnote listing.\n\nDefault: `line(length: 30% + 0pt, stroke: 0.5pt)`\n\n*Example:*\n```typst\n#set footnote.entry(\n  separator: repeat[.]\n)\n\nTesting a different separator.\n#footnote[\n  Unconventional, but maybe\n  not that bad?\n]\n```\n\n==== `clearance`: length (Settable)\n\nThe amount of clearance between the document body and the separator.\n\nDefault: `1em`\n\n*Example:*\n```typst\n#set footnote.entry(clearance: 3em)\n\nFootnotes also need ...\n#footnote[\n  ... some space to breathe.\n]\n```\n\n==== `gap`: length (Settable)\n\nThe gap between footnote entries.\n\nDefault: `0.5em`\n\n*Example:*\n```typst\n#set footnote.entry(gap: 0.8em)\n\nFootnotes:\n#footnote[Spaced],\n#footnote[Apart]\n```\n\n==== `indent`: length (Settable)\n\nThe indent of each footnote entry.\n\nDefault: `1em`\n\n*Example:*\n```typst\n#set footnote.entry(indent: 0em)\n\nFootnotes:\n#footnote[No],\n#footnote[Indent]\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/footnote.typ", "filename": "footnote.typ"}
{"text": "= heading\n\nA section heading.\n\nWith headings, you can structure your document into sections. Each heading has a _level,_ which starts at one and is unbounded upwards. This level indicates the logical role of the following content (section, subsection, etc.) A top-level heading indicates a top-level section of the document (not the document's title).\n\nTypst can automatically number your headings for you. To enable numbering, specify how you want your headings to be numbered with a #link(\"/docs/reference/model/numbering/\")[numbering pattern or function].\n\nIndependently of the numbering, Typst can also automatically generate an #link(\"/docs/reference/model/outline/\")[outline] of all headings for you. To exclude one or more headings from this outline, you can set the `outlined` parameter to `false`.\n\n== Example\n\n```typst\n#set heading(numbering: \"1.a)\")\n\n= Introduction\nIn recent years, ...\n\n== Preliminaries\nTo start, ...\n```\n\n== Syntax\n\nHeadings have dedicated syntax: They can be created by starting a line with one or multiple equals signs, followed by a space. The number of equals signs determines the heading's logical nesting depth. The `offset` field can be set to configure the starting depth.\n\n== Parameters\n\n```\nheading(\n  level: auto | int,\n  depth: int,\n  offset: int,\n  numbering: none | str | function,\n  supplement: none | auto | content | function,\n  outlined: bool,\n  bookmarked: auto | bool,\n  hanging-indent: auto | length,\n  content: content\n) -> content\n```\n\n=== `level`: auto | int (Settable)\n\nThe absolute nesting depth of the heading, starting from one. If set to `auto`, it is computed from `offset + depth`.\n\nThis is primarily useful for usage in #link(\"/docs/reference/styling/#show-rules\")[show rules] (either with #link(\"/docs/reference/foundations/function/#definitions-where\")[where] selectors or by accessing the level directly on a shown heading).\n\nDefault: `auto`\n\n*Example:*\n```typst\n#show heading.where(level: 2): set text(red)\n\n= Level 1\n== Level 2\n\n#set heading(offset: 1)\n= Also level 2\n== Level 3\n```\n\n=== `depth`: int (Settable)\n\nThe relative nesting depth of the heading, starting from one. This is combined with `offset` to compute the actual `level`.\n\nThis is set by the heading syntax, such that `== Heading` creates a heading with logical depth of 2, but actual level `offset + 2`. If you construct a heading manually, you should typically prefer this over setting the absolute level.\n\nDefault: `1`\n\n=== `offset`: int (Settable)\n\nThe starting offset of each heading's `level`, used to turn its relative `depth` into its absolute `level`.\n\nDefault: `0`\n\n*Example:*\n```typst\n= Level 1\n\n#set heading(offset: 1, numbering: \"1.1\")\n= Level 2\n\n#heading(offset: 2, depth: 2)[\n  I'm level 4\n]\n```\n\n=== `numbering`: none | str | function (Settable)\n\nHow to number the heading. Accepts a #link(\"/docs/reference/model/numbering/\")[numbering pattern or function].\n\nDefault: `none`\n\n*Example:*\n```typst\n#set heading(numbering: \"1.a.\")\n\n= A section\n== A subsection\n=== A sub-subsection\n```\n\n=== `supplement`: none | auto | content | function (Settable)\n\nA supplement for the heading.\n\nFor references to headings, this is added before the referenced number.\n\nIf a function is specified, it is passed the referenced heading and should return content.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set heading(numbering: \"1.\", supplement: [Chapter])\n\n= Introduction <intro>\nIn @intro, we see how to turn\nSections into Chapters. And\nin @intro[Part], it is done\nmanually.\n```\n\n=== `outlined`: bool (Settable)\n\nWhether the heading should appear in the #link(\"/docs/reference/model/outline/\")[outline].\n\nNote that this property, if set to `true`, ensures the heading is also shown as a bookmark in the exported PDF's outline (when exporting to PDF). To change that behavior, use the `bookmarked` property.\n\nDefault: `true`\n\n*Example:*\n```typst\n#outline()\n\n#heading[Normal]\nThis is a normal heading.\n\n#heading(outlined: false)[Hidden]\nThis heading does not appear\nin the outline.\n```\n\n=== `bookmarked`: auto | bool (Settable)\n\nWhether the heading should appear as a bookmark in the exported PDF's outline. Doesn't affect other export formats, such as PNG.\n\nThe default value of `auto` indicates that the heading will only appear in the exported PDF's outline if its `outlined` property is set to `true`, that is, if it would also be listed in Typst's #link(\"/docs/reference/model/outline/\")[outline]. Setting this property to either `true` (bookmark) or `false` (don't bookmark) bypasses that behavior.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#heading[Normal heading]\nThis heading will be shown in\nthe PDF's bookmark outline.\n\n#heading(bookmarked: false)[Not bookmarked]\nThis heading won't be\nbookmarked in the resulting\nPDF.\n```\n\n=== `hanging-indent`: auto | length (Settable)\n\nThe indent all but the first line of a heading should have.\n\nThe default value of `auto` indicates that the subsequent heading lines will be indented based on the width of the numbering.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set heading(numbering: \"1.\")\n#heading[A very, very, very, very, very, very long heading]\n```\n\n=== `body`: content (Required, Positional)\n\nThe heading's title.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/heading.typ", "filename": "heading.typ"}
{"text": "= link\n\nLinks to a URL or a location in the document.\n\nBy default, links do not look any different from normal text. However, you can easily apply a style of your choice with a show rule.\n\n== Example\n\n```typst\n#show link: underline\n\nhttps://example.com \\\n\n#link(\"https://example.com\") \\\n#link(\"https://example.com\")[\n  See example.com\n]\n```\n\n== Hyphenation\n\nIf you enable hyphenation or justification, by default, it will not apply to links to prevent unwanted hyphenation in URLs. You can opt out of this default via `show link: set text(hyphenate: true)`.\n\n== Syntax\n\nThis function also has dedicated syntax: Text that starts with `http://` or `https://` is automatically turned into a link.\n\n== Parameters\n\n```\nlink(\n  str: str | label | location | dictionary,\n  content: content\n) -> content\n```\n\n=== `dest`: str | label | location | dictionary (Required, Positional)\n\nThe destination the link points to.\n\n- To link to web pages, dest should be a valid URL string. If the URL is in the mailto: or tel: scheme and the body parameter is omitted, the email address or phone number will be the link's body, without the scheme.\n- To link to another part of the document, dest can take one of three forms: A label attached to an element. If you also want automatic text for the link based on the element, consider using a reference instead. A location (typically retrieved from here, locate or query). A dictionary with a page key of type integer and x and y coordinates of type length. Pages are counted from one, and the coordinates are relative to the page's top left corner.\n\n*Example:*\n```typst\n= Introduction <intro>\n#link(\"mailto:hello@typst.app\") \\\n#link(<intro>)[Go to intro] \\\n#link((page: 1, x: 0pt, y: 0pt))[\n  Go to top\n]\n```\n\n=== `body`: content (Required, Positional)\n\nThe content that should become a link.\n\nIf `dest` is an URL string, the parameter can be omitted. In this case, the URL will be shown as the link.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/link.typ", "filename": "link.typ"}
{"text": "= list\n\nA bullet list.\n\nDisplays a sequence of items vertically, with each item introduced by a marker.\n\n== Example\n\n```typst\nNormal list.\n- Text\n- Math\n- Layout\n- ...\n\nMultiple lines.\n- This list item spans multiple\n  lines because it is indented.\n\nFunction call.\n#list(\n  [Foundations],\n  [Calculate],\n  [Construct],\n  [Data Loading],\n)\n```\n\n== Syntax\n\nThis functions also has dedicated syntax: Start a line with a hyphen, followed by a space to create a list item. A list item can contain multiple paragraphs and other block-level content. All content that is indented more than an item's marker becomes part of that item.\n\n== Parameters\n\n```\nlist(\n  tight: bool,\n  marker: content | array | function,\n  indent: length,\n  body-indent: length,\n  spacing: auto | length,\n  ..: content\n) -> content\n```\n\n=== `tight`: bool (Settable)\n\nDefines the default #link(\"/docs/reference/model/list/#parameters-spacing\")[spacing] of the list. If it is `false`, the items are spaced apart with #link(\"/docs/reference/model/par/#parameters-spacing\")[paragraph spacing]. If it is `true`, they use #link(\"/docs/reference/model/par/#parameters-leading\")[paragraph leading] instead. This makes the list more compact, which can look better if the items are short.\n\nIn markup mode, the value of this parameter is determined based on whether items are separated with a blank line. If items directly follow each other, this is set to `true`; if items are separated by a blank line, this is set to `false`. The markup-defined tightness cannot be overridden with set rules.\n\nDefault: `true`\n\n*Example:*\n```typst\n- If a list has a lot of text, and\n  maybe other inline content, it\n  should not be tight anymore.\n\n- To make a list wide, simply insert\n  a blank line between the items.\n```\n\n=== `marker`: content | array | function (Settable)\n\nThe marker which introduces each item.\n\nInstead of plain content, you can also pass an array with multiple markers that should be used for nested lists. If the list nesting depth exceeds the number of markers, the markers are cycled. For total control, you may pass a function that maps the list's nesting depth (starting from `0`) to a desired marker.\n\nDefault: `([•], [‣], [–])`\n\n*Example:*\n```typst\n#set list(marker: [--])\n- A more classic list\n- With en-dashes\n\n#set list(marker: ([•], [--]))\n- Top-level\n  - Nested\n  - Items\n- Items\n```\n\n=== `indent`: length (Settable)\n\nThe indent of each item.\n\nDefault: `0pt`\n\n=== `body-indent`: length (Settable)\n\nThe spacing between the marker and the body of each item.\n\nDefault: `0.5em`\n\n=== `spacing`: auto | length (Settable)\n\nThe spacing between the items of the list.\n\nIf set to `auto`, uses paragraph #link(\"/docs/reference/model/par/#parameters-leading\")[leading] for tight lists and paragraph #link(\"/docs/reference/model/par/#parameters-spacing\")[spacing] for wide (non-tight) lists.\n\nDefault: `auto`\n\n=== `children`: content (Required, Positional, Variadic)\n\nThe bullet list's children.\n\nWhen using the list syntax, adjacent items are automatically collected into lists, even through constructs like for loops.\n\n*Example:*\n```typst\n#for letter in \"ABC\" [\n  - Letter #letter\n]\n```\n\n== Definitions\n\n=== `item`\n\nA bullet list item.\n\n```\nitem(\n  content: content\n) -> content\n```\n\n==== `body`: content (Required, Positional)\n\nThe item's body.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/list.typ", "filename": "list.typ"}
{"text": "= numbering\n\nApplies a numbering to a sequence of numbers.\n\nA numbering defines how a sequence of numbers should be displayed as content. It is defined either through a pattern string or an arbitrary function.\n\nA numbering pattern consists of counting symbols, for which the actual number is substituted, their prefixes, and one suffix. The prefixes and the suffix are repeated as-is.\n\n== Example\n\n```typst\n#numbering(\"1.1)\", 1, 2, 3) \\\n#numbering(\"1.a.i\", 1, 2) \\\n#numbering(\"I – 1\", 12, 2) \\\n#numbering(\n  (..nums) => nums\n    .pos()\n    .map(str)\n    .join(\".\") + \")\",\n  1, 2, 3,\n)\n```\n\n== Numbering patterns and numbering functions\n\nThere are multiple instances where you can provide a numbering pattern or function in Typst. For example, when defining how to number #link(\"/docs/reference/model/heading/\")[headings] or #link(\"/docs/reference/model/figure/\")[figures]. Every time, the expected format is the same as the one described below for the #link(\"/docs/reference/model/numbering/#parameters-numbering\")[numbering] parameter.\n\nThe following example illustrates that a numbering function is just a regular #link(\"/docs/reference/foundations/function/\")[function] that accepts numbers and returns #link(\"/docs/reference/foundations/content/\")[content].\n\n```typst\n#let unary(.., last) = \"|\" * last\n#set heading(numbering: unary)\n= First heading\n= Second heading\n= Third heading\n```\n\n== Parameters\n\n```\nnumbering(\n  str: str | function,\n  ..: int\n) -> int\n```\n\n=== `numbering`: str | function (Required, Positional)\n\nDefines how the numbering works.\n\n*Counting symbols* are `1`, `a`, `A`, `i`, `I`, `α`, `Α`, `一`, `壹`, `あ`, `い`, `ア`, `イ`, `א`, `가`, `ㄱ`, `*`, `١`, `۱`, `१`, `১`, `ক`, `①`, and `⓵`. They are replaced by the number in the sequence, preserving the original case.\n\nThe `*` character means that symbols should be used to count, in the order of `*`, `†`, `‡`, `§`, `¶`, `‖`. If there are more than six items, the number is represented using repeated symbols.\n\n*Suffixes* are all characters after the last counting symbol. They are repeated as-is at the end of any rendered number.\n\n*Prefixes* are all characters that are neither counting symbols nor suffixes. They are repeated as-is at in front of their rendered equivalent of their counting symbol.\n\nThis parameter can also be an arbitrary function that gets each number as an individual argument. When given a function, the `numbering` function just forwards the arguments to that function. While this is not particularly useful in itself, it means that you can just give arbitrary numberings to the `numbering` function without caring whether they are defined as a pattern or function.\n\n=== `numbers`: int (Required, Positional, Variadic)\n\nThe numbers to apply the numbering to. Must be positive.\n\nIf `numbering` is a pattern and more numbers than counting symbols are given, the last counting symbol with its prefix is repeated.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/numbering.typ", "filename": "numbering.typ"}
{"text": "= outline\n\nA table of contents, figures, or other elements.\n\nThis function generates a list of all occurrences of an element in the document, up to a given #link(\"/docs/reference/model/outline/#parameters-depth\")[depth]. The element's numbering and page number will be displayed in the outline alongside its title or caption.\n\n== Example\n\n```typst\n#set heading(numbering: \"1.\")\n#outline()\n\n= Introduction\n#lorem(5)\n\n= Methods\n== Setup\n#lorem(10)\n```\n\n== Alternative outlines\n\nIn its default configuration, this function generates a table of contents. By setting the `target` parameter, the outline can be used to generate a list of other kinds of elements than headings.\n\nIn the example below, we list all figures containing images by setting `target` to `figure.where(kind: image)`. Just the same, we could have set it to `figure.where(kind: table)` to generate a list of tables.\n\nWe could also set it to just `figure`, without using a #link(\"/docs/reference/foundations/function/#definitions-where\")[where] selector, but then the list would contain _all_ figures, be it ones containing images, tables, or other material.\n\n```typst\n#outline(\n  title: [List of Figures],\n  target: figure.where(kind: image),\n)\n\n#figure(\n  image(\"tiger.jpg\"),\n  caption: [A nice figure!],\n)\n```\n\n== Styling the outline\n\nAt the most basic level, you can style the outline by setting properties on it and its entries. This way, you can customize the outline's #link(\"/docs/reference/model/outline/#parameters-title\")[title], how outline entries are #link(\"/docs/reference/model/outline/#parameters-indent\")[indented], and how the space between an entry's text and its page number should be #link(\"/docs/reference/model/outline/#definitions-entry-fill\")[filled].\n\nRicher customization is possible through configuration of the outline's #link(\"/docs/reference/model/outline/#definitions-entry\")[entries]. The outline generates one entry for each outlined element.\n\nOutline entries are #link(\"/docs/reference/layout/block/\")[blocks], so you can adjust the spacing between them with normal block-spacing rules:\n\n```typst\n#show outline.entry.where(\n  level: 1\n): set block(above: 1.2em)\n\n#outline()\n\n= About ACME Corp.\n== History\n=== Origins\n= Products\n== ACME Tools\n```\n\nFor full control, you can also write a transformational show rule on `outline.entry`. However, the logic for properly formatting and indenting outline entries is quite complex and the outline entry itself only contains two fields: The level and the outlined element.\n\nFor this reason, various helper functions are provided. You can mix and match these to compose an entry from just the parts you like.\n\nThe default show rule for an outline entry looks like this1:\n\n- The indented function takes an optional prefix and inner content and automatically applies the proper indentation to it, such that different entries align nicely and long headings wrap properly.\n- The prefix function formats the element's numbering (if any). It also appends a supplement for certain elements.\n- The inner function combines the element's body, the filler, and the page number.\n\nYou can use these individual functions to format the outline entry in different ways. Let's say, you'd like to fully remove the filler and page numbers. To achieve this, you could write a show rule like this:\n\n```typst\n#show outline.entry: it => link(\n  it.element.location(),\n  // Keep just the body, dropping\n  // the fill and the page.\n  it.indented(it.prefix(), it.body()),\n)\n\n#outline()\n\n= About ACME Corp.\n== History\n```\n\n== Parameters\n\n```\noutline(\n  title: none | auto | content,\n  target: label | selector | location | function,\n  depth: none | int,\n  indent: auto | relative | function\n) -> content\n```\n\n=== `title`: none | auto | content (Settable)\n\nThe title of the outline.\n\n- When set to `auto`, an appropriate title for the #link(\"/docs/reference/text/text/#parameters-lang\")[text language] will be used.\n- When set to `none`, the outline will not have a title.\n- A custom title can be set by passing content.\n\nThe outline's heading will not be numbered by default, but you can force it to be with a show-set rule: `show outline: set heading(numbering: \"1.\")`\n\nDefault: `auto`\n\n=== `target`: label | selector | location | function (Settable)\n\nThe type of element to include in the outline.\n\nTo list figures containing a specific kind of element, like an image or a table, you can specify the desired kind in a #link(\"/docs/reference/foundations/function/#definitions-where\")[where] selector. See the section on #link(\"/docs/reference/model/outline/#alternative-outlines\")[alternative outlines] for more details.\n\nDefault: `heading`\n\n*Example:*\n```typst\n#outline(\n  title: [List of Tables],\n  target: figure.where(kind: table),\n)\n\n#figure(\n  table(\n    columns: 4,\n    [t], [1], [2], [3],\n    [y], [0.3], [0.7], [0.5],\n  ),\n  caption: [Experiment results],\n)\n```\n\n=== `depth`: none | int (Settable)\n\nThe maximum level up to which elements are included in the outline. When this argument is `none`, all elements are included.\n\nDefault: `none`\n\n*Example:*\n```typst\n#set heading(numbering: \"1.\")\n#outline(depth: 2)\n\n= Yes\nTop-level section.\n\n== Still\nSubsection.\n\n=== Nope\nNot included.\n```\n\n=== `indent`: auto | relative | function (Settable)\n\nHow to indent the outline's entries.\n\n- auto: Indents the numbering/prefix of a nested entry with the title of its parent entry. If the entries are not numbered (e.g., via heading numbering), this instead simply inserts a fixed amount of 1.2em indent per level.\n- Relative length: Indents the entry by the specified length per nesting level. Specifying 2em, for instance, would indent top-level headings by 0em (not nested), second level headings by 2em (nested once), third-level headings by 4em (nested twice) and so on.\n- Function: You can further customize this setting with a function. That function receives the nesting level as a parameter (starting at 0 for top-level headings/elements) and should return a (relative) length. For example, n => n * 2em would be equivalent to just specifying 2em.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set heading(numbering: \"1.a.\")\n\n#outline(\n  title: [Contents (Automatic)],\n  indent: auto,\n)\n\n#outline(\n  title: [Contents (Length)],\n  indent: 2em,\n)\n\n= About ACME Corp.\n== History\n=== Origins\n#lorem(10)\n\n== Products\n#lorem(10)\n```\n\n== Definitions\n\n=== `entry`\n\nRepresents an entry line in an outline.\n\nWith show-set and show rules on outline entries, you can richly customize the outline's appearance. See the #link(\"/docs/reference/model/outline/#styling-the-outline\")[section on styling the outline] for details.\n\n```\nentry(\n  int: int,\n  content: content,\n  fill: none | content\n) -> content\n```\n\n==== `level`: int (Required, Positional)\n\nThe nesting level of this outline entry. Starts at `1` for top-level entries.\n\n==== `element`: content (Required, Positional)\n\nThe element this entry refers to. Its location will be available through the #link(\"/docs/reference/foundations/content/#definitions-location\")[location] method on the content and can be #link(\"/docs/reference/model/link/\")[linked] to.\n\n==== `fill`: none | content (Settable)\n\nContent to fill the space between the title and the page number. Can be set to `none` to disable filling.\n\nThe `fill` will be placed into a fractionally sized box that spans the space between the entry's body and the page number. When using show rules to override outline entries, it is thus recommended to wrap the fill in a #link(\"/docs/reference/layout/box/\")[box] with fractional width, i.e. `box(width: 1fr, it.fill`.\n\nWhen using #link(\"/docs/reference/layout/repeat/\")[repeat], the #link(\"/docs/reference/layout/repeat/#parameters-gap\")[gap] property can be useful to tweak the visual weight of the fill.\n\nDefault: `repeat(body: [.], gap: 0.15em)`\n\n*Example:*\n```typst\n#set outline.entry(fill: line(length: 100%))\n#outline()\n\n= A New Beginning\n```\n\n== Definitions of entry\n\n=== `indented`\n\nA helper function for producing an indented entry layout: Lays out a prefix and the rest of the entry in an indent-aware way.\n\nIf the parent outline's #link(\"/docs/reference/model/outline/#parameters-indent\")[indent] is `auto`, the inner content of all entries at level `N` is aligned with the prefix of all entries at level `N + 1`, leaving at least `gap` space between the prefix and inner parts. Furthermore, the `inner` contents of all entries at the same level are aligned.\n\nIf the outline's indent is a fixed value or a function, the prefixes are indented, but the inner contents are simply inset from the prefix by the specified `gap`, rather than aligning outline-wide.\n\n```\nindented(\n  none: none | content,\n  content: content,\n  gap: length\n) -> content\n```\n\n==== `prefix`: none | content (Required, Positional)\n\nThe `prefix` is aligned with the `inner` content of entries that have level one less.\n\nIn the default show rule, this is just `it.prefix()`, but it can be freely customized.\n\n==== `inner`: content (Required, Positional)\n\nThe formatted inner content of the entry.\n\nIn the default show rule, this is just `it.inner()`, but it can be freely customized.\n\n==== `gap`: length\n\nThe gap between the prefix and the inner content.\n\nDefault: `0.5em`\n\n=== `prefix`\n\nFormats the element's numbering (if any).\n\nThis also appends the element's supplement in case of figures or equations. For instance, it would output `1.1` for a heading, but `Figure 1` for a figure, as is usual for outlines.\n\n```\nprefix(\n  \n) -> content\n```\n\n=== `inner`\n\nCreates the default inner content of the entry.\n\nThis includes the body, the fill, and page number.\n\n```\ninner(\n  \n) -> content\n```\n\n=== `body`\n\nThe content which is displayed in place of the referred element at its entry in the outline. For a heading, this is its #link(\"/docs/reference/model/heading/#parameters-body\")[body]; for a figure a caption and for equations, it is empty.\n\n```\nbody(\n  \n) -> content\n```\n\n=== `page`\n\nThe page number of this entry's element, formatted with the numbering set for the referenced page.\n\n```\npage(\n  \n) -> content\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/outline.typ", "filename": "outline.typ"}
{"text": "= par\n\nA logical subdivison of textual content.\n\nTypst automatically collects _inline-level_ elements into paragraphs. Inline-level elements include #link(\"/docs/reference/text/text/\")[text], #link(\"/docs/reference/layout/h/\")[horizontal spacing], #link(\"/docs/reference/layout/box/\")[boxes], and #link(\"/docs/reference/math/equation/\")[inline equations].\n\nTo separate paragraphs, use a blank line (or an explicit #link(\"/docs/reference/model/parbreak/\")[parbreak]). Paragraphs are also automatically interrupted by any block-level element (like #link(\"/docs/reference/layout/block/\")[block], #link(\"/docs/reference/layout/place/\")[place], or anything that shows itself as one of these).\n\nThe `par` element is primarily used in set rules to affect paragraph properties, but it can also be used to explicitly display its argument as a paragraph of its own. Then, the paragraph's body may not contain any block-level content.\n\n== Boxes and blocks\n\nAs explained above, usually paragraphs only contain inline-level content. However, you can integrate any kind of block-level content into a paragraph by wrapping it in a #link(\"/docs/reference/layout/box/\")[box].\n\nConversely, you can separate inline-level content from a paragraph by wrapping it in a #link(\"/docs/reference/layout/block/\")[block]. In this case, it will not become part of any paragraph at all. Read the following section for an explanation of why that matters and how it differs from just adding paragraph breaks around the content.\n\n== What becomes a paragraph?\n\nWhen you add inline-level content to your document, Typst will automatically wrap it in paragraphs. However, a typical document also contains some text that is not semantically part of a paragraph, for example in a heading or caption.\n\nThe rules for when Typst wraps inline-level content in a paragraph are as follows:\n\n- All text at the root of a document is wrapped in paragraphs.\n- Text in a container (like a block) is only wrapped in a paragraph if the container holds any block-level content. If all of the contents are inline-level, no paragraph is created.\n\nIn the laid-out document, it's not immediately visible whether text became part of a paragraph. However, it is still important for various reasons:\n\n- Certain paragraph styling like first-line-indent will only apply to proper paragraphs, not any text. Similarly, par show rules of course only trigger on paragraphs.\n- A proper distinction between paragraphs and other text helps people who rely on assistive technologies (such as screen readers) navigate and understand the document properly. Currently, this only applies to HTML export since Typst does not yet output accessible PDFs, but support for this is planned for the near future.\n- HTML export will generate a <p> tag only for paragraphs.\n\nWhen creating custom reusable components, you can and should take charge over whether Typst creates paragraphs. By wrapping text in a #link(\"/docs/reference/layout/block/\")[block] instead of just adding paragraph breaks around it, you can force the absence of a paragraph. Conversely, by adding a #link(\"/docs/reference/model/parbreak/\")[parbreak] after some content in a container, you can force it to become a paragraph even if it's just one word. This is, for example, what #link(\"/docs/reference/model/list/#parameters-tight\")[non-tight] lists do to force their items to become paragraphs.\n\n== Example\n\n```typst\n#set par(\n  first-line-indent: 1em,\n  spacing: 0.65em,\n  justify: true,\n)\n\nWe proceed by contradiction.\nSuppose that there exists a set\nof positive integers $a$, $b$, and\n$c$ that satisfies the equation\n$a^n + b^n = c^n$ for some\ninteger value of $n > 2$.\n\nWithout loss of generality,\nlet $a$ be the smallest of the\nthree integers. Then, we ...\n```\n\n== Parameters\n\n```\npar(\n  leading: length,\n  spacing: length,\n  justify: bool,\n  linebreaks: auto | str,\n  first-line-indent: length | dictionary,\n  hanging-indent: length,\n  content: content\n) -> content\n```\n\n=== `leading`: length (Settable)\n\nThe spacing between lines.\n\nLeading defines the spacing between the #link(\"/docs/reference/text/text/#parameters-bottom-edge\")[bottom edge] of one line and the #link(\"/docs/reference/text/text/#parameters-top-edge\")[top edge] of the following line. By default, these two properties are up to the font, but they can also be configured manually with a text set rule.\n\nBy setting top edge, bottom edge, and leading, you can also configure a consistent baseline-to-baseline distance. You could, for instance, set the leading to `1em`, the top-edge to `0.8em`, and the bottom-edge to `-0.2em` to get a baseline gap of exactly `2em`. The exact distribution of the top- and bottom-edge values affects the bounds of the first and last line.\n\nDefault: `0.65em`\n\n=== `spacing`: length (Settable)\n\nThe spacing between paragraphs.\n\nJust like leading, this defines the spacing between the bottom edge of a paragraph's last line and the top edge of the next paragraph's first line.\n\nWhen a paragraph is adjacent to a #link(\"/docs/reference/layout/block/\")[block] that is not a paragraph, that block's #link(\"/docs/reference/layout/block/#parameters-above\")[above] or #link(\"/docs/reference/layout/block/#parameters-below\")[below] property takes precedence over the paragraph spacing. Headings, for instance, reduce the spacing below them by default for a better look.\n\nDefault: `1.2em`\n\n=== `justify`: bool (Settable)\n\nWhether to justify text in its line.\n\nHyphenation will be enabled for justified paragraphs if the #link(\"/docs/reference/text/text/#parameters-hyphenate\")[text function's hyphenate property] is set to `auto` and the current language is known.\n\nNote that the current #link(\"/docs/reference/layout/align/#parameters-alignment\")[alignment] still has an effect on the placement of the last line except if it ends with a #link(\"/docs/reference/text/linebreak/#parameters-justify\")[justified line break].\n\nDefault: `false`\n\n=== `linebreaks`: auto | str (Settable)\n\nHow to determine line breaks.\n\nWhen this property is set to `auto`, its default value, optimized line breaks will be used for justified paragraphs. Enabling optimized line breaks for ragged paragraphs may also be worthwhile to improve the appearance of the text.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set page(width: 207pt)\n#set par(linebreaks: \"simple\")\nSome texts feature many longer\nwords. Those are often exceedingly\nchallenging to break in a visually\npleasing way.\n\n#set par(linebreaks: \"optimized\")\nSome texts feature many longer\nwords. Those are often exceedingly\nchallenging to break in a visually\npleasing way.\n```\n\n=== `first-line-indent`: length | dictionary (Settable)\n\nThe indent the first line of a paragraph should have.\n\nBy default, only the first line of a consecutive paragraph will be indented (not the first one in the document or container, and not paragraphs immediately following other block-level elements).\n\nIf you want to indent all paragraphs instead, you can pass a dictionary containing the `amount` of indent as a length and the pair `all: true`. When `all` is omitted from the dictionary, it defaults to `false`.\n\nBy typographic convention, paragraph breaks are indicated either by some space between paragraphs or by indented first lines. Consider\n\n- reducing the #link(\"/docs/reference/model/par/#parameters-spacing\")[paragraph spacing] to the #link(\"/docs/reference/model/par/#parameters-leading\")[leading] using `set par(spacing: 0.65em)`\n- increasing the #link(\"/docs/reference/layout/block/#parameters-spacing\")[block spacing] (which inherits the paragraph spacing by default) to the original paragraph spacing using `set block(spacing: 1.2em)`\n\nDefault: `(amount: 0pt, all: false)`\n\n*Example:*\n```typst\n#set block(spacing: 1.2em)\n#set par(\n  first-line-indent: 1.5em,\n  spacing: 0.65em,\n)\n\nThe first paragraph is not affected\nby the indent.\n\nBut the second paragraph is.\n\n#line(length: 100%)\n\n#set par(first-line-indent: (\n  amount: 1.5em,\n  all: true,\n))\n\nNow all paragraphs are affected\nby the first line indent.\n\nEven the first one.\n```\n\n=== `hanging-indent`: length (Settable)\n\nThe indent that all but the first line of a paragraph should have.\n\nDefault: `0pt`\n\n*Example:*\n```typst\n#set par(hanging-indent: 1em)\n\n#lorem(15)\n```\n\n=== `body`: content (Required, Positional)\n\nThe contents of the paragraph.\n\n== Definitions\n\n=== `line`\n\nA paragraph line.\n\nThis element is exclusively used for line number configuration through set rules and cannot be placed.\n\nThe #link(\"/docs/reference/model/par/#definitions-line-numbering\")[numbering] option is used to enable line numbers by specifying a numbering format.\n\n```\nline(\n  numbering: none | str | function,\n  number-align: auto | alignment,\n  number-margin: alignment,\n  number-clearance: auto | length,\n  numbering-scope: str\n) -> content\n```\n\n```typst\n#set par.line(numbering: \"1\")\n\nRoses are red. \\\nViolets are blue. \\\nTypst is there for you.\n```\n\nThe `numbering` option takes either a predefined #link(\"/docs/reference/model/numbering/\")[numbering pattern] or a function returning styled content. You can disable line numbers for text inside certain elements by setting the numbering to `none` using show-set rules.\n\n```typst\n// Styled red line numbers.\n#set par.line(\n  numbering: n => text(red)[#n]\n)\n\n// Disable numbers inside figures.\n#show figure: set par.line(\n  numbering: none\n)\n\nRoses are red. \\\nViolets are blue.\n\n#figure(\n  caption: [Without line numbers.]\n)[\n  Lorem ipsum \\\n  dolor sit amet\n]\n\nThe text above is a sample \\\noriginating from distant times.\n```\n\nThis element exposes further options which may be used to control other aspects of line numbering, such as its #link(\"/docs/reference/model/par/#definitions-line-number-align\")[alignment] or #link(\"/docs/reference/model/par/#definitions-line-number-margin\")[margin]. In addition, you can control whether the numbering is reset on each page through the #link(\"/docs/reference/model/par/#definitions-line-numbering-scope\")[numbering-scope] option.\n\n==== `numbering`: none | str | function (Settable)\n\nHow to number each line. Accepts a #link(\"/docs/reference/model/numbering/\")[numbering pattern or function].\n\nDefault: `none`\n\n*Example:*\n```typst\n#set par.line(numbering: \"I\")\n\nRoses are red. \\\nViolets are blue. \\\nTypst is there for you.\n```\n\n==== `number-align`: auto | alignment (Settable)\n\nThe alignment of line numbers associated with each line.\n\nThe default of `auto` indicates a smart default where numbers grow horizontally away from the text, considering the margin they're in and the current text direction.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set par.line(\n  numbering: \"I\",\n  number-align: left,\n)\n\nHello world! \\\nToday is a beautiful day \\\nFor exploring the world.\n```\n\n==== `number-margin`: alignment (Settable)\n\nThe margin at which line numbers appear.\n\n_Note:_ In a multi-column document, the line numbers for paragraphs inside the last column will always appear on the `end` margin (right margin for left-to-right text and left margin for right-to-left), regardless of this configuration. That behavior cannot be changed at this moment.\n\nDefault: `start`\n\n*Example:*\n```typst\n#set par.line(\n  numbering: \"1\",\n  number-margin: right,\n)\n\n= Report\n- Brightness: Dark, yet darker\n- Readings: Negative\n```\n\n==== `number-clearance`: auto | length (Settable)\n\nThe distance between line numbers and text.\n\nThe default value of `auto` results in a clearance that is adaptive to the page width and yields reasonable results in most cases.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set par.line(\n  numbering: \"1\",\n  number-clearance: 4pt,\n)\n\nTypesetting \\\nStyling \\\nLayout\n```\n\n==== `numbering-scope`: str (Settable)\n\nControls when to reset line numbering.\n\n_Note:_ The line numbering scope must be uniform across each page run (a page run is a sequence of pages without an explicit pagebreak in between). For this reason, set rules for it should be defined before any page content, typically at the very start of the document.\n\nDefault: `\"document\"`\n\n*Example:*\n```typst\n#set par.line(\n  numbering: \"1\",\n  numbering-scope: \"page\",\n)\n\nFirst line \\\nSecond line\n#pagebreak()\nFirst line again \\\nSecond line again\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/par.typ", "filename": "par.typ"}
{"text": "= parbreak\n\nA paragraph break.\n\nThis starts a new paragraph. Especially useful when used within code like #link(\"/docs/reference/scripting/#loops\")[for loops]. Multiple consecutive paragraph breaks collapse into a single one.\n\n== Example\n\n```typst\n#for i in range(3) {\n  [Blind text #i: ]\n  lorem(5)\n  parbreak()\n}\n```\n\n== Syntax\n\nInstead of calling this function, you can insert a blank line into your markup to create a paragraph break.\n\n== Parameters\n\n```\nparbreak(\n  \n) -> content\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/parbreak.typ", "filename": "parbreak.typ"}
{"text": "= quote\n\nDisplays a quote alongside an optional attribution.\n\n== Example\n\n```typst\nPlato is often misquoted as the author of #quote[I know that I know\nnothing], however, this is a derivation form his original quote:\n\n#set quote(block: true)\n\n#quote(attribution: [Plato])[\n  ... ἔοικα γοῦν τούτου γε σμικρῷ τινι αὐτῷ τούτῳ σοφώτερος εἶναι, ὅτι\n  ἃ μὴ οἶδα οὐδὲ οἴομαι εἰδέναι.\n]\n#quote(attribution: [from the Henry Cary literal translation of 1897])[\n  ... I seem, then, in just this little thing to be wiser than this man at\n  any rate, that what I do not know I do not think I know either.\n]\n```\n\nBy default block quotes are padded left and right by `1em`, alignment and padding can be controlled with show rules:\n\n```typst\n#set quote(block: true)\n#show quote: set align(center)\n#show quote: set pad(x: 5em)\n\n#quote[\n  You cannot pass... I am a servant of the Secret Fire, wielder of the\n  flame of Anor. You cannot pass. The dark fire will not avail you,\n  flame of Udûn. Go back to the Shadow! You cannot pass.\n]\n```\n\n== Parameters\n\n```\nquote(\n  block: bool,\n  quotes: auto | bool,\n  attribution: none | label | content,\n  content: content\n) -> content\n```\n\n=== `block`: bool (Settable)\n\nWhether this is a block quote.\n\nDefault: `false`\n\n*Example:*\n```typst\nAn inline citation would look like\nthis: #quote(\n  attribution: [René Descartes]\n)[\n  cogito, ergo sum\n], and a block equation like this:\n#quote(\n  block: true,\n  attribution: [JFK]\n)[\n  Ich bin ein Berliner.\n]\n```\n\n=== `quotes`: auto | bool (Settable)\n\nWhether double quotes should be added around this quote.\n\nThe double quotes used are inferred from the `quotes` property on #link(\"/docs/reference/text/smartquote/\")[smartquote], which is affected by the `lang` property on #link(\"/docs/reference/text/text/\")[text].\n\n- `true`: Wrap this quote in double quotes.\n- `false`: Do not wrap this quote in double quotes.\n- `auto`: Infer whether to wrap this quote in double quotes based on the `block` property. If `block` is `false`, double quotes are automatically added.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set text(lang: \"de\")\n\nEin deutsch-sprechender Author\nzitiert unter umständen JFK:\n#quote[Ich bin ein Berliner.]\n\n#set text(lang: \"en\")\n\nAnd an english speaking one may\ntranslate the quote:\n#quote[I am a Berliner.]\n```\n\n=== `attribution`: none | label | content (Settable)\n\nThe attribution of this quote, usually the author or source. Can be a label pointing to a bibliography entry or any content. By default only displayed for block quotes, but can be changed using a `show` rule.\n\nDefault: `none`\n\n*Example:*\n```typst\n#quote(attribution: [René Descartes])[\n  cogito, ergo sum\n]\n\n#show quote.where(block: false): it => {\n  [\"] + h(0pt, weak: true) + it.body + h(0pt, weak: true) + [\"]\n  if it.attribution != none [ (#it.attribution)]\n}\n\n#quote(\n  attribution: link(\"https://typst.app/home\")[typst.com]\n)[\n  Compose papers faster\n]\n\n#set quote(block: true)\n\n#quote(attribution: <tolkien54>)[\n  You cannot pass... I am a servant\n  of the Secret Fire, wielder of the\n  flame of Anor. You cannot pass. The\n  dark fire will not avail you, flame\n  of Udûn. Go back to the Shadow! You\n  cannot pass.\n]\n\n#bibliography(\"works.bib\", style: \"apa\")\n```\n\n=== `body`: content (Required, Positional)\n\nThe quote.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/quote.typ", "filename": "quote.typ"}
{"text": "= ref\n\nA reference to a label or bibliography.\n\nTakes a label and cross-references it. There are two kind of references, determined by its #link(\"/docs/reference/model/ref/#parameters-form\")[form]: `\"normal\"` and `\"page\"`.\n\nThe default, a `\"normal\"` reference, produces a textual reference to a label. For example, a reference to a heading will yield an appropriate string such as \"Section 1\" for a reference to the first heading. The references are also links to the respective element. Reference syntax can also be used to #link(\"/docs/reference/model/cite/\")[cite] from a bibliography.\n\nAs the default form requires a supplement and numbering, the label must be attached to a _referenceable element_. Referenceable elements include #link(\"/docs/reference/model/heading/\")[headings], #link(\"/docs/reference/model/figure/\")[figures], #link(\"/docs/reference/math/equation/\")[equations], and #link(\"/docs/reference/model/footnote/\")[footnotes]. To create a custom referenceable element like a theorem, you can create a figure of a custom #link(\"/docs/reference/model/figure/#parameters-kind\")[kind] and write a show rule for it. In the future, there might be a more direct way to define a custom referenceable element.\n\nIf you just want to link to a labelled element and not get an automatic textual reference, consider using the #link(\"/docs/reference/model/link/\")[link] function instead.\n\nA `\"page\"` reference produces a page reference to a label, displaying the page number at its location. You can use the #link(\"/docs/reference/layout/page/#parameters-supplement\")[page's supplement] to modify the text before the page number. Unlike a `\"normal\"` reference, the label can be attached to any element.\n\n== Example\n\n```typst\n#set page(numbering: \"1\")\n#set heading(numbering: \"1.\")\n#set math.equation(numbering: \"(1)\")\n\n= Introduction <intro>\nRecent developments in\ntypesetting software have\nrekindled hope in previously\nfrustrated researchers. @distress\nAs shown in @results (see\n#ref(<results>, form: \"page\")),\nwe ...\n\n= Results <results>\nWe discuss our approach in\ncomparison with others.\n\n== Performance <perf>\n@slow demonstrates what slow\nsoftware looks like.\n$ T(n) = O(2^n) $ <slow>\n\n#bibliography(\"works.bib\")\n```\n\n== Syntax\n\nThis function also has dedicated syntax: A `\"normal\"` reference to a label can be created by typing an `@` followed by the name of the label (e.g. `= Introduction <intro>` can be referenced by typing `@intro`).\n\nTo customize the supplement, add content in square brackets after the reference: `@intro[Chapter]`.\n\n== Customization\n\nIf you write a show rule for references, you can access the referenced element through the `element` field of the reference. The `element` may be `none` even if it exists if Typst hasn't discovered it yet, so you always need to handle that case in your code.\n\n```typst\n#set heading(numbering: \"1.\")\n#set math.equation(numbering: \"(1)\")\n\n#show ref: it => {\n  let eq = math.equation\n  let el = it.element\n  if el != none and el.func() == eq {\n    // Override equation references.\n    link(el.location(),numbering(\n      el.numbering,\n      ..counter(eq).at(el.location())\n    ))\n  } else {\n    // Other references as usual.\n    it\n  }\n}\n\n= Beginnings <beginning>\nIn @beginning we prove @pythagoras.\n$ a^2 + b^2 = c^2 $ <pythagoras>\n```\n\n== Parameters\n\n```\nref(\n  label: label,\n  supplement: none | auto | content | function,\n  form: str\n) -> content\n```\n\n=== `target`: label (Required, Positional)\n\nThe target label that should be referenced.\n\nCan be a label that is defined in the document or, if the #link(\"/docs/reference/model/ref/#parameters-form\")[form] is set to `\"normal\"`, an entry from the #link(\"/docs/reference/model/bibliography/\")[bibliography].\n\n=== `supplement`: none | auto | content | function (Settable)\n\nA supplement for the reference.\n\nIf the #link(\"/docs/reference/model/ref/#parameters-form\")[form] is set to `\"normal\"`:\n\n- For references to headings or figures, this is added before the referenced number.\n- For citations, this can be used to add a page number.\n\nIf the #link(\"/docs/reference/model/ref/#parameters-form\")[form] is set to `\"page\"`, then this is added before the page number of the label referenced.\n\nIf a function is specified, it is passed the referenced element and should return content.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set heading(numbering: \"1.\")\n#show ref.where(\n  form: \"normal\"\n): set ref(supplement: it => {\n  if it.func() == heading {\n    \"Chapter\"\n  } else {\n    \"Thing\"\n  }\n})\n\n= Introduction <intro>\nIn @intro, we see how to turn\nSections into Chapters. And\nin @intro[Part], it is done\nmanually.\n```\n\n=== `form`: str (Settable)\n\nThe kind of reference to produce.\n\nDefault: `\"normal\"`\n\n*Example:*\n```typst\n#set page(numbering: \"1\")\n\nHere <here> we are on\n#ref(<here>, form: \"page\").\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/ref.typ", "filename": "ref.typ"}
{"text": "= strong\n\nStrongly emphasizes content by increasing the font weight.\n\nIncreases the current font weight by a given `delta`.\n\n== Example\n\n```typst\nThis is *strong.* \\\nThis is #strong[too.] \\\n\n#show strong: set text(red)\nAnd this is *evermore.*\n```\n\n== Syntax\n\nThis function also has dedicated syntax: To strongly emphasize content, simply enclose it in stars/asterisks (`*`). Note that this only works at word boundaries. To strongly emphasize part of a word, you have to use the function.\n\n== Parameters\n\n```\nstrong(\n  delta: int,\n  content: content\n) -> content\n```\n\n=== `delta`: int (Settable)\n\nThe delta to apply on the font weight.\n\nDefault: `300`\n\n*Example:*\n```typst\n#set strong(delta: 0)\nNo *effect!*\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to strongly emphasize.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/strong.typ", "filename": "strong.typ"}
{"text": "= table\n\nA table of items.\n\nTables are used to arrange content in cells. Cells can contain arbitrary content, including multiple paragraphs and are specified in row-major order. For a hands-on explanation of all the ways you can use and customize tables in Typst, check out the #link(\"/docs/guides/table-guide/\")[table guide].\n\nBecause tables are just grids with different defaults for some cell properties (notably `stroke` and `inset`), refer to the #link(\"/docs/reference/layout/grid/\")[grid documentation] for more information on how to size the table tracks and specify the cell appearance properties.\n\nIf you are unsure whether you should be using a table or a grid, consider whether the content you are arranging semantically belongs together as a set of related data points or similar or whether you are just want to enhance your presentation by arranging unrelated content in a grid. In the former case, a table is the right choice, while in the latter case, a grid is more appropriate. Furthermore, Typst will annotate its output in the future such that screenreaders will announce content in `table` as tabular while a grid's content will be announced no different than multiple content blocks in the document flow.\n\nNote that, to override a particular cell's properties or apply show rules on table cells, you can use the #link(\"/docs/reference/model/table/#definitions-cell\")[table.cell] element. See its documentation for more information.\n\nAlthough the `table` and the `grid` share most properties, set and show rules on one of them do not affect the other.\n\nTo give a table a caption and make it #link(\"/docs/reference/model/ref/\")[referenceable], put it into a #link(\"/docs/reference/model/figure/\")[figure].\n\n== Example\n\nThe example below demonstrates some of the most common table options.\n\n```typst\n#table(\n  columns: (1fr, auto, auto),\n  inset: 10pt,\n  align: horizon,\n  table.header(\n    [], [*Volume*], [*Parameters*],\n  ),\n  image(\"cylinder.svg\"),\n  $ pi h (D^2 - d^2) / 4 $,\n  [\n    $h$: height \\\n    $D$: outer radius \\\n    $d$: inner radius\n  ],\n  image(\"tetrahedron.svg\"),\n  $ sqrt(2) / 12 a^3 $,\n  [$a$: edge length]\n)\n```\n\nMuch like with grids, you can use #link(\"/docs/reference/model/table/#definitions-cell\")[table.cell] to customize the appearance and the position of each cell.\n\n```typst\n#set table(\n  stroke: none,\n  gutter: 0.2em,\n  fill: (x, y) =>\n    if x == 0 or y == 0 { gray },\n  inset: (right: 1.5em),\n)\n\n#show table.cell: it => {\n  if it.x == 0 or it.y == 0 {\n    set text(white)\n    strong(it)\n  } else if it.body == [] {\n    // Replace empty cells with 'N/A'\n    pad(..it.inset)[_N/A_]\n  } else {\n    it\n  }\n}\n\n#let a = table.cell(\n  fill: green.lighten(60%),\n)[A]\n#let b = table.cell(\n  fill: aqua.lighten(60%),\n)[B]\n\n#table(\n  columns: 4,\n  [], [Exam 1], [Exam 2], [Exam 3],\n\n  [John], [], a, [],\n  [Mary], [], a, a,\n  [Robert], b, a, b,\n)\n```\n\n== Parameters\n\n```\ntable(\n  columns: auto | int | relative | fraction | array,\n  rows: auto | int | relative | fraction | array,\n  gutter: auto | int | relative | fraction | array,\n  column-gutter: auto | int | relative | fraction | array,\n  row-gutter: auto | int | relative | fraction | array,\n  fill: none | color | gradient | array | tiling | function,\n  align: auto | array | alignment | function,\n  stroke: none | length | color | gradient | array | stroke | tiling | dictionary | function,\n  inset: relative | array | dictionary | function,\n  ..: content\n) -> content\n```\n\n=== `columns`: auto | int | relative | fraction | array (Settable)\n\nThe column sizes. See the #link(\"/docs/reference/layout/grid/\")[grid documentation] for more information on track sizing.\n\nDefault: `()`\n\n=== `rows`: auto | int | relative | fraction | array (Settable)\n\nThe row sizes. See the #link(\"/docs/reference/layout/grid/\")[grid documentation] for more information on track sizing.\n\nDefault: `()`\n\n=== `gutter`: auto | int | relative | fraction | array (Settable)\n\nThe gaps between rows and columns. This is a shorthand for setting `column-gutter` and `row-gutter` to the same value. See the #link(\"/docs/reference/layout/grid/\")[grid documentation] for more information on gutters.\n\nDefault: `()`\n\n=== `column-gutter`: auto | int | relative | fraction | array (Settable)\n\nThe gaps between columns. Takes precedence over `gutter`. See the #link(\"/docs/reference/layout/grid/\")[grid documentation] for more information on gutters.\n\nDefault: `()`\n\n=== `row-gutter`: auto | int | relative | fraction | array (Settable)\n\nThe gaps between rows. Takes precedence over `gutter`. See the #link(\"/docs/reference/layout/grid/\")[grid documentation] for more information on gutters.\n\nDefault: `()`\n\n=== `fill`: none | color | gradient | array | tiling | function (Settable)\n\nHow to fill the cells.\n\nThis can be a color or a function that returns a color. The function receives the cells' column and row indices, starting from zero. This can be used to implement striped tables.\n\nDefault: `none`\n\n*Example:*\n```typst\n#table(\n  fill: (x, _) =>\n    if calc.odd(x) { luma(240) }\n    else { white },\n  align: (x, y) =>\n    if y == 0 { center }\n    else if x == 0 { left }\n    else { right },\n  columns: 4,\n  [], [*Q1*], [*Q2*], [*Q3*],\n  [Revenue:], [1000 €], [2000 €], [3000 €],\n  [Expenses:], [500 €], [1000 €], [1500 €],\n  [Profit:], [500 €], [1000 €], [1500 €],\n)\n```\n\n=== `align`: auto | array | alignment | function (Settable)\n\nHow to align the cells' content.\n\nThis can either be a single alignment, an array of alignments (corresponding to each column) or a function that returns an alignment. The function receives the cells' column and row indices, starting from zero. If set to `auto`, the outer alignment is used.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#table(\n  columns: 3,\n  align: (left, center, right),\n  [Hello], [Hello], [Hello],\n  [A], [B], [C],\n)\n```\n\n=== `stroke`: none | length | color | gradient | array | stroke | tiling | dictionary | function (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the cells.\n\nStrokes can be disabled by setting this to `none`.\n\nIf it is necessary to place lines which can cross spacing between cells produced by the `gutter` option, or to override the stroke between multiple specific cells, consider specifying one or more of #link(\"/docs/reference/model/table/#definitions-hline\")[table.hline] and #link(\"/docs/reference/model/table/#definitions-vline\")[table.vline] alongside your table cells.\n\nSee the #link(\"/docs/reference/layout/grid/#parameters-stroke\")[grid documentation] for more information on strokes.\n\nDefault: `1pt + black`\n\n=== `inset`: relative | array | dictionary | function (Settable)\n\nHow much to pad the cells' content.\n\nDefault: `0% + 5pt`\n\n*Example:*\n```typst\n#table(\n  inset: 10pt,\n  [Hello],\n  [World],\n)\n\n#table(\n  columns: 2,\n  inset: (\n    x: 20pt,\n    y: 10pt,\n  ),\n  [Hello],\n  [World],\n)\n```\n\n=== `children`: content (Required, Positional, Variadic)\n\nThe contents of the table cells, plus any extra table lines specified with the #link(\"/docs/reference/model/table/#definitions-hline\")[table.hline] and #link(\"/docs/reference/model/table/#definitions-vline\")[table.vline] elements.\n\n== Definitions\n\n=== `cell`\n\nA cell in the table. Use this to position a cell manually or to apply styling. To do the latter, you can either use the function to override the properties for a particular cell, or use it in show rules to apply certain styles to multiple cells at once.\n\nPerhaps the most important use case of `table.cell` is to make a cell span multiple columns and/or rows with the `colspan` and `rowspan` fields.\n\n```\ncell(\n  content: content,\n  x: auto | int,\n  y: auto | int,\n  colspan: int,\n  rowspan: int,\n  fill: none | auto | color | gradient | tiling,\n  align: auto | alignment,\n  inset: auto | relative | dictionary,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  breakable: auto | bool\n) -> content\n```\n\n```typst\n#show table.cell.where(y: 0): strong\n#set table(\n  stroke: (x, y) => if y == 0 {\n    (bottom: 0.7pt + black)\n  },\n  align: (x, y) => (\n    if x > 0 { center }\n    else { left }\n  )\n)\n\n#table(\n  columns: 3,\n  table.header(\n    [Substance],\n    [Subcritical °C],\n    [Supercritical °C],\n  ),\n  [Hydrochloric Acid],\n  [12.0], [92.1],\n  [Sodium Myreth Sulfate],\n  [16.6], [104],\n  [Potassium Hydroxide],\n  table.cell(colspan: 2)[24.7],\n)\n```\n\nFor example, you can override the fill, alignment or inset for a single cell:\n\n```typst\n// You can also import those.\n#import table: cell, header\n\n#table(\n  columns: 2,\n  align: center,\n  header(\n    [*Trip progress*],\n    [*Itinerary*],\n  ),\n  cell(\n    align: right,\n    fill: fuchsia.lighten(80%),\n    [🚗],\n  ),\n  [Get in, folks!],\n  [🚗], [Eat curbside hotdog],\n  cell(align: left)[🌴🚗],\n  cell(\n    inset: 0.06em,\n    text(1.62em)[🛖🌅🌊],\n  ),\n)\n```\n\nYou may also apply a show rule on `table.cell` to style all cells at once. Combined with selectors, this allows you to apply styles based on a cell's position:\n\n```typst\n#show table.cell.where(x: 0): strong\n\n#table(\n  columns: 3,\n  gutter: 3pt,\n  [Name], [Age], [Strength],\n  [Hannes], [36], [Grace],\n  [Irma], [50], [Resourcefulness],\n  [Vikram], [49], [Perseverance],\n)\n```\n\n==== `body`: content (Required, Positional)\n\nThe cell's body.\n\n==== `x`: auto | int (Settable)\n\nThe cell's column (zero-indexed). Functions identically to the `x` field in #link(\"/docs/reference/layout/grid/#definitions-cell\")[grid.cell].\n\nDefault: `auto`\n\n==== `y`: auto | int (Settable)\n\nThe cell's row (zero-indexed). Functions identically to the `y` field in #link(\"/docs/reference/layout/grid/#definitions-cell\")[grid.cell].\n\nDefault: `auto`\n\n==== `colspan`: int (Settable)\n\nThe amount of columns spanned by this cell.\n\nDefault: `1`\n\n==== `rowspan`: int (Settable)\n\nThe amount of rows spanned by this cell.\n\nDefault: `1`\n\n==== `fill`: none | auto | color | gradient | tiling (Settable)\n\nThe cell's #link(\"/docs/reference/model/table/#parameters-fill\")[fill] override.\n\nDefault: `auto`\n\n==== `align`: auto | alignment (Settable)\n\nThe cell's #link(\"/docs/reference/model/table/#parameters-align\")[alignment] override.\n\nDefault: `auto`\n\n==== `inset`: auto | relative | dictionary (Settable)\n\nThe cell's #link(\"/docs/reference/model/table/#parameters-inset\")[inset] override.\n\nDefault: `auto`\n\n==== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nThe cell's #link(\"/docs/reference/model/table/#parameters-stroke\")[stroke] override.\n\nDefault: `(:)`\n\n==== `breakable`: auto | bool (Settable)\n\nWhether rows spanned by this cell can be placed in different pages. When equal to `auto`, a cell spanning only fixed-size rows is unbreakable, while a cell spanning at least one `auto`-sized row is breakable.\n\nDefault: `auto`\n\n=== `hline`\n\nA horizontal line in the table.\n\nOverrides any per-cell stroke, including stroke specified through the table's `stroke` field. Can cross spacing between cells created through the table's #link(\"/docs/reference/model/table/#parameters-column-gutter\")[column-gutter] option.\n\nUse this function instead of the table's `stroke` field if you want to manually place a horizontal line at a specific position in a single table. Consider using #link(\"/docs/reference/model/table/#parameters-stroke\")[table's stroke] field or #link(\"/docs/reference/model/table/#definitions-cell-stroke\")[table.cell's stroke] field instead if the line you want to place is part of all your tables' designs.\n\n```\nhline(\n  y: auto | int,\n  start: int,\n  end: none | int,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  position: alignment\n) -> content\n```\n\n```typst\n#set table.hline(stroke: .6pt)\n\n#table(\n  stroke: none,\n  columns: (auto, 1fr),\n  [09:00], [Badge pick up],\n  [09:45], [Opening Keynote],\n  [10:30], [Talk: Typst's Future],\n  [11:15], [Session: Good PRs],\n  table.hline(start: 1),\n  [Noon], [_Lunch break_],\n  table.hline(start: 1),\n  [14:00], [Talk: Tracked Layout],\n  [15:00], [Talk: Automations],\n  [16:00], [Workshop: Tables],\n  table.hline(),\n  [19:00], [Day 1 Attendee Mixer],\n)\n```\n\n==== `y`: auto | int (Settable)\n\nThe row above which the horizontal line is placed (zero-indexed). Functions identically to the `y` field in #link(\"/docs/reference/layout/grid/#definitions-hline-y\")[grid.hline].\n\nDefault: `auto`\n\n==== `start`: int (Settable)\n\nThe column at which the horizontal line starts (zero-indexed, inclusive).\n\nDefault: `0`\n\n==== `end`: none | int (Settable)\n\nThe column before which the horizontal line ends (zero-indexed, exclusive).\n\nDefault: `none`\n\n==== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nThe line's stroke.\n\nSpecifying `none` removes any lines previously placed across this line's range, including hlines or per-cell stroke below it.\n\nDefault: `1pt + black`\n\n==== `position`: alignment (Settable)\n\nThe position at which the line is placed, given its row (`y`) - either `top` to draw above it or `bottom` to draw below it.\n\nThis setting is only relevant when row gutter is enabled (and shouldn't be used otherwise - prefer just increasing the `y` field by one instead), since then the position below a row becomes different from the position above the next row due to the spacing between both.\n\nDefault: `top`\n\n=== `vline`\n\nA vertical line in the table. See the docs for #link(\"/docs/reference/layout/grid/#definitions-vline\")[grid.vline] for more information regarding how to use this element's fields.\n\nOverrides any per-cell stroke, including stroke specified through the table's `stroke` field. Can cross spacing between cells created through the table's #link(\"/docs/reference/model/table/#parameters-row-gutter\")[row-gutter] option.\n\nSimilar to #link(\"/docs/reference/model/table/#definitions-hline\")[table.hline], use this function if you want to manually place a vertical line at a specific position in a single table and use the #link(\"/docs/reference/model/table/#parameters-stroke\")[table's stroke] field or #link(\"/docs/reference/model/table/#definitions-cell-stroke\")[table.cell's stroke] field instead if the line you want to place is part of all your tables' designs.\n\n```\nvline(\n  x: auto | int,\n  start: int,\n  end: none | int,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  position: alignment\n) -> content\n```\n\n==== `x`: auto | int (Settable)\n\nThe column before which the horizontal line is placed (zero-indexed). Functions identically to the `x` field in #link(\"/docs/reference/layout/grid/#definitions-vline\")[grid.vline].\n\nDefault: `auto`\n\n==== `start`: int (Settable)\n\nThe row at which the vertical line starts (zero-indexed, inclusive).\n\nDefault: `0`\n\n==== `end`: none | int (Settable)\n\nThe row on top of which the vertical line ends (zero-indexed, exclusive).\n\nDefault: `none`\n\n==== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nThe line's stroke.\n\nSpecifying `none` removes any lines previously placed across this line's range, including vlines or per-cell stroke below it.\n\nDefault: `1pt + black`\n\n==== `position`: alignment (Settable)\n\nThe position at which the line is placed, given its column (`x`) - either `start` to draw before it or `end` to draw after it.\n\nThe values `left` and `right` are also accepted, but discouraged as they cause your table to be inconsistent between left-to-right and right-to-left documents.\n\nThis setting is only relevant when column gutter is enabled (and shouldn't be used otherwise - prefer just increasing the `x` field by one instead), since then the position after a column becomes different from the position before the next column due to the spacing between both.\n\nDefault: `start`\n\n=== `header`\n\nA repeatable table header.\n\nYou should wrap your tables' heading rows in this function even if you do not plan to wrap your table across pages because Typst will use this function to attach accessibility metadata to tables in the future and ensure universal access to your document.\n\nYou can use the `repeat` parameter to control whether your table's header will be repeated across pages.\n\n```\nheader(\n  repeat: bool,\n  ..: content\n) -> content\n```\n\n```typst\n#set page(height: 11.5em)\n#set table(\n  fill: (x, y) =>\n    if x == 0 or y == 0 {\n      gray.lighten(40%)\n    },\n  align: right,\n)\n\n#show table.cell.where(x: 0): strong\n#show table.cell.where(y: 0): strong\n\n#table(\n  columns: 4,\n  table.header(\n    [], [Blue chip],\n    [Fresh IPO], [Penny st'k],\n  ),\n  table.cell(\n    rowspan: 6,\n    align: horizon,\n    rotate(-90deg, reflow: true)[\n      *USD / day*\n    ],\n  ),\n  [0.20], [104], [5],\n  [3.17], [108], [4],\n  [1.59], [84],  [1],\n  [0.26], [98],  [15],\n  [0.01], [195], [4],\n  [7.34], [57],  [2],\n)\n```\n\n==== `repeat`: bool (Settable)\n\nWhether this header should be repeated across pages.\n\nDefault: `true`\n\n==== `children`: content (Required, Positional, Variadic)\n\nThe cells and lines within the header.\n\n=== `footer`\n\nA repeatable table footer.\n\nJust like the #link(\"/docs/reference/model/table/#definitions-header\")[table.header] element, the footer can repeat itself on every page of the table. This is useful for improving legibility by adding the column labels in both the header and footer of a large table, totals, or other information that should be visible on every page.\n\nNo other table cells may be placed after the footer.\n\n```\nfooter(\n  repeat: bool,\n  ..: content\n) -> content\n```\n\n==== `repeat`: bool (Settable)\n\nWhether this footer should be repeated across pages.\n\nDefault: `true`\n\n==== `children`: content (Required, Positional, Variadic)\n\nThe cells and lines within the footer.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/table.typ", "filename": "table.typ"}
{"text": "= terms\n\nA list of terms and their descriptions.\n\nDisplays a sequence of terms and their descriptions vertically. When the descriptions span over multiple lines, they use hanging indent to communicate the visual hierarchy.\n\n== Example\n\n```typst\n/ Ligature: A merged glyph.\n/ Kerning: A spacing adjustment\n  between two adjacent letters.\n```\n\n== Syntax\n\nThis function also has dedicated syntax: Starting a line with a slash, followed by a term, a colon and a description creates a term list item.\n\n== Parameters\n\n```\nterms(\n  tight: bool,\n  separator: content,\n  indent: length,\n  hanging-indent: length,\n  spacing: auto | length,\n  ..: content | array\n) -> content\n```\n\n=== `tight`: bool (Settable)\n\nDefines the default #link(\"/docs/reference/model/terms/#parameters-spacing\")[spacing] of the term list. If it is `false`, the items are spaced apart with #link(\"/docs/reference/model/par/#parameters-spacing\")[paragraph spacing]. If it is `true`, they use #link(\"/docs/reference/model/par/#parameters-leading\")[paragraph leading] instead. This makes the list more compact, which can look better if the items are short.\n\nIn markup mode, the value of this parameter is determined based on whether items are separated with a blank line. If items directly follow each other, this is set to `true`; if items are separated by a blank line, this is set to `false`. The markup-defined tightness cannot be overridden with set rules.\n\nDefault: `true`\n\n*Example:*\n```typst\n/ Fact: If a term list has a lot\n  of text, and maybe other inline\n  content, it should not be tight\n  anymore.\n\n/ Tip: To make it wide, simply\n  insert a blank line between the\n  items.\n```\n\n=== `separator`: content (Settable)\n\nThe separator between the item and the description.\n\nIf you want to just separate them with a certain amount of space, use `h(2cm, weak: true)` as the separator and replace `2cm` with your desired amount of space.\n\nDefault: `h(amount: 0.6em, weak: true)`\n\n*Example:*\n```typst\n#set terms(separator: [: ])\n\n/ Colon: A nice separator symbol.\n```\n\n=== `indent`: length (Settable)\n\nThe indentation of each item.\n\nDefault: `0pt`\n\n=== `hanging-indent`: length (Settable)\n\nThe hanging indent of the description.\n\nThis is in addition to the whole item's `indent`.\n\nDefault: `2em`\n\n*Example:*\n```typst\n#set terms(hanging-indent: 0pt)\n/ Term: This term list does not\n  make use of hanging indents.\n```\n\n=== `spacing`: auto | length (Settable)\n\nThe spacing between the items of the term list.\n\nIf set to `auto`, uses paragraph #link(\"/docs/reference/model/par/#parameters-leading\")[leading] for tight term lists and paragraph #link(\"/docs/reference/model/par/#parameters-spacing\")[spacing] for wide (non-tight) term lists.\n\nDefault: `auto`\n\n=== `children`: content | array (Required, Positional, Variadic)\n\nThe term list's children.\n\nWhen using the term list syntax, adjacent items are automatically collected into term lists, even through constructs like for loops.\n\n*Example:*\n```typst\n#for (year, product) in (\n  \"1978\": \"TeX\",\n  \"1984\": \"LaTeX\",\n  \"2019\": \"Typst\",\n) [/ #product: Born in #year.]\n```\n\n== Definitions\n\n=== `item`\n\nA term list item.\n\n```\nitem(\n  content: content,\n  content: content\n) -> content\n```\n\n==== `term`: content (Required, Positional)\n\nThe term described by the list item.\n\n==== `description`: content (Required, Positional)\n\nThe description of the term.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model/terms.typ", "filename": "terms.typ"}
{"text": "= Model\n\nDocument structuring.\n\nHere, you can find functions to structure your document and interact with that structure. This includes section headings, figures, bibliography management, cross-referencing and more.\n\n== Definitions\n\n- #link(\"/docs/reference/model/bibliography/\")[bibliography]A bibliography / reference listing.\n- #link(\"/docs/reference/model/cite/\")[cite]Cite a work from the bibliography.\n- #link(\"/docs/reference/model/document/\")[document]The root element of a document and its metadata.\n- #link(\"/docs/reference/model/emph/\")[emph]Emphasizes content by toggling italics.\n- #link(\"/docs/reference/model/enum/\")[enum]A numbered list.\n- #link(\"/docs/reference/model/figure/\")[figure]A figure with an optional caption.\n- #link(\"/docs/reference/model/footnote/\")[footnote]A footnote.\n- #link(\"/docs/reference/model/heading/\")[heading]A section heading.\n- #link(\"/docs/reference/model/link/\")[link]Links to a URL or a location in the document.\n- #link(\"/docs/reference/model/list/\")[list]A bullet list.\n- #link(\"/docs/reference/model/numbering/\")[numbering]Applies a numbering to a sequence of numbers.\n- #link(\"/docs/reference/model/outline/\")[outline]A table of contents, figures, or other elements.\n- #link(\"/docs/reference/model/par/\")[par]A logical subdivison of textual content.\n- #link(\"/docs/reference/model/parbreak/\")[parbreak]A paragraph break.\n- #link(\"/docs/reference/model/quote/\")[quote]Displays a quote alongside an optional attribution.\n- #link(\"/docs/reference/model/ref/\")[ref]A reference to a label or bibliography.\n- #link(\"/docs/reference/model/strong/\")[strong]Strongly emphasizes content by increasing the font weight.\n- #link(\"/docs/reference/model/table/\")[table]A table of items.\n- #link(\"/docs/reference/model/terms/\")[terms]A list of terms and their descriptions.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/model.typ", "filename": "model.typ"}
{"text": "= embed\n\nA file that will be embedded into the output PDF.\n\nThis can be used to distribute additional files that are related to the PDF within it. PDF readers will display the files in a file listing.\n\nSome international standards use this mechanism to embed machine-readable data (e.g., ZUGFeRD/Factur-X for invoices) that mirrors the visual content of the PDF.\n\n== Example\n\n== Notes\n\n- This element is ignored if exporting to a format other than PDF.\n- File embeddings are not currently supported for PDF/A-2, even if the embedded file conforms to PDF/A-1 or PDF/A-2.\n\n== Parameters\n\n```\nembed(\n  str: str,\n  bytes: bytes,\n  relationship: none | str,\n  mime-type: none | str,\n  description: none | str\n) -> content\n```\n\n=== `path`: str (Required, Positional)\n\nThe #link(\"/docs/reference/syntax/#paths\")[path] of the file to be embedded.\n\nMust always be specified, but is only read from if no data is provided in the following argument.\n\n=== `data`: bytes (Required, Positional)\n\nRaw file data, optionally.\n\nIf omitted, the data is read from the specified path.\n\n=== `relationship`: none | str (Settable)\n\nThe relationship of the embedded file to the document.\n\nIgnored if export doesn't target PDF/A-3.\n\nDefault: `none`\n\n=== `mime-type`: none | str (Settable)\n\nThe MIME type of the embedded file.\n\nDefault: `none`\n\n=== `description`: none | str (Settable)\n\nA description for the embedded file.\n\nDefault: `none`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/pdf/embed.typ", "filename": "embed.typ"}
{"text": "= PDF\n\nPDF files focus on accurately describing documents visually, but also have facilities for annotating their structure. This hybrid approach makes them a good fit for document exchange: They render exactly the same on every device, but also support extraction of a document's content and structure (at least to an extent). Unlike PNG files, PDFs are not bound to a specific resolution. Hence, you can view them at any size without incurring a loss of quality.\n\n== PDF standards\n\nThe International Standards Organization (ISO) has published the base PDF standard and various standards that extend it to make PDFs more suitable for specific use-cases. By default, Typst exports PDF 1.7 files. Adobe Acrobat 8 and later as well as all other commonly used PDF viewers are compatible with this PDF version.\n\nTypst optionally supports emitting PDF/A-conformant files. PDF/A files are geared towards maximum compatibility with current and future PDF tooling. They do not rely on difficult-to-implement or proprietary features and contain exhaustive metadata. This makes them suitable for long-term archival.\n\nThe PDF/A Standard has multiple versions (_parts_ in ISO terminology) and most parts have multiple profiles that indicate the file's conformance level. Currently, Typst supports these PDF/A output profiles:\n\n- PDF/A-2b: The basic conformance level of ISO 19005-2. This version of PDF/A is based on PDF 1.7 and results in self-contained, archivable PDF files.\n- PDF/A-3b: The basic conformance level of ISO 19005-3. This version of PDF/A is based on PDF 1.7 and results in archivable PDF files that can contain arbitrary other related files as attachments. The only difference between it and PDF/A-2b is the capability to embed non-PDF/A-conformant files within.\n\nWhen choosing between exporting PDF/A and regular PDF, keep in mind that PDF/A files contain additional metadata, and that some readers will prevent the user from modifying a PDF/A file. Some features of Typst may be disabled depending on the PDF standard you choose.\n\n== Exporting as PDF\n\nPDF is Typst's default export format. Running the `compile` or `watch` subcommand without specifying a format will create a PDF. When exporting to PDF, you have the following configuration options:\n\n- Which PDF standards Typst should enforce conformance with by specifying --pdf-standard followed by one or multiple comma-separated standards. Valid standards are 1.7, a-2b, and a-3b. By default, Typst outputs PDF-1.7-compliant files.\n- Which pages to export by specifying --pages followed by a comma-separated list of numbers or dash-separated number ranges. Ranges can be half-open. Example: 2,3,7-9,11-.\n\nClick the quick download button at the top right to export a PDF with default settings. For further configuration, click \"File\" > \"Export as\" > \"PDF\" or click the downwards-facing arrow next to the quick download button and select \"Export as PDF\". When exporting to PDF, you have the following configuration options:\n\n- Which PDF standards Typst should enforce conformance with. By default, Typst outputs PDF-1.7-compliant files. Valid additional standards are A-2b and A-3b.\n- Which pages to export. Valid options are \"All pages\", \"Current page\", and \"Custom ranges\". Custom ranges are a comma-separated list of numbers or dash-separated number ranges. Ranges can be half-open. Example: 2,3,7-9,11-.\n\n== PDF-specific functionality\n\nTypst exposes PDF-specific functionality in the global `pdf` module. See below for the definitions it contains.\n\n== Definitions\n\n- #link(\"/docs/reference/pdf/embed/\")[embed]A file that will be embedded into the output PDF.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/pdf.typ", "filename": "pdf.typ"}
{"text": "= PNG\n\nInstead of creating a PDF, Typst can also directly render pages to PNG raster graphics. PNGs are losslessly compressed images that can contain one page at a time. When exporting a multi-page document, Typst will emit multiple PNGs. PNGs are a good choice when you want to use Typst's output in an image editing software or when you can use none of Typst's other export formats.\n\nIn contrast to Typst's other export formats, PNGs are bound to a specific resolution. When exporting to PNG, you can configure the resolution as pixels per inch (PPI). If the medium you view the PNG on has a finer resolution than the PNG you exported, you will notice a loss of quality. Typst calculates the resolution of your PNGs based on each page's physical dimensions and the PPI. If you need guidance for choosing a PPI value, consider the following:\n\n- A value of 300 or 600 is typical for desktop printing.\n- Professional prints of detailed graphics can go up to 1200 PPI.\n- If your document is only viewed at a distance, e.g. a poster, you may choose a smaller value than 300.\n- If your document is viewed on screens, a typical PPI value for a smartphone is 400-500.\n\nBecause PNGs only contain a pixel raster, the text within cannot be extracted automatically (without OCR), for example by copy/paste or a screen reader. If you need the text to be accessible, export a PDF or HTML file instead.\n\nPNGs can have transparent backgrounds. By default, Typst will output a PNG with an opaque white background. You can make the background transparent using `#set page(fill: none)`. Learn more on the #link(\"/docs/reference/layout/page/#parameters-fill\")[page function's reference page].\n\n== Exporting as PNG\n\nPass `--format png` to the `compile` or `watch` subcommand or provide an output file name that ends with `.png`.\n\nIf your document has more than one page, Typst will create multiple image files. The output file name must then be a template string containing at least one of\n\n- `{p}`, which will be replaced by the page number\n- `{0p}`, which will be replaced by the zero-padded page number (so that all numbers have the same length)\n- `{t}`, which will be replaced by the total number of pages\n\nWhen exporting to PNG, you have the following configuration options:\n\n- Which resolution to render at by specifying --ppi followed by a number of pixels per inch. The default is 144.\n- Which pages to export by specifying --pages followed by a comma-separated list of numbers or dash-separated number ranges. Ranges can be half-open. Example: 2,3,7-9,11-.\n\nClick \"File\" > \"Export as\" > \"PNG\" or click the downwards-facing arrow next to the quick download button and select \"Export as PNG\". When exporting to PNG, you have the following configuration options:\n\n- The resolution at which the pages should be rendered, as a number of pixels per inch. The default is 144.\n- Which pages to export. Valid options are \"All pages\", \"Current page\", and \"Custom ranges\". Custom ranges are a comma-separated list of numbers or dash-separated number ranges. Ranges can be half-open. Example: 2,3,7-9,11-.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/png.typ", "filename": "png.typ"}
{"text": "= Scripting\n\nTypst embeds a powerful scripting language. You can automate your documents and create more sophisticated styles with code. Below is an overview over the scripting concepts.\n\n== Expressions\n\nIn Typst, markup and code are fused into one. All but the most common elements are created with _functions._ To make this as convenient as possible, Typst provides compact syntax to embed a code expression into markup: An expression is introduced with a hash (`#`) and normal markup parsing resumes after the expression is finished. If a character would continue the expression but should be interpreted as text, the expression can forcibly be ended with a semicolon (`;`).\n\n```typst\n#emph[Hello] \\\n#emoji.face \\\n#\"hello\".len()\n```\n\nThe example above shows a few of the available expressions, including #link(\"/docs/reference/foundations/function/\")[function calls], #link(\"/docs/reference/scripting/#fields\")[field accesses], and #link(\"/docs/reference/scripting/#methods\")[method calls]. More kinds of expressions are discussed in the remainder of this chapter. A few kinds of expressions are not compatible with the hash syntax (e.g. binary operator expressions). To embed these into markup, you can use parentheses, as in `#(1 + 2)`.\n\n== Blocks\n\nTo structure your code and embed markup into it, Typst provides two kinds of _blocks:_\n\n- Code block: { let x = 1; x + 2 } When writing code, you'll probably want to split up your computation into multiple statements, create some intermediate variables and so on. Code blocks let you write multiple expressions where one is expected. The individual expressions in a code block should be separated by line breaks or semicolons. The output values of the individual expressions in a code block are joined to determine the block's value. Expressions without useful output, like let bindings yield none, which can be joined with any value without effect.\n- Content block: [*Hey* there!] With content blocks, you can handle markup/content as a programmatic value, store it in variables and pass it to functions. Content blocks are delimited by square brackets and can contain arbitrary markup. A content block results in a value of type content. An arbitrary number of content blocks can be passed as trailing arguments to functions. That is, list([A], [B]) is equivalent to list[A][B].\n\nContent and code blocks can be nested arbitrarily. In the example below, `[hello ]` is joined with the output of `a + [ the ] + b` yielding `[hello from the *world*]`.\n\n```typst\n#{\n  let a = [from]\n  let b = [*world*]\n  [hello ]\n  a + [ the ] + b\n}\n```\n\n== Bindings and Destructuring\n\nAs already demonstrated above, variables can be defined with `let` bindings. The variable is assigned the value of the expression that follows the `=` sign. The assignment of a value is optional, if no value is assigned, the variable will be initialized as `none`. The `let` keyword can also be used to create a #link(\"/docs/reference/foundations/function/#defining-functions\")[custom named function]. Variables can be accessed for the rest of the containing block (or the rest of the file if there is no containing block).\n\n```typst\n#let name = \"Typst\"\nThis is #name's documentation.\nIt explains #name.\n\n#let add(x, y) = x + y\nSum is #add(2, 3).\n```\n\nLet bindings can also be used to destructure #link(\"/docs/reference/foundations/array/\")[arrays] and #link(\"/docs/reference/foundations/dictionary/\")[dictionaries]. In this case, the left-hand side of the assignment should mirror an array or dictionary. The `..` operator can be used once in the pattern to collect the remainder of the array's or dictionary's items.\n\n```typst\n#let (x, y) = (1, 2)\nThe coordinates are #x, #y.\n\n#let (a, .., b) = (1, 2, 3, 4)\nThe first element is #a.\nThe last element is #b.\n\n#let books = (\n  Shakespeare: \"Hamlet\",\n  Homer: \"The Odyssey\",\n  Austen: \"Persuasion\",\n)\n\n#let (Austen,) = books\nAusten wrote #Austen.\n\n#let (Homer: h) = books\nHomer wrote #h.\n\n#let (Homer, ..other) = books\n#for (author, title) in other [\n  #author wrote #title.\n]\n```\n\nYou can use the underscore to discard elements in a destructuring pattern:\n\n```typst\n#let (_, y, _) = (1, 2, 3)\nThe y coordinate is #y.\n```\n\nDestructuring also works in argument lists of functions ...\n\n```typst\n#let left = (2, 4, 5)\n#let right = (3, 2, 6)\n#left.zip(right).map(\n  ((a,b)) => a + b\n)\n```\n\n... and on the left-hand side of normal assignments. This can be useful to swap variables among other things.\n\n```typst\n#{\n  let a = 1\n  let b = 2\n  (a, b) = (b, a)\n  [a = #a, b = #b]\n}\n```\n\n== Conditionals\n\nWith a conditional, you can display or compute different things depending on whether some condition is fulfilled. Typst supports `if`, `else if` and `else` expressions. When the condition evaluates to `true`, the conditional yields the value resulting from the if's body, otherwise yields the value resulting from the else's body.\n\n```typst\n#if 1 < 2 [\n  This is shown\n] else [\n  This is not.\n]\n```\n\nEach branch can have a code or content block as its body.\n\n- `if condition {..}`\n- `if condition [..]`\n- `if condition [..] else {..}`\n- `if condition [..] else if condition {..} else [..]`\n\n== Loops\n\nWith loops, you can repeat content or compute something iteratively. Typst supports two types of loops: `for` and `while` loops. The former iterate over a specified collection whereas the latter iterate as long as a condition stays fulfilled. Just like blocks, loops _join_ the results from each iteration into one value.\n\nIn the example below, the three sentences created by the for loop join together into a single content value and the length-1 arrays in the while loop join together into one larger array.\n\n```typst\n#for c in \"ABC\" [\n  #c is a letter.\n]\n\n#let n = 2\n#while n < 10 {\n  n = (n * 2) - 1\n  (n,)\n}\n```\n\nFor loops can iterate over a variety of collections:\n\n- for value in array {..} Iterates over the items in the array. The destructuring syntax described in Let binding can also be used here.\n- for pair in dict {..} Iterates over the key-value pairs of the dictionary. The pairs can also be destructured by using for (key, value) in dict {..}. It is more efficient than for pair in dict.pairs() {..} because it doesn't create a temporary array of all key-value pairs.\n- for letter in \"abc\" {..} Iterates over the characters of the string. Technically, it iterates over the grapheme clusters of the string. Most of the time, a grapheme cluster is just a single codepoint. However, a grapheme cluster could contain multiple codepoints, like a flag emoji.\n- for byte in bytes(\"😀\") {..} Iterates over the bytes, which can be converted from a string or read from a file without encoding. Each byte value is an integer between 0 and 255.\n\nTo control the execution of the loop, Typst provides the `break` and `continue` statements. The former performs an early exit from the loop while the latter skips ahead to the next iteration of the loop.\n\n```typst\n#for letter in \"abc nope\" {\n  if letter == \" \" {\n    break\n  }\n\n  letter\n}\n```\n\nThe body of a loop can be a code or content block:\n\n- `for .. in collection {..}`\n- `for .. in collection [..]`\n- `while condition {..}`\n- `while condition [..]`\n\n== Fields\n\nYou can use _dot notation_ to access fields on a value. For values of type #link(\"/docs/reference/foundations/content/\")[content], you can also use the #link(\"/docs/reference/foundations/content/#definitions-fields\")[fields] function to list the fields.\n\nThe value in question can be either:\n\n- a #link(\"/docs/reference/foundations/dictionary/\")[dictionary] that has the specified key,\n- a #link(\"/docs/reference/foundations/symbol/\")[symbol] that has the specified modifier,\n- a #link(\"/docs/reference/foundations/module/\")[module] containing the specified definition,\n- #link(\"/docs/reference/foundations/content/\")[content] consisting of an element that has the specified field. The available fields match the arguments of the #link(\"/docs/reference/foundations/function/#element-functions\")[element function] that were given when the element was constructed.\n\n```typst\n#let it = [= Heading]\n#it.body \\\n#it.depth \\\n#it.fields()\n\n#let dict = (greet: \"Hello\")\n#dict.greet \\\n#emoji.face\n```\n\n== Methods\n\nA _method call_ is a convenient way to call a function that is scoped to a value's #link(\"/docs/reference/foundations/type/\")[type]. For example, we can call the #link(\"/docs/reference/foundations/str/#definitions-len\")[str.len] function in the following two equivalent ways:\n\n```typst\n#str.len(\"abc\") is the same as\n#\"abc\".len()\n```\n\nThe structure of a method call is `value.method(..args)` and its equivalent full function call is `type(value).method(value, ..args)`. The documentation of each type lists its scoped functions. You cannot currently define your own methods.\n\n```typst\n#let values = (1, 2, 3, 4)\n#values.pop() \\\n#values.len() \\\n\n#(\"a, b, c\"\n    .split(\", \")\n    .join[ --- ])\n\n#\"abc\".len() is the same as\n#str.len(\"abc\")\n```\n\nThere are a few special functions that modify the value they are called on (e.g. #link(\"/docs/reference/foundations/array/#definitions-push\")[array.push]). These functions _must_ be called in method form. In some cases, when the method is only called for its side effect, its return value should be ignored (and not participate in joining). The canonical way to discard a value is with a let binding: `let _ = array.remove(1)`.\n\n== Modules\n\nYou can split up your Typst projects into multiple files called _modules._ A module can refer to the content and definitions of another module in multiple ways:\n\n- Including: include \"bar.typ\" Evaluates the file at the path bar.typ and returns the resulting content.\n- Import: import \"bar.typ\" Evaluates the file at the path bar.typ and inserts the resulting module into the current scope as bar (filename without extension). You can use the as keyword to rename the imported module: import \"bar.typ\" as baz. You can import nested items using dot notation: import \"bar.typ\": baz.a.\n- Import items: import \"bar.typ\": a, b Evaluates the file at the path bar.typ, extracts the values of the variables a and b (that need to be defined in bar.typ, e.g. through let bindings) and defines them in the current file. Replacing a, b with * loads all variables defined in a module. You can use the as keyword to rename the individual items: import \"bar.typ\": a as one, b as two\n\nInstead of a path, you can also use a #link(\"/docs/reference/foundations/module/\")[module value], as shown in the following example:\n\n```typst\n#import emoji: face\n#face.grin\n```\n\n== Packages\n\nTo reuse building blocks across projects, you can also create and import Typst _packages._ A package import is specified as a triple of a namespace, a name, and a version.\n\n```typst\n#import \"@preview/example:0.1.0\": add\n#add(2, 7)\n```\n\nThe `preview` namespace contains packages shared by the community. You can find all available community packages on #link(\"https://typst.app/universe/\")[Typst Universe].\n\nIf you are using Typst locally, you can also create your own system-local packages. For more details on this, see the #link(\"https://github.com/typst/packages\")[package repository].\n\n== Operators\n\nThe following table lists all available unary and binary operators with effect, arity (unary, binary) and precedence level (higher binds stronger). Some operations, such as #link(\"/docs/reference/foundations/calc/#functions-rem-euclid\")[modulus], do not have a special syntax and can be achieved using functions from the #link(\"/docs/reference/foundations/calc/\")[calc] module.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/scripting.typ", "filename": "scripting.typ"}
{"text": "= Styling\n\nTypst includes a flexible styling system that automatically applies styling of your choice to your document. With _set rules,_ you can configure basic properties of elements. This way, you create most common styles. However, there might not be a built-in property for everything you wish to do. For this reason, Typst further supports _show rules_ that can completely redefine the appearance of elements.\n\n== Set rules\n\nWith set rules, you can customize the appearance of elements. They are written as a #link(\"/docs/reference/foundations/function/\")[function call] to an #link(\"/docs/reference/foundations/function/#element-functions\")[element function] preceded by the `set` keyword (or `#set` in markup). Only optional parameters of that function can be provided to the set rule. Refer to each function's documentation to see which parameters are optional. In the example below, we use two set rules to change the #link(\"/docs/reference/text/text/#parameters-font\")[font family] and #link(\"/docs/reference/model/heading/#parameters-numbering\")[heading numbering].\n\n```typst\n#set heading(numbering: \"I.\")\n#set text(\n  font: \"New Computer Modern\"\n)\n\n= Introduction\nWith set rules, you can style\nyour document.\n```\n\nA top level set rule stays in effect until the end of the file. When nested inside of a block, it is only in effect until the end of that block. With a block, you can thus restrict the effect of a rule to a particular segment of your document. Below, we use a content block to scope the list styling to one particular list.\n\n```typst\nThis list is affected: #[\n  #set list(marker: [--])\n  - Dash\n]\n\nThis one is not:\n- Bullet\n```\n\nSometimes, you'll want to apply a set rule conditionally. For this, you can use a _set-if_ rule.\n\n```typst\n#let task(body, critical: false) = {\n  set text(red) if critical\n  [- #body]\n}\n\n#task(critical: true)[Food today?]\n#task(critical: false)[Work deadline]\n```\n\n== Show rules\n\nWith show rules, you can deeply customize the look of a type of element. The most basic form of show rule is a _show-set rule._ Such a rule is written as the `show` keyword followed by a #link(\"/docs/reference/foundations/selector/\")[selector], a colon and then a set rule. The most basic form of selector is an #link(\"/docs/reference/foundations/function/#element-functions\")[element function]. This lets the set rule only apply to the selected element. In the example below, headings become dark blue while all other text stays black.\n\n```typst\n#show heading: set text(navy)\n\n= This is navy-blue\nBut this stays black.\n```\n\nWith show-set rules you can mix and match properties from different functions to achieve many different effects. But they still limit you to what is predefined in Typst. For maximum flexibility, you can instead write a show rule that defines how to format an element from scratch. To write such a show rule, replace the set rule after the colon with an arbitrary #link(\"/docs/reference/foundations/function/\")[function]. This function receives the element in question and can return arbitrary content. The available #link(\"/docs/reference/scripting/#fields\")[fields] on the element passed to the function again match the parameters of the respective element function. Below, we define a show rule that formats headings for a fantasy encyclopedia.\n\n```typst\n#set heading(numbering: \"(I)\")\n#show heading: it => [\n  #set align(center)\n  #set text(font: \"Inria Serif\")\n  \\~ #emph(it.body)\n     #counter(heading).display(\n       it.numbering\n     ) \\~\n]\n\n= Dragon\nWith a base health of 15, the\ndragon is the most powerful\ncreature.\n\n= Manticore\nWhile less powerful than the\ndragon, the manticore gets\nextra style points.\n```\n\nLike set rules, show rules are in effect until the end of the current block or file.\n\nInstead of a function, the right-hand side of a show rule can also take a literal string or content block that should be directly substituted for the element. And apart from a function, the left-hand side of a show rule can also take a number of other _selectors_ that define what to apply the transformation to:\n\n- Everything: show: rest => .. Transform everything after the show rule. This is useful to apply a more complex layout to your whole document without wrapping everything in a giant function call.\n- Text: show \"Text\": .. Style, transform or replace text.\n- Regex: show regex(\"\\w+\"): .. Select and transform text with a regular expression for even more flexibility. See the documentation of the regex type for details.\n- Function with fields: show heading.where(level: 1): .. Transform only elements that have the specified fields. For example, you might want to only change the style of level-1 headings.\n- Label: show <intro>: .. Select and transform elements that have the specified label. See the documentation of the label type for more details.\n\n```typst\n#show \"Project\": smallcaps\n#show \"badly\": \"great\"\n\nWe started Project in 2019\nand are still working on it.\nProject is progressing badly.\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/styling.typ", "filename": "styling.typ"}
{"text": "= SVG\n\nInstead of creating a PDF, Typst can also directly render pages to scalable vector graphics (SVGs), which are the preferred format for embedding vector graphics in web pages. Like PDF files, SVGs display your document exactly how you have laid it out in Typst. Likewise, they share the benefit of not being bound to a specific resolution. Hence, you can print or view SVG files on any device without incurring a loss of quality. (Note that font printing quality may be better with a PDF.) In contrast to a PDF, an SVG cannot contain multiple pages. When exporting a multi-page document, Typst will emit multiple SVGs.\n\nSVGs can represent text in two ways: By embedding the text itself and rendering it with the fonts available on the viewer's computer or by embedding the shapes of each glyph in the font used to create the document. To ensure that the SVG file looks the same across all devices it is viewed on, Typst chooses the latter method. This means that the text in the SVG cannot be extracted automatically, for example by copy/paste or a screen reader. If you need the text to be accessible, export a PDF or HTML file instead.\n\nSVGs can have transparent backgrounds. By default, Typst will output an SVG with an opaque white background. You can make the background transparent using `#set page(fill: none)`. Learn more on the #link(\"/docs/reference/layout/page/#parameters-fill\")[page function's reference page].\n\n== Exporting as SVG\n\nPass `--format svg` to the `compile` or `watch` subcommand or provide an output file name that ends with `.svg`.\n\nIf your document has more than one page, Typst will create multiple image files. The output file name must then be a template string containing at least one of\n\n- `{p}`, which will be replaced by the page number\n- `{0p}`, which will be replaced by the zero-padded page number (so that all numbers have the same length)\n- `{t}`, which will be replaced by the total number of pages\n\nWhen exporting to SVG, you have the following configuration options:\n\n- Which pages to export by specifying `--pages` followed by a comma-separated list of numbers or dash-separated number ranges. Ranges can be half-open. Example: `2,3,7-9,11-`.\n\nClick \"File\" > \"Export as\" > \"SVG\" or click the downwards-facing arrow next to the quick download button and select \"Export as SVG\". When exporting to SVG, you have the following configuration options:\n\n- Which pages to export. Valid options are \"All pages\", \"Current page\", and \"Custom ranges\". Custom ranges are a comma-separated list of numbers or dash-separated number ranges. Ranges can be half-open. Example: `2,3,7-9,11-`.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/svg.typ", "filename": "svg.typ"}
{"text": "= emoji\n\nNamed emoji.\n\nFor example, `#emoji.face` produces the 😀 emoji. If you frequently use certain emojis, you can also import them from the `emoji` module (`#import emoji: face`) to use them without the `#emoji.` prefix.\n\n- 🔠ABCD\n- 🅰a\n- 🆎ab\n- 🧮abacus\n- 🔤abc\n- 🔡abcd\n- 🪗accordion\n- ⚕aesculapius\n- ✈airplane\n- 🛬airplane.landing\n- 🛩airplane.small\n- 🛫airplane.takeoff\n- ⚗alembic\n- 👽alien\n- 👾alien.monster\n- 🚑ambulance\n- 🏺amphora\n- ⚓anchor\n- 💢anger\n- 🐜ant\n- 🍏apple.green\n- 🍎apple.red\n- 🦾arm.mech\n- 💪arm.muscle\n- 🤳arm.selfie\n- ➡arrow.r.filled\n- ↪arrow.r.hook\n- 🔜arrow.r.soon\n- ⬅arrow.l.filled\n- ↩arrow.l.hook\n- 🔙arrow.l.back\n- 🔚arrow.l.end\n- ⬆arrow.t.filled\n- ⤴arrow.t.curve\n- 🔝arrow.t.top\n- ⬇arrow.b.filled\n- ⤵arrow.b.curve\n- ↔arrow.l.r\n- 🔛arrow.l.r.on\n- ↕arrow.t.b\n- ↙arrow.bl\n- ↘arrow.br\n- ↖arrow.tl\n- ↗arrow.tr\n- 🔄arrows.cycle\n- *ast\n- ✳ast.box\n- 🏧atm\n- ⚛atom\n- 🍆aubergine\n- 🥑avocado\n- 🪓axe\n- 🅱b\n- 👶baby\n- 👼baby.angel\n- 🚼baby.box\n- 🍼babybottle\n- 🎒backpack\n- 🥓bacon\n- 🦡badger\n- 🏸badminton\n- 🥯bagel\n- 🛄baggageclaim\n- 🥖baguette\n- 🎈balloon\n- ☑ballot.check\n- 🗳ballotbox\n- 🍌banana\n- 🪕banjo\n- 🏦bank\n- 💈barberpole\n- ⚾baseball\n- 🧢basecap\n- 🧺basket\n- ⛹basketball\n- 🏀basketball.ball\n- 🦇bat\n- 🛀bathtub\n- 🛁bathtub.foam\n- 🔋battery\n- 🪫battery.low\n- 🏝beach.palm\n- 🏖beach.umbrella\n- 📿beads\n- 🫘beans\n- 🐻bear\n- 🦫beaver\n- 🛏bed\n- 🛌bed.person\n- 🐝bee\n- 🍺beer\n- 🍻beer.clink\n- 🫜beet\n- 🪲beetle\n- 🐞beetle.lady\n- 🔔bell\n- 🛎bell.ding\n- 🔕bell.not\n- 🍱bento\n- 🚴bicyclist\n- 🚵bicyclist.mountain\n- 🚲bike\n- 🚳bike.not\n- 👙bikini\n- 🎱billiards\n- 🗑bin\n- ☣biohazard\n- 🐦bird\n- 🦬bison\n- 🩸blood\n- 👚blouse\n- 🐡blowfish\n- 🫐blueberries\n- 🐗boar\n- ⛵boat.sail\n- 🚣boat.row\n- 🛥boat.motor\n- 🚤boat.speed\n- 🛶boat.canoe\n- 🔩bolt\n- 💣bomb\n- 🦴bone\n- 📕book.red\n- 📘book.blue\n- 📗book.green\n- 📙book.orange\n- 📒book.spiral\n- 📖book.open\n- 🔖bookmark\n- 📚books\n- 🪃boomerang\n- 🛂bordercontrol\n- 💐bouquet\n- 🏹bow\n- 🥣bowl.spoon\n- 🍜bowl.steam\n- 🎳bowling\n- 🥊boxing\n- 👦boy\n- 🧠brain\n- 🍞bread\n- 🧱brick\n- 👰bride\n- 🌁bridge.fog\n- 🌉bridge.night\n- 💼briefcase\n- 🩲briefs\n- 🔆brightness.high\n- 🔅brightness.low\n- 🥦broccoli\n- 🧹broom\n- 🖌brush\n- 💬bubble.speech.r\n- 🗨bubble.speech.l\n- 💭bubble.thought\n- 🗯bubble.anger.r\n- 🫧bubbles\n- 🧋bubbletea\n- 🪣bucket\n- 🐃buffalo.water\n- 🐛bug\n- 👷builder\n- 🍔burger\n- 🌯burrito\n- 🚌bus\n- 🚍bus.front\n- 🚐bus.small\n- 🚏bus.stop\n- 🚎bus.trolley\n- 🧈butter\n- 🦋butterfly\n- 🔲button\n- 🔳button.alt\n- 🔘button.radio\n- 🗄cabinet.file\n- 🚠cablecar\n- 🚡cablecar.small\n- 🌵cactus\n- 🎂cake\n- 🍥cake.fish\n- 🥮cake.moon\n- 🍰cake.slice\n- 📅calendar\n- 🗓calendar.spiral\n- 📆calendar.tearoff\n- 🐫camel\n- 🐪camel.dromedar\n- 📷camera\n- 📸camera.flash\n- 🎥camera.movie\n- 🎦camera.movie.box\n- 📹camera.video\n- 🏕camping\n- 🥫can\n- 🕯candle\n- 🍬candy\n- 🦯cane\n- 🚗car\n- 🚘car.front\n- 🛻car.pickup\n- 🚓car.police\n- 🚔car.police.front\n- 🏎car.racing\n- 🛺car.rickshaw\n- 🚙car.suv\n- 💳card.credit\n- 🪪card.id\n- 📇cardindex\n- 🥕carrot\n- 🛒cart\n- 📼cassette\n- 🏰castle.eu\n- 🏯castle.jp\n- 🐈cat\n- 🐱cat.face\n- 😾cat.face.angry\n- 😿cat.face.cry\n- 😻cat.face.heart\n- 😹cat.face.joy\n- 😽cat.face.kiss\n- 😸cat.face.laugh\n- 🙀cat.face.shock\n- 😺cat.face.smile\n- 😼cat.face.smirk\n- 🔗chain\n- ⛓chains\n- 🪑chair\n- 🍾champagne\n- 📊chart.bar\n- 📈chart.up\n- 📉chart.down\n- 💹chart.yen.up\n- ✔checkmark.heavy\n- ✅checkmark.box\n- 🧀cheese\n- 🍒cherries\n- ♟chess\n- 🌰chestnut\n- 🐔chicken\n- 🐥chicken.baby\n- 🐣chicken.baby.egg\n- 🐤chicken.baby.head\n- 🍗chicken.leg\n- 🐓chicken.male\n- 🧒child\n- 🐿chipmunk\n- 🍫chocolate\n- 🥢chopsticks\n- ⛪church\n- 💒church.love\n- 🚬cigarette\n- 🚭cigarette.not\n- ⚫circle.black\n- 🔵circle.blue\n- 🟤circle.brown\n- 🟢circle.green\n- 🟠circle.orange\n- 🟣circle.purple\n- ⚪circle.white\n- 🔴circle.red\n- 🟡circle.yellow\n- ⭕circle.stroked\n- 🎪circus\n- 🏙city\n- 🌆city.dusk\n- 🌃city.night\n- 🌇city.sunset\n- 🆑cl\n- 🗜clamp\n- 🎬clapperboard\n- 🧗climbing\n- 📎clip\n- 📋clipboard\n- 🖇clips\n- 🕐clock.one\n- 🕜clock.one.thirty\n- 🕑clock.two\n- 🕝clock.two.thirty\n- 🕒clock.three\n- 🕞clock.three.thirty\n- 🕓clock.four\n- 🕟clock.four.thirty\n- 🕔clock.five\n- 🕠clock.five.thirty\n- 🕕clock.six\n- 🕡clock.six.thirty\n- 🕖clock.seven\n- 🕢clock.seven.thirty\n- 🕗clock.eight\n- 🕣clock.eight.thirty\n- 🕘clock.nine\n- 🕤clock.nine.thirty\n- 🕙clock.ten\n- 🕥clock.ten.thirty\n- 🕚clock.eleven\n- 🕦clock.eleven.thirty\n- 🕛clock.twelve\n- 🕧clock.twelve.thirty\n- ⏰clock.alarm\n- 🕰clock.old\n- ⏲clock.timer\n- ☁cloud\n- 💨cloud.dust\n- 🌧cloud.rain\n- 🌨cloud.snow\n- ⛈cloud.storm\n- ⛅cloud.sun\n- 🌥cloud.sun.hidden\n- 🌦cloud.sun.rain\n- 🌩cloud.thunder\n- 🧥coat\n- 🥼coat.lab\n- 🪳cockroach\n- 🍸cocktail.martini\n- 🍹cocktail.tropical\n- 🥥coconut\n- ☕coffee\n- ⚰coffin\n- 🪙coin\n- ☄comet\n- 🧭compass\n- 🖥computer\n- 🖱computermouse\n- 🎊confetti\n- 🚧construction\n- 🎮controller\n- 🍪cookie\n- 🥠cookie.fortune\n- 🍳cooking\n- 🆒cool\n- ©copyright\n- 🪸coral\n- 🌽corn\n- 🛋couch\n- 💑couple\n- 🐄cow\n- 🐮cow.face\n- 🦀crab\n- 🏗crane\n- 🖍crayon\n- 🦗cricket\n- 🏏cricketbat\n- 🐊crocodile\n- 🥐croissant\n- ❌crossmark\n- ❎crossmark.box\n- 👑crown\n- 🩼crutch\n- 🔮crystal\n- 🥒cucumber\n- 🥤cup.straw\n- 🧁cupcake\n- 🥌curling\n- 🍛curry\n- 🍮custard\n- 🛃customs\n- 🍴cutlery\n- 🌀cyclone\n- 🕺dancing.man\n- 💃dancing.woman\n- 👯dancing.women.bunny\n- 🎯darts\n- 〰dash.wave.double\n- 🦌deer\n- 🏜desert\n- 🕵detective\n- 🔷diamond.blue\n- 🔹diamond.blue.small\n- 🔶diamond.orange\n- 🔸diamond.orange.small\n- 💠diamond.dot\n- 🎲die\n- 🦕dino.pod\n- 🦖dino.rex\n- 💿disc.cd\n- 📀disc.dvd\n- 💽disc.mini\n- 🪩discoball\n- 🤿diving\n- 🦤dodo\n- 🐕dog\n- 🐶dog.face\n- 🦮dog.guide\n- 🐩dog.poodle\n- 💲dollar\n- 🐬dolphin\n- 🍩donut\n- 🚪door\n- 🕊dove.peace\n- 🐉dragon\n- 🐲dragon.face\n- 👗dress\n- 👘dress.kimono\n- 🥻dress.sari\n- 💧drop\n- 💦drops\n- 🥁drum\n- 🪘drum.big\n- 🦆duck\n- 🥟dumpling\n- 🦅eagle\n- 👂ear\n- 🦻ear.aid\n- 🥚egg\n- 🔞eighteen.not\n- 🐘elephant\n- 🛗elevator\n- 🧝elf\n- 📧email\n- ❗excl\n- ❕excl.white\n- ‼excl.double\n- ⁉excl.quest\n- 💥explosion\n- 🧯extinguisher\n- 👁eye\n- 👀eyes\n- 😀face.grin\n- 😠face.angry\n- 😡face.angry.red\n- 😧face.anguish\n- 😲face.astonish\n- 🤕face.bandage\n- 😁face.beam\n- 😶face.blank\n- 🤡face.clown\n- 🥶face.cold\n- 😦face.concern\n- 😎face.cool\n- 🤭face.cover\n- 🤠face.cowboy\n- 😭face.cry\n- 😈face.devil.smile\n- 👿face.devil.frown\n- 🫤face.diagonal\n- 🥸face.disguise\n- 😫face.distress\n- 😵face.dizzy\n- 🫥face.dotted\n- 😞face.down\n- 😓face.down.sweat\n- 🤤face.drool\n- 🤯face.explode\n- 🙄face.eyeroll\n- ☺face.friendly\n- 😨face.fear\n- 😰face.fear.sweat\n- 🤒face.fever\n- 😳face.flush\n- ☹face.frown\n- 🙁face.frown.slight\n- 😣face.frust\n- 🤪face.goofy\n- 😇face.halo\n- 😊face.happy\n- 😍face.heart\n- 🥰face.hearts\n- 🥵face.heat\n- 🤗face.hug\n- 🙃face.inv\n- 😂face.joy\n- 😗face.kiss\n- 😙face.kiss.smile\n- 😘face.kiss.heart\n- 😚face.kiss.blush\n- 😋face.lick\n- 🤥face.lie\n- 😷face.mask\n- 😒face.meh\n- 🫠face.melt\n- 🤑face.money\n- 🧐face.monocle\n- 🤢face.nausea\n- 🤓face.nerd\n- 😐face.neutral\n- 😃face.open\n- 🥳face.party\n- 🫣face.peek\n- 🥺face.plead\n- 😌face.relief\n- 🤣face.rofl\n- 😔face.sad\n- 🫡face.salute\n- 😱face.shock\n- 🤫face.shush\n- 🤨face.skeptic\n- 😴face.sleep\n- 😪face.sleepy\n- 😄face.smile\n- 🙂face.smile.slight\n- 😅face.smile.sweat\n- 🥲face.smile.tear\n- 😏face.smirk\n- 🤧face.sneeze\n- 🫢face.speak.not\n- 😆face.squint\n- 🤩face.stars\n- 😑face.straight\n- 😖face.suffer\n- 😯face.surprise\n- 🤬face.symbols\n- 😢face.tear\n- 😥face.tear.relief\n- 🥹face.tear.withheld\n- 😬face.teeth\n- 🤔face.think\n- 🫩face.tired\n- 😛face.tongue\n- 😝face.tongue.squint\n- 😜face.tongue.wink\n- 😤face.triumph\n- 😕face.unhappy\n- 🤮face.vomit\n- 😩face.weary\n- 😉face.wink\n- 🥴face.woozy\n- 😟face.worry\n- 😮face.wow\n- 🥱face.yawn\n- 🤐face.zip\n- 🏭factory\n- 🧚fairy\n- ✝faith.christ\n- ☸faith.dharma\n- ☪faith.islam\n- ✡faith.judaism\n- 🕎faith.menorah\n- 🕉faith.om\n- ☦faith.orthodox\n- ☮faith.peace\n- 🔯faith.star.dot\n- 🛐faith.worship\n- ☯faith.yinyang\n- 🧆falafel\n- 👪family\n- 📠fax\n- 🪶feather\n- 🤱feeding.breast\n- 🤺fencing\n- 🎡ferriswheel\n- 🗃filebox\n- 🗂filedividers\n- 🎞film\n- 👉finger.r\n- 👈finger.l\n- 👆finger.t\n- ☝finger.t.alt\n- 👇finger.b\n- 🫵finger.front\n- 🖕finger.m\n- 🫆fingerprint\n- 🤞fingers.cross\n- 🤌fingers.pinch\n- 🫰fingers.snap\n- 🔥fire\n- 🧨firecracker\n- 🚒fireengine\n- 🎆fireworks\n- 🐟fish\n- 🐠fish.tropical\n- 🎣fishing\n- 👊fist.front\n- 🤜fist.r\n- 🤛fist.l\n- ✊fist.raised\n- 🏴flag.black\n- 🏳flag.white\n- 🏁flag.goal\n- ⛳flag.golf\n- 🚩flag.red\n- 🎌flags.jp.crossed\n- 🦩flamingo\n- 🔦flashlight\n- 🫓flatbread\n- ⚜fleur\n- 💾floppy\n- 🌺flower.hibiscus\n- 🪷flower.lotus\n- 🌸flower.pink\n- 🌹flower.rose\n- 🌻flower.sun\n- 🌷flower.tulip\n- 💮flower.white\n- 🥀flower.wilted\n- 🌼flower.yellow\n- 🪰fly\n- 🌫fog\n- 📁folder\n- 📂folder.open\n- 🫕fondue\n- 🦶foot\n- ⚽football\n- 🏈football.am\n- 💱forex\n- ⛲fountain\n- 🦊fox\n- 🆓free\n- 🍟fries\n- 🥏frisbee\n- 🐸frog.face\n- ⛽fuelpump\n- 🈷gachi\n- 🧄garlic\n- ⚙gear\n- 💎gem\n- 🧞genie\n- 👻ghost\n- 🦒giraffe\n- 👧girl\n- 🥂glass.clink\n- 🥛glass.milk\n- 🫗glass.pour\n- 🥃glass.tumbler\n- 👓glasses\n- 🕶glasses.sun\n- 🌎globe.am\n- 🌏globe.as.au\n- 🌍globe.eu.af\n- 🌐globe.meridian\n- 🧤gloves\n- 🈴go\n- 🥅goal\n- 🐐goat\n- 🥽goggles\n- 🏌golfing\n- 🦍gorilla\n- 🍇grapes\n- 💂guard.man\n- 🎸guitar\n- 🤸gymnastics\n- 💇haircut\n- 🔨hammer\n- ⚒hammer.pick\n- 🛠hammer.wrench\n- 🪬hamsa\n- 🐹hamster.face\n- ✋hand.raised\n- 🤚hand.raised.alt\n- 🫱hand.r\n- 🫲hand.l\n- 🫴hand.t\n- 🫳hand.b\n- 👌hand.ok\n- 🤙hand.call\n- 🤟hand.love\n- 🖖hand.part\n- ✌hand.peace\n- 🤏hand.pinch\n- 🤘hand.rock\n- 🖐hand.splay\n- 👋hand.wave\n- ✍hand.write\n- 👜handbag\n- 🤾handball\n- 👬handholding.man.man\n- 👫handholding.woman.man\n- 👭handholding.woman.woman\n- 🙏hands.folded\n- 🤲hands.palms\n- 👏hands.clap\n- 🫶hands.heart\n- 👐hands.open\n- 🙌hands.raised\n- 🤝hands.shake\n- 🪉harp\n- #hash\n- 👒hat.ribbon\n- 🎩hat.top\n- 🎧headphone\n- ❤heart\n- 💘heart.arrow\n- 💓heart.beat\n- 🖤heart.black\n- 💙heart.blue\n- 💟heart.box\n- 💔heart.broken\n- 🤎heart.brown\n- 💕heart.double\n- ❣heart.excl\n- 💚heart.green\n- 💗heart.grow\n- 🧡heart.orange\n- 💜heart.purple\n- 🫀heart.real\n- 💞heart.revolve\n- 💝heart.ribbon\n- 💖heart.spark\n- 🤍heart.white\n- 💛heart.yellow\n- 🦔hedgehog\n- 🚁helicopter\n- 🧬helix\n- ⛑helmet.cross\n- 🪖helmet.military\n- ㊙hi\n- 🦛hippo\n- 🏑hockey\n- 🕳hole\n- 🍯honey\n- 🧧hongbao\n- 🪝hook\n- 📯horn.postal\n- 🐎horse\n- 🎠horse.carousel\n- 🐴horse.face\n- 🏇horse.race\n- 🏥hospital\n- 🌭hotdog\n- 🏨hotel\n- 🏩hotel.love\n- ♨hotspring\n- ⌛hourglass\n- ⏳hourglass.flow\n- 🏠house\n- 🏚house.derelict\n- 🏡house.garden\n- 🏘house.multiple\n- 💯hundred\n- 🛖hut\n- 🧊ice\n- 🍨icecream\n- 🍧icecream.shaved\n- 🍦icecream.soft\n- 🏒icehockey\n- 🆔id\n- ℹinfo\n- 🏮izakaya\n- 🫙jar\n- 👖jeans\n- 🧩jigsaw\n- 🕹joystick\n- 🤹juggling\n- 🧃juice\n- 🉑ka\n- 🕋kaaba\n- 🈹kachi\n- 🎍kadomatsu\n- 🦘kangaroo\n- 🈳kara\n- 🥙kebab\n- 🔑key\n- 🗝key.old\n- ⌨keyboard\n- 💏kiss\n- 💋kissmark\n- 🪁kite\n- 🥝kiwi\n- 🔪knife\n- 🗡knife.dagger\n- 🪢knot\n- 🐨koala\n- 🎏koinobori\n- 🈁koko\n- 🈲kon\n- 🏷label\n- 🥍lacrosse\n- 🪜ladder\n- 🪔lamp.diya\n- 💻laptop\n- ☘leaf.clover.three\n- 🍀leaf.clover.four\n- 🍂leaf.fall\n- 🌿leaf.herb\n- 🍁leaf.maple\n- 🍃leaf.wind\n- 🛅leftluggage\n- 🦵leg\n- 🦿leg.mech\n- 🍋lemon\n- 🐆leopard\n- 💌letter.love\n- 🗽liberty\n- 💡lightbulb\n- ⚡lightning\n- 🦁lion\n- 💄lipstick\n- 🚮litter\n- 🚯litter.not\n- 🦎lizard\n- 🦙llama\n- 🦞lobster\n- 🔒lock\n- 🔐lock.key\n- 🔓lock.open\n- 🔏lock.pen\n- 🍭lollipop\n- 🧴lotion\n- 🧳luggage\n- 🫁lungs\n- 🧙mage\n- 🧲magnet\n- 🔎magnify.r\n- 🔍magnify.l\n- 🀄mahjong.dragon.red\n- ✉mail\n- 📩mail.arrow\n- 📪mailbox.closed.empty\n- 📫mailbox.closed.full\n- 📭mailbox.open.empty\n- 📬mailbox.open.full\n- 🦣mammoth\n- 👨man\n- 🚹man.box\n- 🤴man.crown\n- 👲man.guapimao\n- 🕴man.levitate\n- 👴man.old\n- 🫃man.pregnant\n- 👳man.turban\n- 🤵man.tuxedo\n- 🥭mango\n- 🗺map.world\n- 🗾map.jp\n- 🥋martialarts\n- 🎭masks\n- 🧉mate\n- 🪆matryoshka\n- 🥩meat\n- 🍖meat.bone\n- 🥇medal.first\n- 🥈medal.second\n- 🥉medal.third\n- 🏅medal.sports\n- 🎖medal.military\n- 📢megaphone\n- 📣megaphone.simple\n- 🍈melon\n- 🧜merperson\n- Ⓜmetro\n- 🦠microbe\n- 🎤microphone\n- 🎙microphone.studio\n- 🔬microscope\n- 🌌milkyway\n- 🪞mirror\n- 🎛mixer\n- 💰money.bag\n- 💵money.dollar\n- 💶money.euro\n- 💷money.pound\n- 💴money.yen\n- 💸money.wings\n- 🐒monkey\n- 🐵monkey.face\n- 🙉monkey.hear.not\n- 🙈monkey.see.not\n- 🙊monkey.speak.not\n- 🌙moon.crescent\n- 🌕moon.full\n- 🌝moon.full.face\n- 🌑moon.new\n- 🌚moon.new.face\n- 🌖moon.wane.one\n- 🌗moon.wane.two\n- 🌜moon.wane.three.face\n- 🌘moon.wane.three\n- 🌒moon.wax.one\n- 🌓moon.wax.two\n- 🌛moon.wax.two.face\n- 🌔moon.wax.three\n- 🎓mortarboard\n- 🕌mosque\n- 🦟mosquito\n- 🏍motorcycle\n- 🛣motorway\n- ⛰mountain\n- 🗻mountain.fuji\n- 🏔mountain.snow\n- 🌄mountain.sunrise\n- 🐁mouse\n- 🐭mouse.face\n- 🪤mousetrap\n- 👄mouth\n- 🫦mouth.bite\n- 🗿moyai\n- 🈚muryo\n- 🏛museum\n- 🍄mushroom\n- 🎼musicalscore\n- 💅nails.polish\n- 📛namebadge\n- 🧿nazar\n- 👔necktie\n- 🪡needle\n- 🪹nest.empty\n- 🪺nest.eggs\n- 🆕new\n- 📰newspaper\n- 🗞newspaper.rolled\n- 🆖ng\n- 🎎ningyo\n- 🥷ninja\n- ⛔noentry\n- 👃nose\n- 📓notebook\n- 📔notebook.deco\n- 🗒notepad\n- 🎵notes\n- 🎶notes.triple\n- 🔢numbers\n- 🅾o\n- 🐙octopus\n- 🏢office\n- 🛢oil\n- 🆗ok\n- 🫒olive\n- 👹oni\n- 🧅onion\n- 🦧orangutan\n- 🦦otter\n- 🦉owl\n- 🐂ox\n- 🦪oyster\n- 📦package\n- 🥘paella\n- 📄page\n- 📃page.curl\n- 📝page.pencil\n- 📟pager\n- 📑pages.tabs\n- 🖼painting\n- 🎨palette\n- 🥞pancakes\n- 🐼panda\n- 🪂parachute\n- 🏞park\n- 🅿parking\n- 🦜parrot\n- 〽partalteration\n- 🎉party\n- 🍑peach\n- 🦚peacock\n- 🥜peanuts\n- 🍐pear\n- 🚶pedestrian\n- 🚷pedestrian.not\n- 🖊pen.ball\n- 🖋pen.fountain\n- ✏pencil\n- 🐧penguin\n- 🫑pepper\n- 🌶pepper.hot\n- 🧑person\n- 🙎person.angry\n- 🧔person.beard\n- 👱person.blonde\n- 🙇person.bow\n- 🫅person.crown\n- 🧏person.deaf\n- 🤦person.facepalm\n- 🙍person.frown\n- 🧕person.hijab\n- 🧎person.kneel\n- 🧘person.lotus\n- 💆person.massage\n- 🙅person.no\n- 🙆person.ok\n- 🧓person.old\n- 🫄person.pregnant\n- 🙋person.raise\n- 💁person.sassy\n- 🤷person.shrug\n- 🧍person.stand\n- 🧖person.steam\n- 🧫petri\n- 📱phone\n- 📲phone.arrow\n- ☎phone.classic\n- 📵phone.not\n- 📴phone.off\n- 📞phone.receiver\n- 📶phone.signal\n- 📳phone.vibrate\n- 🎹piano\n- ⛏pick\n- 🥧pie\n- 🐖pig\n- 🐷pig.face\n- 🐽pig.nose\n- 💊pill\n- 📌pin\n- 📍pin.round\n- 🪅pinata\n- 🍍pineapple\n- 🏓pingpong\n- 🔫pistol\n- 🍕pizza\n- 🪧placard\n- 🪐planet\n- 🪴plant\n- 🩹plaster\n- 🍽plate.cutlery\n- ⏬playback.down\n- ⏏playback.eject\n- ⏩playback.forward\n- ⏸playback.pause\n- ⏺playback.record\n- 🔁playback.repeat\n- 🔂playback.repeat.once\n- 🔃playback.repeat.v\n- ⏮playback.restart\n- ⏪playback.rewind\n- 🔀playback.shuffle\n- ⏭playback.skip\n- ⏹playback.stop\n- ⏯playback.toggle\n- ⏫playback.up\n- 🎴playingcard.flower\n- 🃏playingcard.joker\n- 🪠plunger\n- 👮policeofficer\n- 💩poo\n- 🍿popcorn\n- 🏤post.eu\n- 🏣post.jp\n- 📮postbox\n- 🥔potato\n- 🍠potato.sweet\n- 👝pouch\n- 🔌powerplug\n- 🎁present\n- 🥨pretzel\n- 🖨printer\n- 👣prints.foot\n- 🐾prints.paw\n- 🚫prohibited\n- 📽projector\n- 🎃pumpkin.lantern\n- 👛purse\n- ❓quest\n- ❔quest.white\n- 🐇rabbit\n- 🐰rabbit.face\n- 🦝raccoon\n- 📻radio\n- ☢radioactive\n- 🛤railway\n- 🌈rainbow\n- 🐏ram\n- 🐀rat\n- 🪒razor\n- 🧾receipt\n- ♻recycling\n- ®reg\n- 🚻restroom\n- 🦏rhino\n- 🎀ribbon\n- 🎗ribbon.remind\n- 🍚rice\n- 🍘rice.cracker\n- 🌾rice.ear\n- 🍙rice.onigiri\n- 💍ring\n- 🛟ringbuoy\n- 🤖robot\n- 🪨rock\n- 🚀rocket\n- 🎢rollercoaster\n- 🏵rosette\n- 🏉rugby\n- 📏ruler\n- 📐ruler.triangle\n- 🏃running\n- 🈂sa\n- 🧷safetypin\n- 🦺safetyvest\n- 🍶sake\n- 🥗salad\n- 🧂salt\n- 🥪sandwich\n- 🎅santa.man\n- 🤶santa.woman\n- 📡satdish\n- 🛰satellite\n- 🪚saw\n- 🎷saxophone\n- ⚖scales\n- 🧣scarf\n- 🏫school\n- ✂scissors\n- 🛴scooter\n- 🛵scooter.motor\n- 🦂scorpion\n- 🪛screwdriver\n- 📜scroll\n- 🦭seal\n- 💺seat\n- 🌱seedling\n- 🦈shark\n- 🐑sheep\n- 🐚shell.spiral\n- 🛡shield\n- 🈸shin\n- 🚢ship\n- 🛳ship.cruise\n- ⛴ship.ferry\n- 🎽shirt.sports\n- 👕shirt.t\n- 👞shoe\n- 🩰shoe.ballet\n- 🥿shoe.flat\n- 👠shoe.heel\n- 🥾shoe.hike\n- ⛸shoe.ice\n- 🛼shoe.roller\n- 👡shoe.sandal.heel\n- 🎿shoe.ski\n- 👟shoe.sneaker\n- 👢shoe.tall\n- 🩴shoe.thong\n- 🛍shopping\n- 🩳shorts\n- 🔰shoshinsha\n- 🪏shovel\n- 🚿shower\n- 🦐shrimp\n- 🍤shrimp.fried\n- ⛩shrine\n- ㊗shuku\n- 🚸sign.crossing\n- 🛑sign.stop\n- 👤silhouette\n- 👥silhouette.double\n- 🫂silhouette.hug\n- 🗣silhouette.speak\n- 🚨siren\n- 🛹skateboard\n- 🍡skewer.dango\n- 🍢skewer.oden\n- ⛷skiing\n- 💀skull\n- ☠skull.bones\n- 🦨skunk\n- 🛷sled\n- 🛝slide\n- 🎚slider\n- 🦥sloth\n- 🎰slots\n- 🐌snail\n- 🐍snake\n- 🏂snowboarding\n- ❄snowflake\n- ⛄snowman\n- ☃snowman.snow\n- 🧼soap\n- 🧦socks\n- 🥎softball\n- 🆘sos\n- 🍲soup\n- 🍝spaghetti\n- ❇sparkle.box\n- 🎇sparkler\n- ✨sparkles\n- 🔈speaker\n- 🔇speaker.not\n- 🔉speaker.wave\n- 🔊speaker.waves\n- 🕷spider\n- 🕸spiderweb\n- 🥬spinach\n- 🫟splatter\n- 🧽sponge\n- 🥄spoon\n- ⬛square.black\n- ▪square.black.tiny\n- ◾square.black.small\n- ◼square.black.medium\n- ⬜square.white\n- ▫square.white.tiny\n- ◽square.white.small\n- ◻square.white.medium\n- 🟦square.blue\n- 🟫square.brown\n- 🟩square.green\n- 🟧square.orange\n- 🟪square.purple\n- 🟥square.red\n- 🟨square.yellow\n- 🦑squid\n- 🏟stadium\n- ⭐star\n- 💫star.arc\n- ✴star.box\n- 🌟star.glow\n- 🌠star.shoot\n- 🩺stethoscope\n- 🏬store.big\n- 🏪store.small\n- 🍓strawberry\n- ♣suit.club\n- ♦suit.diamond\n- ♥suit.heart\n- ♠suit.spade\n- ☀sun\n- 🌤sun.cloud\n- 🌞sun.face\n- 🌅sunrise\n- 🦸superhero\n- 🦹supervillain\n- 🏄surfing\n- 🍣sushi\n- 🦢swan\n- 🏊swimming\n- 🩱swimsuit\n- ⚔swords\n- 🔣symbols\n- 🕍synagogue\n- 💉syringe\n- 🌮taco\n- 🥡takeout\n- 🫔tamale\n- 🎋tanabata\n- 🍊tangerine\n- 🚰tap\n- 🚱tap.not\n- 🚕taxi\n- 🚖taxi.front\n- 🍵teacup\n- 🫖teapot\n- 🧸teddy\n- 🔭telescope\n- 🛕temple\n- 🔟ten\n- 👺tengu\n- 🎾tennis\n- ⛺tent\n- 🧪testtube\n- 🌡thermometer\n- 🧵thread\n- 👍thumb.up\n- 👎thumb.down\n- 🎟ticket.event\n- 🎫ticket.travel\n- 🐅tiger\n- 🐯tiger.face\n- ™tm\n- 🚽toilet\n- 🧻toiletpaper\n- 🉐toku\n- 🍅tomato\n- 🪦tombstone\n- 👅tongue\n- 🧰toolbox\n- 🦷tooth\n- 🪥toothbrush\n- 🌪tornado\n- 🗼tower.tokyo\n- 🖲trackball\n- 🚜tractor\n- 🚦trafficlight.v\n- 🚥trafficlight.h\n- 🚆train\n- 🚃train.car\n- 🚈train.light\n- 🚇train.metro\n- 🚝train.mono\n- 🚞train.mountain\n- 🚄train.speed\n- 🚅train.speed.bullet\n- 🚂train.steam\n- 🚉train.stop\n- 🚟train.suspend\n- 🚊train.tram\n- 🚋train.tram.car\n- ⚧transgender\n- 📥tray.inbox\n- 📨tray.mail\n- 📤tray.outbox\n- 🌳tree.deciduous\n- 🌲tree.evergreen\n- 🪾tree.leafless\n- 🌴tree.palm\n- 🎄tree.xmas\n- ▶triangle.r\n- ◀triangle.l\n- 🔼triangle.t\n- 🔽triangle.b\n- 🔺triangle.t.red\n- 🔻triangle.b.red\n- 🔱trident\n- 🧌troll\n- 🏆trophy\n- 🚚truck\n- 🚛truck.trailer\n- 🎺trumpet\n- 🎑tsukimi\n- 🦃turkey\n- 🐢turtle\n- 📺tv\n- 🛸ufo\n- ☂umbrella.open\n- 🌂umbrella.closed\n- ☔umbrella.rain\n- ⛱umbrella.sun\n- 🦄unicorn\n- 🦳unknown\n- 🆙up\n- ⚱urn\n- 🧛vampire\n- 🎻violin\n- 🌋volcano\n- 🏐volleyball\n- 🆚vs\n- 🧇waffle\n- 🪄wand\n- ⚠warning\n- ⌚watch\n- ⏱watch.stop\n- 🍉watermelon\n- 🤽waterpolo\n- 🌊wave\n- 🚾wc\n- 🏋weightlifting\n- 🐋whale\n- 🐳whale.spout\n- 🛞wheel\n- 🦽wheelchair\n- ♿wheelchair.box\n- 🦼wheelchair.motor\n- 🌬wind\n- 🎐windchime\n- 🪟window\n- 🍷wine\n- 🐺wolf\n- 👩woman\n- 🚺woman.box\n- 👸woman.crown\n- 👵woman.old\n- 🤰woman.pregnant\n- 🪵wood\n- 🪱worm\n- 🔧wrench\n- 🤼wrestling\n- 🩻xray\n- 🧶yarn\n- 🈺yo\n- 🪀yoyo\n- 🈯yubi\n- 🈶yuryo\n- 🦓zebra\n- ♒zodiac.aquarius\n- ♈zodiac.aries\n- ♋zodiac.cancer\n- ♑zodiac.capri\n- ♊zodiac.gemini\n- ♌zodiac.leo\n- ♎zodiac.libra\n- ⛎zodiac.ophi\n- ♓zodiac.pisces\n- ♐zodiac.sagit\n- ♏zodiac.scorpio\n- ♉zodiac.taurus\n- ♍zodiac.virgo\n- 🧟zombie\n- 💤zzz", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/symbols/emoji.typ", "filename": "emoji.typ"}
{"text": "= sym\n\nNamed general symbols.\n\nFor example, `#sym.arrow` produces the → symbol. Within #link(\"/docs/reference/math/\")[formulas], these symbols can be used without the `#sym.` prefix.\n\nThe `d` in an integral's `dx` can be written as `$dif x$`. Outside math formulas, `dif` can be accessed as `math.dif`.\n\n- 𝔸AA\n- ΑAlpha\n- 𝔹BB\n- ΒBeta\n- ℂCC\n- ΧChi\n- 𝔻DD\n- ΔDelta\n- 𝔼EE\n- ΕEpsilon\n- ΗEta\n- 𝔽FF\n- 𝔾GG\n- ΓGamma\n- ℍHH\n- 𝕀II\n- ℑIm\n- ΙIota\n- 𝕁JJ\n- 𝕂KK\n- ϏKai\n- ΚKappa\n- 𝕃LL\n- ΛLambda\n- 𝕄MM\n- ΜMu\n- ℕNN\n- ΝNu\n- 𝕆OO\n- ΩOmega\n- ℧Omega.inv\n- ΟOmicron\n- ℙPP\n- ΦPhi\n- ΠPi\n- ΨPsi\n- ℚQQ\n- ℝRR\n- ℜRe\n- ΡRho\n- 𝕊SS\n- ΣSigma\n- 𝕋TT\n- ΤTau\n- ΘTheta\n- 𝕌UU\n- ΥUpsilon\n- 𝕍VV\n- 𝕎WW\n- 𝕏XX\n- ΞXi\n- 𝕐YY\n- ℤZZ\n- ΖZeta\n- ´acute\n- ˝acute.double\n- אalef\n- אaleph\n- αalpha\n- &amp\n- ⅋amp.inv\n- ∧and\n- ⋀and.big\n- ⋏and.curly\n- ⟑and.dot\n- ⩓and.double\n- ∠angle\n- ⟨angle.l\n- ⧼angle.l.curly\n- ⦑angle.l.dot\n- ⟪angle.l.double\n- ⟩angle.r\n- ⧽angle.r.curly\n- ⦒angle.r.dot\n- ⟫angle.r.double\n- ⦟angle.acute\n- ∡angle.arc\n- ⦛angle.arc.rev\n- ⦦angle.oblique\n- ⦣angle.rev\n- ∟angle.right\n- ⯾angle.right.rev\n- ⊾angle.right.arc\n- ⦝angle.right.dot\n- ⦜angle.right.sq\n- ⦞angle.s\n- ⟀angle.spatial\n- ∢angle.spheric\n- ⦠angle.spheric.rev\n- ⦡angle.spheric.top\n- Åangstrom\n- ≈approx\n- ≊approx.eq\n- ≉approx.not\n- →arrow.r\n- ⟼arrow.r.long.bar\n- ↦arrow.r.bar\n- ⤷arrow.r.curve\n- ⮎arrow.r.turn\n- ⇢arrow.r.dashed\n- ⤑arrow.r.dotted\n- ⇒arrow.r.double\n- ⤇arrow.r.double.bar\n- ⟹arrow.r.double.long\n- ⟾arrow.r.double.long.bar\n- ⇏arrow.r.double.not\n- ➡arrow.r.filled\n- ↪arrow.r.hook\n- ⟶arrow.r.long\n- ⟿arrow.r.long.squiggly\n- ↬arrow.r.loop\n- ↛arrow.r.not\n- ⭆arrow.r.quad\n- ⇝arrow.r.squiggly\n- ⇥arrow.r.stop\n- ⇨arrow.r.stroked\n- ↣arrow.r.tail\n- ⥲arrow.r.tilde\n- ⇛arrow.r.triple\n- ⤅arrow.r.twohead.bar\n- ↠arrow.r.twohead\n- ↝arrow.r.wave\n- ←arrow.l\n- ↤arrow.l.bar\n- ⤶arrow.l.curve\n- ⮌arrow.l.turn\n- ⇠arrow.l.dashed\n- ⬸arrow.l.dotted\n- ⇐arrow.l.double\n- ⤆arrow.l.double.bar\n- ⟸arrow.l.double.long\n- ⟽arrow.l.double.long.bar\n- ⇍arrow.l.double.not\n- ⬅arrow.l.filled\n- ↩arrow.l.hook\n- ⟵arrow.l.long\n- ⟻arrow.l.long.bar\n- ⬳arrow.l.long.squiggly\n- ↫arrow.l.loop\n- ↚arrow.l.not\n- ⭅arrow.l.quad\n- ⇜arrow.l.squiggly\n- ⇤arrow.l.stop\n- ⇦arrow.l.stroked\n- ↢arrow.l.tail\n- ⭉arrow.l.tilde\n- ⇚arrow.l.triple\n- ⬶arrow.l.twohead.bar\n- ↞arrow.l.twohead\n- ↜arrow.l.wave\n- ↑arrow.t\n- ↥arrow.t.bar\n- ⤴arrow.t.curve\n- ⮍arrow.t.turn\n- ⇡arrow.t.dashed\n- ⇑arrow.t.double\n- ⬆arrow.t.filled\n- ⟰arrow.t.quad\n- ⤒arrow.t.stop\n- ⇧arrow.t.stroked\n- ⤊arrow.t.triple\n- ↟arrow.t.twohead\n- ↓arrow.b\n- ↧arrow.b.bar\n- ⤵arrow.b.curve\n- ⮏arrow.b.turn\n- ⇣arrow.b.dashed\n- ⇓arrow.b.double\n- ⬇arrow.b.filled\n- ⟱arrow.b.quad\n- ⤓arrow.b.stop\n- ⇩arrow.b.stroked\n- ⤋arrow.b.triple\n- ↡arrow.b.twohead\n- ↔arrow.l.r\n- ⇔arrow.l.r.double\n- ⟺arrow.l.r.double.long\n- ⇎arrow.l.r.double.not\n- ⬌arrow.l.r.filled\n- ⟷arrow.l.r.long\n- ↮arrow.l.r.not\n- ⬄arrow.l.r.stroked\n- ↭arrow.l.r.wave\n- ↕arrow.t.b\n- ⇕arrow.t.b.double\n- ⬍arrow.t.b.filled\n- ⇳arrow.t.b.stroked\n- ↗arrow.tr\n- ⇗arrow.tr.double\n- ⬈arrow.tr.filled\n- ⤤arrow.tr.hook\n- ⬀arrow.tr.stroked\n- ↘arrow.br\n- ⇘arrow.br.double\n- ⬊arrow.br.filled\n- ⤥arrow.br.hook\n- ⬂arrow.br.stroked\n- ↖arrow.tl\n- ⇖arrow.tl.double\n- ⬉arrow.tl.filled\n- ⤣arrow.tl.hook\n- ⬁arrow.tl.stroked\n- ↙arrow.bl\n- ⇙arrow.bl.double\n- ⬋arrow.bl.filled\n- ⤦arrow.bl.hook\n- ⬃arrow.bl.stroked\n- ⤡arrow.tl.br\n- ⤢arrow.tr.bl\n- ↺arrow.ccw\n- ↶arrow.ccw.half\n- ↻arrow.cw\n- ↷arrow.cw.half\n- ↯arrow.zigzag\n- ⌃arrowhead.t\n- ⌄arrowhead.b\n- ⇉arrows.rr\n- ⇇arrows.ll\n- ⇈arrows.tt\n- ⇊arrows.bb\n- ⇆arrows.lr\n- ↹arrows.lr.stop\n- ⇄arrows.rl\n- ⇅arrows.tb\n- ⇵arrows.bt\n- ⇶arrows.rrr\n- ⬱arrows.lll\n- ∗ast.op\n- *ast.basic\n- ⁎ast.low\n- ⁑ast.double\n- ⁂ast.triple\n- ﹡ast.small\n- ⊛ast.circle\n- ⧆ast.square\n- ≍asymp\n- ≭asymp.not\n- @at\n- \\backslash\n- ⦸backslash.circle\n- ⧷backslash.not\n- ☐ballot\n- ☒ballot.cross\n- ☑ballot.check\n- 🗹ballot.check.heavy\n- |bar.v\n- ‖bar.v.double\n- ⦀bar.v.triple\n- ¦bar.v.broken\n- ⦶bar.v.circle\n- ―bar.h\n- ∵because\n- בbet\n- βbeta\n- ϐbeta.alt\n- בbeth\n- ₿bitcoin\n- ⊥bot\n- {brace.l\n- ⦃brace.l.double\n- }brace.r\n- ⦄brace.r.double\n- ⏞brace.t\n- ⏟brace.b\n- [bracket.l\n- ⟦bracket.l.double\n- ]bracket.r\n- ⟧bracket.r.double\n- ⎴bracket.t\n- ⎵bracket.b\n- ˘breve\n- •bullet\n- ‸caret\n- ˇcaron\n- ⌈ceil.l\n- ⌉ceil.r\n- ✓checkmark\n- 🗸checkmark.light\n- ✔checkmark.heavy\n- χchi\n- ○circle.stroked\n- ∘circle.stroked.tiny\n- ⚬circle.stroked.small\n- ◯circle.stroked.big\n- ●circle.filled\n- ⦁circle.filled.tiny\n- ∙circle.filled.small\n- ⬤circle.filled.big\n- ◌circle.dotted\n- ⊚circle.nested\n- ℅co\n- :colon\n- ∷colon.double\n- ⁝colon.tri\n- ⫶colon.tri.op\n- ≔colon.eq\n- ⩴colon.double.eq\n- ,comma\n- ∁complement\n- ∘compose\n- ∗convolve\n- 🄯copyleft\n- ©copyright\n- ℗copyright.sound\n- ✗crossmark\n- ✘crossmark.heavy\n- †dagger\n- ‡dagger.double\n- ⹋dagger.triple\n- ⸶dagger.l\n- ⸷dagger.r\n- ⸸dagger.inv\n- דdalet\n- דdaleth\n- –dash.en\n- —dash.em\n- ⸺dash.em.two\n- ⸻dash.em.three\n- ‒dash.fig\n- 〜dash.wave\n- ∹dash.colon\n- ⊝dash.circle\n- 〰dash.wave.double\n- °degree\n- δdelta\n- ¨diaer\n- ⌀diameter\n- ◇diamond.stroked\n- ⋄diamond.stroked.small\n- ⬦diamond.stroked.medium\n- ⟐diamond.stroked.dot\n- ◆diamond.filled\n- ⬥diamond.filled.medium\n- ⬩diamond.filled.small\n- ⚅die.six\n- ⚄die.five\n- ⚃die.four\n- ⚂die.three\n- ⚁die.two\n- ⚀die.one\n- ∂diff\n- ÷div\n- ⨸div.circle\n- ∣divides\n- ∤divides.not\n- ⫮divides.not.rev\n- ⟊divides.struck\n- $dollar\n- ⋅dot.op\n- .dot.basic\n- ·dot.c\n- ⊙dot.circle\n- ⨀dot.circle.big\n- ⊡dot.square\n- ¨dot.double\n- ⃛dot.triple\n- ⃜dot.quad\n- ıdotless.i\n- ȷdotless.j\n- ⋯dots.h.c\n- …dots.h\n- ⋮dots.v\n- ⋱dots.down\n- ⋰dots.up\n- ℓell\n- ⬭ellipse.stroked.h\n- ⬯ellipse.stroked.v\n- ⬬ellipse.filled.h\n- ⬮ellipse.filled.v\n- ∅emptyset\n- ⦳emptyset.arrow.r\n- ⦴emptyset.arrow.l\n- ⦱emptyset.bar\n- ⦲emptyset.circle\n- ⦰emptyset.rev\n- εepsilon\n- ϵepsilon.alt\n- =eq\n- ≛eq.star\n- ⊜eq.circle\n- ≕eq.colon\n- ≑eq.dots\n- ≒eq.dots.down\n- ≓eq.dots.up\n- ≝eq.def\n- ≜eq.delta\n- ≚eq.equi\n- ≙eq.est\n- ⋝eq.gt\n- ⋜eq.lt\n- ≞eq.m\n- ≠eq.not\n- ⋞eq.prec\n- ≟eq.quest\n- ﹦eq.small\n- ⋟eq.succ\n- ≡eq.triple\n- ≢eq.triple.not\n- ≣eq.quad\n- ≡equiv\n- ≢equiv.not\n- ⧮errorbar.square.stroked\n- ⧯errorbar.square.filled\n- ⧰errorbar.diamond.stroked\n- ⧱errorbar.diamond.filled\n- ⧲errorbar.circle.stroked\n- ⧳errorbar.circle.filled\n- ηeta\n- €euro\n- !excl\n- ‼excl.double\n- ¡excl.inv\n- ⁉excl.quest\n- ∃exists\n- ∄exists.not\n- ⧘fence.l\n- ⧚fence.l.double\n- ⧙fence.r\n- ⧛fence.r.double\n- ⦙fence.dotted\n- ♭flat\n- 𝄬flat.t\n- 𝄭flat.b\n- 𝄫flat.double\n- 𝄳flat.quarter\n- ⌊floor.l\n- ⌋floor.r\n- ❦floral\n- ☙floral.l\n- ❧floral.r\n- ∀forall\n- ⊩forces\n- ⊮forces.not\n- ₣franc\n- γgamma\n- גgimel\n- גgimmel\n- ∇gradient\n- `grave\n- >gt\n- ⧁gt.circle\n- ⋗gt.dot\n- ⪆gt.approx\n- ≫gt.double\n- ≥gt.eq\n- ⩾gt.eq.slant\n- ⋛gt.eq.lt\n- ≱gt.eq.not\n- ≧gt.equiv\n- ≷gt.lt\n- ≹gt.lt.not\n- ⪈gt.neq\n- ⪊gt.napprox\n- ≩gt.nequiv\n- ≯gt.not\n- ⋧gt.ntilde\n- ﹥gt.small\n- ≳gt.tilde\n- ≵gt.tilde.not\n- ⊳gt.tri\n- ⊵gt.tri.eq\n- ⋭gt.tri.eq.not\n- ⋫gt.tri.not\n- ⋙gt.triple\n- ⫸gt.triple.nested\n- ⇀harpoon.rt\n- ⥛harpoon.rt.bar\n- ⥓harpoon.rt.stop\n- ⇁harpoon.rb\n- ⥟harpoon.rb.bar\n- ⥗harpoon.rb.stop\n- ↼harpoon.lt\n- ⥚harpoon.lt.bar\n- ⥒harpoon.lt.stop\n- ↽harpoon.lb\n- ⥞harpoon.lb.bar\n- ⥖harpoon.lb.stop\n- ↿harpoon.tl\n- ⥠harpoon.tl.bar\n- ⥘harpoon.tl.stop\n- ↾harpoon.tr\n- ⥜harpoon.tr.bar\n- ⥔harpoon.tr.stop\n- ⇃harpoon.bl\n- ⥡harpoon.bl.bar\n- ⥙harpoon.bl.stop\n- ⇂harpoon.br\n- ⥝harpoon.br.bar\n- ⥕harpoon.br.stop\n- ⥎harpoon.lt.rt\n- ⥐harpoon.lb.rb\n- ⥋harpoon.lb.rt\n- ⥊harpoon.lt.rb\n- ⥑harpoon.tl.bl\n- ⥏harpoon.tr.br\n- ⥍harpoon.tl.br\n- ⥌harpoon.tr.bl\n- ⥤harpoons.rtrb\n- ⥥harpoons.blbr\n- ⥯harpoons.bltr\n- ⥧harpoons.lbrb\n- ⥢harpoons.ltlb\n- ⇋harpoons.ltrb\n- ⥦harpoons.ltrt\n- ⥩harpoons.rblb\n- ⇌harpoons.rtlb\n- ⥨harpoons.rtlt\n- ⥮harpoons.tlbr\n- ⥣harpoons.tltr\n- #hash\n- ^hat\n- ⬡hexa.stroked\n- ⬢hexa.filled\n- ⧖hourglass.stroked\n- ⧗hourglass.filled\n- ‐hyph\n- -hyph.minus\n- ‑hyph.nobreak\n- ‧hyph.point\n- shyhyph.soft\n- ⊷image\n- ∈in\n- ∉in.not\n- ∋in.rev\n- ∌in.rev.not\n- ∍in.rev.small\n- ∊in.small\n- ∞infinity\n- ⧞infinity.bar\n- ⧜infinity.incomplete\n- ⧝infinity.tie\n- ∫integral\n- ⨗integral.arrow.hook\n- ⨑integral.ccw\n- ∮integral.cont\n- ∳integral.cont.ccw\n- ∲integral.cont.cw\n- ∱integral.cw\n- ⨍integral.dash\n- ⨎integral.dash.double\n- ∬integral.double\n- ⨌integral.quad\n- ⨙integral.inter\n- ⨙integral.sect\n- ⨏integral.slash\n- ⨖integral.square\n- ∯integral.surf\n- ⨘integral.times\n- ∭integral.triple\n- ⨚integral.union\n- ∰integral.vol\n- ∩inter\n- ⩄inter.and\n- ⋂inter.big\n- ⩀inter.dot\n- ⋒inter.double\n- ⊓inter.sq\n- ⨅inter.sq.big\n- ⩎inter.sq.double\n- ⫴interleave\n- ⫼interleave.big\n- ⫵interleave.struck\n- ‽interrobang\n- ιiota\n- ⨝join\n- ⟖join.r\n- ⟕join.l\n- ⟗join.l.r\n- ϗkai\n- κkappa\n- ϰkappa.alt\n- λlambda\n- ∆laplace\n- ⪫lat\n- ⪭lat.eq\n- ₺lira\n- ◊lozenge.stroked\n- ⬫lozenge.stroked.small\n- ⬨lozenge.stroked.medium\n- ⧫lozenge.filled\n- ⬪lozenge.filled.small\n- ⬧lozenge.filled.medium\n- ‎lrm\n- <lt\n- ⧀lt.circle\n- ⋖lt.dot\n- ⪅lt.approx\n- ≪lt.double\n- ≤lt.eq\n- ⩽lt.eq.slant\n- ⋚lt.eq.gt\n- ≰lt.eq.not\n- ≦lt.equiv\n- ≶lt.gt\n- ≸lt.gt.not\n- ⪇lt.neq\n- ⪉lt.napprox\n- ≨lt.nequiv\n- ≮lt.not\n- ⋦lt.ntilde\n- ﹤lt.small\n- ≲lt.tilde\n- ≴lt.tilde.not\n- ⊲lt.tri\n- ⊴lt.tri.eq\n- ⋬lt.tri.eq.not\n- ⋪lt.tri.not\n- ⋘lt.triple\n- ⫷lt.triple.nested\n- ¯macron\n- ✠maltese\n- ↦mapsto\n- ⟼mapsto.long\n- −minus\n- ⊖minus.circle\n- ∸minus.dot\n- ∓minus.plus\n- ⊟minus.square\n- ≂minus.tilde\n- ⨺minus.triangle\n- ⧿miny\n- ⊧models\n- μmu\n- ⊸multimap\n- ⧟multimap.double\n- ∇nabla\n- ♮natural\n- 𝄮natural.t\n- 𝄯natural.b\n- ¬not\n- 🎜note.up\n- 🎝note.down\n- 𝅝note.whole\n- 𝅗𝅥note.half\n- 𝅘𝅥note.quarter\n- ♩note.quarter.alt\n- 𝅘𝅥𝅮note.eighth\n- ♪note.eighth.alt\n- ♫note.eighth.beamed\n- 𝅘𝅥𝅯note.sixteenth\n- ♬note.sixteenth.beamed\n- 𝆕note.grace\n- 𝆔note.grace.slash\n- ∅nothing\n- ⦳nothing.arrow.r\n- ⦴nothing.arrow.l\n- ⦱nothing.bar\n- ⦲nothing.circle\n- ⦰nothing.rev\n- νnu\n- №numero\n- ωomega\n- οomicron\n- ∞oo\n- ∨or\n- ⋁or.big\n- ⋎or.curly\n- ⟇or.dot\n- ⩔or.double\n- ⊶original\n- ∥parallel\n- ⫲parallel.struck\n- ⦷parallel.circle\n- ⋕parallel.eq\n- ⩨parallel.equiv\n- ∦parallel.not\n- ⧣parallel.slanted.eq\n- ⧤parallel.slanted.eq.tilde\n- ⧥parallel.slanted.equiv\n- ⫳parallel.tilde\n- ▱parallelogram.stroked\n- ▰parallelogram.filled\n- (paren.l\n- ⦅paren.l.double\n- )paren.r\n- ⦆paren.r.double\n- ⏜paren.t\n- ⏝paren.b\n- ∂partial\n- ⬠penta.stroked\n- ⬟penta.filled\n- %percent\n- ‰permille\n- ⟂perp\n- ⦹perp.circle\n- ₱peso\n- φphi\n- ϕphi.alt\n- πpi\n- ϖpi.alt\n- ¶pilcrow\n- ⁋pilcrow.rev\n- ℎplanck\n- ℏplanck.reduce\n- +plus\n- ⊕plus.circle\n- ⟴plus.circle.arrow\n- ⨁plus.circle.big\n- ∔plus.dot\n- ⧺plus.double\n- ±plus.minus\n- ﹢plus.small\n- ⊞plus.square\n- ⨹plus.triangle\n- ⧻plus.triple\n- £pound\n- ≺prec\n- ⪷prec.approx\n- ≼prec.curly.eq\n- ⋠prec.curly.eq.not\n- ⪻prec.double\n- ⪯prec.eq\n- ⪳prec.equiv\n- ⪹prec.napprox\n- ⪱prec.neq\n- ⪵prec.nequiv\n- ⊀prec.not\n- ⋨prec.ntilde\n- ≾prec.tilde\n- ′prime\n- ‵prime.rev\n- ″prime.double\n- ‶prime.double.rev\n- ‴prime.triple\n- ‷prime.triple.rev\n- ⁗prime.quad\n- ∏product\n- ∐product.co\n- ∝prop\n- ψpsi\n- ∎qed\n- ?quest\n- ⁇quest.double\n- ⁈quest.excl\n- ¿quest.inv\n- \"quote.double\n- 'quote.single\n- “quote.l.double\n- ‘quote.l.single\n- ”quote.r.double\n- ’quote.r.single\n- «quote.angle.l.double\n- ‹quote.angle.l.single\n- »quote.angle.r.double\n- ›quote.angle.r.single\n- ‟quote.high.double\n- ‛quote.high.single\n- „quote.low.double\n- ‚quote.low.single\n- ∶ratio\n- ▭rect.stroked.h\n- ▯rect.stroked.v\n- ▬rect.filled.h\n- ▮rect.filled.v\n- ※refmark\n- 𝄻rest.whole\n- 𝄺rest.multiple\n- 𝄩rest.multiple.measure\n- 𝄼rest.half\n- 𝄽rest.quarter\n- 𝄾rest.eighth\n- 𝄿rest.sixteenth\n- ρrho\n- ϱrho.alt\n- ‏rlm\n- ₽ruble\n- ₹rupee\n- ∩sect\n- ⩄sect.and\n- ⋂sect.big\n- ⩀sect.dot\n- ⋒sect.double\n- ⊓sect.sq\n- ⨅sect.sq.big\n- ⩎sect.sq.double\n- §section\n- ;semi\n- ⁏semi.rev\n- ♯sharp\n- 𝄰sharp.t\n- 𝄱sharp.b\n- 𝄪sharp.double\n- 𝄲sharp.quarter\n- ❲shell.l\n- ⟬shell.l.double\n- ❳shell.r\n- ⟭shell.r.double\n- ⏠shell.t\n- ⏡shell.b\n- שshin\n- σsigma\n- ςsigma.alt\n- /slash\n- ⫽slash.double\n- ⫻slash.triple\n- ⧸slash.big\n- ⨳smash\n- ⪪smt\n- ⪬smt.eq\n- ␣space\n- nbspspace.nobreak\n- space.nobreak.narrow\n- enspspace.en\n- emspspace.quad\n- ⅓emspspace.third\n- ¼emspspace.quarter\n- ⅙emspspace.sixth\n- mmspspace.med\n- numspspace.fig\n- puncspspace.punct\n- thinspspace.thin\n- hairspspace.hair\n- □square.stroked\n- ▫square.stroked.tiny\n- ◽square.stroked.small\n- ◻square.stroked.medium\n- ⬜square.stroked.big\n- ⬚square.stroked.dotted\n- ▢square.stroked.rounded\n- ■square.filled\n- ▪square.filled.tiny\n- ◾square.filled.small\n- ◼square.filled.medium\n- ⬛square.filled.big\n- ⋆star.op\n- ☆star.stroked\n- ★star.filled\n- ⊂subset\n- ⪽subset.dot\n- ⋐subset.double\n- ⊆subset.eq\n- ⊈subset.eq.not\n- ⊑subset.eq.sq\n- ⋢subset.eq.sq.not\n- ⊊subset.neq\n- ⊄subset.not\n- ⊏subset.sq\n- ⋤subset.sq.neq\n- ≻succ\n- ⪸succ.approx\n- ≽succ.curly.eq\n- ⋡succ.curly.eq.not\n- ⪼succ.double\n- ⪰succ.eq\n- ⪴succ.equiv\n- ⪺succ.napprox\n- ⪲succ.neq\n- ⪶succ.nequiv\n- ⊁succ.not\n- ⋩succ.ntilde\n- ≿succ.tilde\n- ♣suit.club.filled\n- ♧suit.club.stroked\n- ♦suit.diamond.filled\n- ♢suit.diamond.stroked\n- ♥suit.heart.filled\n- ♡suit.heart.stroked\n- ♠suit.spade.filled\n- ♤suit.spade.stroked\n- ∑sum\n- ⨋sum.integral\n- ⊃supset\n- ⪾supset.dot\n- ⋑supset.double\n- ⊇supset.eq\n- ⊉supset.eq.not\n- ⊒supset.eq.sq\n- ⋣supset.eq.sq.not\n- ⊋supset.neq\n- ⊅supset.not\n- ⊐supset.sq\n- ⋥supset.sq.neq\n- ⊢tack.r\n- ⊬tack.r.not\n- ⟝tack.r.long\n- ⊦tack.r.short\n- ⊨tack.r.double\n- ⊭tack.r.double.not\n- ⊣tack.l\n- ⟞tack.l.long\n- ⫞tack.l.short\n- ⫤tack.l.double\n- ⊥tack.t\n- ⟘tack.t.big\n- ⫫tack.t.double\n- ⫠tack.t.short\n- ⊤tack.b\n- ⟙tack.b.big\n- ⫪tack.b.double\n- ⫟tack.b.short\n- ⟛tack.l.r\n- τtau\n- ∴therefore\n- θtheta\n- ϑtheta.alt\n- ∼tilde.op\n- ~tilde.basic\n- ⩪tilde.dot\n- ≃tilde.eq\n- ≄tilde.eq.not\n- ⋍tilde.eq.rev\n- ≅tilde.equiv\n- ≇tilde.equiv.not\n- ≆tilde.nequiv\n- ≁tilde.not\n- ∽tilde.rev\n- ≌tilde.rev.equiv\n- ≋tilde.triple\n- ×times\n- ⨉times.big\n- ⊗times.circle\n- ⨂times.circle.big\n- ⋇times.div\n- ⋋times.three.l\n- ⋌times.three.r\n- ⋉times.l\n- ⋊times.r\n- ⊠times.square\n- ⨻times.triangle\n- ⧾tiny\n- ⊤top\n- ™trademark\n- ®trademark.registered\n- ℠trademark.service\n- △triangle.stroked.t\n- ▽triangle.stroked.b\n- ▷triangle.stroked.r\n- ◁triangle.stroked.l\n- ◺triangle.stroked.bl\n- ◿triangle.stroked.br\n- ◸triangle.stroked.tl\n- ◹triangle.stroked.tr\n- ▵triangle.stroked.small.t\n- ▿triangle.stroked.small.b\n- ▹triangle.stroked.small.r\n- ◃triangle.stroked.small.l\n- 🛆triangle.stroked.rounded\n- ⟁triangle.stroked.nested\n- ◬triangle.stroked.dot\n- ▲triangle.filled.t\n- ▼triangle.filled.b\n- ▶triangle.filled.r\n- ◀triangle.filled.l\n- ◣triangle.filled.bl\n- ◢triangle.filled.br\n- ◤triangle.filled.tl\n- ◥triangle.filled.tr\n- ▴triangle.filled.small.t\n- ▾triangle.filled.small.b\n- ▸triangle.filled.small.r\n- ◂triangle.filled.small.l\n- ∪union\n- ⊌union.arrow\n- ⋃union.big\n- ⊍union.dot\n- ⨃union.dot.big\n- ⋓union.double\n- ⩁union.minus\n- ⩅union.or\n- ⊎union.plus\n- ⨄union.plus.big\n- ⊔union.sq\n- ⨆union.sq.big\n- ⩏union.sq.double\n- υupsilon\n- ∖without\n- wjoinwj\n- ₩won\n- ≀wreath\n- ξxi\n- ⊕xor\n- ⨁xor.big\n- ¥yen\n- ζzeta\n- zwjzwj\n- zwnjzwnj\n- zwspzws", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/symbols/sym.typ", "filename": "sym.typ"}
{"text": "= Symbols\n\nThese two modules give names to symbols and emoji to make them easy to insert with a normal keyboard. Alternatively, you can also always directly enter Unicode symbols into your text and formulas. In addition to the symbols listed below, math mode defines `dif` and `Dif`. These are not normal symbol values because they also affect spacing and font style.\n\n== Definitions\n\n- #link(\"/docs/reference/symbols/sym/\")[sym]These two modules give names to symbols and emoji to make them easy to insert\n- #link(\"/docs/reference/symbols/emoji/\")[emoji]These two modules give names to symbols and emoji to make them easy to insert\n\n== Shorthands\n\nShorthands are concise sequences of characters that evoke specific glyphs. Shorthands and other ways to produce symbols can be used interchangeably. You can use different sets of shorthands in math and markup mode. Some shorthands, like `~` for a non-breaking space produce non-printing symbols, which are indicated with gray placeholder text.\n\nYou can deactivate a shorthand's interpretation by escaping any of its characters. If you escape a single character in a shorthand, the remaining unescaped characters may form a different shorthand.\n\n- –--\n- —---\n- …...\n- shy-?\n- −-\n- nbsp~\n\n- →->\n- ↦|->\n- ⇒=>\n- ⤇|=>\n- ⟹==>\n- ⟶-->\n- ⟿~~>\n- ⇝~>\n- ↣>->\n- ↠->>\n- ←<-\n- ⟸<==\n- ⟵<--\n- ⬳<~~\n- ⇜<~\n- ↢<-<\n- ↞<<-\n- ↔<->\n- ⇔<=>\n- ⟺<==>\n- ⟷<-->\n- ∗*\n- ‖||\n- ⟦[|\n- ⟧|]\n- ≔:=\n- ⩴::=\n- …...\n- ≕=:\n- ≠!=\n- ≫>>\n- ≥>=\n- ⋙>>>\n- ≪<<\n- ≤<=\n- ⋘<<<\n- −-\n- ∼~", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/symbols.typ", "filename": "symbols.typ"}
{"text": "= Syntax\n\nTypst is a markup language. This means that you can use simple syntax to accomplish common layout tasks. The lightweight markup syntax is complemented by set and show rules, which let you style your document easily and automatically. All this is backed by a tightly integrated scripting language with built-in and user-defined functions.\n\n== Modes\n\nTypst has three syntactical modes: Markup, math, and code. Markup mode is the default in a Typst document, math mode lets you write mathematical formulas, and code mode lets you use Typst's scripting features.\n\nYou can switch to a specific mode at any point by referring to the following table:\n\nOnce you have entered code mode with `#`, you don't need to use further hashes unless you switched back to markup or math mode in between.\n\n== Markup\n\nTypst provides built-in markup for the most common document elements. Most of the syntax elements are just shortcuts for a corresponding function. The table below lists all markup that is available and links to the best place to learn more about their syntax and usage.\n\n== Math mode\n\nMath mode is a special markup mode that is used to typeset mathematical formulas. It is entered by wrapping an equation in `$` characters. This works both in markup and code. The equation will be typeset into its own block if it starts and ends with at least one space (e.g. `$ x^2 $`). Inline math can be produced by omitting the whitespace (e.g. `$x^2$`). An overview over the syntax specific to math mode follows:\n\n== Code mode\n\nWithin code blocks and expressions, new expressions can start without a leading `#` character. Many syntactic elements are specific to expressions. Below is a table listing all syntax that is available in code mode:\n\n== Comments\n\nComments are ignored by Typst and will not be included in the output. This is useful to exclude old versions or to add annotations. To comment out a single line, start it with `//`:\n\n```typst\n// our data barely supports\n// this claim\n\nWe show with $p < 0.05$\nthat the difference is\nsignificant.\n```\n\nComments can also be wrapped between `/*` and `*/`. In this case, the comment can span over multiple lines:\n\n```typst\nOur study design is as follows:\n/* Somebody write this up:\n   - 1000 participants.\n   - 2x2 data design. */\n```\n\n== Escape sequences\n\nEscape sequences are used to insert special characters that are hard to type or otherwise have special meaning in Typst. To escape a character, precede it with a backslash. To insert any Unicode codepoint, you can write a hexadecimal escape sequence: `\\u{1f600}`. The same kind of escape sequences also work in #link(\"/docs/reference/foundations/str/\")[strings].\n\n```typst\nI got an ice cream for\n\\$1.50! \\u{1f600}\n```\n\n== Paths\n\nTypst has various features that require a file path to reference external resources such as images, Typst files, or data files. Paths are represented as #link(\"/docs/reference/foundations/str/\")[strings]. There are two kinds of paths: Relative and absolute.\n\n- A relative path searches from the location of the Typst file where the feature is invoked. It is the default: #image(\"images/logo.png\")\n- An absolute path searches from the root of the project. It starts with a leading /: #image(\"/assets/logo.png\")\n\nBy default, the project root is the parent directory of the main Typst file. For security reasons, you cannot read any files outside of the root directory.\n\nIf you want to set a specific folder as the root of your project, you can use the CLI's `--root` flag. Make sure that the main file is contained in the folder's subtree!\n\nIn the web app, the project itself is the root directory. You can always read all files within it, no matter which one is previewed (via the eye toggle next to each Typst file in the file panel).\n\nA package can only load files from its own directory. Within it, absolute paths point to the package root, rather than the project root. For this reason, it cannot directly load files from the project directory. If a package needs resources from the project (such as a logo image), you must pass the already loaded image, e.g. as a named parameter `logo: image(\"mylogo.svg\")`. Note that you can then still customize the image's appearance with a set rule within the package.\n\nIn the future, paths might become a #link(\"https://github.com/typst/typst/issues/971\")[distinct type from strings], so that they can retain knowledge of where they were constructed. This way, resources could be loaded from a different root.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/syntax.typ", "filename": "syntax.typ"}
{"text": "= highlight\n\nHighlights text with a background color.\n\n== Example\n\n```typst\nThis is #highlight[important].\n```\n\n== Parameters\n\n```\nhighlight(\n  fill: none | color | gradient | tiling,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  top-edge: length | str,\n  bottom-edge: length | str,\n  extent: length,\n  radius: relative | dictionary,\n  content: content\n) -> content\n```\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nThe color to highlight the text with.\n\nDefault: `rgb(\"#fffd11a1\")`\n\n*Example:*\n```typst\nThis is #highlight(\n  fill: blue\n)[highlighted with blue].\n```\n\n=== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nThe highlight's border color. See the #link(\"/docs/reference/visualize/rect/#parameters-stroke\")[rectangle's documentation] for more details.\n\nDefault: `(:)`\n\n*Example:*\n```typst\nThis is a #highlight(\n  stroke: fuchsia\n)[stroked highlighting].\n```\n\n=== `top-edge`: length | str (Settable)\n\nThe top end of the background rectangle.\n\nDefault: `\"ascender\"`\n\n*Example:*\n```typst\n#set highlight(top-edge: \"ascender\")\n#highlight[a] #highlight[aib]\n\n#set highlight(top-edge: \"x-height\")\n#highlight[a] #highlight[aib]\n```\n\n=== `bottom-edge`: length | str (Settable)\n\nThe bottom end of the background rectangle.\n\nDefault: `\"descender\"`\n\n*Example:*\n```typst\n#set highlight(bottom-edge: \"descender\")\n#highlight[a] #highlight[ap]\n\n#set highlight(bottom-edge: \"baseline\")\n#highlight[a] #highlight[ap]\n```\n\n=== `extent`: length (Settable)\n\nThe amount by which to extend the background to the sides beyond (or within if negative) the content.\n\nDefault: `0pt`\n\n*Example:*\n```typst\nA long #highlight(extent: 4pt)[background].\n```\n\n=== `radius`: relative | dictionary (Settable)\n\nHow much to round the highlight's corners. See the #link(\"/docs/reference/visualize/rect/#parameters-radius\")[rectangle's documentation] for more details.\n\nDefault: `(:)`\n\n*Example:*\n```typst\nListen #highlight(\n  radius: 5pt, extent: 2pt\n)[carefully], it will be on the test.\n```\n\n=== `body`: content (Required, Positional)\n\nThe content that should be highlighted.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/highlight.typ", "filename": "highlight.typ"}
{"text": "= linebreak\n\nInserts a line break.\n\nAdvances the paragraph to the next line. A single trailing line break at the end of a paragraph is ignored, but more than one creates additional empty lines.\n\n== Example\n\n```typst\n*Date:* 26.12.2022 \\\n*Topic:* Infrastructure Test \\\n*Severity:* High \\\n```\n\n== Syntax\n\nThis function also has dedicated syntax: To insert a line break, simply write a backslash followed by whitespace. This always creates an unjustified break.\n\n== Parameters\n\n```\nlinebreak(\n  justify: bool\n) -> content\n```\n\n=== `justify`: bool (Settable)\n\nWhether to justify the line before the break.\n\nThis is useful if you found a better line break opportunity in your justified text than Typst did.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set par(justify: true)\n#let jb = linebreak(justify: true)\n\nI have manually tuned the #jb\nline breaks in this paragraph #jb\nfor an _interesting_ result. #jb\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/linebreak.typ", "filename": "linebreak.typ"}
{"text": "= lorem\n\nCreates blind text.\n\nThis function yields a Latin-like _Lorem Ipsum_ blind text with the given number of words. The sequence of words generated by the function is always the same but randomly chosen. As usual for blind texts, it does not make any sense. Use it as a placeholder to try layouts.\n\n== Example\n\n```typst\n= Blind Text\n#lorem(30)\n\n= More Blind Text\n#lorem(15)\n```\n\n== Parameters\n\n```\nlorem(\n  int: int\n) -> str\n```\n\n=== `words`: int (Required, Positional)\n\nThe length of the blind text in words.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/lorem.typ", "filename": "lorem.typ"}
{"text": "= lower\n\nConverts a string or content to lowercase.\n\n== Example\n\n```typst\n#lower(\"ABC\") \\\n#lower[*My Text*] \\\n#lower[already low]\n```\n\n== Parameters\n\n```\nlower(\n  str: str | content\n) -> content\n```\n\n=== `text`: str | content (Required, Positional)\n\nThe text to convert to lowercase.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/lower.typ", "filename": "lower.typ"}
{"text": "= overline\n\nAdds a line over text.\n\n== Example\n\n```typst\n#overline[A line over text.]\n```\n\n== Parameters\n\n```\noverline(\n  stroke: auto | length | color | gradient | stroke | tiling | dictionary,\n  offset: auto | length,\n  extent: length,\n  evade: bool,\n  background: bool,\n  content: content\n) -> content\n```\n\n=== `stroke`: auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the line.\n\nIf set to `auto`, takes on the text's color and a thickness defined in the current font.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set text(fill: olive)\n#overline(\n  stroke: green.darken(20%),\n  offset: -12pt,\n  [The Forest Theme],\n)\n```\n\n=== `offset`: auto | length (Settable)\n\nThe position of the line relative to the baseline. Read from the font tables if `auto`.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#overline(offset: -1.2em)[\n  The Tale Of A Faraway Line II\n]\n```\n\n=== `extent`: length (Settable)\n\nThe amount by which to extend the line beyond (or within if negative) the content.\n\nDefault: `0pt`\n\n*Example:*\n```typst\n#set overline(extent: 4pt)\n#set underline(extent: 4pt)\n#overline(underline[Typography Today])\n```\n\n=== `evade`: bool (Settable)\n\nWhether the line skips sections in which it would collide with the glyphs.\n\nDefault: `true`\n\n*Example:*\n```typst\n#overline(\n  evade: false,\n  offset: -7.5pt,\n  stroke: 1pt,\n  extent: 3pt,\n  [Temple],\n)\n```\n\n=== `background`: bool (Settable)\n\nWhether the line is placed behind the content it overlines.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set overline(stroke: (thickness: 1em, paint: maroon, cap: \"round\"))\n#overline(background: true)[This is stylized.] \\\n#overline(background: false)[This is partially hidden.]\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to add a line over.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/overline.typ", "filename": "overline.typ"}
{"text": "= raw\n\nRaw text with optional syntax highlighting.\n\nDisplays the text verbatim and in a monospace font. This is typically used to embed computer code into your document.\n\n== Example\n\n```typst\nAdding `rbx` to `rcx` gives\nthe desired result.\n\nWhat is ```rust fn main()``` in Rust\nwould be ```c int main()``` in C.\n\n```rust\nfn main() {\n    println!(\"Hello World!\");\n}\n```\n\nThis has ``` `backticks` ``` in it\n(but the spaces are trimmed). And\n``` here``` the leading space is\nalso trimmed.\n```\n\nYou can also construct a #link(\"/docs/reference/text/raw/\")[raw] element programmatically from a string (and provide the language tag via the optional #link(\"/docs/reference/text/raw/#parameters-lang\")[lang] argument).\n\n```typst\n#raw(\"fn \" + \"main() {}\", lang: \"rust\")\n```\n\n== Syntax\n\nThis function also has dedicated syntax. You can enclose text in 1 or 3+ backticks (```) to make it raw. Two backticks produce empty raw text. This works both in markup and code.\n\nWhen you use three or more backticks, you can additionally specify a language tag for syntax highlighting directly after the opening backticks. Within raw blocks, everything (except for the language tag, if applicable) is rendered as is, in particular, there are no escape sequences.\n\nThe language tag is an identifier that directly follows the opening backticks only if there are three or more backticks. If your text starts with something that looks like an identifier, but no syntax highlighting is needed, start the text with a single space (which will be trimmed) or use the single backtick syntax. If your text should start or end with a backtick, put a space before or after it (it will be trimmed).\n\n== Parameters\n\n```\nraw(\n  str: str,\n  block: bool,\n  lang: none | str,\n  align: alignment,\n  syntaxes: str | bytes | array,\n  theme: none | auto | str | bytes,\n  tab-size: int\n) -> content\n```\n\n=== `text`: str (Required, Positional)\n\nThe raw text.\n\nYou can also use raw blocks creatively to create custom syntaxes for your automations.\n\n*Example:*\n```typst\n// Parse numbers in raw blocks with the\n// `mydsl` tag and sum them up.\n#show raw.where(lang: \"mydsl\"): it => {\n  let sum = 0\n  for part in it.text.split(\"+\") {\n    sum += int(part.trim())\n  }\n  sum\n}\n\n```mydsl\n1 + 2 + 3 + 4 + 5\n```\n```\n\n=== `block`: bool (Settable)\n\nWhether the raw text is displayed as a separate block.\n\nIn markup mode, using one-backtick notation makes this `false`. Using three-backtick notation makes it `true` if the enclosed content contains at least one line break.\n\nDefault: `false`\n\n*Example:*\n```typst\n// Display inline code in a small box\n// that retains the correct baseline.\n#show raw.where(block: false): box.with(\n  fill: luma(240),\n  inset: (x: 3pt, y: 0pt),\n  outset: (y: 3pt),\n  radius: 2pt,\n)\n\n// Display block code in a larger block\n// with more padding.\n#show raw.where(block: true): block.with(\n  fill: luma(240),\n  inset: 10pt,\n  radius: 4pt,\n)\n\nWith `rg`, you can search through your files quickly.\nThis example searches the current directory recursively\nfor the text `Hello World`:\n\n```bash\nrg \"Hello World\"\n```\n```\n\n=== `lang`: none | str (Settable)\n\nThe language to syntax-highlight in.\n\nApart from typical language tags known from Markdown, this supports the `\"typ\"`, `\"typc\"`, and `\"typm\"` tags for #link(\"/docs/reference/syntax/#markup\")[Typst markup], #link(\"/docs/reference/syntax/#code\")[Typst code], and #link(\"/docs/reference/syntax/#math\")[Typst math], respectively.\n\nDefault: `none`\n\n*Example:*\n```typst\n```typ\nThis is *Typst!*\n```\n\nThis is ```typ also *Typst*```, but inline!\n```\n\n=== `align`: alignment (Settable)\n\nThe horizontal alignment that each line in a raw block should have. This option is ignored if this is not a raw block (if specified `block: false` or single backticks were used in markup mode).\n\nBy default, this is set to `start`, meaning that raw text is aligned towards the start of the text direction inside the block by default, regardless of the current context's alignment (allowing you to center the raw block itself without centering the text inside it, for example).\n\nDefault: `start`\n\n*Example:*\n```typst\n#set raw(align: center)\n\n```typc\nlet f(x) = x\ncode = \"centered\"\n```\n```\n\n=== `syntaxes`: str | bytes | array (Settable)\n\nAdditional syntax definitions to load. The syntax definitions should be in the #link(\"https://www.sublimetext.com/docs/syntax.html\")[sublime-syntax file format].\n\nYou can pass any of the following values:\n\n- A path string to load a syntax file from the given path. For more details about paths, see the #link(\"/docs/reference/syntax/#paths\")[Paths section].\n- Raw bytes from which the syntax should be decoded.\n- An array where each item is one the above.\n\nDefault: `()`\n\n*Example:*\n```typst\n#set raw(syntaxes: \"SExpressions.sublime-syntax\")\n\n```sexp\n(defun factorial (x)\n  (if (zerop x)\n    ; with a comment\n    1\n    (* x (factorial (- x 1)))))\n```\n```\n\n=== `theme`: none | auto | str | bytes (Settable)\n\nThe theme to use for syntax highlighting. Themes should be in the #link(\"https://www.sublimetext.com/docs/color_schemes_tmtheme.html\")[tmTheme file format].\n\nYou can pass any of the following values:\n\n- `none`: Disables syntax highlighting.\n- `auto`: Highlights with Typst's default theme.\n- A path string to load a theme file from the given path. For more details about paths, see the #link(\"/docs/reference/syntax/#paths\")[Paths section].\n- Raw bytes from which the theme should be decoded.\n\nApplying a theme only affects the color of specifically highlighted text. It does not consider the theme's foreground and background properties, so that you retain control over the color of raw text. You can apply the foreground color yourself with the #link(\"/docs/reference/text/text/\")[text] function and the background with a #link(\"/docs/reference/layout/block/#parameters-fill\")[filled block]. You could also use the #link(\"/docs/reference/data-loading/xml/\")[xml] function to extract these properties from the theme.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set raw(theme: \"halcyon.tmTheme\")\n#show raw: it => block(\n  fill: rgb(\"#1d2433\"),\n  inset: 8pt,\n  radius: 5pt,\n  text(fill: rgb(\"#a2aabc\"), it)\n)\n\n```typ\n= Chapter 1\n#let hi = \"Hello World\"\n```\n```\n\n=== `tab-size`: int (Settable)\n\nThe size for a tab stop in spaces. A tab is replaced with enough spaces to align with the next multiple of the size.\n\nDefault: `2`\n\n*Example:*\n```typst\n#set raw(tab-size: 8)\n```tsv\nYear\tMonth\tDay\n2000\t2\t3\n2001\t2\t1\n2002\t3\t10\n```\n```\n\n== Definitions\n\n=== `line`\n\nA highlighted line of raw text.\n\nThis is a helper element that is synthesized by #link(\"/docs/reference/text/raw/\")[raw] elements.\n\nIt allows you to access various properties of the line, such as the line number, the raw non-highlighted text, the highlighted text, and whether it is the first or last line of the raw block.\n\n```\nline(\n  int: int,\n  int: int,\n  str: str,\n  content: content\n) -> content\n```\n\n==== `number`: int (Required, Positional)\n\nThe line number of the raw line inside of the raw block, starts at 1.\n\n==== `count`: int (Required, Positional)\n\nThe total number of lines in the raw block.\n\n==== `text`: str (Required, Positional)\n\nThe line of raw text.\n\n==== `body`: content (Required, Positional)\n\nThe highlighted raw text.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/raw.typ", "filename": "raw.typ"}
{"text": "= smallcaps\n\nDisplays text in small capitals.\n\n== Example\n\n```typst\nHello \\\n#smallcaps[Hello]\n```\n\n== Smallcaps fonts\n\nBy default, this uses the `smcp` and `c2sc` OpenType features on the font. Not all fonts support these features. Sometimes, smallcaps are part of a dedicated font. This is, for example, the case for the _Latin Modern_ family of fonts. In those cases, you can use a show-set rule to customize the appearance of the text in smallcaps:\n\nIn the future, this function will support synthesizing smallcaps from normal letters, but this is not yet implemented.\n\n== Smallcaps headings\n\nYou can use a #link(\"/docs/reference/styling/#show-rules\")[show rule] to apply smallcaps formatting to all your headings. In the example below, we also center-align our headings and disable the standard bold font.\n\n```typst\n#set par(justify: true)\n#set heading(numbering: \"I.\")\n\n#show heading: smallcaps\n#show heading: set align(center)\n#show heading: set text(\n  weight: \"regular\"\n)\n\n= Introduction\n#lorem(40)\n```\n\n== Parameters\n\n```\nsmallcaps(\n  all: bool,\n  content: content\n) -> content\n```\n\n=== `all`: bool (Settable)\n\nWhether to turn uppercase letters into small capitals as well.\n\nUnless overridden by a show rule, this enables the `c2sc` OpenType feature.\n\nDefault: `false`\n\n*Example:*\n```typst\n#smallcaps(all: true)[UNICEF] is an\nagency of #smallcaps(all: true)[UN].\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to display in small capitals.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/smallcaps.typ", "filename": "smallcaps.typ"}
{"text": "= smartquote\n\nA language-aware quote that reacts to its context.\n\nAutomatically turns into an appropriate opening or closing quote based on the active #link(\"/docs/reference/text/text/#parameters-lang\")[text language].\n\n== Example\n\n```typst\n\"This is in quotes.\"\n\n#set text(lang: \"de\")\n\"Das ist in Anführungszeichen.\"\n\n#set text(lang: \"fr\")\n\"C'est entre guillemets.\"\n```\n\n== Syntax\n\nThis function also has dedicated syntax: The normal quote characters (`'` and `\"`). Typst automatically makes your quotes smart.\n\n== Parameters\n\n```\nsmartquote(\n  double: bool,\n  enabled: bool,\n  alternative: bool,\n  quotes: auto | str | array | dictionary\n) -> content\n```\n\n=== `double`: bool (Settable)\n\nWhether this should be a double quote.\n\nDefault: `true`\n\n=== `enabled`: bool (Settable)\n\nWhether smart quotes are enabled.\n\nTo disable smartness for a single quote, you can also escape it with a backslash.\n\nDefault: `true`\n\n*Example:*\n```typst\n#set smartquote(enabled: false)\n\nThese are \"dumb\" quotes.\n```\n\n=== `alternative`: bool (Settable)\n\nWhether to use alternative quotes.\n\nDoes nothing for languages that don't have alternative quotes, or if explicit quotes were set.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set text(lang: \"de\")\n#set smartquote(alternative: true)\n\n\"Das ist in anderen Anführungszeichen.\"\n```\n\n=== `quotes`: auto | str | array | dictionary (Settable)\n\nThe quotes to use.\n\n- When set to `auto`, the appropriate single quotes for the #link(\"/docs/reference/text/text/#parameters-lang\")[text language] will be used. This is the default.\n- Custom quotes can be passed as a string, array, or dictionary of either string: a string consisting of two characters containing the opening and closing double quotes (characters here refer to Unicode grapheme clusters) array: an array containing the opening and closing double quotes dictionary: an array containing the double and single quotes, each specified as either auto, string, or array\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set text(lang: \"de\")\n'Das sind normale Anführungszeichen.'\n\n#set smartquote(quotes: \"()\")\n\"Das sind eigene Anführungszeichen.\"\n\n#set smartquote(quotes: (single: (\"[[\", \"]]\"),  double: auto))\n'Das sind eigene Anführungszeichen.'\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/smartquote.typ", "filename": "smartquote.typ"}
{"text": "= strike\n\nStrikes through text.\n\n== Example\n\n```typst\nThis is #strike[not] relevant.\n```\n\n== Parameters\n\n```\nstrike(\n  stroke: auto | length | color | gradient | stroke | tiling | dictionary,\n  offset: auto | length,\n  extent: length,\n  background: bool,\n  content: content\n) -> content\n```\n\n=== `stroke`: auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the line.\n\nIf set to `auto`, takes on the text's color and a thickness defined in the current font.\n\n_Note:_ Please don't use this for real redaction as you can still copy paste the text.\n\nDefault: `auto`\n\n*Example:*\n```typst\nThis is #strike(stroke: 1.5pt + red)[very stricken through]. \\\nThis is #strike(stroke: 10pt)[redacted].\n```\n\n=== `offset`: auto | length (Settable)\n\nThe position of the line relative to the baseline. Read from the font tables if `auto`.\n\nThis is useful if you are unhappy with the offset your font provides.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set text(font: \"Inria Serif\")\nThis is #strike(offset: auto)[low-ish]. \\\nThis is #strike(offset: -3.5pt)[on-top].\n```\n\n=== `extent`: length (Settable)\n\nThe amount by which to extend the line beyond (or within if negative) the content.\n\nDefault: `0pt`\n\n*Example:*\n```typst\nThis #strike(extent: -2pt)[skips] parts of the word.\nThis #strike(extent: 2pt)[extends] beyond the word.\n```\n\n=== `background`: bool (Settable)\n\nWhether the line is placed behind the content.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set strike(stroke: red)\n#strike(background: true)[This is behind.] \\\n#strike(background: false)[This is in front.]\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to strike through.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/strike.typ", "filename": "strike.typ"}
{"text": "= sub\n\nRenders text in subscript.\n\nThe text is rendered smaller and its baseline is lowered.\n\n== Example\n\n```typst\nRevenue#sub[yearly]\n```\n\n== Parameters\n\n```\nsub(\n  typographic: bool,\n  baseline: length,\n  size: length,\n  content: content\n) -> content\n```\n\n=== `typographic`: bool (Settable)\n\nWhether to prefer the dedicated subscript characters of the font.\n\nIf this is enabled, Typst first tries to transform the text to subscript codepoints. If that fails, it falls back to rendering lowered and shrunk normal letters.\n\nDefault: `true`\n\n*Example:*\n```typst\nN#sub(typographic: true)[1]\nN#sub(typographic: false)[1]\n```\n\n=== `baseline`: length (Settable)\n\nThe baseline shift for synthetic subscripts. Does not apply if `typographic` is true and the font has subscript codepoints for the given `body`.\n\nDefault: `0.2em`\n\n=== `size`: length (Settable)\n\nThe font size for synthetic subscripts. Does not apply if `typographic` is true and the font has subscript codepoints for the given `body`.\n\nDefault: `0.6em`\n\n=== `body`: content (Required, Positional)\n\nThe text to display in subscript.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/sub.typ", "filename": "sub.typ"}
{"text": "= super\n\nRenders text in superscript.\n\nThe text is rendered smaller and its baseline is raised.\n\n== Example\n\n```typst\n1#super[st] try!\n```\n\n== Parameters\n\n```\nsuper(\n  typographic: bool,\n  baseline: length,\n  size: length,\n  content: content\n) -> content\n```\n\n=== `typographic`: bool (Settable)\n\nWhether to prefer the dedicated superscript characters of the font.\n\nIf this is enabled, Typst first tries to transform the text to superscript codepoints. If that fails, it falls back to rendering raised and shrunk normal letters.\n\nDefault: `true`\n\n*Example:*\n```typst\nN#super(typographic: true)[1]\nN#super(typographic: false)[1]\n```\n\n=== `baseline`: length (Settable)\n\nThe baseline shift for synthetic superscripts. Does not apply if `typographic` is true and the font has superscript codepoints for the given `body`.\n\nDefault: `-0.5em`\n\n=== `size`: length (Settable)\n\nThe font size for synthetic superscripts. Does not apply if `typographic` is true and the font has superscript codepoints for the given `body`.\n\nDefault: `0.6em`\n\n=== `body`: content (Required, Positional)\n\nThe text to display in superscript.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/super.typ", "filename": "super.typ"}
{"text": "= text\n\nCustomizes the look and layout of text in a variety of ways.\n\nThis function is used frequently, both with set rules and directly. While the set rule is often the simpler choice, calling the `text` function directly can be useful when passing text as an argument to another function.\n\n== Example\n\n```typst\n#set text(18pt)\nWith a set rule.\n\n#emph(text(blue)[\n  With a function call.\n])\n```\n\n== Parameters\n\n```\ntext(\n  font: str | array | dictionary,\n  fallback: bool,\n  style: str,\n  weight: int | str,\n  stretch: ratio,\n  size: length,\n  fill: color | gradient | tiling,\n  stroke: none | length | color | gradient | stroke | tiling | dictionary,\n  tracking: length,\n  spacing: relative,\n  cjk-latin-spacing: none | auto,\n  baseline: length,\n  overhang: bool,\n  top-edge: length | str,\n  bottom-edge: length | str,\n  lang: str,\n  region: none | str,\n  script: auto | str,\n  dir: auto | direction,\n  hyphenate: auto | bool,\n  costs: dictionary,\n  kerning: bool,\n  alternates: bool,\n  stylistic-set: none | int | array,\n  ligatures: bool,\n  discretionary-ligatures: bool,\n  historical-ligatures: bool,\n  number-type: auto | str,\n  number-width: auto | str,\n  slashed-zero: bool,\n  fractions: bool,\n  features: array | dictionary,\n  content: content,\n  str: str\n) -> content\n```\n\n=== `font`: str | array | dictionary (Settable)\n\nA font family descriptor or priority list of font family descriptor.\n\nA font family descriptor can be a plain string representing the family name or a dictionary with the following keys:\n\n- `name` (required): The font family name.\n- `covers` (optional): Defines the Unicode codepoints for which the family shall be used. This can be: A predefined coverage set: \"latin-in-cjk\" covers all codepoints except for those which exist in Latin fonts, but should preferrably be taken from CJK fonts. A regular expression that defines exactly which codepoints shall be covered. Accepts only the subset of regular expressions which consist of exactly one dot, letter, or character class.\n\nWhen processing text, Typst tries all specified font families in order until it finds a font that has the necessary glyphs. In the example below, the font `Inria Serif` is preferred, but since it does not contain Arabic glyphs, the arabic text uses `Noto Sans Arabic` instead.\n\nThe collection of available fonts differs by platform:\n\n- In the web app, you can see the list of available fonts by clicking on the \"Ag\" button. You can provide additional fonts by uploading .ttf or .otf files into your project. They will be discovered automatically. The priority is: project fonts > server fonts.\n- Locally, Typst uses your installed system fonts or embedded fonts in the CLI, which are Libertinus Serif, New Computer Modern, New Computer Modern Math, and DejaVu Sans Mono. In addition, you can use the --font-path argument or TYPST_FONT_PATHS environment variable to add directories that should be scanned for fonts. The priority is: --font-paths > system fonts > embedded fonts. Run typst fonts to see the fonts that Typst has discovered on your system. Note that you can pass the --ignore-system-fonts parameter to the CLI to ensure Typst won't search for system fonts.\n\nDefault: `\"libertinus serif\"`\n\n*Example:*\n```typst\n#set text(font: \"PT Sans\")\nThis is sans-serif.\n\n#set text(font: (\n  \"Inria Serif\",\n  \"Noto Sans Arabic\",\n))\n\nThis is Latin. \\\nهذا عربي.\n\n// Change font only for numbers.\n#set text(font: (\n  (name: \"PT Sans\", covers: regex(\"[0-9]\")),\n  \"Libertinus Serif\"\n))\n\nThe number 123.\n\n// Mix Latin and CJK fonts.\n#set text(font: (\n  (name: \"Inria Serif\", covers: \"latin-in-cjk\"),\n  \"Noto Serif CJK SC\"\n))\n分别设置“中文”和English字体\n```\n\n=== `fallback`: bool (Settable)\n\nWhether to allow last resort font fallback when the primary font list contains no match. This lets Typst search through all available fonts for the most similar one that has the necessary glyphs.\n\n_Note:_ Currently, there are no warnings when fallback is disabled and no glyphs are found. Instead, your text shows up in the form of \"tofus\": Small boxes that indicate the lack of an appropriate glyph. In the future, you will be able to instruct Typst to issue warnings so you know something is up.\n\nDefault: `true`\n\n*Example:*\n```typst\n#set text(font: \"Inria Serif\")\nهذا عربي\n\n#set text(fallback: false)\nهذا عربي\n```\n\n=== `style`: str (Settable)\n\nThe desired font style.\n\nWhen an italic style is requested and only an oblique one is available, it is used. Similarly, the other way around, an italic style can stand in for an oblique one. When neither an italic nor an oblique style is available, Typst selects the normal style. Since most fonts are only available either in an italic or oblique style, the difference between italic and oblique style is rarely observable.\n\nIf you want to emphasize your text, you should do so using the #link(\"/docs/reference/model/emph/\")[emph] function instead. This makes it easy to adapt the style later if you change your mind about how to signify the emphasis.\n\nDefault: `\"normal\"`\n\n*Example:*\n```typst\n#text(font: \"Libertinus Serif\", style: \"italic\")[Italic]\n#text(font: \"DejaVu Sans\", style: \"oblique\")[Oblique]\n```\n\n=== `weight`: int | str (Settable)\n\nThe desired thickness of the font's glyphs. Accepts an integer between `100` and `900` or one of the predefined weight names. When the desired weight is not available, Typst selects the font from the family that is closest in weight.\n\nIf you want to strongly emphasize your text, you should do so using the #link(\"/docs/reference/model/strong/\")[strong] function instead. This makes it easy to adapt the style later if you change your mind about how to signify the strong emphasis.\n\nDefault: `\"regular\"`\n\n*Example:*\n```typst\n#set text(font: \"IBM Plex Sans\")\n\n#text(weight: \"light\")[Light] \\\n#text(weight: \"regular\")[Regular] \\\n#text(weight: \"medium\")[Medium] \\\n#text(weight: 500)[Medium] \\\n#text(weight: \"bold\")[Bold]\n```\n\n=== `stretch`: ratio (Settable)\n\nThe desired width of the glyphs. Accepts a ratio between `50%` and `200%`. When the desired width is not available, Typst selects the font from the family that is closest in stretch. This will only stretch the text if a condensed or expanded version of the font is available.\n\nIf you want to adjust the amount of space between characters instead of stretching the glyphs itself, use the #link(\"/docs/reference/text/text/#parameters-tracking\")[tracking] property instead.\n\nDefault: `100%`\n\n*Example:*\n```typst\n#text(stretch: 75%)[Condensed] \\\n#text(stretch: 100%)[Normal]\n```\n\n=== `size`: length (Settable)\n\nThe size of the glyphs. This value forms the basis of the `em` unit: `1em` is equivalent to the font size.\n\nYou can also give the font size itself in `em` units. Then, it is relative to the previous font size.\n\nDefault: `11pt`\n\n*Example:*\n```typst\n#set text(size: 20pt)\nvery #text(1.5em)[big] text\n```\n\n=== `fill`: color | gradient | tiling (Settable)\n\nThe glyph fill paint.\n\nDefault: `luma(0%)`\n\n*Example:*\n```typst\n#set text(fill: red)\nThis text is red.\n```\n\n=== `stroke`: none | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to stroke the text.\n\nDefault: `none`\n\n*Example:*\n```typst\n#text(stroke: 0.5pt + red)[Stroked]\n```\n\n=== `tracking`: length (Settable)\n\nThe amount of space that should be added between characters.\n\nDefault: `0pt`\n\n*Example:*\n```typst\n#set text(tracking: 1.5pt)\nDistant text.\n```\n\n=== `spacing`: relative (Settable)\n\nThe amount of space between words.\n\nCan be given as an absolute length, but also relative to the width of the space character in the font.\n\nIf you want to adjust the amount of space between characters rather than words, use the #link(\"/docs/reference/text/text/#parameters-tracking\")[tracking] property instead.\n\nDefault: `100% + 0pt`\n\n*Example:*\n```typst\n#set text(spacing: 200%)\nText with distant words.\n```\n\n=== `cjk-latin-spacing`: none | auto (Settable)\n\nWhether to automatically insert spacing between CJK and Latin characters.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set text(cjk-latin-spacing: auto)\n第4章介绍了基本的API。\n\n#set text(cjk-latin-spacing: none)\n第4章介绍了基本的API。\n```\n\n=== `baseline`: length (Settable)\n\nAn amount to shift the text baseline by.\n\nDefault: `0pt`\n\n*Example:*\n```typst\nA #text(baseline: 3pt)[lowered]\nword.\n```\n\n=== `overhang`: bool (Settable)\n\nWhether certain glyphs can hang over into the margin in justified text. This can make justification visually more pleasing.\n\nDefault: `true`\n\n*Example:*\n```typst\n#set par(justify: true)\nThis justified text has a hyphen in\nthe paragraph's first line. Hanging\nthe hyphen slightly into the margin\nresults in a clearer paragraph edge.\n\n#set text(overhang: false)\nThis justified text has a hyphen in\nthe paragraph's first line. Hanging\nthe hyphen slightly into the margin\nresults in a clearer paragraph edge.\n```\n\n=== `top-edge`: length | str (Settable)\n\nThe top end of the conceptual frame around the text used for layout and positioning. This affects the size of containers that hold text.\n\nDefault: `\"cap-height\"`\n\n*Example:*\n```typst\n#set rect(inset: 0pt)\n#set text(size: 20pt)\n\n#set text(top-edge: \"ascender\")\n#rect(fill: aqua)[Typst]\n\n#set text(top-edge: \"cap-height\")\n#rect(fill: aqua)[Typst]\n```\n\n=== `bottom-edge`: length | str (Settable)\n\nThe bottom end of the conceptual frame around the text used for layout and positioning. This affects the size of containers that hold text.\n\nDefault: `\"baseline\"`\n\n*Example:*\n```typst\n#set rect(inset: 0pt)\n#set text(size: 20pt)\n\n#set text(bottom-edge: \"baseline\")\n#rect(fill: aqua)[Typst]\n\n#set text(bottom-edge: \"descender\")\n#rect(fill: aqua)[Typst]\n```\n\n=== `lang`: str (Settable)\n\nAn #link(\"https://en.wikipedia.org/wiki/ISO_639\")[ISO 639-1/2/3 language code.]\n\nSetting the correct language affects various parts of Typst:\n\n- The text processing pipeline can make more informed choices.\n- Hyphenation will use the correct patterns for the language.\n- #link(\"/docs/reference/text/smartquote/\")[Smart quotes] turns into the correct quotes for the language.\n- And all other things which are language-aware.\n\nDefault: `\"en\"`\n\n*Example:*\n```typst\n#set text(lang: \"de\")\n#outline()\n\n= Einleitung\nIn diesem Dokument, ...\n```\n\n=== `region`: none | str (Settable)\n\nAn #link(\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\")[ISO 3166-1 alpha-2 region code.]\n\nThis lets the text processing pipeline make more informed choices.\n\nDefault: `none`\n\n=== `script`: auto | str (Settable)\n\nThe OpenType writing script.\n\nThe combination of `lang` and `script` determine how font features, such as glyph substitution, are implemented. Frequently the value is a modified (all-lowercase) ISO 15924 script identifier, and the `math` writing script is used for features appropriate for mathematical symbols.\n\nWhen set to `auto`, the default and recommended setting, an appropriate script is chosen for each block of characters sharing a common Unicode script property.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set text(\n  font: \"Libertinus Serif\",\n  size: 20pt,\n)\n\n#let scedilla = [Ş]\n#scedilla // S with a cedilla\n\n#set text(lang: \"ro\", script: \"latn\")\n#scedilla // S with a subscript comma\n\n#set text(lang: \"ro\", script: \"grek\")\n#scedilla // S with a cedilla\n```\n\n=== `dir`: auto | direction (Settable)\n\nThe dominant direction for text and inline objects. Possible values are:\n\n- `auto`: Automatically infer the direction from the `lang` property.\n- `ltr`: Layout text from left to right.\n- `rtl`: Layout text from right to left.\n\nWhen writing in right-to-left scripts like Arabic or Hebrew, you should set the #link(\"/docs/reference/text/text/#parameters-lang\")[text language] or direction. While individual runs of text are automatically layouted in the correct direction, setting the dominant direction gives the bidirectional reordering algorithm the necessary information to correctly place punctuation and inline objects. Furthermore, setting the direction affects the alignment values `start` and `end`, which are equivalent to `left` and `right` in `ltr` text and the other way around in `rtl` text.\n\nIf you set this to `rtl` and experience bugs or in some way bad looking output, please get in touch with us through the #link(\"https://forum.typst.app/\")[Forum], #link(\"https://discord.gg/2uDybryKPe\")[Discord server], or our #link(\"https://typst.app/contact\")[contact form].\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set text(dir: rtl)\nهذا عربي.\n```\n\n=== `hyphenate`: auto | bool (Settable)\n\nWhether to hyphenate text to improve line breaking. When `auto`, text will be hyphenated if and only if justification is enabled.\n\nSetting the #link(\"/docs/reference/text/text/#parameters-lang\")[text language] ensures that the correct hyphenation patterns are used.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set page(width: 200pt)\n\n#set par(justify: true)\nThis text illustrates how\nenabling hyphenation can\nimprove justification.\n\n#set text(hyphenate: false)\nThis text illustrates how\nenabling hyphenation can\nimprove justification.\n```\n\n=== `costs`: dictionary (Settable)\n\nThe \"cost\" of various choices when laying out text. A higher cost means the layout engine will make the choice less often. Costs are specified as a ratio of the default cost, so `50%` will make text layout twice as eager to make a given choice, while `200%` will make it half as eager.\n\nCurrently, the following costs can be customized:\n\n- `hyphenation`: splitting a word across multiple lines\n- `runt`: ending a paragraph with a line with a single word\n- `widow`: leaving a single line of paragraph on the next page\n- `orphan`: leaving single line of paragraph on the previous page\n\nHyphenation is generally avoided by placing the whole word on the next line, so a higher hyphenation cost can result in awkward justification spacing. Note: Hyphenation costs will only be applied when the #link(\"/docs/reference/model/par/#parameters-linebreaks\")[linebreaks] are set to \"optimized\". (For example by default implied by #link(\"/docs/reference/model/par/#parameters-justify\")[justify].)\n\nRunts are avoided by placing more or fewer words on previous lines, so a higher runt cost can result in more awkward in justification spacing.\n\nText layout prevents widows and orphans by default because they are generally discouraged by style guides. However, in some contexts they are allowed because the prevention method, which moves a line to the next page, can result in an uneven number of lines between pages. The `widow` and `orphan` costs allow disabling these modifications. (Currently, `0%` allows widows/orphans; anything else, including the default of `100%`, prevents them. More nuanced cost specification for these modifications is planned for the future.)\n\nDefault: `( hyphenation: 100%, runt: 100%, widow: 100%, orphan: 100%, )`\n\n*Example:*\n```typst\n#set text(hyphenate: true, size: 11.4pt)\n#set par(justify: true)\n\n#lorem(10)\n\n// Set hyphenation to ten times the normal cost.\n#set text(costs: (hyphenation: 1000%))\n\n#lorem(10)\n```\n\n=== `kerning`: bool (Settable)\n\nWhether to apply kerning.\n\nWhen enabled, specific letter pairings move closer together or further apart for a more visually pleasing result. The example below demonstrates how decreasing the gap between the \"T\" and \"o\" results in a more natural look. Setting this to `false` disables kerning by turning off the OpenType `kern` font feature.\n\nDefault: `true`\n\n*Example:*\n```typst\n#set text(size: 25pt)\nTotally\n\n#set text(kerning: false)\nTotally\n```\n\n=== `alternates`: bool (Settable)\n\nWhether to apply stylistic alternates.\n\nSometimes fonts contain alternative glyphs for the same codepoint. Setting this to `true` switches to these by enabling the OpenType `salt` font feature.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set text(\n  font: \"IBM Plex Sans\",\n  size: 20pt,\n)\n\n0, a, g, ß\n\n#set text(alternates: true)\n0, a, g, ß\n```\n\n=== `stylistic-set`: none | int | array (Settable)\n\nWhich stylistic sets to apply. Font designers can categorize alternative glyphs forms into stylistic sets. As this value is highly font-specific, you need to consult your font to know which sets are available.\n\nThis can be set to an integer or an array of integers, all of which must be between `1` and `20`, enabling the corresponding OpenType feature(s) from `ss01` to `ss20`. Setting this to `none` will disable all stylistic sets.\n\nDefault: `()`\n\n*Example:*\n```typst\n#set text(font: \"IBM Plex Serif\")\nß vs #text(stylistic-set: 5)[ß] \\\n10 years ago vs #text(stylistic-set: (1, 2, 3))[10 years ago]\n```\n\n=== `ligatures`: bool (Settable)\n\nWhether standard ligatures are active.\n\nCertain letter combinations like \"fi\" are often displayed as a single merged glyph called a _ligature._ Setting this to `false` disables these ligatures by turning off the OpenType `liga` and `clig` font features.\n\nDefault: `true`\n\n*Example:*\n```typst\n#set text(size: 20pt)\nA fine ligature.\n\n#set text(ligatures: false)\nA fine ligature.\n```\n\n=== `discretionary-ligatures`: bool (Settable)\n\nWhether ligatures that should be used sparingly are active. Setting this to `true` enables the OpenType `dlig` font feature.\n\nDefault: `false`\n\n=== `historical-ligatures`: bool (Settable)\n\nWhether historical ligatures are active. Setting this to `true` enables the OpenType `hlig` font feature.\n\nDefault: `false`\n\n=== `number-type`: auto | str (Settable)\n\nWhich kind of numbers / figures to select. When set to `auto`, the default numbers for the font are used.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set text(font: \"Noto Sans\", 20pt)\n#set text(number-type: \"lining\")\nNumber 9.\n\n#set text(number-type: \"old-style\")\nNumber 9.\n```\n\n=== `number-width`: auto | str (Settable)\n\nThe width of numbers / figures. When set to `auto`, the default numbers for the font are used.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#set text(font: \"Noto Sans\", 20pt)\n#set text(number-width: \"proportional\")\nA 12 B 34. \\\nA 56 B 78.\n\n#set text(number-width: \"tabular\")\nA 12 B 34. \\\nA 56 B 78.\n```\n\n=== `slashed-zero`: bool (Settable)\n\nWhether to have a slash through the zero glyph. Setting this to `true` enables the OpenType `zero` font feature.\n\nDefault: `false`\n\n*Example:*\n```typst\n0, #text(slashed-zero: true)[0]\n```\n\n=== `fractions`: bool (Settable)\n\nWhether to turn numbers into fractions. Setting this to `true` enables the OpenType `frac` font feature.\n\nIt is not advisable to enable this property globally as it will mess with all appearances of numbers after a slash (e.g., in URLs). Instead, enable it locally when you want a fraction.\n\nDefault: `false`\n\n*Example:*\n```typst\n1/2 \\\n#text(fractions: true)[1/2]\n```\n\n=== `features`: array | dictionary (Settable)\n\nRaw OpenType features to apply.\n\n- If given an array of strings, sets the features identified by the strings to `1`.\n- If given a dictionary mapping to numbers, sets the features identified by the keys to the values.\n\nDefault: `(:)`\n\n*Example:*\n```typst\n// Enable the `frac` feature manually.\n#set text(features: (\"frac\",))\n1/2\n```\n\n=== `body`: content (Required, Positional)\n\nContent in which all text is styled according to the other arguments.\n\n=== `text`: str (Required, Positional)\n\nThe text.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/text.typ", "filename": "text.typ"}
{"text": "= underline\n\nUnderlines text.\n\n== Example\n\n```typst\nThis is #underline[important].\n```\n\n== Parameters\n\n```\nunderline(\n  stroke: auto | length | color | gradient | stroke | tiling | dictionary,\n  offset: auto | length,\n  extent: length,\n  evade: bool,\n  background: bool,\n  content: content\n) -> content\n```\n\n=== `stroke`: auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the line.\n\nIf set to `auto`, takes on the text's color and a thickness defined in the current font.\n\nDefault: `auto`\n\n*Example:*\n```typst\nTake #underline(\n  stroke: 1.5pt + red,\n  offset: 2pt,\n  [care],\n)\n```\n\n=== `offset`: auto | length (Settable)\n\nThe position of the line relative to the baseline, read from the font tables if `auto`.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#underline(offset: 5pt)[\n  The Tale Of A Faraway Line I\n]\n```\n\n=== `extent`: length (Settable)\n\nThe amount by which to extend the line beyond (or within if negative) the content.\n\nDefault: `0pt`\n\n*Example:*\n```typst\n#align(center,\n  underline(extent: 2pt)[Chapter 1]\n)\n```\n\n=== `evade`: bool (Settable)\n\nWhether the line skips sections in which it would collide with the glyphs.\n\nDefault: `true`\n\n*Example:*\n```typst\nThis #underline(evade: true)[is great].\nThis #underline(evade: false)[is less great].\n```\n\n=== `background`: bool (Settable)\n\nWhether the line is placed behind the content it underlines.\n\nDefault: `false`\n\n*Example:*\n```typst\n#set underline(stroke: (thickness: 1em, paint: maroon, cap: \"round\"))\n#underline(background: true)[This is stylized.] \\\n#underline(background: false)[This is partially hidden.]\n```\n\n=== `body`: content (Required, Positional)\n\nThe content to underline.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/underline.typ", "filename": "underline.typ"}
{"text": "= upper\n\nConverts a string or content to uppercase.\n\n== Example\n\n```typst\n#upper(\"abc\") \\\n#upper[*my text*] \\\n#upper[ALREADY HIGH]\n```\n\n== Parameters\n\n```\nupper(\n  str: str | content\n) -> content\n```\n\n=== `text`: str | content (Required, Positional)\n\nThe text to convert to uppercase.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text/upper.typ", "filename": "upper.typ"}
{"text": "= Text\n\nText styling.\n\nThe #link(\"/docs/reference/text/text/\")[text function] is of particular interest.\n\n== Definitions\n\n- #link(\"/docs/reference/text/highlight/\")[highlight]Highlights text with a background color.\n- #link(\"/docs/reference/text/linebreak/\")[linebreak]Inserts a line break.\n- #link(\"/docs/reference/text/lorem/\")[lorem]Creates blind text.\n- #link(\"/docs/reference/text/lower/\")[lower]Converts a string or content to lowercase.\n- #link(\"/docs/reference/text/overline/\")[overline]Adds a line over text.\n- #link(\"/docs/reference/text/raw/\")[raw]Raw text with optional syntax highlighting.\n- #link(\"/docs/reference/text/smallcaps/\")[smallcaps]Displays text in small capitals.\n- #link(\"/docs/reference/text/smartquote/\")[smartquote]A language-aware quote that reacts to its context.\n- #link(\"/docs/reference/text/strike/\")[strike]Strikes through text.\n- #link(\"/docs/reference/text/sub/\")[sub]Renders text in subscript.\n- #link(\"/docs/reference/text/super/\")[super]Renders text in superscript.\n- #link(\"/docs/reference/text/text/\")[text]Customizes the look and layout of text in a variety of ways.\n- #link(\"/docs/reference/text/underline/\")[underline]Underlines text.\n- #link(\"/docs/reference/text/upper/\")[upper]Converts a string or content to uppercase.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/text.typ", "filename": "text.typ"}
{"text": "= circle\n\nA circle with optional content.\n\n== Example\n\n```typst\n// Without content.\n#circle(radius: 25pt)\n\n// With content.\n#circle[\n  #set align(center + horizon)\n  Automatically \\\n  sized to fit.\n]\n```\n\n== Parameters\n\n```\ncircle(\n  radius: length,\n  width: auto | relative,\n  height: auto | relative | fraction,\n  fill: none | color | gradient | tiling,\n  stroke: none | auto | length | color | gradient | stroke | tiling | dictionary,\n  inset: relative | dictionary,\n  outset: relative | dictionary,\n  body: none | content\n) -> content\n```\n\n=== `radius`: length (Settable)\n\nThe circle's radius. This is mutually exclusive with `width` and `height`.\n\nDefault: `0pt`\n\n=== `width`: auto | relative (Settable)\n\nThe circle's width. This is mutually exclusive with `radius` and `height`.\n\nIn contrast to `radius`, this can be relative to the parent container's width.\n\nDefault: `auto`\n\n=== `height`: auto | relative | fraction (Settable)\n\nThe circle's height. This is mutually exclusive with `radius` and `width`.\n\nIn contrast to `radius`, this can be relative to the parent container's height.\n\nDefault: `auto`\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nHow to fill the circle. See the #link(\"/docs/reference/visualize/rect/#parameters-fill\")[rectangle's documentation] for more details.\n\nDefault: `none`\n\n=== `stroke`: none | auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to stroke the circle. See the #link(\"/docs/reference/visualize/rect/#parameters-stroke\")[rectangle's documentation] for more details.\n\nDefault: `auto`\n\n=== `inset`: relative | dictionary (Settable)\n\nHow much to pad the circle's content. See the #link(\"/docs/reference/layout/box/#parameters-inset\")[box's documentation] for more details.\n\nDefault: `0% + 5pt`\n\n=== `outset`: relative | dictionary (Settable)\n\nHow much to expand the circle's size without affecting the layout. See the #link(\"/docs/reference/layout/box/#parameters-outset\")[box's documentation] for more details.\n\nDefault: `(:)`\n\n=== `body`: none | content (Positional, Settable)\n\nThe content to place into the circle. The circle expands to fit this content, keeping the 1-1 aspect ratio.\n\nDefault: `none`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/circle.typ", "filename": "circle.typ"}
{"text": "= color\n\nA color in a specific color space.\n\nTypst supports:\n\n- sRGB through the #link(\"/docs/reference/visualize/color/#definitions-rgb\")[rgb function]\n- Device CMYK through #link(\"/docs/reference/visualize/color/#definitions-cmyk\")[cmyk function]\n- D65 Gray through the #link(\"/docs/reference/visualize/color/#definitions-luma\")[luma function]\n- Oklab through the #link(\"/docs/reference/visualize/color/#definitions-oklab\")[oklab function]\n- Oklch through the #link(\"/docs/reference/visualize/color/#definitions-oklch\")[oklch function]\n- Linear RGB through the #link(\"/docs/reference/visualize/color/#definitions-linear-rgb\")[color.linear-rgb function]\n- HSL through the #link(\"/docs/reference/visualize/color/#definitions-hsl\")[color.hsl function]\n- HSV through the #link(\"/docs/reference/visualize/color/#definitions-hsv\")[color.hsv function]\n\n== Example\n\n```typst\n#rect(fill: aqua)\n```\n\n== Predefined colors\n\nTypst defines the following built-in colors:\n\nThe predefined colors and the most important color constructors are available globally and also in the color type's scope, so you can write either `color.red` or just `red`.\n\n== Predefined color maps\n\nTypst also includes a number of preset color maps that can be used for #link(\"/docs/reference/visualize/gradient/#definitions-linear\")[gradients]. These are simply arrays of colors defined in the module `color.map`.\n\n```typst\n#circle(fill: gradient.linear(..color.map.crest))\n```\n\nSome popular presets are not included because they are not available under a free licence. Others, like #link(\"https://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/\")[Jet], are not included because they are not color blind friendly. Feel free to use or create a package with other presets that are useful to you!\n\n== Definitions\n\n=== `luma`\n\nCreate a grayscale color.\n\nA grayscale color is represented internally by a single `lightness` component.\n\nThese components are also available using the #link(\"/docs/reference/visualize/color/#definitions-components\")[components] method.\n\n```\nluma(\n  int: int | ratio,\n  ratio: ratio,\n  color: color\n) -> color\n```\n\n```typst\n#for x in range(250, step: 50) {\n  box(square(fill: luma(x)))\n}\n```\n\n==== `lightness`: int | ratio (Required, Positional)\n\nThe lightness component.\n\n==== `alpha`: ratio (Required, Positional)\n\nThe alpha component.\n\n==== `color`: color (Required, Positional)\n\nAlternatively: The color to convert to grayscale.\n\nIf this is given, the `lightness` should not be given.\n\n=== `oklab`\n\nCreate an #link(\"https://bottosson.github.io/posts/oklab/\")[Oklab] color.\n\nThis color space is well suited for the following use cases:\n\n- Color manipulation such as saturating while keeping perceived hue\n- Creating grayscale images with uniform perceived lightness\n- Creating smooth and uniform color transition and gradients\n\nA linear Oklab color is represented internally by an array of four components:\n\n- lightness (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- a (#link(\"/docs/reference/foundations/float/\")[float] or #link(\"/docs/reference/layout/ratio/\")[ratio]. Ratios are relative to `0.4`; meaning `50%` is equal to `0.2`)\n- b (#link(\"/docs/reference/foundations/float/\")[float] or #link(\"/docs/reference/layout/ratio/\")[ratio]. Ratios are relative to `0.4`; meaning `50%` is equal to `0.2`)\n- alpha (#link(\"/docs/reference/layout/ratio/\")[ratio])\n\nThese components are also available using the #link(\"/docs/reference/visualize/color/#definitions-components\")[components] method.\n\n```\noklab(\n  ratio: ratio,\n  float: float | ratio,\n  float: float | ratio,\n  ratio: ratio,\n  color: color\n) -> color\n```\n\n```typst\n#square(\n  fill: oklab(27%, 20%, -3%, 50%)\n)\n```\n\n==== `lightness`: ratio (Required, Positional)\n\nThe lightness component.\n\n==== `a`: float | ratio (Required, Positional)\n\nThe a (\"green/red\") component.\n\n==== `b`: float | ratio (Required, Positional)\n\nThe b (\"blue/yellow\") component.\n\n==== `alpha`: ratio (Required, Positional)\n\nThe alpha component.\n\n==== `color`: color (Required, Positional)\n\nAlternatively: The color to convert to Oklab.\n\nIf this is given, the individual components should not be given.\n\n=== `oklch`\n\nCreate an #link(\"https://bottosson.github.io/posts/oklab/\")[Oklch] color.\n\nThis color space is well suited for the following use cases:\n\n- Color manipulation involving lightness, chroma, and hue\n- Creating grayscale images with uniform perceived lightness\n- Creating smooth and uniform color transition and gradients\n\nA linear Oklch color is represented internally by an array of four components:\n\n- lightness (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- chroma (#link(\"/docs/reference/foundations/float/\")[float] or #link(\"/docs/reference/layout/ratio/\")[ratio]. Ratios are relative to `0.4`; meaning `50%` is equal to `0.2`)\n- hue (#link(\"/docs/reference/layout/angle/\")[angle])\n- alpha (#link(\"/docs/reference/layout/ratio/\")[ratio])\n\nThese components are also available using the #link(\"/docs/reference/visualize/color/#definitions-components\")[components] method.\n\n```\noklch(\n  ratio: ratio,\n  float: float | ratio,\n  angle: angle,\n  ratio: ratio,\n  color: color\n) -> color\n```\n\n```typst\n#square(\n  fill: oklch(40%, 0.2, 160deg, 50%)\n)\n```\n\n==== `lightness`: ratio (Required, Positional)\n\nThe lightness component.\n\n==== `chroma`: float | ratio (Required, Positional)\n\nThe chroma component.\n\n==== `hue`: angle (Required, Positional)\n\nThe hue component.\n\n==== `alpha`: ratio (Required, Positional)\n\nThe alpha component.\n\n==== `color`: color (Required, Positional)\n\nAlternatively: The color to convert to Oklch.\n\nIf this is given, the individual components should not be given.\n\n=== `linear-rgb`\n\nCreate an RGB(A) color with linear luma.\n\nThis color space is similar to sRGB, but with the distinction that the color component are not gamma corrected. This makes it easier to perform color operations such as blending and interpolation. Although, you should prefer to use the #link(\"/docs/reference/visualize/color/#definitions-oklab\")[oklab function] for these.\n\nA linear RGB(A) color is represented internally by an array of four components:\n\n- red (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- green (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- blue (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- alpha (#link(\"/docs/reference/layout/ratio/\")[ratio])\n\nThese components are also available using the #link(\"/docs/reference/visualize/color/#definitions-components\")[components] method.\n\n```\nlinear-rgb(\n  int: int | ratio,\n  int: int | ratio,\n  int: int | ratio,\n  int: int | ratio,\n  color: color\n) -> color\n```\n\n```typst\n#square(fill: color.linear-rgb(\n  30%, 50%, 10%,\n))\n```\n\n==== `red`: int | ratio (Required, Positional)\n\nThe red component.\n\n==== `green`: int | ratio (Required, Positional)\n\nThe green component.\n\n==== `blue`: int | ratio (Required, Positional)\n\nThe blue component.\n\n==== `alpha`: int | ratio (Required, Positional)\n\nThe alpha component.\n\n==== `color`: color (Required, Positional)\n\nAlternatively: The color to convert to linear RGB(A).\n\nIf this is given, the individual components should not be given.\n\n=== `rgb`\n\nCreate an RGB(A) color.\n\nThe color is specified in the sRGB color space.\n\nAn RGB(A) color is represented internally by an array of four components:\n\n- red (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- green (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- blue (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- alpha (#link(\"/docs/reference/layout/ratio/\")[ratio])\n\nThese components are also available using the #link(\"/docs/reference/visualize/color/#definitions-components\")[components] method.\n\n```\nrgb(\n  int: int | ratio,\n  int: int | ratio,\n  int: int | ratio,\n  int: int | ratio,\n  str: str,\n  color: color\n) -> color\n```\n\n```typst\n#square(fill: rgb(\"#b1f2eb\"))\n#square(fill: rgb(87, 127, 230))\n#square(fill: rgb(25%, 13%, 65%))\n```\n\n==== `red`: int | ratio (Required, Positional)\n\nThe red component.\n\n==== `green`: int | ratio (Required, Positional)\n\nThe green component.\n\n==== `blue`: int | ratio (Required, Positional)\n\nThe blue component.\n\n==== `alpha`: int | ratio (Required, Positional)\n\nThe alpha component.\n\n==== `hex`: str (Required, Positional)\n\nAlternatively: The color in hexadecimal notation.\n\nAccepts three, four, six or eight hexadecimal digits and optionally a leading hash.\n\nIf this is given, the individual components should not be given.\n\n*Example:*\n```typst\n#text(16pt, rgb(\"#239dad\"))[\n  *Typst*\n]\n```\n\n==== `color`: color (Required, Positional)\n\nAlternatively: The color to convert to RGB(a).\n\nIf this is given, the individual components should not be given.\n\n=== `cmyk`\n\nCreate a CMYK color.\n\nThis is useful if you want to target a specific printer. The conversion to RGB for display preview might differ from how your printer reproduces the color.\n\nA CMYK color is represented internally by an array of four components:\n\n- cyan (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- magenta (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- yellow (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- key (#link(\"/docs/reference/layout/ratio/\")[ratio])\n\nThese components are also available using the #link(\"/docs/reference/visualize/color/#definitions-components\")[components] method.\n\nNote that CMYK colors are not currently supported when PDF/A output is enabled.\n\n```\ncmyk(\n  ratio: ratio,\n  ratio: ratio,\n  ratio: ratio,\n  ratio: ratio,\n  color: color\n) -> color\n```\n\n```typst\n#square(\n  fill: cmyk(27%, 0%, 3%, 5%)\n)\n```\n\n==== `cyan`: ratio (Required, Positional)\n\nThe cyan component.\n\n==== `magenta`: ratio (Required, Positional)\n\nThe magenta component.\n\n==== `yellow`: ratio (Required, Positional)\n\nThe yellow component.\n\n==== `key`: ratio (Required, Positional)\n\nThe key component.\n\n==== `color`: color (Required, Positional)\n\nAlternatively: The color to convert to CMYK.\n\nIf this is given, the individual components should not be given.\n\n=== `hsl`\n\nCreate an HSL color.\n\nThis color space is useful for specifying colors by hue, saturation and lightness. It is also useful for color manipulation, such as saturating while keeping perceived hue.\n\nAn HSL color is represented internally by an array of four components:\n\n- hue (#link(\"/docs/reference/layout/angle/\")[angle])\n- saturation (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- lightness (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- alpha (#link(\"/docs/reference/layout/ratio/\")[ratio])\n\nThese components are also available using the #link(\"/docs/reference/visualize/color/#definitions-components\")[components] method.\n\n```\nhsl(\n  angle: angle,\n  int: int | ratio,\n  int: int | ratio,\n  int: int | ratio,\n  color: color\n) -> color\n```\n\n```typst\n#square(\n  fill: color.hsl(30deg, 50%, 60%)\n)\n```\n\n==== `hue`: angle (Required, Positional)\n\nThe hue angle.\n\n==== `saturation`: int | ratio (Required, Positional)\n\nThe saturation component.\n\n==== `lightness`: int | ratio (Required, Positional)\n\nThe lightness component.\n\n==== `alpha`: int | ratio (Required, Positional)\n\nThe alpha component.\n\n==== `color`: color (Required, Positional)\n\nAlternatively: The color to convert to HSL.\n\nIf this is given, the individual components should not be given.\n\n=== `hsv`\n\nCreate an HSV color.\n\nThis color space is useful for specifying colors by hue, saturation and value. It is also useful for color manipulation, such as saturating while keeping perceived hue.\n\nAn HSV color is represented internally by an array of four components:\n\n- hue (#link(\"/docs/reference/layout/angle/\")[angle])\n- saturation (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- value (#link(\"/docs/reference/layout/ratio/\")[ratio])\n- alpha (#link(\"/docs/reference/layout/ratio/\")[ratio])\n\nThese components are also available using the #link(\"/docs/reference/visualize/color/#definitions-components\")[components] method.\n\n```\nhsv(\n  angle: angle,\n  int: int | ratio,\n  int: int | ratio,\n  int: int | ratio,\n  color: color\n) -> color\n```\n\n```typst\n#square(\n  fill: color.hsv(30deg, 50%, 60%)\n)\n```\n\n==== `hue`: angle (Required, Positional)\n\nThe hue angle.\n\n==== `saturation`: int | ratio (Required, Positional)\n\nThe saturation component.\n\n==== `value`: int | ratio (Required, Positional)\n\nThe value component.\n\n==== `alpha`: int | ratio (Required, Positional)\n\nThe alpha component.\n\n==== `color`: color (Required, Positional)\n\nAlternatively: The color to convert to HSL.\n\nIf this is given, the individual components should not be given.\n\n=== `components`\n\nExtracts the components of this color.\n\nThe size and values of this array depends on the color space. You can obtain the color space using #link(\"/docs/reference/visualize/color/#definitions-space\")[space]. Below is a table of the color spaces and their components:\n\nFor the meaning and type of each individual value, see the documentation of the corresponding color space. The alpha component is optional and only included if the `alpha` argument is `true`. The length of the returned array depends on the number of components and whether the alpha component is included.\n\n```\ncomponents(\n  alpha: bool\n) -> array\n```\n\n```typst\n// note that the alpha component is included by default\n#rgb(40%, 60%, 80%).components()\n```\n\n==== `alpha`: bool\n\nWhether to include the alpha component.\n\nDefault: `true`\n\n=== `space`\n\nReturns the constructor function for this color's space:\n\n- #link(\"/docs/reference/visualize/color/#definitions-luma\")[luma]\n- #link(\"/docs/reference/visualize/color/#definitions-oklab\")[oklab]\n- #link(\"/docs/reference/visualize/color/#definitions-oklch\")[oklch]\n- #link(\"/docs/reference/visualize/color/#definitions-linear-rgb\")[linear-rgb]\n- #link(\"/docs/reference/visualize/color/#definitions-rgb\")[rgb]\n- #link(\"/docs/reference/visualize/color/#definitions-cmyk\")[cmyk]\n- #link(\"/docs/reference/visualize/color/#definitions-hsl\")[hsl]\n- #link(\"/docs/reference/visualize/color/#definitions-hsv\")[hsv]\n\n```\nspace(\n  \n) -> \n```\n\n```typst\n#let color = cmyk(1%, 2%, 3%, 4%)\n#(color.space() == cmyk)\n```\n\n=== `to-hex`\n\nReturns the color's RGB(A) hex representation (such as `#ffaa32` or `#020304fe`). The alpha component (last two digits in `#020304fe`) is omitted if it is equal to `ff` (255 / 100%).\n\n```\nto-hex(\n  \n) -> str\n```\n\n=== `lighten`\n\nLightens a color by a given factor.\n\n```\nlighten(\n  ratio: ratio\n) -> color\n```\n\n==== `factor`: ratio (Required, Positional)\n\nThe factor to lighten the color by.\n\n=== `darken`\n\nDarkens a color by a given factor.\n\n```\ndarken(\n  ratio: ratio\n) -> color\n```\n\n==== `factor`: ratio (Required, Positional)\n\nThe factor to darken the color by.\n\n=== `saturate`\n\nIncreases the saturation of a color by a given factor.\n\n```\nsaturate(\n  ratio: ratio\n) -> color\n```\n\n==== `factor`: ratio (Required, Positional)\n\nThe factor to saturate the color by.\n\n=== `desaturate`\n\nDecreases the saturation of a color by a given factor.\n\n```\ndesaturate(\n  ratio: ratio\n) -> color\n```\n\n==== `factor`: ratio (Required, Positional)\n\nThe factor to desaturate the color by.\n\n=== `negate`\n\nProduces the complementary color using a provided color space. You can think of it as the opposite side on a color wheel.\n\n```\nnegate(\n  space: any\n) -> color\n```\n\n```typst\n#square(fill: yellow)\n#square(fill: yellow.negate())\n#square(fill: yellow.negate(space: rgb))\n```\n\n==== `space`: any\n\nThe color space used for the transformation. By default, a perceptual color space is used.\n\nDefault: `oklab`\n\n=== `rotate`\n\nRotates the hue of the color by a given angle.\n\n```\nrotate(\n  angle: angle,\n  space: any\n) -> color\n```\n\n==== `angle`: angle (Required, Positional)\n\nThe angle to rotate the hue by.\n\n==== `space`: any\n\nThe color space used to rotate. By default, this happens in a perceptual color space (#link(\"/docs/reference/visualize/color/#definitions-oklch\")[oklch]).\n\nDefault: `oklch`\n\n=== `mix`\n\nCreate a color by mixing two or more colors.\n\nIn color spaces with a hue component (hsl, hsv, oklch), only two colors can be mixed at once. Mixing more than two colors in such a space will result in an error!\n\n```\nmix(\n  ..: color | array,\n  space: any\n) -> color\n```\n\n```typst\n#set block(height: 20pt, width: 100%)\n#block(fill: red.mix(blue))\n#block(fill: red.mix(blue, space: rgb))\n#block(fill: color.mix(red, blue, white))\n#block(fill: color.mix((red, 70%), (blue, 30%)))\n```\n\n==== `colors`: color | array (Required, Positional, Variadic)\n\nThe colors, optionally with weights, specified as a pair (array of length two) of color and weight (float or ratio).\n\nThe weights do not need to add to `100%`, they are relative to the sum of all weights.\n\n==== `space`: any\n\nThe color space to mix in. By default, this happens in a perceptual color space (#link(\"/docs/reference/visualize/color/#definitions-oklab\")[oklab]).\n\nDefault: `oklab`\n\n=== `transparentize`\n\nMakes a color more transparent by a given factor.\n\nThis method is relative to the existing alpha value. If the scale is positive, calculates `alpha - alpha * scale`. Negative scales behave like `color.opacify(-scale)`.\n\n```\ntransparentize(\n  ratio: ratio\n) -> color\n```\n\n```typst\n#block(fill: red)[opaque]\n#block(fill: red.transparentize(50%))[half red]\n#block(fill: red.transparentize(75%))[quarter red]\n```\n\n==== `scale`: ratio (Required, Positional)\n\nThe factor to change the alpha value by.\n\n=== `opacify`\n\nMakes a color more opaque by a given scale.\n\nThis method is relative to the existing alpha value. If the scale is positive, calculates `alpha + scale - alpha * scale`. Negative scales behave like `color.transparentize(-scale)`.\n\n```\nopacify(\n  ratio: ratio\n) -> color\n```\n\n```typst\n#let half-red = red.transparentize(50%)\n#block(fill: half-red.opacify(100%))[opaque]\n#block(fill: half-red.opacify(50%))[three quarters red]\n#block(fill: half-red.opacify(-50%))[one quarter red]\n```\n\n==== `scale`: ratio (Required, Positional)\n\nThe scale to change the alpha value by.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/color.typ", "filename": "color.typ"}
{"text": "= curve\n\nA curve consisting of movements, lines, and Bézier segments.\n\nAt any point in time, there is a conceptual pen or cursor.\n\n- Move elements move the cursor without drawing.\n- Line/Quadratic/Cubic elements draw a segment from the cursor to a new position, potentially with control point for a Bézier curve.\n- Close elements draw a straight or smooth line back to the start of the curve or the latest preceding move segment.\n\nFor layout purposes, the bounding box of the curve is a tight rectangle containing all segments as well as the point `(0pt, 0pt)`.\n\nPositions may be specified absolutely (i.e. relatively to `(0pt, 0pt)`), or relative to the current pen/cursor position, that is, the position where the previous segment ended.\n\nBézier curve control points can be skipped by passing `none` or automatically mirrored from the preceding segment by passing `auto`.\n\n== Example\n\n```typst\n#curve(\n  fill: blue.lighten(80%),\n  stroke: blue,\n  curve.move((0pt, 50pt)),\n  curve.line((100pt, 50pt)),\n  curve.cubic(none, (90pt, 0pt), (50pt, 0pt)),\n  curve.close(),\n)\n```\n\n== Parameters\n\n```\ncurve(\n  fill: none | color | gradient | tiling,\n  fill-rule: str,\n  stroke: none | auto | length | color | gradient | stroke | tiling | dictionary,\n  ..: content\n) -> content\n```\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nHow to fill the curve.\n\nWhen setting a fill, the default stroke disappears. To create a rectangle with both fill and stroke, you have to configure both.\n\nDefault: `none`\n\n=== `fill-rule`: str (Settable)\n\nThe drawing rule used to fill the curve.\n\nDefault: `\"non-zero\"`\n\n*Example:*\n```typst\n// We use `.with` to get a new\n// function that has the common\n// arguments pre-applied.\n#let star = curve.with(\n  fill: red,\n  curve.move((25pt, 0pt)),\n  curve.line((10pt, 50pt)),\n  curve.line((50pt, 20pt)),\n  curve.line((0pt, 20pt)),\n  curve.line((40pt, 50pt)),\n  curve.close(),\n)\n\n#star(fill-rule: \"non-zero\")\n#star(fill-rule: \"even-odd\")\n```\n\n=== `stroke`: none | auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the curve. This can be:\n\nCan be set to `none` to disable the stroke or to `auto` for a stroke of `1pt` black if and if only if no fill is given.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#let down = curve.line((40pt, 40pt), relative: true)\n#let up = curve.line((40pt, -40pt), relative: true)\n\n#curve(\n  stroke: 4pt + gradient.linear(red, blue),\n  down, up, down, up, down,\n)\n```\n\n=== `components`: content (Required, Positional, Variadic)\n\nThe components of the curve, in the form of moves, line and Bézier segment, and closes.\n\n== Definitions\n\n=== `move`\n\nStarts a new curve component.\n\nIf no `curve.move` element is passed, the curve will start at `(0pt, 0pt)`.\n\n```\nmove(\n  array: array,\n  relative: bool\n) -> content\n```\n\n```typst\n#curve(\n  fill: blue.lighten(80%),\n  fill-rule: \"even-odd\",\n  stroke: blue,\n  curve.line((50pt, 0pt)),\n  curve.line((50pt, 50pt)),\n  curve.line((0pt, 50pt)),\n  curve.close(),\n  curve.move((10pt, 10pt)),\n  curve.line((40pt, 10pt)),\n  curve.line((40pt, 40pt)),\n  curve.line((10pt, 40pt)),\n  curve.close(),\n)\n```\n\n==== `start`: array (Required, Positional)\n\nThe starting point for the new component.\n\n==== `relative`: bool (Settable)\n\nWhether the coordinates are relative to the previous point.\n\nDefault: `false`\n\n=== `line`\n\nAdds a straight line from the current point to a following one.\n\n```\nline(\n  array: array,\n  relative: bool\n) -> content\n```\n\n```typst\n#curve(\n  stroke: blue,\n  curve.line((50pt, 0pt)),\n  curve.line((50pt, 50pt)),\n  curve.line((100pt, 50pt)),\n  curve.line((100pt, 0pt)),\n  curve.line((150pt, 0pt)),\n)\n```\n\n==== `end`: array (Required, Positional)\n\nThe point at which the line shall end.\n\n==== `relative`: bool (Settable)\n\nWhether the coordinates are relative to the previous point.\n\nDefault: `false`\n\n*Example:*\n```typst\n#curve(\n  stroke: blue,\n  curve.line((50pt, 0pt), relative: true),\n  curve.line((0pt, 50pt), relative: true),\n  curve.line((50pt, 0pt), relative: true),\n  curve.line((0pt, -50pt), relative: true),\n  curve.line((50pt, 0pt), relative: true),\n)\n```\n\n=== `quad`\n\nAdds a quadratic Bézier curve segment from the last point to `end`, using `control` as the control point.\n\n```\nquad(\n  none: none | auto | array,\n  array: array,\n  relative: bool\n) -> content\n```\n\n```typst\n// Function to illustrate where the control point is.\n#let mark((x, y)) = place(\n  dx: x - 1pt, dy: y - 1pt,\n  circle(fill: aqua, radius: 2pt),\n)\n\n#mark((20pt, 20pt))\n\n#curve(\n  stroke: blue,\n  curve.move((0pt, 100pt)),\n  curve.quad((20pt, 20pt), (100pt, 0pt)),\n)\n```\n\n==== `control`: none | auto | array (Required, Positional)\n\nThe control point of the quadratic Bézier curve.\n\n- If `auto` and this segment follows another quadratic Bézier curve, the previous control point will be mirrored.\n- If `none`, the control point defaults to `end`, and the curve will be a straight line.\n\n*Example:*\n```typst\n#curve(\n  stroke: 2pt,\n  curve.quad((20pt, 40pt), (40pt, 40pt), relative: true),\n  curve.quad(auto, (40pt, -40pt), relative: true),\n)\n```\n\n==== `end`: array (Required, Positional)\n\nThe point at which the segment shall end.\n\n==== `relative`: bool (Settable)\n\nWhether the `control` and `end` coordinates are relative to the previous point.\n\nDefault: `false`\n\n=== `cubic`\n\nAdds a cubic Bézier curve segment from the last point to `end`, using `control-start` and `control-end` as the control points.\n\n```\ncubic(\n  none: none | auto | array,\n  none: none | array,\n  array: array,\n  relative: bool\n) -> content\n```\n\n```typst\n// Function to illustrate where the control points are.\n#let handle(start, end) = place(\n  line(stroke: red, start: start, end: end)\n)\n\n#handle((0pt, 80pt), (10pt, 20pt))\n#handle((90pt, 60pt), (100pt, 0pt))\n\n#curve(\n  stroke: blue,\n  curve.move((0pt, 80pt)),\n  curve.cubic((10pt, 20pt), (90pt, 60pt), (100pt, 0pt)),\n)\n```\n\n==== `control-start`: none | auto | array (Required, Positional)\n\nThe control point going out from the start of the curve segment.\n\n- If auto and this element follows another curve.cubic element, the last control point will be mirrored. In SVG terms, this makes curve.cubic behave like the S operator instead of the C operator.\n- If none, the curve has no first control point, or equivalently, the control point defaults to the curve's starting point.\n\n*Example:*\n```typst\n#curve(\n  stroke: blue,\n  curve.move((0pt, 50pt)),\n  // - No start control point\n  // - End control point at `(20pt, 0pt)`\n  // - End point at `(50pt, 0pt)`\n  curve.cubic(none, (20pt, 0pt), (50pt, 0pt)),\n  // - No start control point\n  // - No end control point\n  // - End point at `(50pt, 0pt)`\n  curve.cubic(none, none, (100pt, 50pt)),\n)\n\n#curve(\n  stroke: blue,\n  curve.move((0pt, 50pt)),\n  curve.cubic(none, (20pt, 0pt), (50pt, 0pt)),\n  // Passing `auto` instead of `none` means the start control point\n  // mirrors the end control point of the previous curve. Mirror of\n  // `(20pt, 0pt)` w.r.t `(50pt, 0pt)` is `(80pt, 0pt)`.\n  curve.cubic(auto, none, (100pt, 50pt)),\n)\n\n#curve(\n  stroke: blue,\n  curve.move((0pt, 50pt)),\n  curve.cubic(none, (20pt, 0pt), (50pt, 0pt)),\n  // `(80pt, 0pt)` is the same as `auto` in this case.\n  curve.cubic((80pt, 0pt), none, (100pt, 50pt)),\n)\n```\n\n==== `control-end`: none | array (Required, Positional)\n\nThe control point going into the end point of the curve segment.\n\nIf set to `none`, the curve has no end control point, or equivalently, the control point defaults to the curve's end point.\n\n==== `end`: array (Required, Positional)\n\nThe point at which the curve segment shall end.\n\n==== `relative`: bool (Settable)\n\nWhether the `control-start`, `control-end`, and `end` coordinates are relative to the previous point.\n\nDefault: `false`\n\n=== `close`\n\nCloses the curve by adding a segment from the last point to the start of the curve (or the last preceding `curve.move` point).\n\n```\nclose(\n  mode: str\n) -> content\n```\n\n```typst\n// We define a function to show the same shape with\n// both closing modes.\n#let shape(mode: \"smooth\") = curve(\n  fill: blue.lighten(80%),\n  stroke: blue,\n  curve.move((0pt, 50pt)),\n  curve.line((100pt, 50pt)),\n  curve.cubic(auto, (90pt, 0pt), (50pt, 0pt)),\n  curve.close(mode: mode),\n)\n\n#shape(mode: \"smooth\")\n#shape(mode: \"straight\")\n```\n\n==== `mode`: str (Settable)\n\nHow to close the curve.\n\nDefault: `\"smooth\"`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/curve.typ", "filename": "curve.typ"}
{"text": "= ellipse\n\nAn ellipse with optional content.\n\n== Example\n\n```typst\n// Without content.\n#ellipse(width: 35%, height: 30pt)\n\n// With content.\n#ellipse[\n  #set align(center)\n  Automatically sized \\\n  to fit the content.\n]\n```\n\n== Parameters\n\n```\nellipse(\n  width: auto | relative,\n  height: auto | relative | fraction,\n  fill: none | color | gradient | tiling,\n  stroke: none | auto | length | color | gradient | stroke | tiling | dictionary,\n  inset: relative | dictionary,\n  outset: relative | dictionary,\n  body: none | content\n) -> content\n```\n\n=== `width`: auto | relative (Settable)\n\nThe ellipse's width, relative to its parent container.\n\nDefault: `auto`\n\n=== `height`: auto | relative | fraction (Settable)\n\nThe ellipse's height, relative to its parent container.\n\nDefault: `auto`\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nHow to fill the ellipse. See the #link(\"/docs/reference/visualize/rect/#parameters-fill\")[rectangle's documentation] for more details.\n\nDefault: `none`\n\n=== `stroke`: none | auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to stroke the ellipse. See the #link(\"/docs/reference/visualize/rect/#parameters-stroke\")[rectangle's documentation] for more details.\n\nDefault: `auto`\n\n=== `inset`: relative | dictionary (Settable)\n\nHow much to pad the ellipse's content. See the #link(\"/docs/reference/layout/box/#parameters-inset\")[box's documentation] for more details.\n\nDefault: `0% + 5pt`\n\n=== `outset`: relative | dictionary (Settable)\n\nHow much to expand the ellipse's size without affecting the layout. See the #link(\"/docs/reference/layout/box/#parameters-outset\")[box's documentation] for more details.\n\nDefault: `(:)`\n\n=== `body`: none | content (Positional, Settable)\n\nThe content to place into the ellipse.\n\nWhen this is omitted, the ellipse takes on a default size of at most `45pt` by `30pt`.\n\nDefault: `none`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/ellipse.typ", "filename": "ellipse.typ"}
{"text": "= gradient\n\nA color gradient.\n\nTypst supports linear gradients through the #link(\"/docs/reference/visualize/gradient/#definitions-linear\")[gradient.linear function], radial gradients through the #link(\"/docs/reference/visualize/gradient/#definitions-radial\")[gradient.radial function], and conic gradients through the #link(\"/docs/reference/visualize/gradient/#definitions-conic\")[gradient.conic function].\n\nA gradient can be used for the following purposes:\n\n- As a fill to paint the interior of a shape: `rect(fill: gradient.linear(..))`\n- As a stroke to paint the outline of a shape: `rect(stroke: 1pt + gradient.linear(..))`\n- As the fill of text: `set text(fill: gradient.linear(..))`\n- As a color map you can #link(\"/docs/reference/visualize/gradient/#definitions-sample\")[sample] from: `gradient.linear(..).sample(50%)`\n\n== Examples\n\n```typst\n#stack(\n  dir: ltr,\n  spacing: 1fr,\n  square(fill: gradient.linear(..color.map.rainbow)),\n  square(fill: gradient.radial(..color.map.rainbow)),\n  square(fill: gradient.conic(..color.map.rainbow)),\n)\n```\n\nGradients are also supported on text, but only when setting the #link(\"/docs/reference/visualize/gradient/#definitions-relative\")[relativeness] to either `auto` (the default value) or `\"parent\"`. To create word-by-word or glyph-by-glyph gradients, you can wrap the words or characters of your text in #link(\"/docs/reference/layout/box/\")[boxes] manually or through a #link(\"/docs/reference/styling/#show-rules\")[show rule].\n\n```typst\n#set text(fill: gradient.linear(red, blue))\n#let rainbow(content) = {\n  set text(fill: gradient.linear(..color.map.rainbow))\n  box(content)\n}\n\nThis is a gradient on text, but with a #rainbow[twist]!\n```\n\n== Stops\n\nA gradient is composed of a series of stops. Each of these stops has a color and an offset. The offset is a #link(\"/docs/reference/layout/ratio/\")[ratio] between `0%` and `100%` or an angle between `0deg` and `360deg`. The offset is a relative position that determines how far along the gradient the stop is located. The stop's color is the color of the gradient at that position. You can choose to omit the offsets when defining a gradient. In this case, Typst will space all stops evenly.\n\n== Relativeness\n\nThe location of the `0%` and `100%` stops depends on the dimensions of a container. This container can either be the shape that it is being painted on, or the closest surrounding container. This is controlled by the `relative` argument of a gradient constructor. By default, gradients are relative to the shape they are being painted on, unless the gradient is applied on text, in which case they are relative to the closest ancestor container.\n\nTypst determines the ancestor container as follows:\n\n- For shapes that are placed at the root/top level of the document, the closest ancestor is the page itself.\n- For other shapes, the ancestor is the innermost #link(\"/docs/reference/layout/block/\")[block] or #link(\"/docs/reference/layout/box/\")[box] that contains the shape. This includes the boxes and blocks that are implicitly created by show rules and elements. For example, a #link(\"/docs/reference/layout/rotate/\")[rotate] will not affect the parent of a gradient, but a #link(\"/docs/reference/layout/grid/\")[grid] will.\n\n== Color spaces and interpolation\n\nGradients can be interpolated in any color space. By default, gradients are interpolated in the #link(\"/docs/reference/visualize/color/#definitions-oklab\")[Oklab] color space, which is a #link(\"https://programmingdesignsystems.com/color/perceptually-uniform-color-spaces/index.html\")[perceptually uniform] color space. This means that the gradient will be perceived as having a smooth progression of colors. This is particularly useful for data visualization.\n\nHowever, you can choose to interpolate the gradient in any supported color space you want, but beware that some color spaces are not suitable for perceptually interpolating between colors. Consult the table below when choosing an interpolation space.\n\n== Direction\n\nSome gradients are sensitive to direction. For example, a linear gradient has an angle that determines its direction. Typst uses a clockwise angle, with 0° being from left to right, 90° from top to bottom, 180° from right to left, and 270° from bottom to top.\n\n```typst\n#stack(\n  dir: ltr,\n  spacing: 1fr,\n  square(fill: gradient.linear(red, blue, angle: 0deg)),\n  square(fill: gradient.linear(red, blue, angle: 90deg)),\n  square(fill: gradient.linear(red, blue, angle: 180deg)),\n  square(fill: gradient.linear(red, blue, angle: 270deg)),\n)\n```\n\n== Presets\n\nTypst predefines color maps that you can use with your gradients. See the #link(\"/docs/reference/visualize/color/#predefined-color-maps\")[color] documentation for more details.\n\n== Note on file sizes\n\nGradients can be quite large, especially if they have many stops. This is because gradients are stored as a list of colors and offsets, which can take up a lot of space. If you are concerned about file sizes, you should consider the following:\n\n- SVG gradients are currently inefficiently encoded. This will be improved in the future.\n- PDF gradients in the #link(\"/docs/reference/visualize/color/#definitions-oklab\")[color.oklab], #link(\"/docs/reference/visualize/color/#definitions-hsv\")[color.hsv], #link(\"/docs/reference/visualize/color/#definitions-hsl\")[color.hsl], and #link(\"/docs/reference/visualize/color/#definitions-oklch\")[color.oklch] color spaces are stored as a list of #link(\"/docs/reference/visualize/color/#definitions-rgb\")[color.rgb] colors with extra stops in between. This avoids needing to encode these color spaces in your PDF file, but it does add extra stops to your gradient, which can increase the file size.\n\n== Definitions\n\n=== `linear`\n\nCreates a new linear gradient, in which colors transition along a straight line.\n\n```\nlinear(\n  ..: color | array,\n  space: any,\n  relative: auto | str,\n  direction: direction,\n  angle: angle\n) -> gradient\n```\n\n```typst\n#rect(\n  width: 100%,\n  height: 20pt,\n  fill: gradient.linear(\n    ..color.map.viridis,\n  ),\n)\n```\n\n==== `stops`: color | array (Required, Positional, Variadic)\n\nThe color #link(\"#stops\")[stops] of the gradient.\n\n==== `space`: any\n\nThe color space in which to interpolate the gradient.\n\nDefaults to a perceptually uniform color space called #link(\"/docs/reference/visualize/color/#definitions-oklab\")[Oklab].\n\nDefault: `oklab`\n\n==== `relative`: auto | str\n\nThe #link(\"#relativeness\")[relative placement] of the gradient.\n\nFor an element placed at the root/top level of the document, the parent is the page itself. For other elements, the parent is the innermost block, box, column, grid, or stack that contains the element.\n\nDefault: `auto`\n\n==== `dir`: direction (Positional)\n\nThe direction of the gradient.\n\nDefault: `ltr`\n\n==== `angle`: angle (Required, Positional)\n\nThe angle of the gradient.\n\n=== `radial`\n\nCreates a new radial gradient, in which colors radiate away from an origin.\n\nThe gradient is defined by two circles: the focal circle and the end circle. The focal circle is a circle with center `focal-center` and radius `focal-radius`, that defines the points at which the gradient starts and has the color of the first stop. The end circle is a circle with center `center` and radius `radius`, that defines the points at which the gradient ends and has the color of the last stop. The gradient is then interpolated between these two circles.\n\nUsing these four values, also called the focal point for the starting circle and the center and radius for the end circle, we can define a gradient with more interesting properties than a basic radial gradient.\n\n```\nradial(\n  ..: color | array,\n  space: any,\n  relative: auto | str,\n  center: array,\n  radius: ratio,\n  focal-center: auto | array,\n  focal-radius: ratio\n) -> gradient\n```\n\n```typst\n#stack(\n  dir: ltr,\n  spacing: 1fr,\n  circle(fill: gradient.radial(\n    ..color.map.viridis,\n  )),\n  circle(fill: gradient.radial(\n    ..color.map.viridis,\n    focal-center: (10%, 40%),\n    focal-radius: 5%,\n  )),\n)\n```\n\n==== `stops`: color | array (Required, Positional, Variadic)\n\nThe color #link(\"#stops\")[stops] of the gradient.\n\n==== `space`: any\n\nThe color space in which to interpolate the gradient.\n\nDefaults to a perceptually uniform color space called #link(\"/docs/reference/visualize/color/#definitions-oklab\")[Oklab].\n\nDefault: `oklab`\n\n==== `relative`: auto | str\n\nThe #link(\"#relativeness\")[relative placement] of the gradient.\n\nFor an element placed at the root/top level of the document, the parent is the page itself. For other elements, the parent is the innermost block, box, column, grid, or stack that contains the element.\n\nDefault: `auto`\n\n==== `center`: array\n\nThe center of the end circle of the gradient.\n\nA value of `(50%, 50%)` means that the end circle is centered inside of its container.\n\nDefault: `(50%, 50%)`\n\n==== `radius`: ratio\n\nThe radius of the end circle of the gradient.\n\nBy default, it is set to `50%`. The ending radius must be bigger than the focal radius.\n\nDefault: `50%`\n\n==== `focal-center`: auto | array\n\nThe center of the focal circle of the gradient.\n\nThe focal center must be inside of the end circle.\n\nA value of `(50%, 50%)` means that the focal circle is centered inside of its container.\n\nBy default it is set to the same as the center of the last circle.\n\nDefault: `auto`\n\n==== `focal-radius`: ratio\n\nThe radius of the focal circle of the gradient.\n\nThe focal center must be inside of the end circle.\n\nBy default, it is set to `0%`. The focal radius must be smaller than the ending radius`.\n\nDefault: `0%`\n\n=== `conic`\n\nCreates a new conic gradient, in which colors change radially around a center point.\n\nYou can control the center point of the gradient by using the `center` argument. By default, the center point is the center of the shape.\n\n```\nconic(\n  ..: color | array,\n  angle: angle,\n  space: any,\n  relative: auto | str,\n  center: array\n) -> gradient\n```\n\n```typst\n#stack(\n  dir: ltr,\n  spacing: 1fr,\n  circle(fill: gradient.conic(\n    ..color.map.viridis,\n  )),\n  circle(fill: gradient.conic(\n    ..color.map.viridis,\n    center: (20%, 30%),\n  )),\n)\n```\n\n==== `stops`: color | array (Required, Positional, Variadic)\n\nThe color #link(\"#stops\")[stops] of the gradient.\n\n==== `angle`: angle\n\nThe angle of the gradient.\n\nDefault: `0deg`\n\n==== `space`: any\n\nThe color space in which to interpolate the gradient.\n\nDefaults to a perceptually uniform color space called #link(\"/docs/reference/visualize/color/#definitions-oklab\")[Oklab].\n\nDefault: `oklab`\n\n==== `relative`: auto | str\n\nThe #link(\"#relativeness\")[relative placement] of the gradient.\n\nFor an element placed at the root/top level of the document, the parent is the page itself. For other elements, the parent is the innermost block, box, column, grid, or stack that contains the element.\n\nDefault: `auto`\n\n==== `center`: array\n\nThe center of the last circle of the gradient.\n\nA value of `(50%, 50%)` means that the end circle is centered inside of its container.\n\nDefault: `(50%, 50%)`\n\n=== `sharp`\n\nCreates a sharp version of this gradient.\n\nSharp gradients have discrete jumps between colors, instead of a smooth transition. They are particularly useful for creating color lists for a preset gradient.\n\n```\nsharp(\n  int: int,\n  smoothness: ratio\n) -> gradient\n```\n\n```typst\n#set rect(width: 100%, height: 20pt)\n#let grad = gradient.linear(..color.map.rainbow)\n#rect(fill: grad)\n#rect(fill: grad.sharp(5))\n#rect(fill: grad.sharp(5, smoothness: 20%))\n```\n\n==== `steps`: int (Required, Positional)\n\nThe number of stops in the gradient.\n\n==== `smoothness`: ratio\n\nHow much to smooth the gradient.\n\nDefault: `0%`\n\n=== `repeat`\n\nRepeats this gradient a given number of times, optionally mirroring it at each repetition.\n\n```\nrepeat(\n  int: int,\n  mirror: bool\n) -> gradient\n```\n\n```typst\n#circle(\n  radius: 40pt,\n  fill: gradient\n    .radial(aqua, white)\n    .repeat(4),\n)\n```\n\n==== `repetitions`: int (Required, Positional)\n\nThe number of times to repeat the gradient.\n\n==== `mirror`: bool\n\nWhether to mirror the gradient at each repetition.\n\nDefault: `false`\n\n=== `kind`\n\nReturns the kind of this gradient.\n\n```\nkind(\n  \n) -> function\n```\n\n=== `stops`\n\nReturns the stops of this gradient.\n\n```\nstops(\n  \n) -> array\n```\n\n=== `space`\n\nReturns the mixing space of this gradient.\n\n```\nspace(\n  \n) -> \n```\n\n=== `relative`\n\nReturns the relative placement of this gradient.\n\n```\nrelative(\n  \n) -> str\n```\n\n=== `angle`\n\nReturns the angle of this gradient.\n\nReturns `none` if the gradient is neither linear nor conic.\n\n```\nangle(\n  \n) -> angle\n```\n\n=== `center`\n\nReturns the center of this gradient.\n\nReturns `none` if the gradient is neither radial nor conic.\n\n```\ncenter(\n  \n) -> array\n```\n\n=== `radius`\n\nReturns the radius of this gradient.\n\nReturns `none` if the gradient is not radial.\n\n```\nradius(\n  \n) -> ratio\n```\n\n=== `focal-center`\n\nReturns the focal-center of this gradient.\n\nReturns `none` if the gradient is not radial.\n\n```\nfocal-center(\n  \n) -> array\n```\n\n=== `focal-radius`\n\nReturns the focal-radius of this gradient.\n\nReturns `none` if the gradient is not radial.\n\n```\nfocal-radius(\n  \n) -> ratio\n```\n\n=== `sample`\n\nSample the gradient at a given position.\n\nThe position is either a position along the gradient (a #link(\"/docs/reference/layout/ratio/\")[ratio] between `0%` and `100%`) or an #link(\"/docs/reference/layout/angle/\")[angle]. Any value outside of this range will be clamped.\n\n```\nsample(\n  angle: angle | ratio\n) -> color\n```\n\n==== `t`: angle | ratio (Required, Positional)\n\nThe position at which to sample the gradient.\n\n=== `samples`\n\nSamples the gradient at multiple positions at once and returns the results as an array.\n\n```\nsamples(\n  ..: angle | ratio\n) -> array\n```\n\n==== `ts`: angle | ratio (Required, Positional, Variadic)\n\nThe positions at which to sample the gradient.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/gradient.typ", "filename": "gradient.typ"}
{"text": "= image\n\nA raster or vector graphic.\n\nYou can wrap the image in a #link(\"/docs/reference/model/figure/\")[figure] to give it a number and caption.\n\nLike most elements, images are _block-level_ by default and thus do not integrate themselves into adjacent paragraphs. To force an image to become inline, put it into a #link(\"/docs/reference/layout/box/\")[box].\n\n== Example\n\n```typst\n#figure(\n  image(\"molecular.jpg\", width: 80%),\n  caption: [\n    A step in the molecular testing\n    pipeline of our lab.\n  ],\n)\n```\n\n== Parameters\n\n```\nimage(\n  str: str | bytes,\n  format: auto | str | dictionary,\n  width: auto | relative,\n  height: auto | relative | fraction,\n  alt: none | str,\n  fit: str,\n  scaling: auto | str,\n  icc: auto | str | bytes\n) -> content\n```\n\n=== `source`: str | bytes (Required, Positional)\n\nA #link(\"/docs/reference/syntax/#paths\")[path] to an image file or raw bytes making up an image in one of the supported #link(\"/docs/reference/visualize/image/#parameters-format\")[formats].\n\nBytes can be used to specify raw pixel data in a row-major, left-to-right, top-to-bottom format.\n\n*Example:*\n```typst\n#let original = read(\"diagram.svg\")\n#let changed = original.replace(\n  \"#2B80FF\", // blue\n  green.to-hex(),\n)\n\n#image(bytes(original))\n#image(bytes(changed))\n```\n\n=== `format`: auto | str | dictionary (Settable)\n\nThe image's format.\n\nBy default, the format is detected automatically. Typically, you thus only need to specify this when providing raw bytes as the #link(\"/docs/reference/visualize/image/#parameters-source\")[source] (even then, Typst will try to figure out the format automatically, but that's not always possible).\n\nSupported formats are `\"png\"`, `\"jpg\"`, `\"gif\"`, `\"svg\"` as well as raw pixel data. Embedding PDFs as images is #link(\"https://github.com/typst/typst/issues/145\")[not currently supported].\n\nWhen providing raw pixel data as the `source`, you must specify a dictionary with the following keys as the `format`:\n\n- `encoding` (#link(\"/docs/reference/foundations/str/\")[str]): The encoding of the pixel data. One of: \"rgb8\" (three 8-bit channels: red, green, blue) \"rgba8\" (four 8-bit channels: red, green, blue, alpha) \"luma8\" (one 8-bit channel) \"lumaa8\" (two 8-bit channels: luma and alpha)\n- `width` (#link(\"/docs/reference/foundations/int/\")[int]): The pixel width of the image.\n- `height` (#link(\"/docs/reference/foundations/int/\")[int]): The pixel height of the image.\n\nThe pixel width multiplied by the height multiplied by the channel count for the specified encoding must then match the `source` data.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#image(\n  read(\n    \"tetrahedron.svg\",\n    encoding: none,\n  ),\n  format: \"svg\",\n  width: 2cm,\n)\n\n#image(\n  bytes(range(16).map(x => x * 16)),\n  format: (\n    encoding: \"luma8\",\n    width: 4,\n    height: 4,\n  ),\n  width: 2cm,\n)\n```\n\n=== `width`: auto | relative (Settable)\n\nThe width of the image.\n\nDefault: `auto`\n\n=== `height`: auto | relative | fraction (Settable)\n\nThe height of the image.\n\nDefault: `auto`\n\n=== `alt`: none | str (Settable)\n\nA text describing the image.\n\nDefault: `none`\n\n=== `fit`: str (Settable)\n\nHow the image should adjust itself to a given area (the area is defined by the `width` and `height` fields). Note that `fit` doesn't visually change anything if the area's aspect ratio is the same as the image's one.\n\nDefault: `\"cover\"`\n\n*Example:*\n```typst\n#set page(width: 300pt, height: 50pt, margin: 10pt)\n#image(\"tiger.jpg\", width: 100%, fit: \"cover\")\n#image(\"tiger.jpg\", width: 100%, fit: \"contain\")\n#image(\"tiger.jpg\", width: 100%, fit: \"stretch\")\n```\n\n=== `scaling`: auto | str (Settable)\n\nA hint to viewers how they should scale the image.\n\nWhen set to `auto`, the default is left up to the viewer. For PNG export, Typst will default to smooth scaling, like most PDF and SVG viewers.\n\n_Note:_ The exact look may differ across PDF viewers.\n\nDefault: `auto`\n\n=== `icc`: auto | str | bytes (Settable)\n\nAn ICC profile for the image.\n\nICC profiles define how to interpret the colors in an image. When set to `auto`, Typst will try to extract an ICC profile from the image.\n\nDefault: `auto`\n\n== Definitions\n\n=== `decode`\n\nDecode a raster or vector graphic from bytes or a string.\n\n```\ndecode(\n  str: str | bytes,\n  format: auto | str | dictionary,\n  width: auto | relative,\n  height: auto | relative | fraction,\n  alt: none | str,\n  fit: str,\n  scaling: auto | str\n) -> content\n```\n\n==== `data`: str | bytes (Required, Positional)\n\nThe data to decode as an image. Can be a string for SVGs.\n\n==== `format`: auto | str | dictionary\n\nThe image's format. Detected automatically by default.\n\n==== `width`: auto | relative\n\nThe width of the image.\n\n==== `height`: auto | relative | fraction\n\nThe height of the image.\n\n==== `alt`: none | str\n\nA text describing the image.\n\n==== `fit`: str\n\nHow the image should adjust itself to a given area.\n\n==== `scaling`: auto | str\n\nA hint to viewers how they should scale the image.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/image.typ", "filename": "image.typ"}
{"text": "= line\n\nA line from one point to another.\n\n== Example\n\n```typst\n#set page(height: 100pt)\n\n#line(length: 100%)\n#line(end: (50%, 50%))\n#line(\n  length: 4cm,\n  stroke: 2pt + maroon,\n)\n```\n\n== Parameters\n\n```\nline(\n  start: array,\n  end: none | array,\n  length: relative,\n  angle: angle,\n  stroke: length | color | gradient | stroke | tiling | dictionary\n) -> content\n```\n\n=== `start`: array (Settable)\n\nThe start point of the line.\n\nMust be an array of exactly two relative lengths.\n\nDefault: `(0% + 0pt, 0% + 0pt)`\n\n=== `end`: none | array (Settable)\n\nThe point where the line ends.\n\nDefault: `none`\n\n=== `length`: relative (Settable)\n\nThe line's length. This is only respected if `end` is `none`.\n\nDefault: `0% + 30pt`\n\n=== `angle`: angle (Settable)\n\nThe angle at which the line points away from the origin. This is only respected if `end` is `none`.\n\nDefault: `0deg`\n\n=== `stroke`: length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the line.\n\nDefault: `1pt + black`\n\n*Example:*\n```typst\n#set line(length: 100%)\n#stack(\n  spacing: 1em,\n  line(stroke: 2pt + red),\n  line(stroke: (paint: blue, thickness: 4pt, cap: \"round\")),\n  line(stroke: (paint: blue, thickness: 1pt, dash: \"dashed\")),\n  line(stroke: (paint: blue, thickness: 1pt, dash: (\"dot\", 2pt, 4pt, 2pt))),\n)\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/line.typ", "filename": "line.typ"}
{"text": "= path\n\nA path through a list of points, connected by Bézier curves.\n\n== Example\n\n```typst\n#path(\n  fill: blue.lighten(80%),\n  stroke: blue,\n  closed: true,\n  (0pt, 50pt),\n  (100%, 50pt),\n  ((50%, 0pt), (40pt, 0pt)),\n)\n```\n\n== Parameters\n\n```\npath(\n  fill: none | color | gradient | tiling,\n  fill-rule: str,\n  stroke: none | auto | length | color | gradient | stroke | tiling | dictionary,\n  closed: bool,\n  ..: array\n) -> content\n```\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nHow to fill the path.\n\nWhen setting a fill, the default stroke disappears. To create a rectangle with both fill and stroke, you have to configure both.\n\nDefault: `none`\n\n=== `fill-rule`: str (Settable)\n\nThe drawing rule used to fill the path.\n\nDefault: `\"non-zero\"`\n\n*Example:*\n```typst\n// We use `.with` to get a new\n// function that has the common\n// arguments pre-applied.\n#let star = path.with(\n  fill: red,\n  closed: true,\n  (25pt, 0pt),\n  (10pt, 50pt),\n  (50pt, 20pt),\n  (0pt, 20pt),\n  (40pt, 50pt),\n)\n\n#star(fill-rule: \"non-zero\")\n#star(fill-rule: \"even-odd\")\n```\n\n=== `stroke`: none | auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the path. This can be:\n\nCan be set to `none` to disable the stroke or to `auto` for a stroke of `1pt` black if and if only if no fill is given.\n\nDefault: `auto`\n\n=== `closed`: bool (Settable)\n\nWhether to close this path with one last Bézier curve. This curve will take into account the adjacent control points. If you want to close with a straight line, simply add one last point that's the same as the start point.\n\nDefault: `false`\n\n=== `vertices`: array (Required, Positional, Variadic)\n\nThe vertices of the path.\n\nEach vertex can be defined in 3 ways:\n\n- A regular point, as given to the #link(\"/docs/reference/visualize/line/\")[line] or #link(\"/docs/reference/visualize/polygon/\")[polygon] function.\n- An array of two points, the first being the vertex and the second being the control point. The control point is expressed relative to the vertex and is mirrored to get the second control point. The given control point is the one that affects the curve coming _into_ this vertex (even for the first point). The mirrored control point affects the curve going out of this vertex.\n- An array of three points, the first being the vertex and the next being the control points (control point for curves coming in and out, respectively).", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/path.typ", "filename": "path.typ"}
{"text": "= polygon\n\nA closed polygon.\n\nThe polygon is defined by its corner points and is closed automatically.\n\n== Example\n\n```typst\n#polygon(\n  fill: blue.lighten(80%),\n  stroke: blue,\n  (20%, 0pt),\n  (60%, 0pt),\n  (80%, 2cm),\n  (0%,  2cm),\n)\n```\n\n== Parameters\n\n```\npolygon(\n  fill: none | color | gradient | tiling,\n  fill-rule: str,\n  stroke: none | auto | length | color | gradient | stroke | tiling | dictionary,\n  ..: array\n) -> content\n```\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nHow to fill the polygon.\n\nWhen setting a fill, the default stroke disappears. To create a rectangle with both fill and stroke, you have to configure both.\n\nDefault: `none`\n\n=== `fill-rule`: str (Settable)\n\nThe drawing rule used to fill the polygon.\n\nSee the #link(\"/docs/reference/visualize/curve/#parameters-fill-rule\")[curve documentation] for an example.\n\nDefault: `\"non-zero\"`\n\n=== `stroke`: none | auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to #link(\"/docs/reference/visualize/stroke/\")[stroke] the polygon. This can be:\n\nCan be set to `none` to disable the stroke or to `auto` for a stroke of `1pt` black if and if only if no fill is given.\n\nDefault: `auto`\n\n=== `vertices`: array (Required, Positional, Variadic)\n\nThe vertices of the polygon. Each point is specified as an array of two #link(\"/docs/reference/layout/relative/\")[relative lengths].\n\n== Definitions\n\n=== `regular`\n\nA regular polygon, defined by its size and number of vertices.\n\n```\nregular(\n  fill: none | color | gradient | tiling,\n  stroke: none | auto | length | color | gradient | stroke | tiling | dictionary,\n  size: length,\n  vertices: int\n) -> content\n```\n\n```typst\n#polygon.regular(\n  fill: blue.lighten(80%),\n  stroke: blue,\n  size: 30pt,\n  vertices: 3,\n)\n```\n\n==== `fill`: none | color | gradient | tiling\n\nHow to fill the polygon. See the general #link(\"/docs/reference/visualize/polygon/#parameters-fill\")[polygon's documentation] for more details.\n\n==== `stroke`: none | auto | length | color | gradient | stroke | tiling | dictionary\n\nHow to stroke the polygon. See the general #link(\"/docs/reference/visualize/polygon/#parameters-stroke\")[polygon's documentation] for more details.\n\n==== `size`: length\n\nThe diameter of the #link(\"https://en.wikipedia.org/wiki/Circumcircle\")[circumcircle] of the regular polygon.\n\nDefault: `1em`\n\n==== `vertices`: int\n\nThe number of vertices in the polygon.\n\nDefault: `3`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/polygon.typ", "filename": "polygon.typ"}
{"text": "= rect\n\nA rectangle with optional content.\n\n== Example\n\n```typst\n// Without content.\n#rect(width: 35%, height: 30pt)\n\n// With content.\n#rect[\n  Automatically sized \\\n  to fit the content.\n]\n```\n\n== Parameters\n\n```\nrect(\n  width: auto | relative,\n  height: auto | relative | fraction,\n  fill: none | color | gradient | tiling,\n  stroke: none | auto | length | color | gradient | stroke | tiling | dictionary,\n  radius: relative | dictionary,\n  inset: relative | dictionary,\n  outset: relative | dictionary,\n  body: none | content\n) -> content\n```\n\n=== `width`: auto | relative (Settable)\n\nThe rectangle's width, relative to its parent container.\n\nDefault: `auto`\n\n=== `height`: auto | relative | fraction (Settable)\n\nThe rectangle's height, relative to its parent container.\n\nDefault: `auto`\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nHow to fill the rectangle.\n\nWhen setting a fill, the default stroke disappears. To create a rectangle with both fill and stroke, you have to configure both.\n\nDefault: `none`\n\n*Example:*\n```typst\n#rect(fill: blue)\n```\n\n=== `stroke`: none | auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to stroke the rectangle. This can be:\n\n- `none` to disable stroking\n- `auto` for a stroke of `1pt + black` if and if only if no fill is given.\n- Any kind of #link(\"/docs/reference/visualize/stroke/\")[stroke]\n- A dictionary describing the stroke for each side individually. The dictionary can contain the following keys in order of precedence: top: The top stroke. right: The right stroke. bottom: The bottom stroke. left: The left stroke. x: The horizontal stroke. y: The vertical stroke. rest: The stroke on all sides except those for which the dictionary explicitly sets a size.\n\nDefault: `auto`\n\n*Example:*\n```typst\n#stack(\n  dir: ltr,\n  spacing: 1fr,\n  rect(stroke: red),\n  rect(stroke: 2pt),\n  rect(stroke: 2pt + red),\n)\n```\n\n=== `radius`: relative | dictionary (Settable)\n\nHow much to round the rectangle's corners, relative to the minimum of the width and height divided by two. This can be:\n\n- A relative length for a uniform corner radius.\n- A dictionary: With a dictionary, the stroke for each side can be set individually. The dictionary can contain the following keys in order of precedence: top-left: The top-left corner radius. top-right: The top-right corner radius. bottom-right: The bottom-right corner radius. bottom-left: The bottom-left corner radius. left: The top-left and bottom-left corner radii. top: The top-left and top-right corner radii. right: The top-right and bottom-right corner radii. bottom: The bottom-left and bottom-right corner radii. rest: The radii for all corners except those for which the dictionary explicitly sets a size.\n\nDefault: `(:)`\n\n*Example:*\n```typst\n#set rect(stroke: 4pt)\n#rect(\n  radius: (\n    left: 5pt,\n    top-right: 20pt,\n    bottom-right: 10pt,\n  ),\n  stroke: (\n    left: red,\n    top: yellow,\n    right: green,\n    bottom: blue,\n  ),\n)\n```\n\n=== `inset`: relative | dictionary (Settable)\n\nHow much to pad the rectangle's content. See the #link(\"/docs/reference/layout/box/#parameters-outset\")[box's documentation] for more details.\n\nDefault: `0% + 5pt`\n\n=== `outset`: relative | dictionary (Settable)\n\nHow much to expand the rectangle's size without affecting the layout. See the #link(\"/docs/reference/layout/box/#parameters-outset\")[box's documentation] for more details.\n\nDefault: `(:)`\n\n=== `body`: none | content (Positional, Settable)\n\nThe content to place into the rectangle.\n\nWhen this is omitted, the rectangle takes on a default size of at most `45pt` by `30pt`.\n\nDefault: `none`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/rect.typ", "filename": "rect.typ"}
{"text": "= square\n\nA square with optional content.\n\n== Example\n\n```typst\n// Without content.\n#square(size: 40pt)\n\n// With content.\n#square[\n  Automatically \\\n  sized to fit.\n]\n```\n\n== Parameters\n\n```\nsquare(\n  size: auto | length,\n  width: auto | relative,\n  height: auto | relative | fraction,\n  fill: none | color | gradient | tiling,\n  stroke: none | auto | length | color | gradient | stroke | tiling | dictionary,\n  radius: relative | dictionary,\n  inset: relative | dictionary,\n  outset: relative | dictionary,\n  body: none | content\n) -> content\n```\n\n=== `size`: auto | length (Settable)\n\nThe square's side length. This is mutually exclusive with `width` and `height`.\n\nDefault: `auto`\n\n=== `width`: auto | relative (Settable)\n\nThe square's width. This is mutually exclusive with `size` and `height`.\n\nIn contrast to `size`, this can be relative to the parent container's width.\n\nDefault: `auto`\n\n=== `height`: auto | relative | fraction (Settable)\n\nThe square's height. This is mutually exclusive with `size` and `width`.\n\nIn contrast to `size`, this can be relative to the parent container's height.\n\nDefault: `auto`\n\n=== `fill`: none | color | gradient | tiling (Settable)\n\nHow to fill the square. See the #link(\"/docs/reference/visualize/rect/#parameters-fill\")[rectangle's documentation] for more details.\n\nDefault: `none`\n\n=== `stroke`: none | auto | length | color | gradient | stroke | tiling | dictionary (Settable)\n\nHow to stroke the square. See the #link(\"/docs/reference/visualize/rect/#parameters-stroke\")[rectangle's documentation] for more details.\n\nDefault: `auto`\n\n=== `radius`: relative | dictionary (Settable)\n\nHow much to round the square's corners. See the #link(\"/docs/reference/visualize/rect/#parameters-radius\")[rectangle's documentation] for more details.\n\nDefault: `(:)`\n\n=== `inset`: relative | dictionary (Settable)\n\nHow much to pad the square's content. See the #link(\"/docs/reference/layout/box/#parameters-inset\")[box's documentation] for more details.\n\nDefault: `0% + 5pt`\n\n=== `outset`: relative | dictionary (Settable)\n\nHow much to expand the square's size without affecting the layout. See the #link(\"/docs/reference/layout/box/#parameters-outset\")[box's documentation] for more details.\n\nDefault: `(:)`\n\n=== `body`: none | content (Positional, Settable)\n\nThe content to place into the square. The square expands to fit this content, keeping the 1-1 aspect ratio.\n\nWhen this is omitted, the square takes on a default size of at most `30pt`.\n\nDefault: `none`", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/square.typ", "filename": "square.typ"}
{"text": "= stroke\n\nDefines how to draw a line.\n\nA stroke has a _paint_ (a solid color or gradient), a _thickness,_ a line _cap,_ a line _join,_ a _miter limit,_ and a _dash_ pattern. All of these values are optional and have sensible defaults.\n\n== Example\n\n```typst\n#set line(length: 100%)\n#stack(\n  spacing: 1em,\n  line(stroke: 2pt + red),\n  line(stroke: (paint: blue, thickness: 4pt, cap: \"round\")),\n  line(stroke: (paint: blue, thickness: 1pt, dash: \"dashed\")),\n  line(stroke: 2pt + gradient.linear(..color.map.rainbow)),\n)\n```\n\n== Simple strokes\n\nYou can create a simple solid stroke from a color, a thickness, or a combination of the two. Specifically, wherever a stroke is expected you can pass any of the following values:\n\n- A length specifying the stroke's thickness. The color is inherited, defaulting to black.\n- A color to use for the stroke. The thickness is inherited, defaulting to `1pt`.\n- A stroke combined from color and thickness using the `+` operator as in `2pt + red`.\n\nFor full control, you can also provide a #link(\"/docs/reference/foundations/dictionary/\")[dictionary] or a `stroke` object to any function that expects a stroke. The dictionary's keys may include any of the parameters for the constructor function, shown below.\n\n== Fields\n\nOn a stroke object, you can access any of the fields listed in the constructor function. For example, `(2pt + blue).thickness` is `2pt`. Meanwhile, `stroke(red).cap` is `auto` because it's unspecified. Fields set to `auto` are inherited.\n\n== Constructor\n\nConverts a value to a stroke or constructs a stroke with the given parameters.\n\nNote that in most cases you do not need to convert values to strokes in order to use them, as they will be converted automatically. However, this constructor can be useful to ensure a value has all the fields of a stroke.\n\n```\nstroke(\n  auto: auto | color | gradient | tiling,\n  auto: auto | length,\n  auto: auto | str,\n  auto: auto | str,\n  none: none | auto | str | array | dictionary,\n  auto: auto | float\n) -> stroke\n```\n\n```typst\n#let my-func(x) = {\n    x = stroke(x) // Convert to a stroke\n    [Stroke has thickness #x.thickness.]\n}\n#my-func(3pt) \\\n#my-func(red) \\\n#my-func(stroke(cap: \"round\", thickness: 1pt))\n```\n\n==== `paint`: auto | color | gradient | tiling (Required, Positional)\n\nThe color or gradient to use for the stroke.\n\nIf set to `auto`, the value is inherited, defaulting to `black`.\n\n==== `thickness`: auto | length (Required, Positional)\n\nThe stroke's thickness.\n\nIf set to `auto`, the value is inherited, defaulting to `1pt`.\n\n==== `cap`: auto | str (Required, Positional)\n\nHow the ends of the stroke are rendered.\n\nIf set to `auto`, the value is inherited, defaulting to `\"butt\"`.\n\n==== `join`: auto | str (Required, Positional)\n\nHow sharp turns are rendered.\n\nIf set to `auto`, the value is inherited, defaulting to `\"miter\"`.\n\n==== `dash`: none | auto | str | array | dictionary (Required, Positional)\n\nThe dash pattern to use. This can be:\n\n- One of the predefined patterns: \"solid\" or none \"dotted\" \"densely-dotted\" \"loosely-dotted\" \"dashed\" \"densely-dashed\" \"loosely-dashed\" \"dash-dotted\" \"densely-dash-dotted\" \"loosely-dash-dotted\"\n- An #link(\"/docs/reference/foundations/array/\")[array] with alternating lengths for dashes and gaps. You can also use the string `\"dot\"` for a length equal to the line thickness.\n- A #link(\"/docs/reference/foundations/dictionary/\")[dictionary] with the keys `array` (same as the array above), and `phase` (of type #link(\"/docs/reference/layout/length/\")[length]), which defines where in the pattern to start drawing.\n\nIf set to `auto`, the value is inherited, defaulting to `none`.\n\n*Example:*\n```typst\n#set line(length: 100%, stroke: 2pt)\n#stack(\n  spacing: 1em,\n  line(stroke: (dash: \"dashed\")),\n  line(stroke: (dash: (10pt, 5pt, \"dot\", 5pt))),\n  line(stroke: (dash: (array: (10pt, 5pt, \"dot\", 5pt), phase: 10pt))),\n)\n```\n\n==== `miter-limit`: auto | float (Required, Positional)\n\nNumber at which protruding sharp bends are rendered with a bevel instead or a miter join. The higher the number, the sharper an angle can be before it is bevelled. Only applicable if `join` is `\"miter\"`.\n\nSpecifically, the miter limit is the maximum ratio between the corner's protrusion length and the stroke's thickness.\n\nIf set to `auto`, the value is inherited, defaulting to `4.0`.\n\n*Example:*\n```typst\n#let items = (\n  curve.move((15pt, 0pt)),\n  curve.line((0pt, 30pt)),\n  curve.line((30pt, 30pt)),\n  curve.line((10pt, 20pt)),\n)\n\n#set curve(stroke: 6pt + blue)\n#stack(\n  dir: ltr,\n  spacing: 1cm,\n  curve(stroke: (miter-limit: 1), ..items),\n  curve(stroke: (miter-limit: 4), ..items),\n  curve(stroke: (miter-limit: 5), ..items),\n)\n```", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/stroke.typ", "filename": "stroke.typ"}
{"text": "= tiling\n\nA repeating tiling fill.\n\nTypst supports the most common type of tilings, where a pattern is repeated in a grid-like fashion, covering the entire area of an element that is filled or stroked. The pattern is defined by a tile size and a body defining the content of each cell. You can also add horizontal or vertical spacing between the cells of the tiling.\n\n== Examples\n\n```typst\n#let pat = tiling(size: (30pt, 30pt))[\n  #place(line(start: (0%, 0%), end: (100%, 100%)))\n  #place(line(start: (0%, 100%), end: (100%, 0%)))\n]\n\n#rect(fill: pat, width: 100%, height: 60pt, stroke: 1pt)\n```\n\nTilings are also supported on text, but only when setting the #link(\"/docs/reference/visualize/tiling/#parameters-relative\")[relativeness] to either `auto` (the default value) or `\"parent\"`. To create word-by-word or glyph-by-glyph tilings, you can wrap the words or characters of your text in #link(\"/docs/reference/layout/box/\")[boxes] manually or through a #link(\"/docs/reference/styling/#show-rules\")[show rule].\n\n```typst\n#let pat = tiling(\n  size: (30pt, 30pt),\n  relative: \"parent\",\n  square(\n    size: 30pt,\n    fill: gradient\n      .conic(..color.map.rainbow),\n  )\n)\n\n#set text(fill: pat)\n#lorem(10)\n```\n\nYou can also space the elements further or closer apart using the #link(\"/docs/reference/visualize/tiling/#parameters-spacing\")[spacing] feature of the tiling. If the spacing is lower than the size of the tiling, the tiling will overlap. If it is higher, the tiling will have gaps of the same color as the background of the tiling.\n\n```typst\n#let pat = tiling(\n  size: (30pt, 30pt),\n  spacing: (10pt, 10pt),\n  relative: \"parent\",\n  square(\n    size: 30pt,\n    fill: gradient\n     .conic(..color.map.rainbow),\n  ),\n)\n\n#rect(\n  width: 100%,\n  height: 60pt,\n  fill: pat,\n)\n```\n\n== Relativeness\n\nThe location of the starting point of the tiling is dependent on the dimensions of a container. This container can either be the shape that it is being painted on, or the closest surrounding container. This is controlled by the `relative` argument of a tiling constructor. By default, tilings are relative to the shape they are being painted on, unless the tiling is applied on text, in which case they are relative to the closest ancestor container.\n\nTypst determines the ancestor container as follows:\n\n- For shapes that are placed at the root/top level of the document, the closest ancestor is the page itself.\n- For other shapes, the ancestor is the innermost #link(\"/docs/reference/layout/block/\")[block] or #link(\"/docs/reference/layout/box/\")[box] that contains the shape. This includes the boxes and blocks that are implicitly created by show rules and elements. For example, a #link(\"/docs/reference/layout/rotate/\")[rotate] will not affect the parent of a gradient, but a #link(\"/docs/reference/layout/grid/\")[grid] will.\n\n== Compatibility\n\nThis type used to be called `pattern`. The name remains as an alias, but is deprecated since Typst 0.13.\n\n== Constructor\n\nConstruct a new tiling.\n\n```\ntiling(\n  size: auto | array,\n  spacing: array,\n  relative: auto | str,\n  content: content\n) -> tiling\n```\n\n```typst\n#let pat = tiling(\n  size: (20pt, 20pt),\n  relative: \"parent\",\n  place(\n    dx: 5pt,\n    dy: 5pt,\n    rotate(45deg, square(\n      size: 5pt,\n      fill: black,\n    )),\n  ),\n)\n\n#rect(width: 100%, height: 60pt, fill: pat)\n```\n\n==== `size`: auto | array\n\nThe bounding box of each cell of the tiling.\n\nDefault: `auto`\n\n==== `spacing`: array\n\nThe spacing between cells of the tiling.\n\nDefault: `(0pt, 0pt)`\n\n==== `relative`: auto | str\n\nThe #link(\"#relativeness\")[relative placement] of the tiling.\n\nFor an element placed at the root/top level of the document, the parent is the page itself. For other elements, the parent is the innermost block, box, column, grid, or stack that contains the element.\n\nDefault: `auto`\n\n==== `body`: content (Required, Positional)\n\nThe content of each cell of the tiling.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize/tiling.typ", "filename": "tiling.typ"}
{"text": "= Visualize\n\nDrawing and data visualization.\n\nIf you want to create more advanced drawings or plots, also have a look at the #link(\"https://github.com/johannes-wolf/cetz\")[CetZ] package as well as more specialized #link(\"https://typst.app/universe/\")[packages] for your use case.\n\n== Definitions\n\n- #link(\"/docs/reference/visualize/circle/\")[circle]A circle with optional content.\n- #link(\"/docs/reference/visualize/color/\")[color]A color in a specific color space.\n- #link(\"/docs/reference/visualize/curve/\")[curve]A curve consisting of movements, lines, and Bézier segments.\n- #link(\"/docs/reference/visualize/ellipse/\")[ellipse]An ellipse with optional content.\n- #link(\"/docs/reference/visualize/gradient/\")[gradient]A color gradient.\n- #link(\"/docs/reference/visualize/image/\")[image]A raster or vector graphic.\n- #link(\"/docs/reference/visualize/line/\")[line]A line from one point to another.\n- #link(\"/docs/reference/visualize/path/\")[path]A path through a list of points, connected by Bézier curves.\n- #link(\"/docs/reference/visualize/polygon/\")[polygon]A closed polygon.\n- #link(\"/docs/reference/visualize/rect/\")[rect]A rectangle with optional content.\n- #link(\"/docs/reference/visualize/square/\")[square]A square with optional content.\n- #link(\"/docs/reference/visualize/stroke/\")[stroke]Defines how to draw a line.\n- #link(\"/docs/reference/visualize/tiling/\")[tiling]A repeating tiling fill.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference/visualize.typ", "filename": "visualize.typ"}
{"text": "= Reference\n\nThis reference documentation is a comprehensive guide to all of Typst's syntax, concepts, types, and functions. If you are completely new to Typst, we recommend starting with the #link(\"/docs/tutorial/\")[tutorial] and then coming back to the reference to learn more about Typst's features as you need them.\n\n== Language\n\nThe reference starts with a language part that gives an overview over #link(\"/docs/reference/syntax/\")[Typst's syntax] and contains information about concepts involved in #link(\"/docs/reference/styling/\")[styling documents,] using #link(\"/docs/reference/scripting/\")[Typst's scripting capabilities.]\n\n== Functions\n\nThe second part includes chapters on all functions used to insert, style, transform, and layout content in Typst documents. Each function is documented with a description of its purpose, a list of its parameters, and examples of how to use it.\n\nThe final part of the reference explains all functions that are used within Typst's code mode to manipulate and transform data. Just as in the previous part, each function is documented with a description of its purpose, a list of its parameters, and examples of how to use it.", "source": "/Users/erik/Dev/rkstgr/typeshift/typst-docs/typst-docs/reference.typ", "filename": "reference.typ"}
