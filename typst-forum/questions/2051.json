{
  "topic_metadata": {
    "id": 2051,
    "title": "How to use codelst or codly inside fletcher nodes?",
    "slug": "how-to-use-codelst-or-codly-inside-fletcher-nodes",
    "posts_count": 4,
    "created_at": "2024-12-10T19:08:29.421Z",
    "last_posted_at": "2024-12-15T12:24:22.445Z",
    "views": 214,
    "like_count": 1,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "Jollywatt",
    "tags": [
      "graphics",
      "fletcher"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 347
  },
  "posts": [
    {
      "id": 6480,
      "post_number": 1,
      "username": "bumblingaround",
      "name": "",
      "created_at": "2024-12-10T19:08:29.579Z",
      "updated_at": "2024-12-15T10:25:53.837Z",
      "cooked": "<p>I’m trying to generate a figure that illustrates call paths in a complex piece of code. The way I imagined doing this, was using fletcher nodes containing code snippets (using raw text blocks, e.g. <code>c .... </code>) with relevant information - such as function calls. The call graph would then be represented with arrows between such nodes.</p>\n<p>For instance:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"@preview/fletcher:0.5.3\" as fletcher: diagram, node, edge\n#import \"@preview/codelst:2.0.2\": sourcecode\n\n#diagram(node-stroke: 1pt, edge-stroke:1pt, node-shape: rect,\n {\n      node(sourcecode[```c\n         void caller() {\n              call_foo();\n              ...\n         }\n     ```])\n   edge(\"-|&gt;\")\n      node(sourcecode[```c\n         void call_foo() {\n              ...\n         }\n     ```])\n })\n</code></pre>\n<p>Unfortunately the fletcher nodes render as if the code block has a very narrow width and the node outline doesn’t actually include its content.</p>\n<p>I tried something similar with codly with similar results.</p>\n<p>So now for the questions:</p>\n<ul>\n<li>am I doing something obviously wrong?</li>\n<li>should I be using an entirely different approach? (I’m actually trying to convert diagrams made with a combination of d2 and plantuml)</li>\n</ul>\n<p>Thanks for any pointers!</p>",
      "raw": "I'm trying to generate a figure that illustrates call paths in a complex piece of code. The way I imagined doing this, was using fletcher nodes containing code snippets (using raw text blocks, e.g. ```c .... ```) with relevant information - such as function calls. The call graph would then be represented with arrows between such nodes.\n\nFor instance:\n```typst\n#import \"@preview/fletcher:0.5.3\" as fletcher: diagram, node, edge\n#import \"@preview/codelst:2.0.2\": sourcecode\n\n#diagram(node-stroke: 1pt, edge-stroke:1pt, node-shape: rect,\n {\n      node(sourcecode[```c\n         void caller() {\n              call_foo();\n              ...\n         }\n     ```])\n   edge(\"-|>\")\n      node(sourcecode[```c\n         void call_foo() {\n              ...\n         }\n     ```])\n })\n```\n\nUnfortunately the fletcher nodes render as if the code block has a very narrow width and the node outline doesn't actually include its content.\n\nI tried something similar with codly with similar results.\n\nSo now for the questions:\n- am I doing something obviously wrong?\n- should I be using an entirely different approach? (I'm actually trying to convert diagrams made with a combination of d2 and plantuml)\n\nThanks for any pointers!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 37,
      "score": 762.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 913
    },
    {
      "id": 6481,
      "post_number": 2,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-12-11T01:58:34.710Z",
      "updated_at": "2024-12-11T01:58:34.710Z",
      "cooked": "<p>Hey <a class=\"mention\" href=\"/u/bumblingaround\">@bumblingaround</a>, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a></p>\n<p>Make sure your title is a question you’d ask to a friend about Typst. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hey @bumblingaround, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: https://forum.typst.app/t/how-to-post-in-the-questions-category/11\n\nMake sure your title is a question you’d ask to a friend about Typst. :wink:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 33,
      "score": 21.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 6552,
      "post_number": 3,
      "username": "bumblingaround",
      "name": "",
      "created_at": "2024-12-12T12:25:53.694Z",
      "updated_at": "2024-12-12T12:25:53.694Z",
      "cooked": "<p>Replying to myself in case someone else wonders about the same thing.<br>\nOne simple workaround is to simply set a width on the node.</p>",
      "raw": "Replying to myself in case someone else wonders about the same thing.\nOne simple workaround is to simply set a width on the node.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 30,
      "score": 6.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 913
    },
    {
      "id": 6652,
      "post_number": 4,
      "username": "Jollywatt",
      "name": "Joseph Wilson",
      "created_at": "2024-12-15T12:24:22.445Z",
      "updated_at": "2024-12-15T12:24:46.538Z",
      "cooked": "<p>Codelst is partially to blame here, because it wraps raw blocks in a zero-width container:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let a = sourcecode[```c\nvoid call_foo() {\n    ...\n}\n```]\n\n#context assert(measure(a).width == 0pt)\n</code></pre>\n<p>You can get around that by explicitly setting node widths, or by wrapping <code>sourcecode</code> blocks in a block of fixed width, etc. For example:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">node(width: 5cm, sourcecode[```c\nvoid caller() {\n  call_foo();\n  ...\n}\n```])\n</code></pre>\n<p>Alternatively, if you don’t need line numbers:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/fletcher:0.5.3\" as fletcher: diagram, node, edge\n\n#diagram(\n  node-stroke: 1pt,\n  edge-stroke: 1pt,\n  node-shape: rect,\n  {\n  node(```c\n  void caller() {\n    call_foo();\n    ...\n  }\n  ```)\n  edge(\"-|&gt;\")\n  node((1, 0), ```c\n  void call_foo() {\n    ...\n  }\n  ```)\n})\n</code></pre>",
      "raw": "Codelst is partially to blame here, because it wraps raw blocks in a zero-width container:\n\n```typ\n#let a = sourcecode[```c\nvoid call_foo() {\n    ...\n}\n```]\n\n#context assert(measure(a).width == 0pt)\n```\n\nYou can get around that by explicitly setting node widths, or by wrapping `sourcecode` blocks in a block of fixed width, etc. For example:\n```typc\nnode(width: 5cm, sourcecode[```c\nvoid caller() {\n  call_foo();\n  ...\n}\n```])\n```\n\nAlternatively, if you don't need line numbers:\n\n```typ\n#import \"@preview/fletcher:0.5.3\" as fletcher: diagram, node, edge\n\n#diagram(\n  node-stroke: 1pt,\n  edge-stroke: 1pt,\n  node-shape: rect,\n  {\n  node(```c\n  void caller() {\n    call_foo();\n    ...\n  }\n  ```)\n  edge(\"-|>\")\n  node((1, 0), ```c\n  void call_foo() {\n    ...\n  }\n  ```)\n})\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 27,
      "score": 125.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 713
    }
  ],
  "scraped_at": "2025-06-10T09:53:43.321623"
}