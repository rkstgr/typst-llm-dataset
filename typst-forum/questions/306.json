{
  "topic_metadata": {
    "id": 306,
    "title": "Why are paths always relative to the current file?",
    "slug": "why-are-paths-always-relative-to-the-current-file",
    "posts_count": 9,
    "created_at": "2024-09-16T07:40:35.276Z",
    "last_posted_at": "2024-12-28T13:50:10.813Z",
    "views": 1037,
    "like_count": 8,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "laurmaedje",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 6,
    "word_count": 699
  },
  "posts": [
    {
      "id": 1121,
      "post_number": 1,
      "username": "Lars",
      "name": "",
      "created_at": "2024-09-16T07:40:35.518Z",
      "updated_at": "2024-09-16T07:42:03.149Z",
      "cooked": "<p>Context: I was trying to implement a small function that reads and parses a file with some regex. The function just takes the path to the file and returns the parsed context as dictionary. I wanted to move this function into a package.</p>\n<p>/somewhere/else/lib.typ</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let parse-xyz(path) = {\n    let data = read(path)\n    …\n}\n</code></pre>\n<p>main.typ</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let values = import-xyz(\"my/path.xyz\");\n</code></pre>\n<p>After that I found out that the read call resolves the path relative to the file that contains the function (lib.typ) and not relative to the main.typ file that calls it. This is different from python and other scripting languages.</p>",
      "raw": "Context: I was trying to implement a small function that reads and parses a file with some regex. The function just takes the path to the file and returns the parsed context as dictionary. I wanted to move this function into a package.\n\n/somewhere/else/lib.typ\n```typ \n#let parse-xyz(path) = {\n    let data = read(path)\n    …\n}\n```\n\nmain.typ\n```typ \n#let values = import-xyz(\"my/path.xyz\");\n```\n\n\nAfter that I found out that the read call resolves the path relative to the file that contains the function (lib.typ) and not relative to the main.typ file that calls it. This is different from python and other scripting languages.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 106,
      "score": 4116.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 255
    },
    {
      "id": 1173,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-09-16T08:51:51.830Z",
      "updated_at": "2024-09-16T08:52:21.104Z",
      "cooked": "<p>Hello, if you start your path with <code>\"/\"</code> instead, the path should resolve relative to <code>--root</code>. The documentation should be updated to reflect this soon!</p>\n<blockquote>\n<p><code>#import \"/templates/lib.typ\"</code> will load the file <code>templates/lib.typ</code> relative to the <code>--root</code> .</p>\n</blockquote>\n<p>[1] <a href=\"https://github.com/typst/typst/issues/2608#issuecomment-1799021131\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">syntax for marking project root · Issue #2608 · typst/typst · GitHub</a><br>\n[2] <a href=\"https://github.com/typst/typst/pull/4892/files\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Clarify the path argument of the image element by kravchenkoloznia · Pull Request #4892 · typst/typst · GitHub</a></p>",
      "raw": "Hello, if you start your path with `\"/\"` instead, the path should resolve relative to `--root`. The documentation should be updated to reflect this soon!\n\n> `#import \"/templates/lib.typ\"` will load the file `templates/lib.typ` relative to the `--root` .\n\n[1] https://github.com/typst/typst/issues/2608#issuecomment-1799021131\n[2] https://github.com/typst/typst/pull/4892/files",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 97,
      "score": 94.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 1287,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-16T14:33:15.390Z",
      "updated_at": "2024-09-16T14:35:15.527Z",
      "cooked": "<p>Alternatively, if you need to use the relative path which isn’t necessarily the same as root-relative path, then you would have to use <code>read(\"my/path.xyz\")</code> as an argument to the <code>import-xyz()</code> function.</p>\n<p>You can add <code>#let r = read</code> to make <code>import-xyz(r(\"my/path.xyz\"))</code>, which will shorten the workaround code but most certainly reduce readability.</p>\n<p>I did face this problem in the past and had a few conversations about this (I think with <a class=\"mention\" href=\"/u/laurmaedje\">@laurmaedje</a>), but I don’t remember if this is a “limitation” or a “feature”.</p>",
      "raw": "Alternatively, if you need to use the relative path which isn't necessarily the same as root-relative path, then you would have to use `read(\"my/path.xyz\")` as an argument to the `import-xyz()` function.\n\nYou can add `#let r = read` to make `import-xyz(r(\"my/path.xyz\"))`, which will shorten the workaround code but most certainly reduce readability.\n\nI did face this problem in the past and had a few conversations about this (I think with @laurmaedje), but I don't remember if this is a \"limitation\" or a \"feature\".",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 92,
      "score": 53.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 1309,
      "post_number": 4,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-16T14:45:52.212Z",
      "updated_at": "2024-09-16T14:45:52.212Z",
      "cooked": "<p>The original reason why it is this way is that it’s made for markup and not code: When writing chapters of text, it is very natural to be able to use relative paths to include other chapters. Absolute paths with a leading slash provide an alternative, primarily useful for importing files shared across a whole project.</p>\n<p>However, as you’ve noticed, neither of those two properly handle the case of relative paths passed to utility functions or of any kind of path passed into a package. To properly solve this, we need a path type that is separate from a plain string and that remembers where it was created. Ideally, this path would be supplemented by syntax since its much more natural for syntax to be file-dependant than for a <code>path</code> function.</p>\n<p>For more discussion on this, see:</p>\n<ul>\n<li><a href=\"https://github.com/typst/typst/issues/971\" class=\"inline-onebox\">Strings and paths should be separate types · Issue #971 · typst/typst · GitHub</a></li>\n<li><a href=\"https://discord.com/channels/1054443721975922748/1178292717239926824\">Resources forge on Discord</a></li>\n</ul>",
      "raw": "The original reason why it is this way is that it's made for markup and not code: When writing chapters of text, it is very natural to be able to use relative paths to include other chapters. Absolute paths with a leading slash provide an alternative, primarily useful for importing files shared across a whole project.\n\nHowever, as you've noticed, neither of those two properly handle the case of relative paths passed to utility functions or of any kind of path passed into a package. To properly solve this, we need a path type that is separate from a plain string and that remembers where it was created. Ideally, this path would be supplemented by syntax since its much more natural for syntax to be file-dependant than for a `path` function.\n\nFor more discussion on this, see: \n- https://github.com/typst/typst/issues/971\n- [Resources forge on Discord](https://discord.com/channels/1054443721975922748/1178292717239926824)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 88,
      "score": 172.6,
      "accepted_answer": true,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 1424,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-16T18:48:46.380Z",
      "updated_at": "2024-09-16T20:25:12.109Z",
      "cooked": "<p>There actually is a way to work around this (and to be clear: <strong>it is hacky</strong> and kinda works <strong>by accident</strong>. it will <a href=\"https://discord.com/channels/1054443721975922748/1088371867913572452/1219621322922135592\" rel=\"noopener nofollow ugc\"><em>probably</em> work</a> until the path work mentioned by Laurenz is done, but no guarantees.)</p>\n<p>Here it is:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// /somewhere/else/lib.typ\n#let parse-xyz(..args) = {\n    let data = read(..args)\n    …\n}\n</code></pre>\n<p>&nbsp;</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// main.typ\n#let values = parse-xyz(\"my/path.xyz\");\n</code></pre>\n<p><code>args</code> is an <code>arguments</code> value, and such a value apparently remembers where it was constructed. So when <code>read()</code> gets all the arguments that <code>parse-xyz()</code> receives, these arguments are <em>still</em> relative to <code>main.typ</code>. Whether the loss in readability due to the arcaneness of this behavior is worth it for you is for you to decide <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "There actually is a way to work around this (and to be clear: **it is hacky** and kinda works **by accident**. it will [_probably_ work](https://discord.com/channels/1054443721975922748/1088371867913572452/1219621322922135592) until the path work mentioned by Laurenz is done, but no guarantees.)\n\nHere it is:\n\n```typ\n// /somewhere/else/lib.typ\n#let parse-xyz(..args) = {\n    let data = read(..args)\n    …\n}\n```\n&nbsp;\n```typ\n// main.typ\n#let values = parse-xyz(\"my/path.xyz\");\n```\n\n`args` is an `arguments` value, and such a value apparently remembers where it was constructed. So when `read()` gets all the arguments that `parse-xyz()` receives, these arguments are _still_ relative to `main.typ`. Whether the loss in readability due to the arcaneness of this behavior is worth it for you is for you to decide :wink:",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 84,
      "score": 96.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 1437,
      "post_number": 6,
      "username": "Lars",
      "name": "",
      "created_at": "2024-09-16T20:25:27.705Z",
      "updated_at": "2024-09-16T20:25:27.705Z",
      "cooked": "<p>Nice hack, but to be honest I don’t think I like this <img src=\"https://forum.typst.app/images/emoji/apple/see_no_evil.png?v=12\" title=\":see_no_evil:\" class=\"emoji\" alt=\":see_no_evil:\" loading=\"lazy\" width=\"20\" height=\"20\"><br>\nWhy does this even work?!?</p>",
      "raw": "Nice hack, but to be honest I don't think I like this 🙈 \nWhy does this even work?!?",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 78,
      "score": 30.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 255
    },
    {
      "id": 1438,
      "post_number": 7,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-16T20:27:31.628Z",
      "updated_at": "2024-09-16T20:27:31.628Z",
      "cooked": "<p>Arguments retain their source location for error messages and the same source location mechanism is used to resolve relative paths.</p>",
      "raw": "Arguments retain their source location for error messages and the same source location mechanism is used to resolve relative paths.",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 77,
      "score": 15.4,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 6958,
      "post_number": 8,
      "username": "han190",
      "name": "Han Tang",
      "created_at": "2024-12-28T00:02:31.684Z",
      "updated_at": "2024-12-28T00:02:31.684Z",
      "cooked": "<p>Glad that I find a solution here, but this feels…very unintuitive since nearly all linux file systems (or windows nowadays) treat path that starts with a “/” as an absolute path but not a relative path.</p>",
      "raw": "Glad that I find a solution here, but this feels...very unintuitive since nearly all linux file systems (or windows nowadays) treat path that starts with a \"/\" as an absolute path but not a relative path.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 47,
      "score": 24.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 406
    },
    {
      "id": 6975,
      "post_number": 9,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-12-28T13:50:10.813Z",
      "updated_at": "2024-12-28T13:50:10.813Z",
      "cooked": "<p>If you want to stay with a Linux analogy, you can think of a Typst project’s sandbox being similar to a <a href=\"https://wiki.archlinux.org/title/Chroot\">chroot</a> environment. Once you execute chroot, an absolute path <em>will</em> be relative to a directory other than what is globally considered the filesystem root.</p>\n<p>Re Windows, isn’t an absolute path still relative to the current drive’s root? So absolute Windows paths also require some context to figure out their meaning.</p>",
      "raw": "If you want to stay with a Linux analogy, you can think of a Typst project's sandbox being similar to a [chroot](https://wiki.archlinux.org/title/Chroot) environment. Once you execute chroot, an absolute path _will_ be relative to a directory other than what is globally considered the filesystem root.\n\nRe Windows, isn't an absolute path still relative to the current drive's root? So absolute Windows paths also require some context to figure out their meaning.",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 41,
      "score": 38.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:58:54.216041"
}