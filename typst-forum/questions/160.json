{
  "topic_metadata": {
    "id": 160,
    "title": "Can I configure my document (e.g. draft/release version, color theme) when creating a PDF without modifying the Typst file directly?",
    "slug": "can-i-configure-my-document-e-g-draft-release-version-color-theme-when-creating-a-pdf-without-modifying-the-typst-file-directly",
    "posts_count": 3,
    "created_at": "2024-09-15T09:09:22.733Z",
    "last_posted_at": "2024-09-15T09:26:00.364Z",
    "views": 787,
    "like_count": 8,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "scripting",
      "data-loading"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 407
  },
  "posts": [
    {
      "id": 649,
      "post_number": 1,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-15T09:09:22.843Z",
      "updated_at": "2024-09-19T07:14:44.885Z",
      "cooked": "<p>Basically, are there ways to to create multiple structurally similar PDFs from the same Typst document, by configuring it in some way? Use cases that come to mind:</p>\n<ul>\n<li>draft version (with watermark, comments, …) vs. release version</li>\n<li>different themes, e.g. light/dark, serif/sans</li>\n<li>exam and solution sheets</li>\n<li>slides, handout, and speaker notes</li>\n<li>rendering different data, serial letter style</li>\n</ul>\n<p>Is there a mechanism that lets one achieve that without having to modify the input Typst document itself?</p>",
      "raw": "Basically, are there ways to to create multiple structurally similar PDFs from the same Typst document, by configuring it in some way? Use cases that come to mind:\n\n- draft version (with watermark, comments, ...) vs. release version\n- different themes, e.g. light/dark, serif/sans\n- exam and solution sheets\n- slides, handout, and speaker notes\n- rendering different data, serial letter style\n\nIs there a mechanism that lets one achieve that without having to modify the input Typst document itself?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 100,
      "score": 1135.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 653,
      "post_number": 2,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-09-15T09:25:12.850Z",
      "updated_at": "2024-09-15T09:25:12.850Z",
      "cooked": "<p>You can use <code>system.inputs</code> (<a href=\"https://typst.app/docs/reference/foundations/sys\" class=\"inline-onebox\">System Functions – Typst Documentation</a>) to get the command-line inputs at compile time, and then check for the presence of specific inputs to define the document style in different ways.</p>",
      "raw": "You can use `system.inputs` (https://typst.app/docs/reference/foundations/sys) to get the command-line inputs at compile time, and then check for the presence of specific inputs to define the document style in different ways.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 99,
      "score": 64.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 654,
      "post_number": 3,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-15T09:26:00.364Z",
      "updated_at": "2024-09-15T09:29:42.656Z",
      "cooked": "<p>There absolutely is: the <a href=\"https://typst.app/docs/reference/foundations/sys\"><code>sys.inputs</code></a> dictionary contains values that have been set from the command line, via the <code>--input key=value</code> syntax. To my knowledge, the web app currently doesn’t have a way to put values into that dictionary, so be aware of that.</p>\n<p>It’s often useful to have <strong>default values</strong> for these parameters, and <strong>check whether values are valid</strong>. Let’s say you want to assume <code>--input theme=light</code> and <code>--input solutions=false</code>, you could process the <code>sys.inputs</code> dictionary like this:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">let theme = {\n  let valid-values = (\"light\", \"dark\")\n  let value = sys.inputs.at(\"theme\", default: \"light\")\n  assert(value in valid-values, message: \"`--input theme` must be light or dark\")\n  value\n}\n\nlet solutions = {\n  let valid-values = (\"true\": true, \"false\": false)\n  let value = sys.inputs.at(\"solutions\", default: \"false\")\n  assert(value in valid-values, message: \"`--input solutions` must be true or false\")\n  valid-values.at(value)\n}\n</code></pre>\n<p>Using this code, <code>theme</code> will be a string value (default <code>\"light\"</code>) and <code>solutions</code> will be a boolean value (default <code>false</code>).</p>\n<p>For more complex data input needs, using one of the <a href=\"https://typst.app/docs/reference/data-loading/\">data loading</a> functions is probably the best idea:</p>\n<ul>\n<li>directly in the command line: <code>--input 'data={\"some-num\": 1, \"some-bool\": true}'</code><br>\nthen read via <code>json.decode(sys.inputs.data)</code></li>\n<li>in a separate file: <code>--input 'file=data.json'</code><br>\nthen read via <code>json(sys.inputs.file)</code><br>\nFor this to work, the file must be accessible to Typst, i.e. it must be in the Typst <em>root directory</em>. By default, that is the directory where the main Typst file you’re processing is located.</li>\n</ul>\n<p>(JSON is of course just one option for a data format that can be read like this.)</p>",
      "raw": "There absolutely is: the [`sys.inputs`](https://typst.app/docs/reference/foundations/sys) dictionary contains values that have been set from the command line, via the `--input key=value` syntax. To my knowledge, the web app currently doesn't have a way to put values into that dictionary, so be aware of that.\n\nIt's often useful to have **default values** for these parameters, and **check whether values are valid**. Let's say you want to assume `--input theme=light` and `--input solutions=false`, you could process the `sys.inputs` dictionary like this:\n\n```typc\nlet theme = {\n  let valid-values = (\"light\", \"dark\")\n  let value = sys.inputs.at(\"theme\", default: \"light\")\n  assert(value in valid-values, message: \"`--input theme` must be light or dark\")\n  value\n}\n\nlet solutions = {\n  let valid-values = (\"true\": true, \"false\": false)\n  let value = sys.inputs.at(\"solutions\", default: \"false\")\n  assert(value in valid-values, message: \"`--input solutions` must be true or false\")\n  valid-values.at(value)\n}\n```\n\nUsing this code, `theme` will be a string value (default `\"light\"`) and `solutions` will be a boolean value (default `false`).\n\nFor more complex data input needs, using one of the [data loading](https://typst.app/docs/reference/data-loading/) functions is probably the best idea:\n- directly in the command line: `--input 'data={\"some-num\": 1, \"some-bool\": true}'`\n  then read via `json.decode(sys.inputs.data)`\n- in a separate file: `--input 'file=data.json'`\n  then read via `json(sys.inputs.file)`\n  For this to work, the file must be accessible to Typst, i.e. it must be in the Typst _root directory_. By default, that is the directory where the main Typst file you're processing is located.\n\n(JSON is of course just one option for a data format that can be read like this.)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 6,
      "reads": 97,
      "score": 699.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:58:58.735706"
}