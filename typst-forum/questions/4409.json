{
  "topic_metadata": {
    "id": 4409,
    "title": "How do I include custom references to items in a table?",
    "slug": "how-do-i-include-custom-references-to-items-in-a-table",
    "posts_count": 6,
    "created_at": "2025-06-01T10:57:57.489Z",
    "last_posted_at": "2025-06-05T14:34:40.607Z",
    "views": 53,
    "like_count": 3,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "quachpas",
    "tags": [
      "scripting",
      "tables",
      "referencing"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 648
  },
  "posts": [
    {
      "id": 13519,
      "post_number": 1,
      "username": "Erik_Frisk",
      "name": "Erik Frisk",
      "created_at": "2025-06-01T10:57:57.548Z",
      "updated_at": "2025-06-05T15:11:40.527Z",
      "cooked": "<p>Hi,</p>\n<p>I am learning Typst (explains probable beginners mistakes below)  and I am writing a template that includes writing tables of requirements.</p>\n<p>I would like to be able to reference individual requirements, i.e., put a label on selected requirements and be able to reference them like<br>\n<code>@req_ui implies ...</code> =&gt; <code>Req. 2 implies</code></p>\n<p>I have tried with creating a custom kind (in a figure function call) as I understand <a href=\"https://typst.app/docs/reference/model/ref/\" class=\"inline-onebox\">Reference Function – Typst Documentation</a>, but I can’t really get it to work with the table.</p>\n<p>My question is then simply: What is the (best) way to achieve this functionality?</p>\n<p>The table below is a minimal example similar to what I am aiming for:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let req_counter = counter(\"req\")\n#req_counter.update(1)\n\n#table(columns: (auto, auto, auto),\n  align: (center, left, center),\n  stroke: none,\n  table.hline(stroke: 0.75pt, position: bottom),\n  table.header([*No*], [*Requirement*], [*Priority*]),\n    [#context req_counter.display() #req_counter.step()], \n     [A requirement on computational load], \n     [1],\n    [#context req_counter.display() #req_counter.step()], \n     [A requirement on UI], \n     [2],\n)\n</code></pre>\n<p>Best,<br>\nErik</p>\n<p>Edit:<br>\nI tried something like this (with a custom show rule)</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#figure(kind: \"req\", supplement: \"Req.\", context req_counter.display())&lt;b&gt;\n@b\n</code></pre>\n<p>and then the reference is OK but I can’t get this to work with the table of requirements.</p>",
      "raw": "Hi, \n\nI am learning Typst (explains probable beginners mistakes below)  and I am writing a template that includes writing tables of requirements.\n\nI would like to be able to reference individual requirements, i.e., put a label on selected requirements and be able to reference them like\n`@req_ui implies ...` => `Req. 2 implies`\n\nI have tried with creating a custom kind (in a figure function call) as I understand https://typst.app/docs/reference/model/ref/, but I can't really get it to work with the table.\n\nMy question is then simply: What is the (best) way to achieve this functionality?\n\nThe table below is a minimal example similar to what I am aiming for:\n```typst\n#let req_counter = counter(\"req\")\n#req_counter.update(1)\n\n#table(columns: (auto, auto, auto),\n  align: (center, left, center),\n  stroke: none,\n  table.hline(stroke: 0.75pt, position: bottom),\n  table.header([*No*], [*Requirement*], [*Priority*]),\n    [#context req_counter.display() #req_counter.step()], \n     [A requirement on computational load], \n     [1],\n    [#context req_counter.display() #req_counter.step()], \n     [A requirement on UI], \n     [2],\n)\n```\n\nBest, \n  Erik\n\n\nEdit:\nI tried something like this (with a custom show rule)\n```typst\n#figure(kind: \"req\", supplement: \"Req.\", context req_counter.display())<b>\n@b\n```\nand then the reference is OK but I can't get this to work with the table of requirements.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 18,
      "score": 38.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1682
    },
    {
      "id": 13531,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-06-01T14:11:40.038Z",
      "updated_at": "2025-06-01T14:12:45.689Z",
      "cooked": "<p>With many tricks, it’s possible to achieve something that would be a reasonable way to do this. You had all the elements at hand!!</p>\n<p>Basically:</p>\n<ul>\n<li>You need figure elements to handle your numbering for you when referencing requirements</li>\n<li>We are still using the <code>req_counter</code>, although I’d probably replace it with <code>counter(figure.where(kind: \"req\"))</code> if that causes issues (it probably wouldn’t)</li>\n<li>“invisible” <code>figure</code>s have the unfortunate side effect of adding a block, so we can just style them to only show an empty body</li>\n</ul>\n<p>Putting all that together, we generate a label for each requirement (figure), and … that’s it!</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let req_counter = counter(\"req\")\n#req_counter.update(1)\n#show figure.where(kind: \"req\"): it =&gt; it.body // remove block\n#let Req(text, priority) = {\n  let no = () =&gt; req_counter.display() + req_counter.step()\n  let number = () =&gt; req_counter.get().at(0)\n  let req() = figure(\n    kind: \"req\",\n    supplement: \"Req.\",\n    numbering: \"1.\",\n  )[]\n  return (\n    context [#no()#req()#label(\"req:\" + str(number()))],\n    text,\n    priority,\n  )\n}\n\n#table(\n  columns: (auto, auto, auto),\n  align: (center, left, center),\n  stroke: none,\n  table.hline(stroke: 0.75pt, position: bottom),\n  table.header([*No*], [*Requirement*], [*Priority*]),\n  ..Req([A requirement on computational load], [1]),\n  ..Req([A requirement on UI], [2])\n)\n\n@req:1\n\n@req:2\n</code></pre>",
      "raw": "With many tricks, it's possible to achieve something that would be a reasonable way to do this. You had all the elements at hand!!\n\nBasically:\n- You need figure elements to handle your numbering for you when referencing requirements\n- We are still using the `req_counter`, although I'd probably replace it with `counter(figure.where(kind: \"req\"))` if that causes issues (it probably wouldn't)\n- \"invisible\" `figure`s have the unfortunate side effect of adding a block, so we can just style them to only show an empty body\n\nPutting all that together, we generate a label for each requirement (figure), and ... that's it!\n\n```typ\n#let req_counter = counter(\"req\")\n#req_counter.update(1)\n#show figure.where(kind: \"req\"): it => it.body // remove block\n#let Req(text, priority) = {\n  let no = () => req_counter.display() + req_counter.step()\n  let number = () => req_counter.get().at(0)\n  let req() = figure(\n    kind: \"req\",\n    supplement: \"Req.\",\n    numbering: \"1.\",\n  )[]\n  return (\n    context [#no()#req()#label(\"req:\" + str(number()))],\n    text,\n    priority,\n  )\n}\n\n#table(\n  columns: (auto, auto, auto),\n  align: (center, left, center),\n  stroke: none,\n  table.hline(stroke: 0.75pt, position: bottom),\n  table.header([*No*], [*Requirement*], [*Priority*]),\n  ..Req([A requirement on computational load], [1]),\n  ..Req([A requirement on UI], [2])\n)\n\n@req:1\n\n@req:2\n```",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 17,
      "score": 33.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 13534,
      "post_number": 3,
      "username": "Erik_Frisk",
      "name": "Erik Frisk",
      "created_at": "2025-06-01T14:39:38.286Z",
      "updated_at": "2025-06-01T14:39:38.286Z",
      "cooked": "<p>This worked really well, thanks a lot!</p>",
      "raw": "This worked really well, thanks a lot!",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 17,
      "score": 18.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1682
    },
    {
      "id": 13721,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-06-04T23:37:06.848Z",
      "updated_at": "2025-06-04T23:37:56.706Z",
      "cooked": "<p>Slightly shortened:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show figure.where(kind: \"req\"): it =&gt; it.body // remove block\n\n#let req-counter = counter(\"req\")\n#req-counter.update(1)\n#let Req(text, priority) = {\n  let no() = req-counter.display() + req-counter.step()\n  let number() = req-counter.get().first()\n  let req() = figure(kind: \"req\", supplement: \"Req.\", numbering: \"1.\")[]\n  (context [#no()#req()#label(\"req:\" + str(number()))], text, priority)\n}\n\n#table(\n  columns: 3,\n  align: (center, left, center),\n  stroke: none,\n  table.hline(stroke: 0.75pt, position: bottom),\n  table.header[*No*][*Requirement*][*Priority*],\n  ..Req[A requirement on computational load][1],\n  ..Req[A requirement on UI][2],\n)\n\n@req:1\n\n@req:2\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/5/57be8e60fe78abed97af286c5b6d55dfb693f453.png\" data-download-href=\"https://forum.typst.app/uploads/default/57be8e60fe78abed97af286c5b6d55dfb693f453\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/original/2X/5/57be8e60fe78abed97af286c5b6d55dfb693f453.png\" alt=\"image\" data-base62-sha1=\"cwdNT1446m0c4C8TgUxiG0PWjlh\" width=\"340\" height=\"132\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">340×132 7.71 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "Slightly shortened:\n\n```typ\n#show figure.where(kind: \"req\"): it => it.body // remove block\n\n#let req-counter = counter(\"req\")\n#req-counter.update(1)\n#let Req(text, priority) = {\n  let no() = req-counter.display() + req-counter.step()\n  let number() = req-counter.get().first()\n  let req() = figure(kind: \"req\", supplement: \"Req.\", numbering: \"1.\")[]\n  (context [#no()#req()#label(\"req:\" + str(number()))], text, priority)\n}\n\n#table(\n  columns: 3,\n  align: (center, left, center),\n  stroke: none,\n  table.hline(stroke: 0.75pt, position: bottom),\n  table.header[*No*][*Requirement*][*Priority*],\n  ..Req[A requirement on computational load][1],\n  ..Req[A requirement on UI][2],\n)\n\n@req:1\n\n@req:2\n```\n\n![image|340x132](upload://cwdNT1446m0c4C8TgUxiG0PWjlh.png)",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 14,
      "score": 17.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 13752,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-06-05T13:04:47.803Z",
      "updated_at": "2025-06-05T13:04:47.803Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/erik_frisk\">@Erik_Frisk</a>, could you maybe try to revise your post’s title to be a complete question as per the <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\">question guidelines</a>:</p>\n<blockquote>\n<p><strong>Good titles are questions you would ask your friend about Typst.</strong></p>\n</blockquote>\n<p>We hope by adhering to this, we make the information in this forum easy to find in the future.</p>\n<p>Also, don’t forget to tick <img src=\"https://forum.typst.app/images/emoji/apple/ballot_box_with_check.png?v=12\" title=\":ballot_box_with_check:\" class=\"emoji\" alt=\":ballot_box_with_check:\" loading=\"lazy\" width=\"20\" height=\"20\"> one of the responses if you got a satisfying answer. The answer you choose should usually be the response that you found most correct/helpful/comprehensive for the question you asked. Thanks!</p>",
      "raw": "Hi @Erik_Frisk, could you maybe try to revise your post’s title to be a complete question as per the [question guidelines](https://forum.typst.app/t/how-to-post-in-the-questions-category/11):\n\n> **Good titles are questions you would ask your friend about Typst.**\n\nWe hope by adhering to this, we make the information in this forum easy to find in the future. \n\nAlso, don’t forget to tick :ballot_box_with_check: one of the responses if you got a satisfying answer. The answer you choose should usually be the response that you found most correct/helpful/comprehensive for the question you asked. Thanks!",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 12,
      "score": 12.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 13763,
      "post_number": 6,
      "username": "Erik_Frisk",
      "name": "Erik Frisk",
      "created_at": "2025-06-05T14:34:40.607Z",
      "updated_at": "2025-06-05T14:34:40.607Z",
      "cooked": "<p>Sure!</p>\n<p>I’ve ticked the solution that helped me.</p>\n<p>I would be happy to revise the OP title, but I’m not sure where to click to edit.</p>",
      "raw": "Sure! \n\nI've ticked the solution that helped me.\n\nI would be happy to revise the OP title, but I'm not sure where to click to edit.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 12,
      "score": 2.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1682
    }
  ],
  "scraped_at": "2025-06-10T09:46:56.802279"
}