{
  "topic_metadata": {
    "id": 2466,
    "title": "How can I update state inside a ctheorems environment?",
    "slug": "how-can-i-update-state-inside-a-ctheorems-environment",
    "posts_count": 5,
    "created_at": "2025-01-19T08:01:44.475Z",
    "last_posted_at": "2025-01-19T12:03:28.681Z",
    "views": 83,
    "like_count": 2,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "state"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 628
  },
  "posts": [
    {
      "id": 7651,
      "post_number": 1,
      "username": "Ilya",
      "name": "Ilya",
      "created_at": "2025-01-19T08:01:44.652Z",
      "updated_at": "2025-01-19T23:07:59.608Z",
      "cooked": "<p>In MWE below i have dictionary which i want to update every time Problem environment is created. I need this updated dictionary to use in FMT constructor.<br>\nThe problem is that after updating the <code>test_dict</code> typst does not see the change.<br>\nI understand that <code>test_dict.get()</code> is equivalent to <code>test_dict.at(here())</code>, so  i can assume that both <code>dict_test.update()</code> function and <code>test_dict.get()</code> are evaluated at location <code>here()</code>, which causes the problem.<br>\nHowever, i find it counterintuitive, because they still go after each other.<br>\nSo the question is if there is a way to make <code>test</code> variable contain updated version of test_dict</p>\n<p><strong>UPD.</strong> Ok, i made it work by changing<br>\n<code>let test = test_dict.get().at(\"some_array\")</code><br>\nto<br>\n<code>let test = context test_dict.get().at(\"some_array\")</code><br>\nNow will try to figure out why it works<br>\n<strong>UPD2</strong> Still need help, because now <code>test</code> is of type content and is useless</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/ctheorems:1.1.3\": *\n#show: thmrules\n\n// create test dictionary\n#let test_dict = state(\"test\",\n  (\n    \"some_array\": ()\n  )\n)\n\n#let problem = thmenv(\n  \"problem\",\n  none,\n  none,\n  (name, number, body) =&gt; context {\n    //get current problem number\n    let number = thmcounters.get().at(\"counters\").at(\"problem\").at(0)\n    //update test_dict\n    test_dict.update(x =&gt; {\n      let y = x\n      //push \"body\" of problem into \"some_array\"\n      y.at(\"some_array\").push(body)\n      return y\n    })\n    //now the next line of code is the problem\n    // test_dict did get updated, \n    //but variable \"test\" does not contain updated version of it\n    let test = test_dict.get().at(\"some_array\")\n    let title = text(emph(\"Problem\")+str(number)+\".\")\n    [\n      #title #body\\\n      #test\n    ]\n }\n)\n\n//This should output: Problem1. first problem\n//                              (first problem)\n#problem[first problem]\n\n#context {\n  test_dict.get()\n}\n</code></pre>",
      "raw": "In MWE below i have dictionary which i want to update every time Problem environment is created. I need this updated dictionary to use in FMT constructor.\nThe problem is that after updating the ```test_dict``` typst does not see the change. \nI understand that ```test_dict.get()``` is equivalent to ```test_dict.at(here())```, so  i can assume that both ```dict_test.update()``` function and ```test_dict.get()``` are evaluated at location ```here()```, which causes the problem.\nHowever, i find it counterintuitive, because they still go after each other.\nSo the question is if there is a way to make ```test``` variable contain updated version of test_dict\n\n**UPD.** Ok, i made it work by changing \n```let test = test_dict.get().at(\"some_array\")```\nto\n```let test = context test_dict.get().at(\"some_array\")```\nNow will try to figure out why it works\n**UPD2** Still need help, because now ```test``` is of type content and is useless\n```typ\n#import \"@preview/ctheorems:1.1.3\": *\n#show: thmrules\n\n// create test dictionary\n#let test_dict = state(\"test\",\n  (\n    \"some_array\": ()\n  )\n)\n\n#let problem = thmenv(\n  \"problem\",\n  none,\n  none,\n  (name, number, body) => context {\n    //get current problem number\n    let number = thmcounters.get().at(\"counters\").at(\"problem\").at(0)\n    //update test_dict\n    test_dict.update(x => {\n      let y = x\n      //push \"body\" of problem into \"some_array\"\n      y.at(\"some_array\").push(body)\n      return y\n    })\n    //now the next line of code is the problem\n    // test_dict did get updated, \n    //but variable \"test\" does not contain updated version of it\n    let test = test_dict.get().at(\"some_array\")\n    let title = text(emph(\"Problem\")+str(number)+\".\")\n    [\n      #title #body\\\n      #test\n    ]\n }\n)\n\n//This should output: Problem1. first problem\n//                              (first problem)\n#problem[first problem]\n\n#context {\n  test_dict.get()\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 196.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1068
    },
    {
      "id": 7660,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-01-19T11:20:43.638Z",
      "updated_at": "2025-01-19T11:20:43.638Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/ilya\">@Ilya</a>, could you maybe try to revise your post’s title to be a complete question as per the <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\">question guidelines</a>:</p>\n<blockquote>\n<p><strong>Good titles are questions you would ask your friend about Typst.</strong></p>\n</blockquote>\n<p>We hope by adhering to this, we make the information in this forum easy to find in the future. Thanks!</p>",
      "raw": "Hi @Ilya, could you maybe try to revise your post’s title to be a complete question as per the [question guidelines](https://forum.typst.app/t/how-to-post-in-the-questions-category/11):\n\n> **Good titles are questions you would ask your friend about Typst.**\n\nWe hope by adhering to this, we make the information in this forum easy to find in the future. Thanks!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 14.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 7661,
      "post_number": 3,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-01-19T11:21:37.674Z",
      "updated_at": "2025-01-19T11:23:19.933Z",
      "cooked": "<p>While I don’t use ctheorems in particular, your updates look like you’re running into this:</p>\n<aside class=\"quote quote-modified\" data-post=\"2\" data-topic=\"164\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/laurmaedje/48/14_2.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2\">Why is the value I receive from context always content?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    When working with context, you need to put everything that depends on the contextual information into the context block/expression itself. The explicit context expression is a trade-off: You get to know where in the document you are (accessible via <a href=\"https://typst.app/docs/reference/introspection/here/\">here()</a>) and which set rules are active there (accessible via things like text.lang). In return, the context value itself becomes opaque. You cannot peek into it, so everything that depends on the contextual information must happen within it. \nLet’s lo…\n  </blockquote>\n</aside>\n\n<p>Maybe that helps you until someone with more experience with ctheorems responds.</p>",
      "raw": "While I don't use ctheorems in particular, your updates look like you're running into this:\n\nhttps://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2?u=sillyfreak\n\nMaybe that helps you until someone with more experience with ctheorems responds.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 9.8,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 7662,
      "post_number": 4,
      "username": "Florian",
      "name": "Florian",
      "created_at": "2025-01-19T11:33:49.033Z",
      "updated_at": "2025-01-19T11:35:41.588Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/ilya\">@Ilya</a> - i fear i don’t understand what you want to achieve.</p>\n<p>What should <code>thmenv</code> do?</p>\n<p>Should it save the current problem (as passed as argument) to the dictionary and then print it in the given way?</p>",
      "raw": "Hi @Ilya - i fear i don't understand what you want to achieve.\n\nWhat should `thmenv` do?\n\nShould it save the current problem (as passed as argument) to the dictionary and then print it in the given way?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 4.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 251
    },
    {
      "id": 7683,
      "post_number": 5,
      "username": "Ilya",
      "name": "Ilya",
      "created_at": "2025-01-19T12:03:28.681Z",
      "updated_at": "2025-01-19T12:03:28.681Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/florian\">@Florian</a><br>\nWhat i wanted to achieve is to get updated version of <code>test_dict</code> withing the scope of <code>thmenv</code> constructor to then use it’s value as i wish<br>\n<a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a> and UNDRL pointed out that nested contexts should be used in and it works indeed.<br>\nThe achievement <img src=\"https://forum.typst.app/images/emoji/apple/grinning.png?v=12\" title=\":grinning:\" class=\"emoji\" alt=\":grinning:\" loading=\"lazy\" width=\"20\" height=\"20\"> :</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/ctheorems:1.1.3\": *\n#show: thmrules.with(qed-symbol: $square$)\n\n#show link: it =&gt; {\n  set text(fill:\n    if (type(it.dest) == \"label\") { green } else { green }\n  )\n  it\n}\n#show ref: it =&gt; {\n  link(it.target, it)\n}\n\n#let qa_text = state(\"qa\",\n  (:)\n)\n\n#let hyper_problem = thmenv(\n  \"problem\",\n  none,\n  none,\n  (name, number, body) =&gt; context {\n    let number = thmcounters.get().at(\"counters\").at(\"problem\").at(0)\n    let num_identifier = \"problem\"+str(number)\n    qa_text.update(x =&gt; {\n      let y = x\n      y.insert(num_identifier, (\"p_content\": body))\n      return y\n    })\n    context {\n    let p_key = qa_text.final().at(num_identifier)\n    let loc = if (\"ans_content\" in p_key.keys() and p_key.at(\"ans_content\") != []) {&lt;temploc&gt;} else {&lt;temploc2&gt;}\n    let num_rect = rect(\n        stroke: none,\n        inset: 0em,\n        place(\n          right,\n          dx: -100% - 8pt,\n          link(loc)[#text(\n            str(number)+\".\"\n          )])+body)\n          [#num_rect]}\n    }\n)\n\n#let answer = (ans_cnt) =&gt; context {\n  let number = thmcounters.get().at(\"counters\").at(\"problem\").at(0)\n  qa_text.update(x =&gt; {\n    let y = x\n    y.at(\"problem\"+str(number)).insert(\"ans_content\", ans_cnt)\n    return y\n  })\n}\n\n#hyper_problem[first problem]\n#answer[answer to first problem]\n\n#hyper_problem[second problem]\n\n#context qa_text.get()\n\ntemplocation &lt;temploc&gt;\n\ntemploc2 &lt;temploc2&gt;\n</code></pre>",
      "raw": "Hi @Florian \nWhat i wanted to achieve is to get updated version of ```test_dict``` withing the scope of ```thmenv``` constructor to then use it's value as i wish\n@SillyFreak and UNDRL pointed out that nested contexts should be used in and it works indeed.\nThe achievement :grinning: :\n```typ\n#import \"@preview/ctheorems:1.1.3\": *\n#show: thmrules.with(qed-symbol: $square$)\n\n#show link: it => {\n  set text(fill:\n    if (type(it.dest) == \"label\") { green } else { green }\n  )\n  it\n}\n#show ref: it => {\n  link(it.target, it)\n}\n\n#let qa_text = state(\"qa\",\n  (:)\n)\n\n#let hyper_problem = thmenv(\n  \"problem\",\n  none,\n  none,\n  (name, number, body) => context {\n    let number = thmcounters.get().at(\"counters\").at(\"problem\").at(0)\n    let num_identifier = \"problem\"+str(number)\n    qa_text.update(x => {\n      let y = x\n      y.insert(num_identifier, (\"p_content\": body))\n      return y\n    })\n    context {\n    let p_key = qa_text.final().at(num_identifier)\n    let loc = if (\"ans_content\" in p_key.keys() and p_key.at(\"ans_content\") != []) {<temploc>} else {<temploc2>}\n    let num_rect = rect(\n        stroke: none,\n        inset: 0em,\n        place(\n          right,\n          dx: -100% - 8pt,\n          link(loc)[#text(\n            str(number)+\".\"\n          )])+body)\n          [#num_rect]}\n    }\n)\n\n#let answer = (ans_cnt) => context {\n  let number = thmcounters.get().at(\"counters\").at(\"problem\").at(0)\n  qa_text.update(x => {\n    let y = x\n    y.at(\"problem\"+str(number)).insert(\"ans_content\", ans_cnt)\n    return y\n  })\n}\n\n#hyper_problem[first problem]\n#answer[answer to first problem]\n\n#hyper_problem[second problem]\n\n#context qa_text.get()\n\ntemplocation <temploc>\n\ntemploc2 <temploc2>\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 24,
      "score": 64.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1068
    }
  ],
  "scraped_at": "2025-06-10T09:52:41.793897"
}