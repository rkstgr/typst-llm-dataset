{
  "topic_metadata": {
    "id": 952,
    "title": "How can I create show rules in a loop?",
    "slug": "how-can-i-create-show-rules-in-a-loop",
    "posts_count": 2,
    "created_at": "2024-10-05T19:29:20.130Z",
    "last_posted_at": "2024-10-05T19:29:34.453Z",
    "views": 589,
    "like_count": 5,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 1,
    "word_count": 883
  },
  "posts": [
    {
      "id": 3468,
      "post_number": 1,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-05T19:29:20.297Z",
      "updated_at": "2024-10-05T19:29:20.297Z",
      "cooked": "<p>Let’s say I have many words for which I want a show rule to treat them all with some transformation; say, I want them to all show up <code>strong</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show \"foo\": strong\n#show \"baz\": strong\n\nfoo bar baz\n</code></pre>\n<p>In the real case, there are obviously potentially many more targets for the show rules; how can I create these show rules without repeating myself? Ideally I want my targets to be stored in arrays and somehow process the elements of the array – something like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let words = (\"foo\", \"baz\")\n#for word in words {\n  show word: strong\n}\n\nfoo bar baz\n</code></pre>\n<p>However, this approach does not work…</p>\n<hr>\n<p>Similarly, I may have many math symbols of which I want to change the default behavior:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show sym.lt: math.scripts\n#show sym.lt.eq: math.scripts\n\n$ a &lt;=_X b &lt;_X c $\n</code></pre>\n<p>Or something else; e.g. I want to make the content of several elements uppercase:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show emph: upper\n#show strong: upper\n\nUppercase _all_ the *things*!\n</code></pre>\n<p>Here’s an image of the show rules’ effects:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/156f9964f6a6b454c01ef10aee832ea25f3cce8b.png\" data-download-href=\"https://forum.typst.app/uploads/default/156f9964f6a6b454c01ef10aee832ea25f3cce8b\" title=\"show-loop\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/156f9964f6a6b454c01ef10aee832ea25f3cce8b_2_317x374.png\" alt=\"show-loop\" data-base62-sha1=\"33D7SoYYUjqcjov67vB4znUie27\" width=\"317\" height=\"374\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/156f9964f6a6b454c01ef10aee832ea25f3cce8b_2_317x374.png, https://forum.typst.app/uploads/default/optimized/1X/156f9964f6a6b454c01ef10aee832ea25f3cce8b_2_475x561.png 1.5x, https://forum.typst.app/uploads/default/optimized/1X/156f9964f6a6b454c01ef10aee832ea25f3cce8b_2_634x748.png 2x\" data-dominant-color=\"F5F5F5\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">show-loop</span><span class=\"informations\">709×838 120 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>How can I solve the problem in these cases?</p>",
      "raw": "Let's say I have many words for which I want a show rule to treat them all with some transformation; say, I want them to all show up `strong`:\n```typ\n#show \"foo\": strong\n#show \"baz\": strong\n\nfoo bar baz\n```\nIn the real case, there are obviously potentially many more targets for the show rules; how can I create these show rules without repeating myself? Ideally I want my targets to be stored in arrays and somehow process the elements of the array -- something like this:\n```typ\n#let words = (\"foo\", \"baz\")\n#for word in words {\n  show word: strong\n}\n\nfoo bar baz\n```\n\nHowever, this approach does not work...\n\n---\n\nSimilarly, I may have many math symbols of which I want to change the default behavior:\n```typ\n#show sym.lt: math.scripts\n#show sym.lt.eq: math.scripts\n\n$ a <=_X b <_X c $\n```\nOr something else; e.g. I want to make the content of several elements uppercase:\n```typ\n#show emph: upper\n#show strong: upper\n\nUppercase _all_ the *things*!\n```\nHere's an image of the show rules' effects:\n\n![show-loop|423x499, 75%](upload://33D7SoYYUjqcjov67vB4znUie27.png)\n\nHow can I solve the problem in these cases?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 79,
      "score": 2245.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 3469,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-05T19:29:34.453Z",
      "updated_at": "2025-01-30T19:56:15.531Z",
      "cooked": "<p>(Credit for this answer goes to <a class=\"mention\" href=\"/u/laurmaedje\">@laurmaedje</a> who wrote it <a href=\"https://discord.com/channels/1054443721975922748/1088371919725793360/1292183272394199171\">here</a>, <a href=\"https://discord.com/channels/1054443721975922748/1088371919725793360/1292216579496607849\">here</a>, and a few times earlier on Discord, and to <a class=\"mention\" href=\"/u/eric\">@Eric</a> for recommending <code>fold()</code>.)</p>\n<hr>\n<p>There is a general and a two more specific way to do this:</p>\n<ul>\n<li>using a loop or equivalent to generate and apply multiple show rules</li>\n<li>using regular expressions with alternatives (<code>|</code>)</li>\n<li>using <a href=\"https://typst.app/docs/reference/foundations/selector/#definitions-or\"><code>selector.or()</code></a></li>\n</ul>\n<p>since the specific ways cover the most common use cases and are also better performance-wise, let’s start with these:</p>\n<h2><a name=\"p-3469-regular-expressions-1\" class=\"anchor\" href=\"#p-3469-regular-expressions-1\"></a>Regular expressions</h2>\n<p>The first two cases actually only concern strings. With <code>\"foo\"</code> and <code>\"baz\"</code> it’s obvious, but the symbols can also be easily converted to strings and are generally treated by Typst this way. That means we can construct a regular expression that handles all the values in a single show rule:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let words = (\"foo\", \"baz\")\n#show regex(words.join(\"|\")): strong\n\nfoo bar baz\n\n#let symbols = (sym.lt, sym.lt.eq)\n#show regex(symbols.join(\"|\")): math.scripts\n\n$ a &lt;=_X b &lt;_X c $\n</code></pre>\n<details>\n<summary>\nDetour: matching whole words</summary>\n<p>If you want to match <em>words</em>, you’ll usually only want to match <em>whole words</em>. The regular expression “word boundary” matcher <code>\\b</code> can be used for this purpose:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let words = (\"his\", \"hers\")\n#show regex(words.map(word =&gt; \"\\b\" + word + \"\\b\").join(\"|\")): strong\n\nhis and hers but not this\n</code></pre>\n<p>The complete regex in this example ends up to be <code>\\bhis\\b|\\bhers\\b</code>, which means “either the complete word <em>his</em> or the complete word <em>hers</em>”</p>\n</details>\n<h2><a name=\"p-3469-selectoror-2\" class=\"anchor\" href=\"#p-3469-selectoror-2\"></a><code>selector.or()</code></h2>\n<p>The matches of a show rule are determined by a <a href=\"https://typst.app/docs/reference/foundations/selector/\"><code>selector</code></a>, and although Typst’s selectors can’t do everything, most cases where you want the same kind of <code>show</code> rules for multiple targets can be handled with <code>or()</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let elements = (emph, strong)\n#show selector.or(..elements): upper\n\nUppercase _all_ the *things*!\n</code></pre>\n<p>Regexes and strings can not be combined using <code>selector.or()</code>, so if you want to apply a rule to, say <code>(\"foo\", emph)</code>, you’ll need to write two show rules; one with all the strings and regexes, the other with all the other targets.</p>\n<h2><a name=\"p-3469-actually-generating-show-rules-in-a-loop-3\" class=\"anchor\" href=\"#p-3469-actually-generating-show-rules-in-a-loop-3\"></a>Actually generating show rules in a loop</h2>\n<p>In case even that is not enough, there is still a way to <em>actually</em> generate show rules in a loop. First of all, what’s the problem with the original approach?</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let words = (\"foo\", \"baz\")\n#for word in words {\n  show word: strong\n}\n\nfoo bar baz\n</code></pre>\n<p>Each show rule only applies until the end of the scope it appears in, and that is the current iteration of the loop. There is no content in the loop, so each show rule applies to nothing.</p>\n<p>The solution is to apply the same principles shown in the <a href=\"https://typst.app/docs/tutorial/making-a-template/#set-and-show-rules\">Making a Template</a> tutorial, just a bit more creatively. First, we move the (still manually duplicated) rules into a “show everything” rule:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show: body =&gt; {\n  show \"foo\": strong\n  show \"baz\": strong\n\n  body\n}\n\nfoo bar baz\n</code></pre>\n<p>We now have the rest of the document in a variable <code>body</code> which we can work with. Now, one solution is using a loop and replace <code>body</code> with something that has one extra show rule applied in each iteration:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let words = (\"foo\", \"baz\")\n#show: body =&gt; {\n  for word in words {\n    body = {\n      show word: strong\n      body\n    }\n  }\n  body\n}\n\nfoo bar baz\n</code></pre>\n<p>This works, but it can be slightly shorten by using the <a href=\"https://typst.app/docs/reference/foundations/array/#definitions-fold\"><code>array.fold()</code></a> method which is perfectly suited for this situation:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let words = (\"foo\", \"baz\")\n#show: body =&gt; words.fold(body, (body, word) =&gt; {\n  show word: strong\n  body\n})\n\nfoo bar baz\n</code></pre>\n<p>As mentioned above, this is not great for performance. Regardless of how you do it, having a large numbers of show rules active at the same time is not great. It’s usually okay if every show rule is written out, but creating them in a loop can hide how expensive a piece of code is. Whenever possible, the approaches above are preferable.</p>",
      "raw": "(Credit for this answer goes to @laurmaedje who wrote it [here](https://discord.com/channels/1054443721975922748/1088371919725793360/1292183272394199171), [here](https://discord.com/channels/1054443721975922748/1088371919725793360/1292216579496607849), and a few times earlier on Discord, and to @Eric for recommending `fold()`.)\n\n---\n\nThere is a general and a two more specific way to do this:\n- using a loop or equivalent to generate and apply multiple show rules\n- using regular expressions with alternatives (`|`)\n- using [`selector.or()`](https://typst.app/docs/reference/foundations/selector/#definitions-or)\n\nsince the specific ways cover the most common use cases and are also better performance-wise, let's start with these:\n\n## Regular expressions\n\nThe first two cases actually only concern strings. With `\"foo\"` and `\"baz\"` it's obvious, but the symbols can also be easily converted to strings and are generally treated by Typst this way. That means we can construct a regular expression that handles all the values in a single show rule:\n```typ\n#let words = (\"foo\", \"baz\")\n#show regex(words.join(\"|\")): strong\n\nfoo bar baz\n\n#let symbols = (sym.lt, sym.lt.eq)\n#show regex(symbols.join(\"|\")): math.scripts\n\n$ a <=_X b <_X c $\n```\n\n[details=\"Detour: matching whole words\"]\nIf you want to match _words_, you'll usually only want to match _whole words_. The regular expression \"word boundary\" matcher `\\b` can be used for this purpose:\n```typ\n#let words = (\"his\", \"hers\")\n#show regex(words.map(word => \"\\b\" + word + \"\\b\").join(\"|\")): strong\n\nhis and hers but not this\n```\nThe complete regex in this example ends up to be `\\bhis\\b|\\bhers\\b`, which means \"either the complete word _his_ or the complete word _hers_\"\n[/details]\n\n## `selector.or()`\n\nThe matches of a show rule are determined by a [`selector`](https://typst.app/docs/reference/foundations/selector/), and although Typst's selectors can't do everything, most cases where you want the same kind of `show` rules for multiple targets can be handled with `or()`:\n```typ\n#let elements = (emph, strong)\n#show selector.or(..elements): upper\n\nUppercase _all_ the *things*!\n```\n\nRegexes and strings can not be combined using `selector.or()`, so if you want to apply a rule to, say `(\"foo\", emph)`, you'll need to write two show rules; one with all the strings and regexes, the other with all the other targets.\n\n## Actually generating show rules in a loop\n\nIn case even that is not enough, there is still a way to _actually_ generate show rules in a loop. First of all, what's the problem with the original approach?\n```typ\n#let words = (\"foo\", \"baz\")\n#for word in words {\n  show word: strong\n}\n\nfoo bar baz\n```\nEach show rule only applies until the end of the scope it appears in, and that is the current iteration of the loop. There is no content in the loop, so each show rule applies to nothing.\n\nThe solution is to apply the same principles shown in the [Making a Template](https://typst.app/docs/tutorial/making-a-template/#set-and-show-rules) tutorial, just a bit more creatively. First, we move the (still manually duplicated) rules into a \"show everything\" rule:\n```typ\n#show: body => {\n  show \"foo\": strong\n  show \"baz\": strong\n\n  body\n}\n\nfoo bar baz\n```\nWe now have the rest of the document in a variable `body` which we can work with. Now, one solution is using a loop and replace `body` with something that has one extra show rule applied in each iteration:\n```typ\n#let words = (\"foo\", \"baz\")\n#show: body => {\n  for word in words {\n    body = {\n      show word: strong\n      body\n    }\n  }\n  body\n}\n\nfoo bar baz\n```\nThis works, but it can be slightly shorten by using the [`array.fold()`](https://typst.app/docs/reference/foundations/array/#definitions-fold) method which is perfectly suited for this situation:\n```typ\n#let words = (\"foo\", \"baz\")\n#show: body => words.fold(body, (body, word) => {\n  show word: strong\n  body\n})\n\nfoo bar baz\n```\n\nAs mentioned above, this is not great for performance. Regardless of how you do it, having a large numbers of show rules active at the same time is not great. It's usually okay if every show rule is written out, but creating them in a loop can hide how expensive a piece of code is. Whenever possible, the approaches above are preferable.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 5,
      "reads": 73,
      "score": 394.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:57:18.334113"
}