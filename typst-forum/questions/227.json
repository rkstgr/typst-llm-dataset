{
  "topic_metadata": {
    "id": 227,
    "title": "Touying: How can I access self in an ad-hoc way?",
    "slug": "touying-how-can-i-access-self-in-an-ad-hoc-way",
    "posts_count": 2,
    "created_at": "2024-09-15T16:24:48.522Z",
    "last_posted_at": "2024-09-15T17:47:04.707Z",
    "views": 186,
    "like_count": 2,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "scripting",
      "touying"
    ],
    "category_id": 5,
    "participant_count": 1,
    "word_count": 204
  },
  "posts": [
    {
      "id": 982,
      "post_number": 1,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-15T16:24:48.680Z",
      "updated_at": "2024-09-15T20:58:55.281Z",
      "cooked": "<p>I have a Touying (0.5.x) template that sets the table stroke in <code>init</code>:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">  config-methods(\n    init: (self: none, body) =&gt; {\n      set table(stroke: self.colors.neutral-dark)\n\n      body\n    },\n  ),\n</code></pre>\n<p>However in a table I don’t want strokes everywhere and have to use a <code>stroke</code> parameter like this:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">  table(\n    stroke: (x, y) =&gt; if x &lt; 2 and y &lt; 2 { 1pt },\n    [...],\n  )\n</code></pre>\n<p>This does not preserve the color, I need <code>1pt + self.colors.neutral-dark</code>. However, I don’t know how I can access <code>self</code> in a “plain old slide”.</p>\n<p>I assume Touying must have a mechanism to get access to <code>self</code> in such cases. How does that work?</p>",
      "raw": "I have a Touying (0.5.x) template that sets the table stroke in `init`:\n\n```typc\n  config-methods(\n    init: (self: none, body) => {\n      set table(stroke: self.colors.neutral-dark)\n\n      body\n    },\n  ),\n```\n\nHowever in a table I don't want strokes everywhere and have to use a `stroke` parameter like this:\n\n```typc\n  table(\n    stroke: (x, y) => if x < 2 and y < 2 { 1pt },\n    [...],\n  )\n```\n\nThis does not preserve the color, I need `1pt + self.colors.neutral-dark`. However, I don't know how I can access `self` in a \"plain old slide\".\n\nI assume Touying must have a mechanism to get access to `self` in such cases. How does that work?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 48,
      "score": 279.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 996,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-15T17:47:04.707Z",
      "updated_at": "2024-09-15T17:47:04.707Z",
      "cooked": "<p>I found two ways to do it, documented in <a href=\"https://touying-typ.github.io/docs/dynamic/complex\" rel=\"noopener nofollow ugc\"> Complex Animations</a>. The first is <code>touying-fn-wrapper</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#touying-fn-wrapper((self: none) =&gt; {\n  table(\n    stroke: (x, y) =&gt; if x &lt; 2 and y &lt; 2 {\n      1pt + self.colors.neutral-dark\n    },\n    [...],\n  )\n})\n</code></pre>\n<p>The page points out:</p>\n<blockquote>\n<p>However, this does not work in all cases, for example if you put <code>uncover</code> into the context expression, you will get an error.</p>\n</blockquote>\n<p>The other option is <code>slide</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#slide(self =&gt; {\n  table(\n    stroke: (x, y) =&gt; if x &lt; 2 and y &lt; 2 {\n      1pt + self.colors.neutral-dark\n    },\n    [...],\n  )\n})\n</code></pre>",
      "raw": "I found two ways to do it, documented in [ Complex Animations](https://touying-typ.github.io/docs/dynamic/complex). The first is `touying-fn-wrapper`:\n\n```typ\n#touying-fn-wrapper((self: none) => {\n  table(\n    stroke: (x, y) => if x < 2 and y < 2 {\n      1pt + self.colors.neutral-dark\n    },\n    [...],\n  )\n})\n```\n\nThe page points out:\n\n> However, this does not work in all cases, for example if you put `uncover` into the context expression, you will get an error.\n\nThe other option is `slide`:\n\n```typ\n#slide(self => {\n  table(\n    stroke: (x, y) => if x < 2 and y < 2 {\n      1pt + self.colors.neutral-dark\n    },\n    [...],\n  )\n})\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 43,
      "score": 43.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:58:56.565206"
}