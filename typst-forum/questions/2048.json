{
  "topic_metadata": {
    "id": 2048,
    "title": "How to hierarchically label headings automatically?",
    "slug": "how-to-hierarchically-label-headings-automatically",
    "posts_count": 4,
    "created_at": "2024-12-10T17:06:15.063Z",
    "last_posted_at": "2025-02-17T17:30:15.725Z",
    "views": 197,
    "like_count": 2,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "quachpas",
    "tags": [
      "scripting",
      "referencing"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 850
  },
  "posts": [
    {
      "id": 6475,
      "post_number": 1,
      "username": "Simon_Schneider",
      "name": "Simon  Schneider",
      "created_at": "2024-12-10T17:06:15.201Z",
      "updated_at": "2025-02-22T08:46:24.253Z",
      "cooked": "<p>The topic about <a href=\"https://forum.typst.app/t/how-do-i-automatically-label-my-headings-figures-equations/400/2\">auto labeling</a> got me thinking, whether it would be possible to generate hierarchical labels.<br>\nFor example: if my heading 1. has the label , then all sub headings labels should also start with the prefix heading-1.</p>\n<p>The following code is the closest I’ve gotten so far.<br>\nDoes anyone have an idea on how to improve this?<br>\nPreferably I’d like to avoid having to specify the label prefix and read it directly from the previous heading.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let heading-numbering = \"1.\"\n#set heading(numbering: heading-numbering)\n\n#let labeled_heading(body, prefix: none) = {\n  show heading: this =&gt; {\n    let key = lower(this.body.text.replace(\" \", \"-\"))\n    if prefix != none {\n      key = prefix + \"-\" + key\n    }\n    return [\n      #this\n      #v(-1em)\n      #figure(\n        kind: \"heading\",\n        numbering: (..numbers) =&gt; numbering(heading-numbering, ..(counter(heading).get())),\n        supplement: \"Section\",\n      )[]\n      #label(key)\n    ]\n  }\n  body\n}\n\n#labeled_heading(prefix: none)[\n  #let heading_level = 1\n  #heading([Heading 1], level: heading_level)\n  Heading 1 body\n\n  #labeled_heading(prefix: \"heading-1\")[\n    #let heading_level = 2\n    #heading([Heading 1.1], level: heading_level)\n    Heading 1.1 body\n\n    #labeled_heading(prefix: \"heading-1-heading-1.1\")[\n      #let heading_level = 3\n      #heading([Heading 1.1.1], level: heading_level)\n      Heading 1.1.1 body\n\n      #heading([Heading 1.1.2], level: heading_level)\n      Heading 1.1.2 body\n    ]\n  ]\n\n  #labeled_heading(prefix: \"heading-1\")[\n    #let heading_level = 2\n    #heading([Heading 1.2], level: heading_level)\n    Heading 1.2 body\n  ]\n\n  #heading([Heading 2], level: heading_level)\n  Heading 2 body\n]\n\nReference to heading 1: @heading-1\\\nReference to heading 1.1: @heading-1-heading-1.1\\\nReference to heading 1.1.1: @heading-1-heading-1.1-heading-1.1.1\\\nReference to heading 1.1.2: @heading-1-heading-1.1-heading-1.1.2\\\nReference to heading 1.2: @heading-1-heading-1.2\\\nReference to heading 2: @heading-2\n</code></pre>",
      "raw": "The topic about [auto labeling](https://forum.typst.app/t/how-do-i-automatically-label-my-headings-figures-equations/400/2) got me thinking, whether it would be possible to generate hierarchical labels. \nFor example: if my heading 1. has the label <heading-1>, then all sub headings labels should also start with the prefix heading-1.\n\nThe following code is the closest I've gotten so far.\nDoes anyone have an idea on how to improve this? \nPreferably I'd like to avoid having to specify the label prefix and read it directly from the previous heading.\n\n```typst\n#let heading-numbering = \"1.\"\n#set heading(numbering: heading-numbering)\n\n#let labeled_heading(body, prefix: none) = {\n  show heading: this => {\n    let key = lower(this.body.text.replace(\" \", \"-\"))\n    if prefix != none {\n      key = prefix + \"-\" + key\n    }\n    return [\n      #this\n      #v(-1em)\n      #figure(\n        kind: \"heading\",\n        numbering: (..numbers) => numbering(heading-numbering, ..(counter(heading).get())),\n        supplement: \"Section\",\n      )[]\n      #label(key)\n    ]\n  }\n  body\n}\n\n#labeled_heading(prefix: none)[\n  #let heading_level = 1\n  #heading([Heading 1], level: heading_level)\n  Heading 1 body\n\n  #labeled_heading(prefix: \"heading-1\")[\n    #let heading_level = 2\n    #heading([Heading 1.1], level: heading_level)\n    Heading 1.1 body\n\n    #labeled_heading(prefix: \"heading-1-heading-1.1\")[\n      #let heading_level = 3\n      #heading([Heading 1.1.1], level: heading_level)\n      Heading 1.1.1 body\n\n      #heading([Heading 1.1.2], level: heading_level)\n      Heading 1.1.2 body\n    ]\n  ]\n\n  #labeled_heading(prefix: \"heading-1\")[\n    #let heading_level = 2\n    #heading([Heading 1.2], level: heading_level)\n    Heading 1.2 body\n  ]\n\n  #heading([Heading 2], level: heading_level)\n  Heading 2 body\n]\n\nReference to heading 1: @heading-1\\\nReference to heading 1.1: @heading-1-heading-1.1\\\nReference to heading 1.1.1: @heading-1-heading-1.1-heading-1.1.1\\\nReference to heading 1.1.2: @heading-1-heading-1.1-heading-1.1.2\\\nReference to heading 1.2: @heading-1-heading-1.2\\\nReference to heading 2: @heading-2\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 50,
      "score": 430.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 871
    },
    {
      "id": 6483,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-12-11T08:33:26.000Z",
      "updated_at": "2024-12-11T08:33:26.000Z",
      "cooked": "<p>You can query the previous heading to do that!</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let heading-numbering = \"1.\"\n#set heading(numbering: heading-numbering)\n#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n#show heading: it =&gt; context {\n  let f = it =&gt; lower(to-string(it).replace(\" \", \"-\"))\n  let prev = query(selector(heading).before(here()))\n  if prev.len() &gt; 1 {\n    prev = prev.at(-2)\n  } else {\n    prev = [ ]\n  }\n  let prev-key = if prev != [ ] {f(prev) + \"-\"} else {\"\"}\n  let key = prev-key + f(it)\n  return [\n    #it\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) =&gt; numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n  ]\n}\n\n= Heading 1\n\n@heading-1\n\n== Heading 1.1\n\n@heading-1-heading-1.1\n\n=== Heading 1.1.1\n\n@heading-1.1-heading-1.1.1\n\n=== Heading 1.1.2\n\n@heading-1.1.1-heading-1.1.2\n\n== Heading 1.2\n\n@heading-1.1.2-heading-1.2\n\n= Heading 2\n\n@heading-1.2-heading-2\n</code></pre>",
      "raw": "You can query the previous heading to do that!\n```typ\n#let heading-numbering = \"1.\"\n#set heading(numbering: heading-numbering)\n#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n#show heading: it => context {\n  let f = it => lower(to-string(it).replace(\" \", \"-\"))\n  let prev = query(selector(heading).before(here()))\n  if prev.len() > 1 {\n    prev = prev.at(-2)\n  } else {\n    prev = [ ]\n  }\n  let prev-key = if prev != [ ] {f(prev) + \"-\"} else {\"\"}\n  let key = prev-key + f(it)\n  return [\n    #it\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) => numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n  ]\n}\n\n= Heading 1\n\n@heading-1\n\n== Heading 1.1\n\n@heading-1-heading-1.1\n\n=== Heading 1.1.1\n\n@heading-1.1-heading-1.1.1\n\n=== Heading 1.1.2\n\n@heading-1.1.1-heading-1.1.2\n\n== Heading 1.2\n\n@heading-1.1.2-heading-1.2\n\n= Heading 2\n\n@heading-1.2-heading-2\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 44,
      "score": 33.8,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 6549,
      "post_number": 3,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-12-12T06:34:40.361Z",
      "updated_at": "2024-12-12T06:34:40.361Z",
      "cooked": "<p>Hey <a class=\"mention\" href=\"/u/simon_schneider\">@Simon_Schneider</a>! I’ve changed your question post’s title to better fit our guidelines: <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a></p>\n<p>For future posts, please make sure your title is a question you’d ask to a friend about Typst. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hey @Simon_Schneider! I’ve changed your question post’s title to better fit our guidelines: https://forum.typst.app/t/how-to-post-in-the-questions-category/11 \n\nFor future posts, please make sure your title is a question you’d ask to a friend about Typst. :wink:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 33,
      "score": 36.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 8754,
      "post_number": 4,
      "username": "Simon_Schneider",
      "name": "Simon  Schneider",
      "created_at": "2025-02-17T17:30:15.725Z",
      "updated_at": "2025-02-17T17:30:15.725Z",
      "cooked": "<p>Expansion to the original solution that allows for maximum hierarchical depth and label key override using the heading supplement field:</p>\n<pre><code class=\"lang-auto\">#let heading-numbering = \"1.\"\n#set heading(numbering: heading-numbering)\n\n#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n\n#show heading: it =&gt; context {\n  // give users the option to disable auto labeling\n  if it.supplement == [-] {\n    return it\n  }\n  let get_label_key = it =&gt; {\n    if it.supplement == [] {\n      // if no supplement is provided, use the heading text to generate the label\n      return lower(to-string(it).trim().replace(\" \", \"-\"))\n    } else {\n      // if a supplement is provided, use the supplement to generate the label\n      return lower(to-string(it.supplement).trim().replace(\" \", \"-\"))\n    }\n  }\n\n  // recursively construct hierarchical label key\n  let prev = query(selector(heading).before(here())).rev()\n  let key = \"\"\n  let level = it.level\n  for heading in prev {\n    if level == 1 {\n      break\n    }\n    if heading.level &gt;= level {\n      continue\n    }\n    level -= 1\n    key = get_label_key(heading) + \"-\" + key\n  }\n  key = key + get_label_key(it)\n\n  // return the heading with the auto-generated label\n  return [\n    #it\n    // unfortunately there is an issue with attaching programmatically attaching labels to headings (see https://github.com/typst/typst/issues/2926)\n    // therefore we have to use a fake figure to attach the label to the heading\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) =&gt; numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n    //#key // print the label key for debugging\n  ]\n}\n\n#set heading(numbering: (..numbers) =&gt; numbering((..nums) =&gt; nums.pos().map(str).join(\".\"), ..numbers), supplement: [])\n\n\n\n#heading(supplement: [h1])[Section 1]\n@h1\n\n== Section 1.1\n@h1-section-1.1\n\n#heading(supplement: [-], level: 2)[Section 1.2]\nAuto labeling has been disabled for this heading using the supplement field value `[-]`.\n\n== Section 1.3\n@h1-section-1.3\n\n=== Section 1.3.1\n@h1-section-1.3-section-1.3.1\n\n=== Section 1.3.2\n@h1-section-1.3-section-1.3.2\n\n== Section 1.4\n@h1-section-1.4\n\n= Section 2\n@section-2\n</code></pre>",
      "raw": "Expansion to the original solution that allows for maximum hierarchical depth and label key override using the heading supplement field:\n```\n#let heading-numbering = \"1.\"\n#set heading(numbering: heading-numbering)\n\n#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n\n#show heading: it => context {\n  // give users the option to disable auto labeling\n  if it.supplement == [-] {\n    return it\n  }\n  let get_label_key = it => {\n    if it.supplement == [] {\n      // if no supplement is provided, use the heading text to generate the label\n      return lower(to-string(it).trim().replace(\" \", \"-\"))\n    } else {\n      // if a supplement is provided, use the supplement to generate the label\n      return lower(to-string(it.supplement).trim().replace(\" \", \"-\"))\n    }\n  }\n\n  // recursively construct hierarchical label key\n  let prev = query(selector(heading).before(here())).rev()\n  let key = \"\"\n  let level = it.level\n  for heading in prev {\n    if level == 1 {\n      break\n    }\n    if heading.level >= level {\n      continue\n    }\n    level -= 1\n    key = get_label_key(heading) + \"-\" + key\n  }\n  key = key + get_label_key(it)\n\n  // return the heading with the auto-generated label\n  return [\n    #it\n    // unfortunately there is an issue with attaching programmatically attaching labels to headings (see https://github.com/typst/typst/issues/2926)\n    // therefore we have to use a fake figure to attach the label to the heading\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) => numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n    //#key // print the label key for debugging\n  ]\n}\n\n#set heading(numbering: (..numbers) => numbering((..nums) => nums.pos().map(str).join(\".\"), ..numbers), supplement: [])\n\n\n\n#heading(supplement: [h1])[Section 1]\n@h1\n\n== Section 1.1\n@h1-section-1.1\n\n#heading(supplement: [-], level: 2)[Section 1.2]\nAuto labeling has been disabled for this heading using the supplement field value `[-]`.\n\n== Section 1.3\n@h1-section-1.3\n\n=== Section 1.3.1\n@h1-section-1.3-section-1.3.1\n\n=== Section 1.3.2\n@h1-section-1.3-section-1.3.2\n\n== Section 1.4\n@h1-section-1.4\n\n= Section 2\n@section-2\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 23,
      "score": 19.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 871
    }
  ],
  "scraped_at": "2025-06-10T09:53:44.074056"
}