{
  "topic_metadata": {
    "id": 1066,
    "title": "How to start the heading-numbering from 0?",
    "slug": "how-to-start-the-heading-numbering-from-0",
    "posts_count": 5,
    "created_at": "2024-10-13T15:21:30.390Z",
    "last_posted_at": "2024-10-13T20:44:33.334Z",
    "views": 669,
    "like_count": 8,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "ParaN3xus",
    "tags": [
      "numbering",
      "counter"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 405
  },
  "posts": [
    {
      "id": 3817,
      "post_number": 1,
      "username": "Sinthoras",
      "name": "",
      "created_at": "2024-10-13T15:21:30.627Z",
      "updated_at": "2024-10-13T15:23:35.535Z",
      "cooked": "<p>Normally the first heading has the number 1 (which makes sense).<br>\nHow can I have the first heading to be number 0 and the second number 1 and so on?</p>\n<p>A simple <code>#counter(heading).update(0)</code> before the first heading does not work, because the counter already starts at 0, and <code>#counter(heading).update(-1)</code> gives a syntax error, because counters must be natural numbers.</p>",
      "raw": "Normally the first heading has the number 1 (which makes sense). \nHow can I have the first heading to be number 0 and the second number 1 and so on?\n\n A simple `#counter(heading).update(0)` before the first heading does not work, because the counter already starts at 0, and `#counter(heading).update(-1)` gives a syntax error, because counters must be natural numbers.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 57,
      "score": 3216.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 511
    },
    {
      "id": 3822,
      "post_number": 2,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-10-13T15:41:26.448Z",
      "updated_at": "2024-10-13T15:44:09.455Z",
      "cooked": "<p>The command <code>#counter(heading).update(0)</code> doesn’t work because its value is already <code>0</code>. You can verify this by running <code>#context counter(heading).get()</code> and checking the result.</p>\n<p>As an alternative, you could define a numbering function that subtracts 1 from the input arguments before returning the results. For example:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set heading(numbering: (..x) =&gt; numbering(\"1.\", ..x.pos().map(n =&gt; n - 1)))\n\n= hello\n= test\n</code></pre>\n<p>This would output:</p>\n<pre><code class=\"lang-auto\">0. hello\n1. test\n</code></pre>",
      "raw": "The command `#counter(heading).update(0)` doesn't work because its value is already `0`. You can verify this by running `#context counter(heading).get()` and checking the result.\n\nAs an alternative, you could define a numbering function that subtracts 1 from the input arguments before returning the results. For example:\n\n```typ\n#set heading(numbering: (..x) => numbering(\"1.\", ..x.pos().map(n => n - 1)))\n\n= hello\n= test\n```\n\nThis would output:\n\n```\n0. hello\n1. test\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 57,
      "score": 226.2,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 3831,
      "post_number": 3,
      "username": "Sinthoras",
      "name": "",
      "created_at": "2024-10-13T19:49:08.610Z",
      "updated_at": "2024-10-13T19:49:08.610Z",
      "cooked": "<p>Thank you :) This works, but only for top level headings.<br>\nIf I use this and include lower level headings this outputs</p>\n<pre><code class=\"lang-auto\">0. hello\n0.0. One sublevel\n0.1. next\n0.1.0. two sublevels \n1. ... \n</code></pre>\n<p>But I want my top level headings to start with 0 but the levels beneath it with the usual 1.</p>\n<p>So using your idea of subtracting one, but only for the first level and not the others, I tried instead of using the map function to just remove the first entry and add it again as follows.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#set heading(numbering: (..x) =&gt; {\n   let numbers = x.pos()\n   let n1 = numbers.at(0)\n   numbers.remove(0)\n   numbers.insert(0, int(n1 - 1))\n   numbering(\"1.a\", ..numbers)\n}\n)\n</code></pre>\n<p>This gives the error on the numbering line stating, <code>can not join integer with a string</code>. So somehow this operation destroys the possibility to use the normal numbering command. What am I doing wrong?</p>",
      "raw": "Thank you :) This works, but only for top level headings.\nIf I use this and include lower level headings this outputs\n```\n0. hello\n0.0. One sublevel\n0.1. next\n0.1.0. two sublevels \n1. ... \n```\n But I want my top level headings to start with 0 but the levels beneath it with the usual 1. \n\nSo using your idea of subtracting one, but only for the first level and not the others, I tried instead of using the map function to just remove the first entry and add it again as follows.\n\n```typst\n#set heading(numbering: (..x) => {\n   let numbers = x.pos()\n   let n1 = numbers.at(0)\n   numbers.remove(0)\n   numbers.insert(0, int(n1 - 1))\n   numbering(\"1.a\", ..numbers)\n}\n)\n```\n\nThis gives the error on the numbering line stating, `can not join integer with a string`. So somehow this operation destroys the possibility to use the normal numbering command. What am I doing wrong?",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 51,
      "score": 90.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 511
    },
    {
      "id": 3833,
      "post_number": 4,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-13T20:33:54.610Z",
      "updated_at": "2024-10-13T20:33:54.610Z",
      "cooked": "<p>The problem is that the result of a Typst function is created by “joining” all expressions, and apart from the final <code>numbering()</code> call, <code>numbers.remove(0)</code> also returns a value!</p>\n<p>There are a couple of ways around this:</p>\n<ul>\n<li>you can opt out of this behavior by using <code>return numbering(...)</code></li>\n<li>you can prevent <code>remove()</code> from leaking by using <code>let _ = ...</code></li>\n<li>since <code>remove()</code> returns the element, you can use <code>let n1 = numbers.remove(0)</code></li>\n<li>you could also use <code>numbers.at(0) -= 1</code></li>\n<li>finally, you could destructure your numbers differently:<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set heading(numbering: (n1, ..x) =&gt; numbering(\"1.a\", n1 - 1, ..x))\n</code></pre>\n</li>\n</ul>",
      "raw": "The problem is that the result of a Typst function is created by \"joining\" all expressions, and apart from the final `numbering()` call, `numbers.remove(0)` also returns a value!\n\nThere are a couple of ways around this:\n- you can opt out of this behavior by using `return numbering(...)`\n- you can prevent `remove()` from leaking by using `let _ = ...`\n- since `remove()` returns the element, you can use `let n1 = numbers.remove(0)`\n- you could also use `numbers.at(0) -= 1`\n- finally, you could destructure your numbers differently:\n  ```typ\n  #set heading(numbering: (n1, ..x) => numbering(\"1.a\", n1 - 1, ..x))\n  ```",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 49,
      "score": 119.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 3835,
      "post_number": 5,
      "username": "Sinthoras",
      "name": "",
      "created_at": "2024-10-13T20:44:33.334Z",
      "updated_at": "2024-10-13T20:44:33.334Z",
      "cooked": "<p>Ah, that makes a lot of sense! Everyday I am learning something. Thank you! :)</p>",
      "raw": "Ah, that makes a lot of sense! Everyday I am learning something. Thank you! :)",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 42,
      "score": 118.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 511
    }
  ],
  "scraped_at": "2025-06-10T09:56:57.883808"
}