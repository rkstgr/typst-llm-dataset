{
  "topic_metadata": {
    "id": 1192,
    "title": "How to use a json property that may or may not exist?",
    "slug": "how-to-use-a-json-property-that-may-or-may-not-exist",
    "posts_count": 6,
    "created_at": "2024-10-19T02:35:21.008Z",
    "last_posted_at": "2024-10-23T13:04:51.009Z",
    "views": 298,
    "like_count": 4,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "afiaith",
    "tags": [],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 341
  },
  "posts": [
    {
      "id": 4195,
      "post_number": 1,
      "username": "mgholam",
      "name": "mgholam",
      "created_at": "2024-10-19T02:35:21.202Z",
      "updated_at": "2024-10-19T02:35:21.202Z",
      "cooked": "<p>Currently it gives an error:</p>\n<pre><code class=\"lang-auto\">error: dictionary does not contain key \"prop1\"\n</code></pre>\n<p>Maybe have a <code>javascript</code> style <code>data.prop1?</code> question mark</p>",
      "raw": "Currently it gives an error:\n```\nerror: dictionary does not contain key \"prop1\"\n```\nMaybe have a `javascript` style `data.prop1?` question mark",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 1446.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 608
    },
    {
      "id": 4197,
      "post_number": 2,
      "username": "afiaith",
      "name": "Maja Abramski-Kronenberg",
      "created_at": "2024-10-19T02:51:02.408Z",
      "updated_at": "2024-10-19T02:51:02.408Z",
      "cooked": "<p>This is a general question about dictionaries. When you read a JSON file, you get either a dictionary (like in your case) or an array, depending on the content of the file. See this in the <a href=\"https://typst.app/docs/reference/data-loading/json/\">documentation</a>:</p>\n<blockquote>\n<p>JSON objects will be converted into Typst dictionaries, and JSON arrays will be converted into Typst arrays.</p>\n</blockquote>\n<p>So we want to know if a dictionary has a certain key. The way to do that is to check if a <code>str</code> key is <code>in</code> itâ€™s <code>.keys()</code>, like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let mydict = (\n  name: \"Typst\",\n  born: 2019,\n)\n\n#if \"name\" in mydict.keys() [\n  It has a name.\n] else [\n  It doesnâ€™t have a name.\n]\n\n#if \"expiration\" in mydict.keys() [\n  It has an expiration date.\n] else [\n  It doesnâ€™t have an expiration date.\n]\n</code></pre>\n<p>Have fun Typsting ^_^</p>",
      "raw": "This is a general question about dictionaries. When you read a JSON file, you get either a dictionary (like in your case) or an array, depending on the content of the file. See this in the [documentation](https://typst.app/docs/reference/data-loading/json/):\n\n> JSON objects will be converted into Typst dictionaries, and JSON arrays will be converted into Typst arrays.\n\nSo we want to know if a dictionary has a certain key. The way to do that is to check if a `str` key is `in` itâ€™s `.keys()`, like this:\n\n```typ\n#let mydict = (\n  name: \"Typst\",\n  born: 2019,\n)\n\n#if \"name\" in mydict.keys() [\n  It has a name.\n] else [\n  It doesnâ€™t have a name.\n]\n\n#if \"expiration\" in mydict.keys() [\n  It has an expiration date.\n] else [\n  It doesnâ€™t have an expiration date.\n]\n```\n\nHave fun Typsting ^_^",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 26.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 91
    },
    {
      "id": 4198,
      "post_number": 3,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-10-19T03:05:48.931Z",
      "updated_at": "2024-10-19T03:05:48.931Z",
      "cooked": "<p>By the way, you donâ€™t need to write <code>.keys()</code>, <code>\"key\" in dictionary</code> already checks whether that is a valid key in the given dictionary.</p>\n<p>Additionally, to mirror <code>?</code>, one can use the <code>at</code> function:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let x = (a: 5).at(\"b\", default: none) \n#repr(x) // returns 'none'\n</code></pre>",
      "raw": "By the way, you don't need to write `.keys()`, `\"key\" in dictionary` already checks whether that is a valid key in the given dictionary.\n\nAdditionally, to mirror `?`, one can use the `at` function:\n\n```typ\n#let x = (a: 5).at(\"b\", default: none) \n#repr(x) // returns 'none'\n```",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 27,
      "score": 45.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 4200,
      "post_number": 4,
      "username": "afiaith",
      "name": "Maja Abramski-Kronenberg",
      "created_at": "2024-10-19T03:44:06.144Z",
      "updated_at": "2024-10-19T03:44:06.144Z",
      "cooked": "<p>Thanks! I didnâ€™t know that <img src=\"https://forum.typst.app/images/emoji/apple/slightly_smiling_face.png?v=12\" title=\":slightly_smiling_face:\" class=\"emoji\" alt=\":slightly_smiling_face:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Thanks! I didnâ€™t know that ðŸ™‚",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 15.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 91
    },
    {
      "id": 4224,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-19T11:33:19.550Z",
      "updated_at": "2024-10-19T11:33:19.550Z",
      "cooked": "<p>If you need to access nested properties, you can also use <code>default: (:)</code> in the in-between layers, then you can call <code>at()</code> again even if the value didnâ€™t exist:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let data = (a: 1, c: (d: 2))\ndata.a = #data.at(\"a\", default: none)\\  // 1\ndata.b = #data.at(\"b\", default: none)\\  // none\ndata.c.d = #data.at(\"c\", default: (:)).at(\"d\", default: none)\\  // 2\ndata.c.e = #data.at(\"c\", default: (:)).at(\"e\", default: none)\\  // none\ndata.f.g = #data.at(\"f\", default: (:)).at(\"g\", default: none)\\  // none\n</code></pre>",
      "raw": "If you need to access nested properties, you can also use `default: (:)` in the in-between layers, then you can call `at()` again even if the value didn't exist:\n```typ\n#let data = (a: 1, c: (d: 2))\ndata.a = #data.at(\"a\", default: none)\\  // 1\ndata.b = #data.at(\"b\", default: none)\\  // none\ndata.c.d = #data.at(\"c\", default: (:)).at(\"d\", default: none)\\  // 2\ndata.c.e = #data.at(\"c\", default: (:)).at(\"e\", default: none)\\  // none\ndata.f.g = #data.at(\"f\", default: (:)).at(\"g\", default: none)\\  // none\n```",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 27,
      "score": 85.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 4550,
      "post_number": 6,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-23T13:04:51.009Z",
      "updated_at": "2024-10-23T13:04:51.009Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/mgholam\">@mgholam</a>, donâ€™t forget to tick one of the responses if you got a satisfying answer. The answer you choose should usually be the response that you found most correct/helpful/comprehensive for the question you asked. Thanks!</p>",
      "raw": "Hi @mgholam, donâ€™t forget to tick one of the responses if you got a satisfying answer. The answer you choose should usually be the response that you found most correct/helpful/comprehensive for the question you asked. Thanks!",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 16,
      "score": 13.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:56:30.415075"
}