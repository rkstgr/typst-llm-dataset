{
  "topic_metadata": {
    "id": 781,
    "title": "Is it possible to query the final value of a state from the CLI?",
    "slug": "is-it-possible-to-query-the-final-value-of-a-state-from-the-cli",
    "posts_count": 4,
    "created_at": "2024-09-28T19:23:58.054Z",
    "last_posted_at": "2024-09-29T01:22:15.971Z",
    "views": 115,
    "like_count": 5,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "laurmaedje",
    "tags": [
      "cli",
      "state",
      "query"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 303
  },
  "posts": [
    {
      "id": 2895,
      "post_number": 1,
      "username": "gabe",
      "name": "",
      "created_at": "2024-09-28T19:23:58.185Z",
      "updated_at": "2024-09-28T22:00:43.387Z",
      "cooked": "<p>I’ve found that it’s possible to query the final state using a label like so:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let s = state(\"test\", 0)\n#context [\n  #s.final()\n  &lt;test&gt;\n]\n#s.update(2)\n</code></pre>\n<p>Running <code>typst query test.typ \"&lt;test&gt;\"</code> gives:</p>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">[\n  {\n    \"func\": \"text\",\n    \"text\": \"2\",\n    \"label\": \"&lt;test&gt;\"\n  }\n]\n</code></pre>\n<p>This works, but I wonder, is there a more direct way to query this information?</p>",
      "raw": "I've found that it's possible to query the final state using a label like so:\n\n```typ\n#let s = state(\"test\", 0)\n#context [\n  #s.final()\n  <test>\n]\n#s.update(2)\n```\n\nRunning `typst query test.typ \"<test>\"` gives:\n```json\n[\n  {\n    \"func\": \"text\",\n    \"text\": \"2\",\n    \"label\": \"<test>\"\n  }\n]\n```\n\nThis works, but I wonder, is there a more direct way to query this information?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 33,
      "score": 301.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 433
    },
    {
      "id": 2896,
      "post_number": 2,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-28T19:29:13.512Z",
      "updated_at": "2024-09-28T19:29:13.512Z",
      "cooked": "<p>There is no more direct way</p>",
      "raw": "There is no more direct way",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 6.2,
      "accepted_answer": true,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 2900,
      "post_number": 3,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-28T21:59:37.719Z",
      "updated_at": "2024-09-28T21:59:37.719Z",
      "cooked": "<p>To add a bit more detail: getting the final value using a <code>context</code> and labelling it is the only way, but the way you did it, you’re robbing yourself of a bit of detail: you’re creating a text element and thus the number is converted to a string. The way that is probably a bit more common is using <code>metadata</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let s = state(\"test\", 0)\n#context [#metadata(s.final()) &lt;test&gt;]\n#s.update(2)\n</code></pre>\n<p>This way, the same query results in</p>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">[\n  {\n    \"func\": \"metadata\",\n    \"value\": 2,\n    \"label\": \"&lt;test&gt;\"\n  }\n]\n</code></pre>\n<p>The query itself can be improved a bit, as usually you only want the <code>value</code> field and your use case suggests that there’s only one <code>&lt;test&gt;</code>:</p>\n<pre data-code-wrap=\"sh\"><code class=\"lang-sh\">typst query experiment/test.typ --field value --one \"&lt;test&gt;\"\n</code></pre>\n<p>Which simply results in the number (and valid JSON) <code>2</code>.</p>",
      "raw": "To add a bit more detail: getting the final value using a `context` and labelling it is the only way, but the way you did it, you're robbing yourself of a bit of detail: you're creating a text element and thus the number is converted to a string. The way that is probably a bit more common is using `metadata`:\n```typ\n#let s = state(\"test\", 0)\n#context [#metadata(s.final()) <test>]\n#s.update(2)\n```\nThis way, the same query results in\n```json\n[\n  {\n    \"func\": \"metadata\",\n    \"value\": 2,\n    \"label\": \"<test>\"\n  }\n]\n```\nThe query itself can be improved a bit, as usually you only want the `value` field and your use case suggests that there's only one `<test>`:\n```sh\ntypst query experiment/test.typ --field value --one \"<test>\"\n```\nWhich simply results in the number (and valid JSON) `2`.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 29,
      "score": 70.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 2908,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-29T01:22:15.971Z",
      "updated_at": "2024-09-29T01:22:15.971Z",
      "cooked": "<p>What hasn’t been pointed out yet is that 2 approaches give a different in-document output:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let c = counter(\"test\")\n|#context [#c.final().first()&lt;test&gt;]|\n|#context [#metadata(c.final().first())&lt;test&gt;]|\n#c.update(2)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/0331374b0c6c204db1411a706bbb81874aaeb838.png\" alt=\"image\" data-base62-sha1=\"seSnSR0xtwZ4AN78j0BRcKS0Eo\" width=\"65\" height=\"37\"></p>\n<p>So depending on your goal, you might want to use one or the other variant. Or if you want to get number type + print it:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let c = counter(\"test\")\n|#context { let n = c.final().first(); [#n#metadata(n)&lt;test&gt;] }|\n#c.update(2)\n</code></pre>\n<p>BTW, for natural number counting you should use <a href=\"https://typst.app/docs/reference/introspection/counter/\"><code>counter</code></a> instead.</p>",
      "raw": "What hasn't been pointed out yet is that 2 approaches give a different in-document output:\n\n```typ\n#let c = counter(\"test\")\n|#context [#c.final().first()<test>]|\n|#context [#metadata(c.final().first())<test>]|\n#c.update(2)\n```\n\n![image|65x37](upload://seSnSR0xtwZ4AN78j0BRcKS0Eo.png)\n\nSo depending on your goal, you might want to use one or the other variant. Or if you want to get number type + print it:\n\n```typ\n#let c = counter(\"test\")\n|#context { let n = c.final().first(); [#n#metadata(n)<test>] }|\n#c.update(2)\n```\n\nBTW, for natural number counting you should use [`counter`](https://typst.app/docs/reference/introspection/counter/) instead.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 29,
      "score": 65.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:57:49.914127"
}