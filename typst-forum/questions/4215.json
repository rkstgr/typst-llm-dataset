{
  "topic_metadata": {
    "id": 4215,
    "title": "How to export CeTZ figures as separated SVG files?",
    "slug": "how-to-export-cetz-figures-as-separated-svg-files",
    "posts_count": 8,
    "created_at": "2025-05-21T16:29:37.591Z",
    "last_posted_at": "2025-05-22T19:03:25.460Z",
    "views": 98,
    "like_count": 5,
    "reply_count": 5,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 7,
    "accepted_answer_username": "Andrew",
    "tags": [
      "scripting",
      "cetz"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 614
  },
  "posts": [
    {
      "id": 12894,
      "post_number": 1,
      "username": "Raul_Durand",
      "name": "Raul Durand",
      "created_at": "2025-05-21T16:29:37.716Z",
      "updated_at": "2025-05-21T21:29:46.781Z",
      "cooked": "<p>I’ve created a long document containing dozens of figures using CetZ. I’d like to programmatically export each CetZ figure as a separate SVG file so I can use them individually in a different context.</p>\n<p>What’s the best way to achieve this?</p>",
      "raw": "I’ve created a long document containing dozens of figures using CetZ. I’d like to programmatically export each CetZ figure as a separate SVG file so I can use them individually in a different context. \n\nWhat’s the best way to achieve this?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 34,
      "score": 71.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 583
    },
    {
      "id": 12896,
      "post_number": 2,
      "username": "joffdd",
      "name": "Joff",
      "created_at": "2025-05-21T16:41:39.391Z",
      "updated_at": "2025-05-21T16:41:39.391Z",
      "cooked": "<p>While this is not an automated way to achieve it, what I have done is creating a new empty project in the web app with the lines of code below, setting document size to <code>auto</code>, copying the cetz figure code and exporting the document as svg, which I then uploaded to my actual project.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"@preview/cetz:0.3.4\"\n#set page(margin: 5mm, fill: white, width: auto, height: auto)\n\n// Your cetz figure here\n</code></pre>\n<p>But I would love to see a more automated workflow for this. Or ideally this would not be required because making no performance difference to just leaving whatever number of cetz figures in the document. My experience is that having a few dozens of objects in cetz, especially with relative positioning, makes the whole document super slow even when not actively working on the figures (which in my understanding shouldn’t be the case wrt caching etc…)</p>",
      "raw": "While this is not an automated way to achieve it, what I have done is creating a new empty project in the web app with the lines of code below, setting document size to `auto`, copying the cetz figure code and exporting the document as svg, which I then uploaded to my actual project.\n\n```typst\n#import \"@preview/cetz:0.3.4\"\n#set page(margin: 5mm, fill: white, width: auto, height: auto)\n\n// Your cetz figure here\n```\n\nBut I would love to see a more automated workflow for this. Or ideally this would not be required because making no performance difference to just leaving whatever number of cetz figures in the document. My experience is that having a few dozens of objects in cetz, especially with relative positioning, makes the whole document super slow even when not actively working on the figures (which in my understanding shouldn't be the case wrt caching etc...)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 34,
      "score": 6.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1494
    },
    {
      "id": 12907,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-21T19:37:20.222Z",
      "updated_at": "2025-05-21T19:38:59.476Z",
      "cooked": "<p>FYI, the name is <a href=\"https://cetz-package.github.io/\">CeTZ</a>.</p>\n<p>How exactly are figures inserted in the source file? If plainly from the markup mode, then it would be something like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n\n#set page(width: auto, height: auto, margin: 0.5pt)\n#set pagebreak(weak: true)\n\n#cetz.canvas(cetz.draw.circle(()))\n#pagebreak()\n\n#cetz.canvas(cetz.draw.circle(()))\n#pagebreak()\n</code></pre>\n<p>See <a href=\"https://github.com/typst/typst/issues/5741\" class=\"inline-onebox\">Add support for inside/center/outside strokes (change stroke bounding box) · Issue #5741 · typst/typst · GitHub</a> about page margins.</p>\n<p>Or maybe this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n\n#set page(width: auto, height: auto, margin: 0.5pt)\n\n#let canvas(..args) = cetz.canvas(..args) + pagebreak(weak: true)\n\n#canvas(cetz.draw.circle(()))\n\n#canvas(cetz.draw.circle(()))\n</code></pre>\n<p>Then obviously just compile into SVG format and you will have one figure per page, i.e., one figure per SVG file.</p>",
      "raw": "FYI, the name is [CeTZ](https://cetz-package.github.io/).\n\nHow exactly are figures inserted in the source file? If plainly from the markup mode, then it would be something like this:\n\n```typ\n#import \"@preview/cetz:0.3.4\"\n\n#set page(width: auto, height: auto, margin: 0.5pt)\n#set pagebreak(weak: true)\n\n#cetz.canvas(cetz.draw.circle(()))\n#pagebreak()\n\n#cetz.canvas(cetz.draw.circle(()))\n#pagebreak()\n```\n\nSee https://github.com/typst/typst/issues/5741 about page margins.\n\nOr maybe this:\n\n```typ\n#import \"@preview/cetz:0.3.4\"\n\n#set page(width: auto, height: auto, margin: 0.5pt)\n\n#let canvas(..args) = cetz.canvas(..args) + pagebreak(weak: true)\n\n#canvas(cetz.draw.circle(()))\n\n#canvas(cetz.draw.circle(()))\n```\n\nThen obviously just compile into SVG format and you will have one figure per page, i.e., one figure per SVG file.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 32,
      "score": 31.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12911,
      "post_number": 4,
      "username": "Raul_Durand",
      "name": "Raul Durand",
      "created_at": "2025-05-21T20:47:53.271Z",
      "updated_at": "2025-05-21T20:47:53.271Z",
      "cooked": "<p>The figures are embedded within a long report, alongside text, tables, equations, and other elements. I would prefer to keep the original source code unchanged. However, the source code could be included in another file where the extraction of the figures can take place.</p>",
      "raw": "The figures are embedded within a long report, alongside text, tables, equations, and other elements. I would prefer to keep the original source code unchanged. However, the source code could be included in another file where the extraction of the figures can take place.",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 11.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 583
    },
    {
      "id": 12914,
      "post_number": 5,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-21T21:52:52.115Z",
      "updated_at": "2025-05-21T21:53:48.162Z",
      "cooked": "<p>You don’t say how the <code>canvas</code> is called, so you might have to change the source after all, because you can’t identify/tag figures without doing anything.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n\n#let canvas(..args) = {\n  let body = cetz.canvas(..args)\n  [#body#metadata(body)&lt;something&gt;]\n}\n\n#lorem(50)\n#canvas(cetz.draw.circle(()))\n#lorem(50)\n#canvas(cetz.draw.circle(()))\n#lorem(50)\n</code></pre>\n<br>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(width: auto, height: auto, margin: 0.5pt)\n#show: doc =&gt; context {\n  place(hide(doc))\n  query(&lt;something&gt;)\n    .map(x =&gt; x.value)\n    .intersperse(pagebreak(weak: true))\n    .join()\n}\n\n#include \"source.typ\"\n</code></pre>",
      "raw": "You don't say how the `canvas` is called, so you might have to change the source after all, because you can't identify/tag figures without doing anything.\n\n```typ\n#import \"@preview/cetz:0.3.4\"\n\n#let canvas(..args) = {\n  let body = cetz.canvas(..args)\n  [#body#metadata(body)<something>]\n}\n\n#lorem(50)\n#canvas(cetz.draw.circle(()))\n#lorem(50)\n#canvas(cetz.draw.circle(()))\n#lorem(50)\n```\n\n<br>\n\n```typ\n#set page(width: auto, height: auto, margin: 0.5pt)\n#show: doc => context {\n  place(hide(doc))\n  query(<something>)\n    .map(x => x.value)\n    .intersperse(pagebreak(weak: true))\n    .join()\n}\n\n#include \"source.typ\"\n```",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 33,
      "score": 36.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12956,
      "post_number": 6,
      "username": "Raul_Durand",
      "name": "Raul Durand",
      "created_at": "2025-05-22T16:17:02.145Z",
      "updated_at": "2025-05-22T16:19:52.748Z",
      "cooked": "<p>Wow, that is interesting!</p>\n<p>The way I call is</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#figure(caption: [Bending stress], placement:none,\n    cetz.canvas({\n        import cetz.draw: *\n        // stuff\n    }), \n)&lt;fig:bending-stress&gt;\n</code></pre>\n<p>Maybe a show rule could modify the <code>cetz.canvas</code> behavior.</p>",
      "raw": "Wow, that is interesting!\n\nThe way I call is \n```\n#figure(caption: [Bending stress], placement:none,\n    cetz.canvas({\n        import cetz.draw: *\n        // stuff\n    }), \n)<fig:bending-stress>\n```\n\nMaybe a show rule could modify the `cetz.canvas` behavior.",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 26,
      "score": 10.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 583
    },
    {
      "id": 12966,
      "post_number": 7,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-22T17:19:40.070Z",
      "updated_at": "2025-05-22T17:20:33.214Z",
      "cooked": "<p>No, the <code>canvas</code> function uses <code>context</code> right away, so there is absolutely no way to get that without help from the inside of the library.</p>\n<p>Since you are using <code>figure</code>, this means it can be used instead, but only if all figures are from CeTZ. Otherwise, you can check for whether the <code>it.body.func() == (context {}).func()</code> and hopefully any other figures don’t use <code>context</code>.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n\n#show figure: it =&gt; [#it#metadata(it.body)&lt;something&gt;]\n\n#lorem(50)\n\n#figure(caption: [Bending stress], cetz.canvas({\n  import cetz.draw: *\n  circle(())\n})) &lt;fig:bending-stress&gt;\n\n#lorem(50)\n\n#figure(cetz.canvas({\n  import cetz.draw: *\n  circle(())\n}))\n\n#lorem(50)\n</code></pre>",
      "raw": "No, the `canvas` function uses `context` right away, so there is absolutely no way to get that without help from the inside of the library.\n\nSince you are using `figure`, this means it can be used instead, but only if all figures are from CeTZ. Otherwise, you can check for whether the `it.body.func() == (context {}).func()` and hopefully any other figures don't use `context`.\n\n```typ\n#import \"@preview/cetz:0.3.4\"\n\n#show figure: it => [#it#metadata(it.body)<something>]\n\n#lorem(50)\n\n#figure(caption: [Bending stress], cetz.canvas({\n  import cetz.draw: *\n  circle(())\n})) <fig:bending-stress>\n\n#lorem(50)\n\n#figure(cetz.canvas({\n  import cetz.draw: *\n  circle(())\n}))\n\n#lorem(50)\n```",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 22,
      "score": 29.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12975,
      "post_number": 8,
      "username": "Raul_Durand",
      "name": "Raul Durand",
      "created_at": "2025-05-22T19:03:25.460Z",
      "updated_at": "2025-05-22T19:03:25.460Z",
      "cooked": "<p>Excellent! Thanks <a class=\"mention\" href=\"/u/andrew\">@Andrew</a>. I learned a lot!</p>",
      "raw": "Excellent! Thanks @Andrew. I learned a lot!",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 22,
      "score": 19.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 583
    }
  ],
  "scraped_at": "2025-06-10T09:47:28.465145"
}