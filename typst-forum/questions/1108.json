{
  "topic_metadata": {
    "id": 1108,
    "title": "Is there an an equivalent to the `\\graphicspath{path}` command from LaTeX in Typst?",
    "slug": "is-there-an-an-equivalent-to-the-graphicspath-path-command-from-latex-in-typst",
    "posts_count": 7,
    "created_at": "2024-10-14T21:12:18.819Z",
    "last_posted_at": "2024-10-16T09:19:51.177Z",
    "views": 282,
    "like_count": 4,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "graphics",
      "latex-migration",
      "images"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 505
  },
  "posts": [
    {
      "id": 3927,
      "post_number": 1,
      "username": "Sinthoras",
      "name": "",
      "created_at": "2024-10-14T21:12:18.905Z",
      "updated_at": "2024-10-14T21:12:54.303Z",
      "cooked": "<p>In LaTeX I can set the command <code>\\graphicspath{path/}</code> such that I then only have to write <code>\\includegraphics{name}</code> instead of <code>\\includegraphics{path/name}</code>.</p>\n<p>Is there a way to do this in typst with the image command?</p>\n<p>I did think about show rules (like <code>#show image: im =&gt; { image(\"mypath/\"+im.path)}</code> which did not work), but I could find a good one.</p>",
      "raw": "In LaTeX I can set the command `\\graphicspath{path/}` such that I then only have to write `\\includegraphics{name}` instead of `\\includegraphics{path/name}`.\n\nIs there a way to do this in typst with the image command?\n\nI did think about show rules (like `#show image: im => { image(\"mypath/\"+im.path)}` which did not work), but I could find a good one.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 39,
      "score": 1042.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 511
    },
    {
      "id": 3930,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-14T21:59:46.705Z",
      "updated_at": "2025-02-18T11:01:36.622Z",
      "cooked": "<p>First, I’ll link this discussion because there is some relevant stuff in there:</p><aside class=\"quote quote-modified\" data-post=\"1\" data-topic=\"306\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/l/0A3649/48.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/why-are-paths-always-relative-to-the-current-file/306\">Why are paths always relative to the current file?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    Context: I was trying to implement a small function that reads and parses a file with some regex. The function just takes the path to the file and returns the parsed context as dictionary. I wanted to move this function into a package. \n/somewhere/else/lib.typ \n#let parse-xyz(path) = {\n    let data = read(path)\n    …\n}\n\nmain.typ \n#let values = import-xyz(\"my/path.xyz\");\n\nAfter that I found out that the read call resolves the path relative to the file that contains the function (lib.typ) and not …\n  </blockquote>\n</aside>\n\n<p>This gives us some limitations, but also opportunities. Let’s say all your images are found in <code>path/</code>. Then you can create a file <code>path/images.typ</code> and define the following function there:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let image(file, ..args) = std.image(file, ..args)\n\n// or in Typst &lt; 0.12 (I think)\n#let _image = image\n#let image(file, ..args) = _image(file, ..args)\n</code></pre>\n<p>a call to this (not the builtin) <code>image</code> function will automatically treat the file path relative to the <code>path/images.typ</code> file!</p>\n<p>What I usually do has a similar result, but I actually try to avoid to even use image paths across the whole project. Instead I define helper functions for my assets:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let logo = image.with(\"logo.svg\")\n#let banner = image.with(\"banner.jpg\")\n</code></pre>\n<p>Then I call these like <code>assets.logo(height: 2cm)</code>. For the kinds of images I use in my documents that feels more useful to me, but it’s definitely an opinionated solution.</p>",
      "raw": "First, I'll link this discussion because there is some relevant stuff in there:\nhttps://forum.typst.app/t/why-are-paths-always-relative-to-the-current-file/306\n\nThis gives us some limitations, but also opportunities. Let's say all your images are found in `path/`. Then you can create a file `path/images.typ` and define the following function there:\n```typ\n#let image(file, ..args) = std.image(file, ..args)\n\n// or in Typst < 0.12 (I think)\n#let _image = image\n#let image(file, ..args) = _image(file, ..args)\n```\na call to this (not the builtin) `image` function will automatically treat the file path relative to the `path/images.typ` file!\n\nWhat I usually do has a similar result, but I actually try to avoid to even use image paths across the whole project. Instead I define helper functions for my assets:\n```typ\n#let logo = image.with(\"logo.svg\")\n#let banner = image.with(\"banner.jpg\")\n```\nThen I call these like `assets.logo(height: 2cm)`. For the kinds of images I use in my documents that feels more useful to me, but it's definitely an opinionated solution.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 37,
      "score": 97.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 3965,
      "post_number": 3,
      "username": "Sinthoras",
      "name": "",
      "created_at": "2024-10-15T18:57:48.384Z",
      "updated_at": "2024-10-15T18:57:48.384Z",
      "cooked": "<p>That is indeed very useful, thanks! :)</p>\n<p>Your method to define helper-functions only makes sense if you have not so many images and they appear multiple times and less sense if you have many images which all appear only once, doesn’t it? (Or are there some advantages, which I don’t realize?)</p>",
      "raw": "That is indeed very useful, thanks! :)\n\nYour method to define helper-functions only makes sense if you have not so many images and they appear multiple times and less sense if you have many images which all appear only once, doesn't it? (Or are there some advantages, which I don't realize?)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 15.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 511
    },
    {
      "id": 3966,
      "post_number": 4,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-15T19:06:35.480Z",
      "updated_at": "2024-10-15T19:06:35.480Z",
      "cooked": "<p>Absolutely, that’s what I meant with “it’s definitely an opinionated solution”: it works well for my use cases, not for others. If you have logos or other assets that you reuse a lot, it’s a good tool to have; if you have images that you each include once, it’s pretty useless.</p>",
      "raw": "Absolutely, that's what I meant with \"it’s definitely an opinionated solution\": it works well for my use cases, not for others. If you have logos or other assets that you reuse a lot, it's a good tool to have; if you have images that you each include once, it's pretty useless.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 25,
      "score": 35.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 3989,
      "post_number": 5,
      "username": "gezepi",
      "name": "",
      "created_at": "2024-10-16T07:53:32.537Z",
      "updated_at": "2024-10-16T12:57:44.776Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"SillyFreak\" data-post=\"2\" data-topic=\"1108\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\"> SillyFreak:</div>\n<blockquote>\n<p>This gives us some limitations, but also opportunities. Let’s say all your images are found in <code>path/</code>. Then you can create a file <code>path/images.typ</code> and define the following function there:</p>\n</blockquote>\n</aside>\n<p>I think you missed the part that adds the path prefix:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let _image = image\n\n#let image(file, ..args) = _image(\"path/\" + file, ..args)\n</code></pre>\n<p>Edit: As SillyFreak points out below, the code in this post does <em>not apply</em> to the situation he describes.  However, it does apply if you put it in your main <code>.typ</code> file since then the path from the file to the photos begins outside of “<code>path/</code>” and therefore it needs to be added.</p>",
      "raw": "[quote=\"SillyFreak, post:2, topic:1108\"]\nThis gives us some limitations, but also opportunities. Let’s say all your images are found in `path/`. Then you can create a file `path/images.typ` and define the following function there:\n[/quote]\n\nI think you missed the part that adds the path prefix:\n```typ\n#let _image = image\n\n#let image(file, ..args) = _image(\"path/\" + file, ..args)\n```\n\nEdit: As SillyFreak points out below, the code in this post does *not apply* to the situation he describes.  However, it does apply if you put it in your main `.typ` file since then the path from the file to the photos begins outside of \"`path/`\" and therefore it needs to be added.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 21,
      "score": 9.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 3993,
      "post_number": 6,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-16T08:57:38.353Z",
      "updated_at": "2024-10-16T08:57:38.353Z",
      "cooked": "<p>no, since the <code>images.typ</code> file is inside <code>path/</code>, the filename is already relative to that directory <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "no, since the `images.typ` file is inside `path/`, the filename is already relative to that directory :slight_smile:",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 20,
      "score": 9.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 3997,
      "post_number": 7,
      "username": "gezepi",
      "name": "",
      "created_at": "2024-10-16T09:19:51.177Z",
      "updated_at": "2024-10-16T09:19:51.177Z",
      "cooked": "<p>Ahhh, got it. I missed that part even though it was in the quote! <img src=\"https://forum.typst.app/images/emoji/apple/person_facepalming.png?v=12\" title=\":person_facepalming:\" class=\"emoji\" alt=\":person_facepalming:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Ahhh, got it. I missed that part even though it was in the quote! :person_facepalming:",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 20,
      "score": 49.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    }
  ],
  "scraped_at": "2025-06-10T09:56:50.493338"
}