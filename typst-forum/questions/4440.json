{
  "topic_metadata": {
    "id": 4440,
    "title": "How to have table cells of same height, because of a rowspan in first column?",
    "slug": "how-to-have-table-cells-of-same-height-because-of-a-rowspan-in-first-column",
    "posts_count": 6,
    "created_at": "2025-06-02T18:18:51.469Z",
    "last_posted_at": "2025-06-07T11:23:35.983Z",
    "views": 77,
    "like_count": 7,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Andrew",
    "tags": [
      "layout",
      "tables"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1132
  },
  "posts": [
    {
      "id": 13601,
      "post_number": 1,
      "username": "TheBigBadBoy",
      "name": "",
      "created_at": "2025-06-02T18:18:51.577Z",
      "updated_at": "2025-06-02T18:20:26.083Z",
      "cooked": "<p>In the table below, I would like the cells on the last 3 rows to have the same exact height.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">table(columns: 9, stroke: (paint: gray.lighten(65%)), align: horizon,\n    table.cell(colspan: 2)[Number of #acrpl(\"GPU\")], table.vline(stroke: (paint: black)), ..range(7).map(n =&gt; [#(calc.pow(2,n))]), table.hline(stroke: (paint: black)),\n    table.cell(rowspan: 3, align: horizon, rotate(-90deg, reflow: true, [Iteration time (ms)])),\n    [Blocking #acs(\"MPI\")], [136.8], [69.1], [35.9], [22.1], [14.8], [15.1], [40.8],\n    [Non-blocking #acs(\"MPI\")], [136.8], [68.7], [34.7], [18.2], [9.5], [5.6], [7.2],\n    [Masked\\ #acs(\"MPI\")], [136.8], [68.6], [34.3], [17.2], [8.7], [4.4], [3.4]\n  )\n</code></pre>\n<p>The output I get shows this:<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/b/b1cf3d7bd00141f7c4386d733b7d7ddfeca1d80f.png\" data-download-href=\"https://forum.typst.app/uploads/default/b1cf3d7bd00141f7c4386d733b7d7ddfeca1d80f\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/b/b1cf3d7bd00141f7c4386d733b7d7ddfeca1d80f_2_690x242.png\" alt=\"image\" data-base62-sha1=\"pmYwnFBVBbgOckVbt1ogtqdyPqT\" width=\"690\" height=\"242\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/b/b1cf3d7bd00141f7c4386d733b7d7ddfeca1d80f_2_690x242.png, https://forum.typst.app/uploads/default/optimized/2X/b/b1cf3d7bd00141f7c4386d733b7d7ddfeca1d80f_2_1035x363.png 1.5x, https://forum.typst.app/uploads/default/original/2X/b/b1cf3d7bd00141f7c4386d733b7d7ddfeca1d80f.png 2x\" data-dominant-color=\"EFEFEF\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1094×384 22 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "In the table below, I would like the cells on the last 3 rows to have the same exact height.\n```typ\ntable(columns: 9, stroke: (paint: gray.lighten(65%)), align: horizon,\n    table.cell(colspan: 2)[Number of #acrpl(\"GPU\")], table.vline(stroke: (paint: black)), ..range(7).map(n => [#(calc.pow(2,n))]), table.hline(stroke: (paint: black)),\n    table.cell(rowspan: 3, align: horizon, rotate(-90deg, reflow: true, [Iteration time (ms)])),\n    [Blocking #acs(\"MPI\")], [136.8], [69.1], [35.9], [22.1], [14.8], [15.1], [40.8],\n    [Non-blocking #acs(\"MPI\")], [136.8], [68.7], [34.7], [18.2], [9.5], [5.6], [7.2],\n    [Masked\\ #acs(\"MPI\")], [136.8], [68.6], [34.3], [17.2], [8.7], [4.4], [3.4]\n  )\n```\n\nThe output I get shows this:\n![image|690x242](upload://pmYwnFBVBbgOckVbt1ogtqdyPqT.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 23,
      "score": 54.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1697
    },
    {
      "id": 13602,
      "post_number": 2,
      "username": "TheBigBadBoy",
      "name": "",
      "created_at": "2025-06-02T18:21:16.657Z",
      "updated_at": "2025-06-02T18:21:16.657Z",
      "cooked": "<aside class=\"quote quote-modified\" data-post=\"1\" data-topic=\"955\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/allanchain/48/758_2.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/how-to-make-each-grid-cell-take-up-all-available-space/955\">How to make each grid cell take up all available space?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    Sorry, I can’t find a proper and concise way to describe the problem in the title. Let me explain in detail here. \nI’m making a poster with many color boxes. I want all boxes aligned and fill up all available vertical space and thus there is no extra blank areas. Here is a simplified version of it: \n#set page(width: 300pt, height: 200pt)\n\n#set rect(\n  inset: 8pt,\n  fill: rgb(\"e4e5ea\"),\n  width: 100%,\n  radius: 5pt,\n)\n\n#grid(\n  columns: (1fr, 1fr, 1fr),\n  gutter: 3pt,\n  grid.cell(rowspan: 2, rect…\n  </blockquote>\n</aside>\n<p>\nMight be a good starting point, however it makes the table take the place of the whole page.</p>",
      "raw": "https://forum.typst.app/t/how-to-make-each-grid-cell-take-up-all-available-space/955\nMight be a good starting point, however it makes the table take the place of the whole page.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 4.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1697
    },
    {
      "id": 13767,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-06-05T15:11:55.468Z",
      "updated_at": "2025-06-06T14:23:55.674Z",
      "cooked": "<p>Hello. I don’t know how abstracted this should be, but I think you would have to use some wrapper either way. The only other way I can think of is similar to <a href=\"https://forum.typst.app/t/how-to-distribute-column-widths-equally-for-specific-rows-in-a-table/4044/4\" class=\"inline-onebox\">How to distribute column widths equally for specific rows in a table? - #4 by Andrew</a>.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set rotate(reflow: true)\n\n#let even-height(first, ..rest) = {\n  if (\n    type(first) != content\n      or first.func() != table.cell\n      or \"rowspan\" not in first.fields()\n  ) {\n    return arguments(first, ..rest)\n  }\n  let height = measure(first).height\n  let rows = first.fields().rowspan\n  (first,)\n  rest.pos().map(block.with(height: height / rows))\n}\n\n#context table(\n  columns: 9,\n  stroke: gray.lighten(65%),\n  align: center + horizon,\n  table.header(\n    table.cell(colspan: 2)[Number of GPUs],\n    table.vline(stroke: (paint: black)),\n    ..range(7).map(n =&gt; [#calc.pow(2, n)]),\n  ),\n  table.hline(stroke: black),\n  ..even-height(\n    table.cell(rowspan: 3, rotate(-90deg)[Iteration time (ms)]),\n    [Blocking MPI],\n    [136.8],\n    [69.1],\n    [35.9],\n    [22.1],\n    [14.8],\n    [15.1],\n    [40.8],\n\n    [Non-blocking MPI],\n    [136.8],\n    [68.7],\n    [34.7],\n    [18.2],\n    [9.5],\n    [5.6],\n    [7.2],\n\n    [Masked\\ MPI],\n    [136.8],\n    [68.6],\n    [34.3],\n    [17.2],\n    [8.7],\n    [4.4],\n    [3.4],\n  ),\n)\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/2/223fd46def05da19d7b9f911c9e3c4b5d1e34d18.png\" data-download-href=\"https://forum.typst.app/uploads/default/223fd46def05da19d7b9f911c9e3c4b5d1e34d18\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/2/223fd46def05da19d7b9f911c9e3c4b5d1e34d18_2_345x149.png\" alt=\"image\" data-base62-sha1=\"4SYZiCMzxLI9fYnwjXQHTZN6DwY\" width=\"345\" height=\"149\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/2/223fd46def05da19d7b9f911c9e3c4b5d1e34d18_2_345x149.png, https://forum.typst.app/uploads/default/optimized/2X/2/223fd46def05da19d7b9f911c9e3c4b5d1e34d18_2_517x223.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/2/223fd46def05da19d7b9f911c9e3c4b5d1e34d18_2_690x298.png 2x\" data-dominant-color=\"1A1A1A\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">754×326 38.7 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>You have to get the height of the first cell somehow, otherwise any ratio or fraction will be against page sizes. You can just specify absolute length to <code>rows</code>, and it will work, but it’s a manual value.</p>\n<p>Here is the easiest approach: get the first tall cell, the rest of the cells, <a href=\"https://typst.app/docs/reference/layout/measure/\">measure</a> the total height, get the number of rows spanned, divide one by another and set the height for the rest of the cells to this.</p>",
      "raw": "Hello. I don't know how abstracted this should be, but I think you would have to use some wrapper either way. The only other way I can think of is similar to https://forum.typst.app/t/how-to-distribute-column-widths-equally-for-specific-rows-in-a-table/4044/4?u=andrew.\n\n```typ\n#set rotate(reflow: true)\n\n#let even-height(first, ..rest) = {\n  if (\n    type(first) != content\n      or first.func() != table.cell\n      or \"rowspan\" not in first.fields()\n  ) {\n    return arguments(first, ..rest)\n  }\n  let height = measure(first).height\n  let rows = first.fields().rowspan\n  (first,)\n  rest.pos().map(block.with(height: height / rows))\n}\n\n#context table(\n  columns: 9,\n  stroke: gray.lighten(65%),\n  align: center + horizon,\n  table.header(\n    table.cell(colspan: 2)[Number of GPUs],\n    table.vline(stroke: (paint: black)),\n    ..range(7).map(n => [#calc.pow(2, n)]),\n  ),\n  table.hline(stroke: black),\n  ..even-height(\n    table.cell(rowspan: 3, rotate(-90deg)[Iteration time (ms)]),\n    [Blocking MPI],\n    [136.8],\n    [69.1],\n    [35.9],\n    [22.1],\n    [14.8],\n    [15.1],\n    [40.8],\n\n    [Non-blocking MPI],\n    [136.8],\n    [68.7],\n    [34.7],\n    [18.2],\n    [9.5],\n    [5.6],\n    [7.2],\n\n    [Masked\\ MPI],\n    [136.8],\n    [68.6],\n    [34.3],\n    [17.2],\n    [8.7],\n    [4.4],\n    [3.4],\n  ),\n)\n```\n\n![image|690x298, 50%](upload://4SYZiCMzxLI9fYnwjXQHTZN6DwY.png)\n\nYou have to get the height of the first cell somehow, otherwise any ratio or fraction will be against page sizes. You can just specify absolute length to `rows`, and it will work, but it's a manual value.\n\nHere is the easiest approach: get the first tall cell, the rest of the cells, [measure](https://typst.app/docs/reference/layout/measure/) the total height, get the number of rows spanned, divide one by another and set the height for the rest of the cells to this.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 21,
      "score": 18.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 13834,
      "post_number": 4,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-06-07T07:01:33.146Z",
      "updated_at": "2025-06-07T07:01:33.146Z",
      "cooked": "<p>You can use <code>rows</code> to set the height of rows. Here are some alternative approaches using it:</p>\n<ol>\n<li>Guessing a fixed height for the cells (or measuring if you prefer) and using that. (Note that the last row height is repeated, so the 3 rows have the same height.)</li>\n<li>Limiting the space available to the table (or using the whole remainder of your page), and using <code>1fr</code> (1 fractional unit) rows which automatically split remaining space equally.</li>\n</ol>\n<p>For the former, you’d use e.g. <code>rows: (auto, 3em)</code>. For the latter, <code>rows: (auto, 1em)</code>. Since the former one is pretty straightforward, here’s how the second one would look like.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(\"a4\", height: auto)\n#block(height: 5cm, table(\n  columns: 9,\n  stroke: gray.lighten(65%),\n  align: center + horizon,\n  rows: (auto, 1fr),\n  table.header(\n    table.cell(colspan: 2)[Number of GPUs],\n    table.vline(stroke: (paint: black)),\n    ..range(7).map(n =&gt; [#calc.pow(2, n)]),\n  ),\n  table.hline(stroke: black),\n  table.cell(rowspan: 3, rotate(-90deg, reflow: true)[Iteration time (ms)]),\n  [Blocking MPI],\n  [136.8],\n  [69.1],\n  [35.9],\n  [22.1],\n  [14.8],\n  [15.1],\n  [40.8],\n\n  [Non-blocking MPI],\n  [136.8],\n  [68.7],\n  [34.7],\n  [18.2],\n  [9.5],\n  [5.6],\n  [7.2],\n\n  [Masked\\ MPI],\n  [136.8],\n  [68.6],\n  [34.3],\n  [17.2],\n  [8.7],\n  [4.4],\n  [3.4],\n))\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/e/e23a8028e3706ea22e89ef27a54e509a9f474bf4.png\" data-download-href=\"https://forum.typst.app/uploads/default/e23a8028e3706ea22e89ef27a54e509a9f474bf4\" title=\"output: last 3 rows have the same height\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/e/e23a8028e3706ea22e89ef27a54e509a9f474bf4_2_690x187.png\" alt=\"output: last 3 rows have the same height\" data-base62-sha1=\"whjfd32SW7MGGqFVhSpas0Kbj0w\" width=\"690\" height=\"187\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/e/e23a8028e3706ea22e89ef27a54e509a9f474bf4_2_690x187.png, https://forum.typst.app/uploads/default/optimized/2X/e/e23a8028e3706ea22e89ef27a54e509a9f474bf4_2_1035x280.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/e/e23a8028e3706ea22e89ef27a54e509a9f474bf4_2_1380x374.png 2x\" data-dominant-color=\"F9F9F9\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">output: last 3 rows have the same height</span><span class=\"informations\">1918×521 82 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "You can use `rows` to set the height of rows. Here are some alternative approaches using it:\n\n1. Guessing a fixed height for the cells (or measuring if you prefer) and using that. (Note that the last row height is repeated, so the 3 rows have the same height.)\n2. Limiting the space available to the table (or using the whole remainder of your page), and using `1fr` (1 fractional unit) rows which automatically split remaining space equally.\n\nFor the former, you'd use e.g. `rows: (auto, 3em)`. For the latter, `rows: (auto, 1em)`. Since the former one is pretty straightforward, here's how the second one would look like.\n\n\n```typ\n#set page(\"a4\", height: auto)\n#block(height: 5cm, table(\n  columns: 9,\n  stroke: gray.lighten(65%),\n  align: center + horizon,\n  rows: (auto, 1fr),\n  table.header(\n    table.cell(colspan: 2)[Number of GPUs],\n    table.vline(stroke: (paint: black)),\n    ..range(7).map(n => [#calc.pow(2, n)]),\n  ),\n  table.hline(stroke: black),\n  table.cell(rowspan: 3, rotate(-90deg, reflow: true)[Iteration time (ms)]),\n  [Blocking MPI],\n  [136.8],\n  [69.1],\n  [35.9],\n  [22.1],\n  [14.8],\n  [15.1],\n  [40.8],\n\n  [Non-blocking MPI],\n  [136.8],\n  [68.7],\n  [34.7],\n  [18.2],\n  [9.5],\n  [5.6],\n  [7.2],\n\n  [Masked\\ MPI],\n  [136.8],\n  [68.6],\n  [34.3],\n  [17.2],\n  [8.7],\n  [4.4],\n  [3.4],\n))\n```\n\n![output: last 3 rows have the same height|690x187](upload://whjfd32SW7MGGqFVhSpas0Kbj0w.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 17,
      "score": 17.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 13839,
      "post_number": 5,
      "username": "TheBigBadBoy",
      "name": "",
      "created_at": "2025-06-07T10:10:24.540Z",
      "updated_at": "2025-06-07T10:10:24.540Z",
      "cooked": "<p>Thanks to both of you for your help!<br>\nI really thought Typst had a thing like “minimize the area of the table while maximize rows height when they are <code>1fr</code>”.<br>\nI think I’ll go with the first answer though, as it provides some abstraction (and I have a few tables across my document, so I don’t feel like measuring everything). Thanks again.</p>",
      "raw": "Thanks to both of you for your help!\nI really thought Typst had a thing like \"minimize the area of the table while maximize rows height when they are `1fr`\".\nI think I'll go with the first answer though, as it provides some abstraction (and I have a few tables across my document, so I don't feel like measuring everything). Thanks again.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 15,
      "score": 7.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1697
    },
    {
      "id": 13843,
      "post_number": 6,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-06-07T11:23:35.983Z",
      "updated_at": "2025-06-07T12:01:44.135Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"TheBigBadBoy\" data-post=\"5\" data-topic=\"4440\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/thebigbadboy/48/3242_2.png\" class=\"avatar\"> TheBigBadBoy:</div>\n<blockquote>\n<p>minimize the area of the table while maximize rows height when they are <code>1fr</code></p>\n</blockquote>\n</aside>\n<p>huh, that framing inspired me. You can actually do that*: measure how much space the table requres with <code>auto</code> rows, and then put it in a fitting block with <code>1fr</code> rows:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let t = table(\n  columns: 9,\n  // rows not specified\n  stroke: (paint: gray.lighten(65%)),\n  align: horizon,\n  \n  table.cell(colspan: 2)[Number of #acrpl(\"GPU\")],\n  table.vline(stroke: (paint: black)),\n  ..range(7).map(n =&gt; [#(calc.pow(2,n))]),\n  table.hline(stroke: (paint: black)),\n  \n  table.cell(rowspan: 3, align: horizon, rotate(-90deg, reflow: true, [Iteration time (ms)])),\n  [Blocking #acs(\"MPI\")], [136.8], [69.1], [35.9], [22.1], [14.8], [15.1], [40.8],\n  [Non-blocking #acs(\"MPI\")], [136.8], [68.7], [34.7], [18.2], [9.5], [5.6], [7.2],\n  [Masked\\ #acs(\"MPI\")], [136.8], [68.6], [34.3], [17.2], [8.7], [4.4], [3.4]\n)\n#layout(outer-size =&gt; {\n  // measure without rows configured, but constrained by available space\n  let size = measure(..outer-size, t)\n  // use set rules to change rows\n  set table(rows: (auto,) + 3 * (1fr,))\n  // render the table in a block with fixed size, so that 1fr only fills that space\n  block(..size, t)\n})\n</code></pre>\n<p>* this has the problem that the table might actually need more space when row heights are distributed, so it’s still not perfect. For example, if one row was significantly taller than the others, then distributing height away from it will make it overflow. You can see that by adding <code>lorem(20)</code> to one of the rows.</p>\n<p>(<a class=\"mention\" href=\"/u/andrew\">@Andrew</a>’s solution seems to have the same problem, but additionally his table is generally a bit taller than necessary (when there’s actually height to distribute) because he doesn’t factor in table insets.)</p>\n<p>I think that means that there are generally two cases:</p>\n<ul>\n<li>if the leftmost column’s height is larger than what is needed for accommodating three rows as tall as the tallest one (like your example), then my (and Andrew’s) trick works</li>\n<li>if the sum of the rows is taller than the leftmost column, then our tricks will no longer work, and instead the row height needs to be based on the tallest cell in all three rows</li>\n</ul>",
      "raw": "[quote=\"TheBigBadBoy, post:5, topic:4440\"]\nminimize the area of the table while maximize rows height when they are `1fr`\n[/quote]\n\nhuh, that framing inspired me. You can actually do that\\*: measure how much space the table requres with `auto` rows, and then put it in a fitting block with `1fr` rows:\n```\n#let t = table(\n  columns: 9,\n  // rows not specified\n  stroke: (paint: gray.lighten(65%)),\n  align: horizon,\n  \n  table.cell(colspan: 2)[Number of #acrpl(\"GPU\")],\n  table.vline(stroke: (paint: black)),\n  ..range(7).map(n => [#(calc.pow(2,n))]),\n  table.hline(stroke: (paint: black)),\n  \n  table.cell(rowspan: 3, align: horizon, rotate(-90deg, reflow: true, [Iteration time (ms)])),\n  [Blocking #acs(\"MPI\")], [136.8], [69.1], [35.9], [22.1], [14.8], [15.1], [40.8],\n  [Non-blocking #acs(\"MPI\")], [136.8], [68.7], [34.7], [18.2], [9.5], [5.6], [7.2],\n  [Masked\\ #acs(\"MPI\")], [136.8], [68.6], [34.3], [17.2], [8.7], [4.4], [3.4]\n)\n#layout(outer-size => {\n  // measure without rows configured, but constrained by available space\n  let size = measure(..outer-size, t)\n  // use set rules to change rows\n  set table(rows: (auto,) + 3 * (1fr,))\n  // render the table in a block with fixed size, so that 1fr only fills that space\n  block(..size, t)\n})\n```\n\n\\* this has the problem that the table might actually need more space when row heights are distributed, so it's still not perfect. For example, if one row was significantly taller than the others, then distributing height away from it will make it overflow. You can see that by adding `lorem(20)` to one of the rows.\n\n(@Andrew's solution seems to have the same problem, but additionally his table is generally a bit taller than necessary (when there's actually height to distribute) because he doesn't factor in table insets.)\n\nI think that means that there are generally two cases:\n- if the leftmost column's height is larger than what is needed for accommodating three rows as tall as the tallest one (like your example), then my (and Andrew's) trick works\n- if the sum of the rows is taller than the leftmost column, then our tricks will no longer work, and instead the row height needs to be based on the tallest cell in all three rows",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 2,
      "reads": 15,
      "score": 17.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:46:49.413984"
}