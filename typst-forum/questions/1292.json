{
  "topic_metadata": {
    "id": 1292,
    "title": "How can I create a set of shared `set` and `show` rules which can be imported into a theme?",
    "slug": "how-can-i-create-a-set-of-shared-set-and-show-rules-which-can-be-imported-into-a-theme",
    "posts_count": 10,
    "created_at": "2024-10-22T14:45:20.856Z",
    "last_posted_at": "2025-06-07T11:07:26.418Z",
    "views": 1026,
    "like_count": 11,
    "reply_count": 7,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "ParaN3xus",
    "tags": [
      "templates"
    ],
    "category_id": 5,
    "participant_count": 7,
    "word_count": 821
  },
  "posts": [
    {
      "id": 4481,
      "post_number": 1,
      "username": "Christopher_Marcotte",
      "name": "Christopher Marcotte",
      "created_at": "2024-10-22T14:45:21.020Z",
      "updated_at": "2024-10-22T14:59:10.986Z",
      "cooked": "<p>If I want consistent show and set rules across several templates, I have been trying to do so with a generic styling file, which is imported into each template. This guarantees the consistency, I would think, but in practice does not. E.g., in <code>styling.typ</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set text( size: 10pt,\n          fill: blue,\n          font: (\"Lato\", \"Noto Sans\", \"Fira Sans\", ),\n          lang: \"en\",\n          ligatures: true,\n          discretionary-ligatures: true,\n          historical-ligatures: true)\n\n#show math.equation: set text(font: (\"Lete Sans Math\", \"Noto Sans Math\", \"Fira Math\", ),\n          ligatures: true,\n          discretionary-ligatures: true,\n          historical-ligatures: true)\n#show raw: set text(font: \"Space Mono\",\n          ligatures: true,\n          discretionary-ligatures: true,\n          historical-ligatures: true)\n</code></pre>\n<p>while in <code>template.typ</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise(title: \"\", date: none, body) = {\n  // Set the document's basic properties.\n  set document(author: \"Me\", title: title)\n  set page(\n    \"a4\",\n    margin: (top: auto, bottom: auto, left: 1cm, right: 1cm),\n    header: [\n      #set text(0.8em)\n      #parbreak()\n      #line(stroke: blue+1pt, length: 100%)\n   ]\n  )\n\n  // Title row.\n  align(center)[\n    #block(\n      text(\n        weight: 700,\n        size: 1.75em,\n        //font: \"IBM Plex Serif\",\n        title\n      )\n    )\n    #v(1em, weak: true)\n  ]\n\n  // Main body.\n  set par(justify: false, leading: 1em, linebreaks: \"optimized\")\n  include(\"styling.typ\")\n  body\n}\n</code></pre>\n<p>so that in <code>main.typ</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"template.typ\": *\n\n#show: exercise.with(\n  title: \"Hello, World!\",\n  authors: ((name: \"Me\", title: \"\", email: \"\", affiliation:\"\"),),\n  date: \"Now\",\n)\n\nThis is body text!\n\n</code></pre>\n<p>My ultimate goal is to have a set of generic <code>show</code> and <code>set</code> rules that can be used consistently in several different templates (slides, documents, etc) but I can not get it to work correctly. Is this the wrong way to achieve that goal?</p>",
      "raw": "If I want consistent show and set rules across several templates, I have been trying to do so with a generic styling file, which is imported into each template. This guarantees the consistency, I would think, but in practice does not. E.g., in `styling.typ`:\n```typ\n#set text( size: 10pt,\n          fill: blue,\n          font: (\"Lato\", \"Noto Sans\", \"Fira Sans\", ),\n          lang: \"en\",\n          ligatures: true,\n          discretionary-ligatures: true,\n          historical-ligatures: true)\n\n#show math.equation: set text(font: (\"Lete Sans Math\", \"Noto Sans Math\", \"Fira Math\", ),\n          ligatures: true,\n          discretionary-ligatures: true,\n          historical-ligatures: true)\n#show raw: set text(font: \"Space Mono\",\n          ligatures: true,\n          discretionary-ligatures: true,\n          historical-ligatures: true)\n```\nwhile in `template.typ`:\n\n```typ\n#let exercise(title: \"\", date: none, body) = {\n  // Set the document's basic properties.\n  set document(author: \"Me\", title: title)\n  set page(\n    \"a4\",\n    margin: (top: auto, bottom: auto, left: 1cm, right: 1cm),\n    header: [\n      #set text(0.8em)\n      #parbreak()\n      #line(stroke: blue+1pt, length: 100%)\n   ]\n  )\n\n  // Title row.\n  align(center)[\n    #block(\n      text(\n        weight: 700,\n        size: 1.75em,\n        //font: \"IBM Plex Serif\",\n        title\n      )\n    )\n    #v(1em, weak: true)\n  ]\n\n  // Main body.\n  set par(justify: false, leading: 1em, linebreaks: \"optimized\")\n  include(\"styling.typ\")\n  body\n}\n```\nso that in `main.typ`:\n```typ\n#import \"template.typ\": *\n\n#show: exercise.with(\n  title: \"Hello, World!\",\n  authors: ((name: \"Me\", title: \"\", email: \"\", affiliation:\"\"),),\n  date: \"Now\",\n)\n\nThis is body text!\n\n```\n\nMy ultimate goal is to have a set of generic `show` and `set` rules that can be used consistently in several different templates (slides, documents, etc) but I can not get it to work correctly. Is this the wrong way to achieve that goal?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 88,
      "score": 3816.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 270
    },
    {
      "id": 4490,
      "post_number": 2,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-10-22T15:58:37.277Z",
      "updated_at": "2024-10-22T15:58:37.277Z",
      "cooked": "<p>These two posts may help:</p><aside class=\"quote quote-modified\" data-post=\"2\" data-topic=\"1042\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/paran3xus/48/32_2.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/why-is-the-template-function-i-wrote-not-working-properly/1042/2\">Why is the template function I wrote not working properly?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    Basically, show will take everything below it and process it using the function you specify. For example: \n#show: style\ncontent\n\nis equivalent to: \n#style[content]\n\nBased on this rule, let’s take a look at your code. \nFirstly, \n#let theorems(doc) = [\n  #show: thmrules\n  #doc\n]\n\nis equivalent to: \n#let theorems(doc) = [\n  #thmrules(doc)\n]\n\nSo, in reality, thmrules and theorems are exactly the same. \nSecondly, when you call show: all, your doc (which, in this case, refers to your entire document) …\n  </blockquote>\n</aside>\n<aside class=\"quote quote-modified\" data-post=\"3\" data-topic=\"1266\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/paran3xus/48/32_2.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/why-the-definition-of-show-regex-doesnt-work-in-a-function/1266/3\">Why the definition of \"show regex\" doesn't work in a function?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    This is because show only works on content within its scope. In your example, this scope is the interior of the __sugar() function definition. \nThe principle of show is that it will take everything that matches its selector below and within its scope, and process it using the function you specify. So when you call __sugar(), show did nothing because there is nothing else in it’s  scope. \nTo fix this issue, you need to write another show in the scope you want. For example: \n#let __sugar(content) …\n  </blockquote>\n</aside>\n",
      "raw": "These two posts may help:\nhttps://forum.typst.app/t/why-is-the-template-function-i-wrote-not-working-properly/1042/2?u=paran3xus\nhttps://forum.typst.app/t/why-the-definition-of-show-regex-doesnt-work-in-a-function/1266/3?u=paran3xus",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 80,
      "score": 120.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 4491,
      "post_number": 3,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-10-22T16:04:00.616Z",
      "updated_at": "2024-10-22T16:04:12.024Z",
      "cooked": "<p>In case you still don’t understand: In your example, the <code>set</code> and <code>show</code> functions in <code>styling.typ</code> only work within their own scope, which is within <code>styling.typ</code>. Therefore, they cannot style other parts of the document.</p>\n<p>To fix this, you need to write a function that takes content and returns styled content, like:</p>\n<p><code>styling.typ</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let styling(it) = {\n  set text(\n    size: 10pt,\n    fill: blue,\n    font: (\"Lato\", \"Noto Sans\", \"Fira Sans\"),\n    lang: \"en\",\n    ligatures: true,\n    discretionary-ligatures: true,\n    historical-ligatures: true,\n  )\n\n  show math.equation: set text(\n    font: (\"Lete Sans Math\", \"Noto Sans Math\", \"Fira Math\"),\n    ligatures: true,\n    discretionary-ligatures: true,\n    historical-ligatures: true,\n  )\n  show raw: set text(\n    font: \"Space Mono\",\n    ligatures: true,\n    discretionary-ligatures: true,\n    historical-ligatures: true,\n  )\n  it\n}\n</code></pre>\n<p><code>template.typ</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise(title: \"\", date: none, body) = {\n  ...\n\n  import \"styling.typ\": styling\n  show: styling\n\n  body\n}\n</code></pre>",
      "raw": "In case you still don't understand: In your example, the `set` and `show` functions in `styling.typ` only work within their own scope, which is within `styling.typ`. Therefore, they cannot style other parts of the document.\n\nTo fix this, you need to write a function that takes content and returns styled content, like:\n\n`styling.typ`\n```typ\n#let styling(it) = {\n  set text(\n    size: 10pt,\n    fill: blue,\n    font: (\"Lato\", \"Noto Sans\", \"Fira Sans\"),\n    lang: \"en\",\n    ligatures: true,\n    discretionary-ligatures: true,\n    historical-ligatures: true,\n  )\n\n  show math.equation: set text(\n    font: (\"Lete Sans Math\", \"Noto Sans Math\", \"Fira Math\"),\n    ligatures: true,\n    discretionary-ligatures: true,\n    historical-ligatures: true,\n  )\n  show raw: set text(\n    font: \"Space Mono\",\n    ligatures: true,\n    discretionary-ligatures: true,\n    historical-ligatures: true,\n  )\n  it\n}\n```\n\n`template.typ`\n```typ\n#let exercise(title: \"\", date: none, body) = {\n  ...\n\n  import \"styling.typ\": styling\n  show: styling\n\n  body\n}\n```",
      "reply_to_post_number": 2,
      "reply_count": 3,
      "quote_count": 0,
      "like_count": 3,
      "reads": 77,
      "score": 249.6,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 4516,
      "post_number": 4,
      "username": "Christopher_Marcotte",
      "name": "Christopher Marcotte",
      "created_at": "2024-10-23T07:51:56.266Z",
      "updated_at": "2024-10-23T07:51:56.266Z",
      "cooked": "<p>Thanks very much; I hadn’t thought about using a function to create a new scope in which the styling is applied. For my own edification: what does the <code>include(file)</code> do, then, if not insert text from <code>file</code> into the current scope?</p>",
      "raw": "Thanks very much; I hadn't thought about using a function to create a new scope in which the styling is applied. For my own edification: what does the `include(file)` do, then, if not insert text from `file` into the current scope?",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 64,
      "score": 27.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 270
    },
    {
      "id": 4594,
      "post_number": 5,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-10-24T00:43:33.679Z",
      "updated_at": "2024-10-24T00:43:33.679Z",
      "cooked": "<p>According to <a href=\"https://typst.app/docs/reference/scripting/#modules\">Typst Documents</a>, <code>include \"bar.typ\"</code> will</p>\n<blockquote>\n<p>Evaluates the file at the path <code>bar.typ</code> and returns the resulting <a href=\"https://typst.app/docs/reference/foundations/content/\">content</a>.</p>\n</blockquote>\n<p>So I think included Typst files will be treated as individual documents, which won’t affect current context.</p>",
      "raw": "According to [Typst Documents](https://typst.app/docs/reference/scripting/#modules), `include \"bar.typ\"` will \n> Evaluates the file at the path `bar.typ` and returns the resulting [content](https://typst.app/docs/reference/foundations/content/).\n\nSo I think included Typst files will be treated as individual documents, which won't affect current context.",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 55,
      "score": 45.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 4603,
      "post_number": 6,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-24T07:01:18.856Z",
      "updated_at": "2024-10-24T07:01:18.856Z",
      "cooked": "<p>If <code>main.typ</code> does <code>#include \"a.typ\"</code>, then all content produced by <code>a.typ</code> will be inserted as if it had been produced by <code>main.typ</code>. So <code>a.typ</code> can affect the rest of the document in the usual ways for content: if <code>a.typ</code> defines a heading, it will be found by a <code>query(heading)</code> anywhere in <code>main.typ</code>. If <code>a.typ</code> increments a counter the effect will be visible in <code>main.typ</code> (because in typst a counter increment is done by inserting a piece of content with the increment instruction), etc.</p>",
      "raw": "If `main.typ` does `#include \"a.typ\"`, then all content produced by `a.typ` will be inserted as if it had been produced by `main.typ`. So `a.typ` can affect the rest of the document in the usual ways for content: if `a.typ` defines a heading, it will be found by a `query(heading)` anywhere in `main.typ`. If `a.typ` increments a counter the effect will be visible in `main.typ` (because in typst a counter increment is done by inserting a piece of content with the increment instruction), etc.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 54,
      "score": 40.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 4609,
      "post_number": 7,
      "username": "Yahuxo",
      "name": "Tobias",
      "created_at": "2024-10-24T10:58:02.762Z",
      "updated_at": "2024-10-24T10:58:02.762Z",
      "cooked": "<p>I think the important point here is that <code>#include</code> returns <em>content</em> from the other file, but does not affect the current <em>context</em>, like function parameters changed with <code>#set</code> or functions overwritten with <code>#show</code>.</p>\n<p>In my understanding this is similar to Hygienic Macros provided by some programming languages (not C).</p>",
      "raw": "I think the important point here is that `#include` returns _content_ from the other file, but does not affect the current _context_, like function parameters changed with `#set` or functions overwritten with `#show`. \n\nIn my understanding this is similar to Hygienic Macros provided by some programming languages (not C).",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 50,
      "score": 49.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 472
    },
    {
      "id": 9760,
      "post_number": 8,
      "username": "Alex_Duchnowski",
      "name": "Alex Duchnowski",
      "created_at": "2025-03-13T14:02:31.146Z",
      "updated_at": "2025-03-13T14:04:35.939Z",
      "cooked": "<p>If you want the styling to be universal for a document (rather than used within the context of a specific function like <code>exercise</code>), you can also simply add<br>\n<code>#show: doc =&gt; styling(doc)</code> to the beginning of a file (after importing the <code>styling</code> function), and the formatting will apply to everything that comes after <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "If you want the styling to be universal for a document (rather than used within the context of a specific function like `exercise`), you can also simply add\n`#show: doc => styling(doc)` to the beginning of a file (after importing the `styling` function), and the formatting will apply to everything that comes after :slight_smile:",
      "reply_to_post_number": 3,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 2,
      "reads": 38,
      "score": 66.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1160
    },
    {
      "id": 13841,
      "post_number": 9,
      "username": "Thomas_Surlykke",
      "name": "Thomas Holme Surlykke",
      "created_at": "2025-06-07T10:17:51.669Z",
      "updated_at": "2025-06-07T10:17:51.669Z",
      "cooked": "<p>Is <code>#show: doc =&gt; styling(doc)</code> not the exact same as <code>#show: styling</code>?</p>",
      "raw": "Is `#show: doc => styling(doc)` not the exact same as `#show: styling`?",
      "reply_to_post_number": 8,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 19,
      "score": 7.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1712
    },
    {
      "id": 13842,
      "post_number": 10,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-06-07T11:07:26.418Z",
      "updated_at": "2025-06-07T11:07:26.418Z",
      "cooked": "<p>Yes it is. The difference between</p>\n<aside class=\"quote no-group\" data-username=\"ParaN3xus\" data-post=\"3\" data-topic=\"1292\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/paran3xus/48/32_2.png\" class=\"avatar\"> ParaN3xus:</div>\n<blockquote>\n<p><code>template.typ</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise(title: \"\", date: none, body) = {\n  ...\n\n  import \"styling.typ\": styling\n  show: styling\n\n  body\n}\n</code></pre>\n</blockquote>\n</aside>\n<p>and</p>\n<aside class=\"quote no-group\" data-username=\"Alex_Duchnowski\" data-post=\"8\" data-topic=\"1292\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/alex_duchnowski/48/1880_2.png\" class=\"avatar\"> Alex_Duchnowski:</div>\n<blockquote>\n<p>you can also simply add <code>#show: doc =&gt; styling(doc)</code> to the beginning of a file</p>\n</blockquote>\n</aside>\n<p>is not <code>styling</code> vs. <code>doc =&gt; styling(doc)</code> but whether you put the show rule in a function (such as <code>exercise</code>) or at the beginning of your document.</p>",
      "raw": "Yes it is. The difference between\n\n[quote=\"ParaN3xus, post:3, topic:1292\"]\n`template.typ`\n\n```\n#let exercise(title: \"\", date: none, body) = {\n  ...\n\n  import \"styling.typ\": styling\n  show: styling\n\n  body\n}\n```\n[/quote]\n\nand \n\n[quote=\"Alex_Duchnowski, post:8, topic:1292\"]\nyou can also simply add `#show: doc => styling(doc)` to the beginning of a file\n[/quote]\n\nis not `styling` vs. `doc => styling(doc)` but whether you put the show rule in a function (such as `exercise`) or at the beginning of your document.",
      "reply_to_post_number": 9,
      "reply_count": 0,
      "quote_count": 2,
      "like_count": 0,
      "reads": 18,
      "score": 2.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:56:10.823675"
}