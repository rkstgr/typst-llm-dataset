{
  "topic_metadata": {
    "id": 873,
    "title": "How can I map an array of math mode characters to text?",
    "slug": "how-can-i-map-an-array-of-math-mode-characters-to-text",
    "posts_count": 4,
    "created_at": "2024-10-02T13:37:01.789Z",
    "last_posted_at": "2024-10-02T14:18:27.791Z",
    "views": 570,
    "like_count": 4,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Andrew",
    "tags": [
      "scripting",
      "math"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 469
  },
  "posts": [
    {
      "id": 3218,
      "post_number": 1,
      "username": "Steven",
      "name": "Steven",
      "created_at": "2024-10-02T13:37:02.000Z",
      "updated_at": "2024-10-03T02:14:11.536Z",
      "cooked": "<p>What is the correct way to use <code>map</code> to render math mode? For example, I would like to print</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">1, 2, 3, a, b\n</code></pre>\n<p>to the document.</p>\n<p>I have tried the following</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">\n#text[#(1, 2, 3, $alpha$, $beta$).map(\n    x =&gt; x\n)]\n\n#(1, 2, 3, $alpha$, $beta$).map(\n    x =&gt; text[#x]\n)\n\n#(1, 2, 3, $alpha$, $beta$).map(\n    x =&gt; text[$#x$]\n)\n\n</code></pre>\n<p>However, the math blocks are not rendered as text<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/87cbc6b75ac3b9e276dd227ce67ec5eca6db8136.png\" data-download-href=\"https://forum.typst.app/uploads/default/87cbc6b75ac3b9e276dd227ce67ec5eca6db8136\" title=\"Screenshot 2024-10-02 at 21.34.50\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/87cbc6b75ac3b9e276dd227ce67ec5eca6db8136_2_353x500.png\" alt=\"Screenshot 2024-10-02 at 21.34.50\" data-base62-sha1=\"jnj2UYL2eWp82bvHEy3bgvat9nE\" width=\"353\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/87cbc6b75ac3b9e276dd227ce67ec5eca6db8136_2_353x500.png, https://forum.typst.app/uploads/default/original/1X/87cbc6b75ac3b9e276dd227ce67ec5eca6db8136.png 1.5x, https://forum.typst.app/uploads/default/original/1X/87cbc6b75ac3b9e276dd227ce67ec5eca6db8136.png 2x\" data-dominant-color=\"F7F6F7\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">Screenshot 2024-10-02 at 21.34.50</span><span class=\"informations\">434Ã—614 62.5 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "What is the correct way to use `map` to render math mode? For example, I would like to print \n\n```typ\n1, 2, 3, a, b\n```\n to the document.\n\n\nI have tried the following\n\n```typ\n\n#text[#(1, 2, 3, $alpha$, $beta$).map(\n    x => x\n)]\n\n#(1, 2, 3, $alpha$, $beta$).map(\n    x => text[#x]\n)\n\n#(1, 2, 3, $alpha$, $beta$).map(\n    x => text[$#x$]\n)\n\n```\n\nHowever, the math blocks are not rendered as text\n![Screenshot 2024-10-02 at 21.34.50|353x500](upload://jnj2UYL2eWp82bvHEy3bgvat9nE.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 48,
      "score": 2884.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 522
    },
    {
      "id": 3220,
      "post_number": 2,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-10-02T14:00:34.841Z",
      "updated_at": "2024-10-02T14:19:29.524Z",
      "cooked": "<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">$#(1, 2, 3, $alpha$, $beta$).intersperse(\",\").map(x =&gt; [#x]).join()$\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/7d1e6e0cc3b572a0979086fdc4efdebd3fec0e71.png\" alt=\"image\" data-base62-sha1=\"hQQSwUcseEIsUQkFlIhucXyQQuZ\" width=\"225\" height=\"83\"></p>\n<p>One of the key problems you are having is that you get an <code>array</code> and not a <code>content</code>. Currently, <code>content</code> can be represented by a few (hidden) types: <code>context</code>, <code>sequence</code>, <code>styled</code>. <a href=\"https://typst.app/docs/reference/context/\"><code>context</code></a> is something you can look up, but the other two normally only can be discovered when tinkering/hacking. <code>sequence</code> is a sequence of elements (something that can be implicitly converted to <code>content</code>), while <code>styled</code> is when you add some set/show rules to your document.</p>\n<p>You can use <a href=\"https://typst.app/docs/reference/foundations/repr/\"><code>repr()</code></a> (and <code>.func()</code>/<code>type()</code>) to look deeper at how things work:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let list = (1, 2, 3, $alpha$, $beta$)\n#repr(list) // `array`\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/c4a84ac67451fdab615793b33724238a31fc608d.png\" alt=\"image\" data-base62-sha1=\"s3I9cfOg37riJebm2oHrIk35AZL\" width=\"300\" height=\"200\"></p>\n<hr>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let list = (1, 2, 3, $alpha$, $beta$)\n// `array` (commas inserted between all elements)\n#repr(list.intersperse(\",\"))\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/238b5a92d7eef4d27a6ef0a989c343919e0bcb6a.png\" alt=\"image\" data-base62-sha1=\"54rh5s3G3VekJs79BIm21yQ1BQ6\" width=\"299\" height=\"315\"></p>\n<hr>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let list = (1, 2, 3, $alpha$, $beta$)\n// `array` where all elements of type `content`\n// You can't join `content`/`str` with `int`.\n#repr(list.intersperse(\",\").map(x =&gt; [#x]))\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/94e682cf81135ee000bf92209b6b969a049748e5.png\" alt=\"image\" data-base62-sha1=\"lfex3jBzRLRrJfPi61gCXnvH2qp\" width=\"298\" height=\"297\"></p>\n<hr>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let list = (1, 2, 3, $alpha$, $beta$)\n#repr(list.intersperse(\",\").map(x =&gt; [#x]).join()) // `sequence`\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/f714b2b74424f0ec8c079c2de2d60088480c5515.png\" alt=\"image\" data-base62-sha1=\"zfMhoZq3JRhQ8V09rc3AQqfquUJ\" width=\"294\" height=\"305\"></p>\n<p>I want to make an explicit note that in the future the way <code>content</code> is internally defined can be changed and these <code>sequence</code> and <code>styled</code> can become inaccessible or disappear altogether. But for now a few packages and solutions do depend on them, but these are all considered hacks, since there were no intention that users will use the functions directly.</p>\n<p>Edit:</p>\n<p>As was correctly pointed out by <a class=\"mention\" href=\"/u/eric\">@Eric</a> the <a href=\"https://typst.app/docs/reference/foundations/array/#definitions-intersperse\"><code>intersperse()</code></a> here is exessive as <a href=\"https://typst.app/docs/reference/foundations/array/#definitions-join\"><code>array.join()</code></a> has an optional positional <code>separator</code> argument (that can have any type). This brings the MRE down to:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">$#(1, 2, 3, $alpha$, $beta$).map(x =&gt; [#x]).join[,]$\n</code></pre>",
      "raw": "```typ\n$#(1, 2, 3, $alpha$, $beta$).intersperse(\",\").map(x => [#x]).join()$\n```\n\n![image|225x83](upload://hQQSwUcseEIsUQkFlIhucXyQQuZ.png)\n\nOne of the key problems you are having is that you get an `array` and not a `content`. Currently, `content` can be represented by a few (hidden) types: `context`, `sequence`, `styled`. [`context`](https://typst.app/docs/reference/context/) is something you can look up, but the other two normally only can be discovered when tinkering/hacking. `sequence` is a sequence of elements (something that can be implicitly converted to `content`), while `styled` is when you add some set/show rules to your document.\n\nYou can use [`repr()`](https://typst.app/docs/reference/foundations/repr/) (and `.func()`/`type()`) to look deeper at how things work:\n\n```typ\n#let list = (1, 2, 3, $alpha$, $beta$)\n#repr(list) // `array`\n```\n\n![image|400x267, 75%](upload://s3I9cfOg37riJebm2oHrIk35AZL.png)\n\n---\n\n```typ\n#let list = (1, 2, 3, $alpha$, $beta$)\n// `array` (commas inserted between all elements)\n#repr(list.intersperse(\",\"))\n```\n\n![image|399x420, 75%](upload://54rh5s3G3VekJs79BIm21yQ1BQ6.png)\n\n---\n\n```typ\n#let list = (1, 2, 3, $alpha$, $beta$)\n// `array` where all elements of type `content`\n// You can't join `content`/`str` with `int`.\n#repr(list.intersperse(\",\").map(x => [#x]))\n```\n\n![image|398x397, 75%](upload://lfex3jBzRLRrJfPi61gCXnvH2qp.png)\n\n---\n\n```typ\n#let list = (1, 2, 3, $alpha$, $beta$)\n#repr(list.intersperse(\",\").map(x => [#x]).join()) // `sequence`\n```\n\n![image|392x407, 75%](upload://zfMhoZq3JRhQ8V09rc3AQqfquUJ.png)\n\nI want to make an explicit note that in the future the way `content` is internally defined can be changed and these `sequence` and `styled` can become inaccessible or disappear altogether. But for now a few packages and solutions do depend on them, but these are all considered hacks, since there were no intention that users will use the functions directly.\n\nEdit:\n\nAs was correctly pointed out by @Eric the [`intersperse()`](https://typst.app/docs/reference/foundations/array/#definitions-intersperse) here is exessive as [`array.join()`](https://typst.app/docs/reference/foundations/array/#definitions-join) has an optional positional `separator` argument (that can have any type). This brings the MRE down to:\n\n```typ\n$#(1, 2, 3, $alpha$, $beta$).map(x => [#x]).join[,]$\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 42,
      "score": 98.2,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 3221,
      "post_number": 3,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-10-02T14:12:58.923Z",
      "updated_at": "2024-10-02T14:12:58.923Z",
      "cooked": "<p>No need for the <code>intersperse</code>, as you can do that with <code>join</code> too:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let list = (1, 2, 3, $alpha$, $beta$)\n#list.map(x =&gt; [#x]).join[, ]\n</code></pre>",
      "raw": "No need for the `intersperse`, as you can do that with `join` too:\n```typ\n#let list = (1, 2, 3, $alpha$, $beta$)\n#list.map(x => [#x]).join[, ]\n```",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 31,
      "score": 91.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 3222,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-10-02T14:18:27.791Z",
      "updated_at": "2024-10-02T14:21:06.373Z",
      "cooked": "<p>Completely forgot about that, thank you. I used too much of <code>.join()</code> recently, so for me the optional argument was non-existent.</p>",
      "raw": "Completely forgot about that, thank you. I used too much of `.join()` recently, so for me the optional argument was non-existent.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 6.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:57:32.704718"
}