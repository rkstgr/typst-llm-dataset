{
  "topic_metadata": {
    "id": 3756,
    "title": "How to make bullet list item bodies flow like paragraphs?",
    "slug": "how-to-make-bullet-list-item-bodies-flow-like-paragraphs",
    "posts_count": 5,
    "created_at": "2025-04-22T12:52:00.239Z",
    "last_posted_at": "2025-05-21T09:39:21.039Z",
    "views": 180,
    "like_count": 8,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Andrew",
    "tags": [
      "layout",
      "lists"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 823
  },
  "posts": [
    {
      "id": 11431,
      "post_number": 1,
      "username": "magackame",
      "name": "Andrii Hetman",
      "created_at": "2025-04-22T12:52:00.335Z",
      "updated_at": "2025-04-22T12:56:35.965Z",
      "cooked": "<p>Hi folks.</p>\n<p>I am trying to make bullet list item bodies flow like paragraphs. That is, when text wrapping occurs, instead of wrapping up to the bullet point I want it to wrap to the left page margin, like a regular paragraph would.</p>\n<p>This snippet works, but only for single level lists:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show list: it =&gt; {\n  for item in it.children {\n    [#it.marker #item.body #parbreak()]\n  }\n}\n\n- #lorem(20)\n- #lorem(20)\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/7/7e35edd16f83626a93a1b9ca76c205c1de2ec98e.png\" data-download-href=\"https://forum.typst.app/uploads/default/7e35edd16f83626a93a1b9ca76c205c1de2ec98e\" title=\"2025-04-22_15:19:48_737x127\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/7/7e35edd16f83626a93a1b9ca76c205c1de2ec98e_2_690x118.png\" alt=\"2025-04-22_15:19:48_737x127\" data-base62-sha1=\"i0vHCy4zezUxcJWQCXSv92KJIES\" width=\"690\" height=\"118\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/7/7e35edd16f83626a93a1b9ca76c205c1de2ec98e_2_690x118.png, https://forum.typst.app/uploads/default/original/2X/7/7e35edd16f83626a93a1b9ca76c205c1de2ec98e.png 1.5x, https://forum.typst.app/uploads/default/original/2X/7/7e35edd16f83626a93a1b9ca76c205c1de2ec98e.png 2x\" data-dominant-color=\"EFEFEF\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">2025-04-22_15:19:48_737x127</span><span class=\"informations\">737×127 22.8 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>If we have a multilevel list:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">- #lorem(20)\n  - #lorem(20)\n  - #lorem(20)\n- #lorem(20)\n  - #lorem(20)\n  - #lorem(20)\n</code></pre>\n<p>The nested items just append at the end of the top level item.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/0/0cea88d1d5d6a1de7c777b2c59de426dfe568c20.png\" data-download-href=\"https://forum.typst.app/uploads/default/0cea88d1d5d6a1de7c777b2c59de426dfe568c20\" title=\"2025-04-22_15:21:47_737x249\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/0/0cea88d1d5d6a1de7c777b2c59de426dfe568c20_2_690x233.png\" alt=\"2025-04-22_15:21:47_737x249\" data-base62-sha1=\"1QgdtEmkINROX4ltw9H4PPPhA2c\" width=\"690\" height=\"233\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/0/0cea88d1d5d6a1de7c777b2c59de426dfe568c20_2_690x233.png, https://forum.typst.app/uploads/default/original/2X/0/0cea88d1d5d6a1de7c777b2c59de426dfe568c20.png 1.5x, https://forum.typst.app/uploads/default/original/2X/0/0cea88d1d5d6a1de7c777b2c59de426dfe568c20.png 2x\" data-dominant-color=\"EFEFEF\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">2025-04-22_15:21:47_737x249</span><span class=\"informations\">737×249 44.8 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Inspecting the <code>it.children</code> I see that nested items are wrapped into <code>sequence</code>, but checking with <code>type(item.body) == array</code> is not working. They all have <code>content</code> type.</p>\n<p>Any ideas on how to check for nested items or maybe a more elegant solution altogether?</p>",
      "raw": "Hi folks.\n\nI am trying to make bullet list item bodies flow like paragraphs. That is, when text wrapping occurs, instead of wrapping up to the bullet point I want it to wrap to the left page margin, like a regular paragraph would.\n\nThis snippet works, but only for single level lists:\n\n```typ\n#show list: it => {\n  for item in it.children {\n    [#it.marker #item.body #parbreak()]\n  }\n}\n\n- #lorem(20)\n- #lorem(20)\n```\n\n![2025-04-22_15:19:48_737x127|690x118](upload://i0vHCy4zezUxcJWQCXSv92KJIES.png)\n\nIf we have a multilevel list:\n\n```typ\n- #lorem(20)\n  - #lorem(20)\n  - #lorem(20)\n- #lorem(20)\n  - #lorem(20)\n  - #lorem(20)\n```\n\nThe nested items just append at the end of the top level item.\n\n![2025-04-22_15:21:47_737x249|690x233](upload://1QgdtEmkINROX4ltw9H4PPPhA2c.png)\n\nInspecting the `it.children` I see that nested items are wrapped into `sequence`, but checking with `type(item.body) == array` is not working. They all have `content` type.\n\nAny ideas on how to check for nested items or maybe a more elegant solution altogether?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 42,
      "score": 263.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 13
    },
    {
      "id": 11434,
      "post_number": 2,
      "username": "vmartel08",
      "name": "Vincent Martel",
      "created_at": "2025-04-22T13:40:53.990Z",
      "updated_at": "2025-04-22T13:44:12.854Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/magackame\">@magackame</a>,</p>\n<p>this is a beginning…</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show list : set par(hanging-indent: -1em) \n- lorem(20)\n\n- lorem(20)\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/6/6fd7ebe49e43e2bc33ca095a8736e9a1439a35d4.png\" data-download-href=\"https://forum.typst.app/uploads/default/6fd7ebe49e43e2bc33ca095a8736e9a1439a35d4\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/6/6fd7ebe49e43e2bc33ca095a8736e9a1439a35d4_2_690x123.png\" alt=\"image\" data-base62-sha1=\"fXpBKg4x1eO3MjPatRZshEtLhB2\" width=\"690\" height=\"123\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/6/6fd7ebe49e43e2bc33ca095a8736e9a1439a35d4_2_690x123.png, https://forum.typst.app/uploads/default/original/2X/6/6fd7ebe49e43e2bc33ca095a8736e9a1439a35d4.png 1.5x, https://forum.typst.app/uploads/default/original/2X/6/6fd7ebe49e43e2bc33ca095a8736e9a1439a35d4.png 2x\" data-dominant-color=\"242626\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">701×125 44.2 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<ul>\n<li>Note the required space between the two items (to make it <em>not tight</em>, otherwise it doesn’t work).</li>\n<li>There is an issue still opened on <code>enum</code> lists <a href=\"https://github.com/typst/typst/issues/5751\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Hanging-indent for enum lists · Issue #5751 · typst/typst · GitHub</a> that may well be indicating this is a dead-end for now… there is probably another member that will come up with some fancier solution to make the multi-level work, but so far I haven’t been able to.</li>\n</ul>\n<p>Edit: I could not come up with something <em>clean</em> with your code, it rendered multiple markers in an array, which was not what you sent screenshots of.</p>",
      "raw": "Hi @magackame, \n\nthis is a beginning...\n\n```typ\n#show list : set par(hanging-indent: -1em) \n- lorem(20)\n\n- lorem(20)\n```\n\n![image|690x123](upload://fXpBKg4x1eO3MjPatRZshEtLhB2.png)\n\n\n- Note the required space between the two items (to make it *not tight*, otherwise it doesn't work). \n- There is an issue still opened on `enum` lists https://github.com/typst/typst/issues/5751 that may well be indicating this is a dead-end for now... there is probably another member that will come up with some fancier solution to make the multi-level work, but so far I haven't been able to.\n\nEdit: I could not come up with something *clean* with your code, it rendered multiple markers in an array, which was not what you sent screenshots of.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 41,
      "score": 33.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 936
    },
    {
      "id": 11449,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-22T20:00:32.723Z",
      "updated_at": "2025-04-22T20:00:53.545Z",
      "cooked": "<p>Hi. I also need this, which is why I had to implement it, but now I checked it again, and it didn’t work correctly, so I fixed it:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let correctly-indent-list-and-enum-items(doc) = {\n  let first-line-indent() = if type(par.first-line-indent) == dictionary {\n    par.first-line-indent.amount\n  } else {\n    par.first-line-indent\n  }\n\n  show list: li =&gt; {\n    for (i, it) in li.children.enumerate() {\n      let nesting = state(\"list-nesting\", 0)\n      let indent = context h((nesting.get() + 1) * li.indent)\n      let marker = context {\n        let n = nesting.get()\n        if type(li.marker) == array {\n          li.marker.at(calc.rem-euclid(n, li.marker.len()))\n        } else if type(li.marker) == content {\n          li.marker\n        } else {\n          li.marker(n)\n        }\n      }\n      let body = {\n        nesting.update(x =&gt; x + 1)\n        it.body + parbreak()\n        nesting.update(x =&gt; x - 1)\n      }\n      let content = {\n        marker\n        h(li.body-indent)\n        body\n      }\n      context pad(left: int(nesting.get() != 0) * li.indent, content)\n    }\n  }\n\n  show enum: en =&gt; {\n    let start = if en.start == auto {\n      if en.children.first().has(\"number\") {\n        if en.reversed { en.children.first().number } else { 1 }\n      } else {\n        if en.reversed { en.children.len() } else { 1 }\n      }\n    } else {\n      en.start\n    }\n    let number = start\n    for (i, it) in en.children.enumerate() {\n      number = if it.has(\"number\") { it.number } else { number }\n      if en.reversed { number = start - i }\n      let parents = state(\"enum-parents\", ())\n      let indent = context h((parents.get().len() + 1) * en.indent)\n      let num = if en.full {\n        context numbering(en.numbering, ..parents.get(), number)\n      } else {\n        numbering(en.numbering, number)\n      }\n      let max-num = if en.full {\n        context numbering(en.numbering, ..parents.get(), en.children.len())\n      } else {\n        numbering(en.numbering, en.children.len())\n      }\n      num = context box(\n        width: measure(max-num).width,\n        align(right, text(overhang: false, num)),\n      )\n      let body = {\n        parents.update(arr =&gt; arr + (number,))\n        it.body + parbreak()\n        parents.update(arr =&gt; arr.slice(0, -1))\n      }\n      if not en.reversed { number += 1 }\n      let content = {\n        num\n        h(en.body-indent)\n        body\n      }\n      context pad(left: int(parents.get().len() != 0) * en.indent, content)\n    }\n  }\n  doc\n}\n</code></pre>\n<p>Now it will work like</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#lorem(20)\n\n- #lorem(20)\n\n  - #lorem(20)\n\n    - #lorem(20)\n\n      #lorem(20)\n- #lorem(20)\n\n- #lorem(20)\n\n#lorem(20)\n\n+ #lorem(20)\n\n  + #lorem(20)\n\n    + #lorem(20)\n\n      #lorem(20)\n+ #lorem(20)\n\n+ #lorem(20)\n</code></pre>\n<p>But you don’t have to space them:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set list(indent: 1em)\n#set enum(indent: 1em, full: true)\n#set par(justify: true, first-line-indent: (amount: 1em, all: true))\n\n#show: correctly-indent-list-and-enum-items\n\n#lorem(20)\n- #lorem(20)\n  - #lorem(20)\n    - #lorem(20)\n\n      #lorem(20)\n- #lorem(20)\n- #lorem(20)\n#lorem(20)\n+ #lorem(20)\n  + #lorem(20)\n    + #lorem(20)\n\n      #lorem(20)\n+ #lorem(20)\n+ #lorem(20)\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/1/16b85c33154e7d3c0c99d23d042597c80e610dfe.png\" data-download-href=\"https://forum.typst.app/uploads/default/16b85c33154e7d3c0c99d23d042597c80e610dfe\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/1/16b85c33154e7d3c0c99d23d042597c80e610dfe_2_481x500.png\" alt=\"image\" data-base62-sha1=\"3eZuDxXH5kQinoD7rVnO6jrVsLA\" width=\"481\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/1/16b85c33154e7d3c0c99d23d042597c80e610dfe_2_481x500.png, https://forum.typst.app/uploads/default/original/2X/1/16b85c33154e7d3c0c99d23d042597c80e610dfe.png 1.5x, https://forum.typst.app/uploads/default/original/2X/1/16b85c33154e7d3c0c99d23d042597c80e610dfe.png 2x\" data-dominant-color=\"1F1F1F\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">574×596 110 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>I think I’ve implemented all the features that list/enums have to offer, with exception for tightness and stuff. I don’t use terms because it’s not a thing in documents I make.</p>",
      "raw": "Hi. I also need this, which is why I had to implement it, but now I checked it again, and it didn't work correctly, so I fixed it:\n\n```typ\n#let correctly-indent-list-and-enum-items(doc) = {\n  let first-line-indent() = if type(par.first-line-indent) == dictionary {\n    par.first-line-indent.amount\n  } else {\n    par.first-line-indent\n  }\n\n  show list: li => {\n    for (i, it) in li.children.enumerate() {\n      let nesting = state(\"list-nesting\", 0)\n      let indent = context h((nesting.get() + 1) * li.indent)\n      let marker = context {\n        let n = nesting.get()\n        if type(li.marker) == array {\n          li.marker.at(calc.rem-euclid(n, li.marker.len()))\n        } else if type(li.marker) == content {\n          li.marker\n        } else {\n          li.marker(n)\n        }\n      }\n      let body = {\n        nesting.update(x => x + 1)\n        it.body + parbreak()\n        nesting.update(x => x - 1)\n      }\n      let content = {\n        marker\n        h(li.body-indent)\n        body\n      }\n      context pad(left: int(nesting.get() != 0) * li.indent, content)\n    }\n  }\n\n  show enum: en => {\n    let start = if en.start == auto {\n      if en.children.first().has(\"number\") {\n        if en.reversed { en.children.first().number } else { 1 }\n      } else {\n        if en.reversed { en.children.len() } else { 1 }\n      }\n    } else {\n      en.start\n    }\n    let number = start\n    for (i, it) in en.children.enumerate() {\n      number = if it.has(\"number\") { it.number } else { number }\n      if en.reversed { number = start - i }\n      let parents = state(\"enum-parents\", ())\n      let indent = context h((parents.get().len() + 1) * en.indent)\n      let num = if en.full {\n        context numbering(en.numbering, ..parents.get(), number)\n      } else {\n        numbering(en.numbering, number)\n      }\n      let max-num = if en.full {\n        context numbering(en.numbering, ..parents.get(), en.children.len())\n      } else {\n        numbering(en.numbering, en.children.len())\n      }\n      num = context box(\n        width: measure(max-num).width,\n        align(right, text(overhang: false, num)),\n      )\n      let body = {\n        parents.update(arr => arr + (number,))\n        it.body + parbreak()\n        parents.update(arr => arr.slice(0, -1))\n      }\n      if not en.reversed { number += 1 }\n      let content = {\n        num\n        h(en.body-indent)\n        body\n      }\n      context pad(left: int(parents.get().len() != 0) * en.indent, content)\n    }\n  }\n  doc\n}\n```\n\nNow it will work like\n\n```typ\n#lorem(20)\n\n- #lorem(20)\n\n  - #lorem(20)\n\n    - #lorem(20)\n\n      #lorem(20)\n- #lorem(20)\n\n- #lorem(20)\n\n#lorem(20)\n\n+ #lorem(20)\n\n  + #lorem(20)\n\n    + #lorem(20)\n\n      #lorem(20)\n+ #lorem(20)\n\n+ #lorem(20)\n```\n\nBut you don't have to space them:\n\n```typ\n#set list(indent: 1em)\n#set enum(indent: 1em, full: true)\n#set par(justify: true, first-line-indent: (amount: 1em, all: true))\n\n#show: correctly-indent-list-and-enum-items\n\n#lorem(20)\n- #lorem(20)\n  - #lorem(20)\n    - #lorem(20)\n\n      #lorem(20)\n- #lorem(20)\n- #lorem(20)\n#lorem(20)\n+ #lorem(20)\n  + #lorem(20)\n    + #lorem(20)\n\n      #lorem(20)\n+ #lorem(20)\n+ #lorem(20)\n```\n\n![image|481x500](upload://3eZuDxXH5kQinoD7rVnO6jrVsLA.png)\n\nI think I've implemented all the features that list/enums have to offer, with exception for tightness and stuff. I don't use terms because it's not a thing in documents I make.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 4,
      "reads": 41,
      "score": 328.2,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 11607,
      "post_number": 4,
      "username": "magackame",
      "name": "Andrii Hetman",
      "created_at": "2025-04-25T14:26:38.790Z",
      "updated_at": "2025-04-25T14:26:38.790Z",
      "cooked": "<p>The code <a class=\"mention\" href=\"/u/andrew\">@Andrew</a> gave works nicely.</p>\n<p>Thank you <a class=\"mention\" href=\"/u/andrew\">@Andrew</a> <a class=\"mention\" href=\"/u/vmartel08\">@vmartel08</a>!</p>",
      "raw": "The code @Andrew gave works nicely.\n\nThank you @Andrew @vmartel08!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 29,
      "score": 45.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 13
    },
    {
      "id": 12847,
      "post_number": 5,
      "username": "fungai2000",
      "name": "",
      "created_at": "2025-05-21T09:39:21.039Z",
      "updated_at": "2025-05-21T09:52:49.589Z",
      "cooked": "<p>I just came across this, looking for a solution to the same problem. Many thanks to <a class=\"mention\" href=\"/u/andrew\">@Andrew</a> for this code.</p>\n<p>To the developers: in the future, it would be nice if the first-line indent and the hanging indent could both be settable parameters of the list and enum functions, so as to not require this work around and impact upon other paragraphs.</p>",
      "raw": "I just came across this, looking for a solution to the same problem. Many thanks to @Andrew for this code.\n\nTo the developers: in the future, it would be nice if the first-line indent and the hanging indent could both be settable parameters of the list and enum functions, so as to not require this work around and impact upon other paragraphs.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 21,
      "score": 19.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 1518
    }
  ],
  "scraped_at": "2025-06-10T09:48:50.226679"
}