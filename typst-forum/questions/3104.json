{
  "topic_metadata": {
    "id": 3104,
    "title": "Struggling with parameter to functions, numerical vs string",
    "slug": "struggling-with-parameter-to-functions-numerical-vs-string",
    "posts_count": 4,
    "created_at": "2025-03-04T16:11:17.281Z",
    "last_posted_at": "2025-03-05T08:15:32.921Z",
    "views": 62,
    "like_count": 1,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "sijo",
    "tags": [],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 871
  },
  "posts": [
    {
      "id": 9380,
      "post_number": 1,
      "username": "pejef",
      "name": "Peter Frings",
      "created_at": "2025-03-04T16:11:17.381Z",
      "updated_at": "2025-03-04T16:12:13.100Z",
      "cooked": "<p>I’m trying to get the following functions working.</p>\n<ol>\n<li>When I type <code>#apr[1234]</code>, the function must create a link to <code>https:/blala/1234</code>, with the link shown as <code>APR-1234</code>. The argument is usually numerical, but it could also be a string.</li>\n<li>When I type <code>#vs[abc.def]</code>, the function must show it as  <code>$ABC.DEF</code>.</li>\n</ol>\n<p>I thought “piece of cake!”, but nope, it’s not. Not for a newbie, at least. I want to keep the syntax clean, consistent and simple. I got something to work, but I would have to use either <code>()</code> or<code> []</code> and enclose the argument in <code>\"\"</code>, depending on whether the argument consists of numbers only or not.</p>\n<p>Is there a simple way to get this done?</p>\n<p>BTW, even ChatGPT and Perplexity didn’t manage to come up with something. Please proof that humans can still outsmart an AI <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "I'm trying to get the following functions working.\n1. When I type `#apr[1234]`, the function must create a link to `https:/blala/1234`, with the link shown as `APR-1234`. The argument is usually numerical, but it could also be a string.\n2. When I type `#vs[abc.def]`, the function must show it as  `$ABC.DEF`.\n\nI thought \"piece of cake!\", but nope, it's not. Not for a newbie, at least. I want to keep the syntax clean, consistent and simple. I got something to work, but I would have to use either `()` or` []` and enclose the argument in `\"\"`, depending on whether the argument consists of numbers only or not. \n\nIs there a simple way to get this done?\n\nBTW, even ChatGPT and Perplexity didn't manage to come up with something. Please proof that humans can still outsmart an AI :slight_smile:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 33,
      "score": 51.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1297
    },
    {
      "id": 9381,
      "post_number": 2,
      "username": "sijo",
      "name": "",
      "created_at": "2025-03-04T16:51:40.422Z",
      "updated_at": "2025-03-04T16:52:58.867Z",
      "cooked": "<p>Is the following what you want?</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let apr(it) = link(\"https://blabla/\" + it.text, raw(\"APR-\" + it.text))\n#let vs(it) = raw(\"$\" + upper(it.text))\n\n#apr[1234]\n\n#vs[abc.def]\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/c/c63fb77a9ad64194b626af1382496919e216ba7f.png\" alt=\"image\" data-base62-sha1=\"shN3ch16udd4FuSIVKMFnHWdaGj\" width=\"95\" height=\"62\"></p>\n<p>Maybe if you show what you tried it will be easier to put the finger on what’s troubling you in the language…</p>\n<p>Remark: when you write <code>#apr[1234]</code> the argument is always <a href=\"https://typst.app/docs/reference/foundations/content/\">content</a>. The content wraps an element. For simple arguments the element is simply text, but it can also be other things:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let whats(it) = [\n  Type of `it` is #type(it)\\\n  Func: #it.func()\\\n  Fields: #it.fields()\n]\n\n#whats[x]\n\n#whats[123]\n\n#whats[*x*]\n\n#whats[x *y*]\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/6/624b054a94dbe9b643d1ccd34220f406545a3073.png\" data-download-href=\"https://forum.typst.app/uploads/default/624b054a94dbe9b643d1ccd34220f406545a3073\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/6/624b054a94dbe9b643d1ccd34220f406545a3073_2_332x250.png\" alt=\"image\" data-base62-sha1=\"e1xwqYuxTQcRLWv9QWrku9P13of\" width=\"332\" height=\"250\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/6/624b054a94dbe9b643d1ccd34220f406545a3073_2_332x250.png, https://forum.typst.app/uploads/default/optimized/2X/6/624b054a94dbe9b643d1ccd34220f406545a3073_2_498x375.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/6/624b054a94dbe9b643d1ccd34220f406545a3073_2_664x500.png 2x\" data-dominant-color=\"F7F7F7\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">890×670 67.5 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "Is the following what you want?\n\n```typ\n#let apr(it) = link(\"https://blabla/\" + it.text, raw(\"APR-\" + it.text))\n#let vs(it) = raw(\"$\" + upper(it.text))\n\n#apr[1234]\n\n#vs[abc.def]\n```\n\n![image|190x124, 50%](upload://shN3ch16udd4FuSIVKMFnHWdaGj.png)\n\nMaybe if you show what you tried it will be easier to put the finger on what's troubling you in the language...\n\nRemark: when you write `#apr[1234]` the argument is always [content](https://typst.app/docs/reference/foundations/content/). The content wraps an element. For simple arguments the element is simply text, but it can also be other things:\n\n```typ\n#let whats(it) = [\n  Type of `it` is #type(it)\\\n  Func: #it.func()\\\n  Fields: #it.fields()\n]\n\n#whats[x]\n\n#whats[123]\n\n#whats[*x*]\n\n#whats[x *y*]\n```\n![image|664x500, 50%](upload://e1xwqYuxTQcRLWv9QWrku9P13of.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 33,
      "score": 26.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 9383,
      "post_number": 3,
      "username": "pejef",
      "name": "Peter Frings",
      "created_at": "2025-03-04T20:25:25.331Z",
      "updated_at": "2025-03-04T20:25:25.331Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"sijo\" data-post=\"2\" data-topic=\"3104\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/s/0A3649/48.png\" class=\"avatar\"> sijo:</div>\n<blockquote>\n<p>Maybe if you show what you tried it will be easier to put the finger on what’s troubling you in the language…</p>\n</blockquote>\n</aside>\n<p>Fair question.  In hindsight, I didn’t fully understand the different between <code>()</code>and <code>[]</code>, and once I did, I was already put on the wrong track by ChatGPT and Perplexity.</p>\n<p>I think that one of my first attempts at <code>#apr</code> was this:</p>\n<pre><code class=\"lang-auto\">#let apr(n) = link(\"https://example.com/APR-#n\")[APR-#n]\n</code></pre>\n<p>That seemed to work, but the link is wrong. So I tried</p>\n<pre><code class=\"lang-auto\">#let apr(n) = link(\"https://example.com/APR-\" + n)[APR-#n]\n</code></pre>\n<p>That didn’t compile.</p>\n<p>At some point  I got this:</p>\n<pre><code class=\"lang-auto\">#let apr(n) = link(\"https://example.com/APR-\" + str(n), [APR-#n])\n#let vs(t) = [\\$]+smallcaps(t)\n</code></pre>\n<p>The <code>str()</code> was suggested by ChatGPT, with the explanation that “str()  ensures that whatever is passed gets converted into a string.” Yeah right.</p>\n<p>This worked for <code>@apr(123)</code> but not for <code>@vs(abc)</code>. I now understand that the <code>()</code> creates a code context in which <code>abc</code> is expected to be a variable. That explains the “unknown variable” error I got.</p>\n<p>But because <code>#vs[123]</code> and <code>#vs[abc]</code> both worked as expected, I tried to use the same call for <code>#apr</code>: <code>#apr[123]</code> and <code>#apr[abc]</code>.  As I said, I like consistency.</p>\n<p>That didn’t work. The almighty <code>str()</code> didn’t work. Then chatGPT offered “text(content) : Extracts the textual content.” as the solution. Nope. And Perplexity suggested <code>content()</code>. Again, nope.</p>\n<p>At last, I got to the <code>content</code> documentation page, but honestly, that didn’t offer much help (A brief mentioning of the <code>.text</code> field would have been nice).</p>\n<p>It’s good to know that humans can still be smarter than the AI. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>Thanks for the help!<br>\nPeter.</p>",
      "raw": "[quote=\"sijo, post:2, topic:3104\"]\nMaybe if you show what you tried it will be easier to put the finger on what’s troubling you in the language…\n[/quote]\n\nFair question.  In hindsight, I didn't fully understand the different between `()`and `[]`, and once I did, I was already put on the wrong track by ChatGPT and Perplexity.\n\nI think that one of my first attempts at `#apr` was this:\n```\n#let apr(n) = link(\"https://example.com/APR-#n\")[APR-#n]\n```\nThat seemed to work, but the link is wrong. So I tried\n```\n#let apr(n) = link(\"https://example.com/APR-\" + n)[APR-#n]\n```\nThat didn't compile.\n\nAt some point  I got this: \n```\n#let apr(n) = link(\"https://example.com/APR-\" + str(n), [APR-#n])\n#let vs(t) = [\\$]+smallcaps(t)\n```\nThe `str()` was suggested by ChatGPT, with the explanation that \"str()  ensures that whatever is passed gets converted into a string.\" Yeah right.\n\nThis worked for ```@apr(123)``` but not for ```@vs(abc)```. I now understand that the `()` creates a code context in which `abc` is expected to be a variable. That explains the \"unknown variable\" error I got.\n\nBut because `#vs[123]` and `#vs[abc]` both worked as expected, I tried to use the same call for `#apr`: `#apr[123]` and `#apr[abc]`.  As I said, I like consistency.\n\nThat didn't work. The almighty `str()` didn't work. Then chatGPT offered \"text(content) : Extracts the textual content.\" as the solution. Nope. And Perplexity suggested `content()`. Again, nope.\n\nAt last, I got to the `content` documentation page, but honestly, that didn't offer much help (A brief mentioning of the `.text` field would have been nice). \n\nIt's good to know that humans can still be smarter than the AI. :wink:\n\nThanks for the help!\nPeter.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 25,
      "score": 10.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1297
    },
    {
      "id": 9395,
      "post_number": 4,
      "username": "sijo",
      "name": "",
      "created_at": "2025-03-05T08:15:32.921Z",
      "updated_at": "2025-03-05T08:17:01.074Z",
      "cooked": "<p>You’re welcome!</p>\n<p>To summarize, everything you write in a <code>.typ</code> file is either markup or code or math. If you want to to pass the text “abc” to <code>#apr</code>, in code mode you need quotes: <code>#apr(\"abc\")</code>. It is only in markup mode that a word is just a word, so to avoid the quotes you need to write <code>#apr[abc]</code>. Inside the <code>[...]</code> you are in markup mode.</p>\n<p>The flip side of using markup for function arguments is that markup is not limited to simple text, so it passes a content value rather than a string value. For example <code>[x#footnote[z] $sqrt(a)$]</code> is a content value that includes simple text, a footnote and math. How should this be rendered as a string? It’s not clear, so <code>str</code> doesn’t work on content. You can still get a string for it using <code>repr</code>, but that shows the internal structure of the value, it’s meant for development and the result is not guaranteed stable from version to version:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#repr[x#footnote[z] $sqrt(a)$]\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/8/87b7cc82efb87a71712d4d3c5beea1da33505ea1.png\" alt=\"image\" data-base62-sha1=\"jmCfeMc9X6I9UFdUeabdOGHSzXb\" width=\"285\" height=\"113\"></p>\n<aside class=\"quote no-group\" data-username=\"pejef\" data-post=\"3\" data-topic=\"3104\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/p/66104C/48.png\" class=\"avatar\"> pejef:</div>\n<blockquote>\n<p>At last, I got to the <code>content</code> documentation page, but honestly, that didn’t offer much help (A brief mentioning of the <code>.text</code> field would have been nice).</p>\n</blockquote>\n</aside>\n<p>Yeah this page could be improved to make it more useful for beginners. Though one cannot simply add an entry about the <code>.text</code> field: The fields of a content value depend on the top-level element in the content. There will be a <code>.text</code> field only if the content happens to be simple text. Even something simple like <code>[a\\ b]</code> will be another kind of content (a sequence) that has a <code>.children</code> field instead of a <code>.text</code> field.</p>",
      "raw": "You're welcome!\n\nTo summarize, everything you write in a `.typ` file is either markup or code or math. If you want to to pass the text \"abc\" to `#apr`, in code mode you need quotes: `#apr(\"abc\")`. It is only in markup mode that a word is just a word, so to avoid the quotes you need to write `#apr[abc]`. Inside the `[...]` you are in markup mode.\n\nThe flip side of using markup for function arguments is that markup is not limited to simple text, so it passes a content value rather than a string value. For example `[x#footnote[z] $sqrt(a)$]` is a content value that includes simple text, a footnote and math. How should this be rendered as a string? It's not clear, so `str` doesn't work on content. You can still get a string for it using `repr`, but that shows the internal structure of the value, it's meant for development and the result is not guaranteed stable from version to version:\n\n```typ\n#repr[x#footnote[z] $sqrt(a)$]\n```\n\n![image|380x151, 75%](upload://jmCfeMc9X6I9UFdUeabdOGHSzXb.png)\n\n[quote=\"pejef, post:3, topic:3104\"]\nAt last, I got to the `content` documentation page, but honestly, that didn’t offer much help (A brief mentioning of the `.text` field would have been nice).\n[/quote]\n\nYeah this page could be improved to make it more useful for beginners. Though one cannot simply add an entry about the `.text` field: The fields of a content value depend on the top-level element in the content. There will be a `.text` field only if the content happens to be simple text. Even something simple like `[a\\ b]` will be another kind of content (a sequence) that has a `.children` field instead of a `.text` field.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 21,
      "score": 4.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    }
  ],
  "scraped_at": "2025-06-10T09:50:43.847871"
}