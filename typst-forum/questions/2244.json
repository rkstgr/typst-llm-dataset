{
  "topic_metadata": {
    "id": 2244,
    "title": "Possible to import file body without style?",
    "slug": "possible-to-import-file-body-without-style",
    "posts_count": 5,
    "created_at": "2024-12-29T22:48:16.137Z",
    "last_posted_at": "2024-12-30T20:40:02.173Z",
    "views": 84,
    "like_count": 3,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 520
  },
  "posts": [
    {
      "id": 7041,
      "post_number": 1,
      "username": "gabe",
      "name": "",
      "created_at": "2024-12-29T22:48:16.289Z",
      "updated_at": "2024-12-30T14:19:01.274Z",
      "cooked": "<p>I’m stuck in a situation where I want to be able to access the body of a file in other files without certain styling /show rules, but I can only see two options.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let note = (\n  meta: (\n    name: \"note1\",\n    uuid: \"rupiv\",\n  ),\n  body: [\n    Note contents\n  ],\n)\n#apply-style-and-display(note)\n</code></pre>\n<p>then, in the file where I want to use the body for other things,</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"note.typ\": note\n// do stuff\n</code></pre>\n<p>.<br>\nThe other option would be:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let meta = (\n    name: \"note1\",\n    uuid: \"rupiv\",\n)\n\nNote contents\n</code></pre>\n<p>then to render the single-note file,</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"note.typ\": meta\n#let body = include(\"note.typ\")\n#apply-style-and-display((meta: meta, body: body))\n</code></pre>\n<p>and to use the note for other things,</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"note.typ\": meta\n#let body = include(\"note.typ\")\n// do stuff\n</code></pre>\n<p>.<br>\nThe ergonomics of both suck. The pattern I’m looking to create would be something like:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let meta = (\n    name: \"note1\",\n    uuid: \"rupiv\",\n)\n#show: apply-style.with(meta)\n\nNote contents\n</code></pre>\n<p>then to use the note for other things,</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"note.typ\": meta, body-without-style\n</code></pre>\n<p>Unfortunately, I can’t find a way to only apply the style when the single note is being rendered rather than being imported/included without adding a bunch of boilerplate to the note itself.</p>",
      "raw": "I'm stuck in a situation where I want to be able to access the body of a file in other files without certain styling /show rules, but I can only see two options.\n\n```typ\n#let note = (\n  meta: (\n    name: \"note1\",\n    uuid: \"rupiv\",\n  ),\n  body: [\n    Note contents\n  ],\n)\n#apply-style-and-display(note)\n```\nthen, in the file where I want to use the body for other things,\n```typ\n#import \"note.typ\": note\n// do stuff\n```\n.\nThe other option would be:\n\n```typ\n#let meta = (\n    name: \"note1\",\n    uuid: \"rupiv\",\n)\n\nNote contents\n```\nthen to render the single-note file,\n```typ\n#import \"note.typ\": meta\n#let body = include(\"note.typ\")\n#apply-style-and-display((meta: meta, body: body))\n```\nand to use the note for other things,\n```typ\n#import \"note.typ\": meta\n#let body = include(\"note.typ\")\n// do stuff\n```\n.\nThe ergonomics of both suck. The pattern I'm looking to create would be something like:\n\n```typ\n#let meta = (\n    name: \"note1\",\n    uuid: \"rupiv\",\n)\n#show: apply-style.with(meta)\n\nNote contents\n```\nthen to use the note for other things,\n```typ\n#import \"note.typ\": meta, body-without-style\n```\n\nUnfortunately, I can't find a way to only apply the style when the single note is being rendered rather than being imported/included without adding a bunch of boilerplate to the note itself.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 30,
      "score": 141.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 433
    },
    {
      "id": 7042,
      "post_number": 2,
      "username": "gabe",
      "name": "",
      "created_at": "2024-12-29T22:52:11.575Z",
      "updated_at": "2024-12-29T22:52:29.384Z",
      "cooked": "<p>If there were some way for show rules to return “it”, then this pattern would be easy. Just,</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let meta = (\n    name: \"note1\",\n    uuid: \"rupiv\",\n)\n#let body = show: it =&gt; apply-style(meta, it) // returning \"it\" somehow\n\nNote contents\n</code></pre>",
      "raw": "If there were some way for show rules to return \"it\", then this pattern would be easy. Just,\n\n```typ\n#let meta = (\n    name: \"note1\",\n    uuid: \"rupiv\",\n)\n#let body = show: it => apply-style(meta, it) // returning \"it\" somehow\n\nNote contents\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 4.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 433
    },
    {
      "id": 7064,
      "post_number": 3,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-12-30T14:45:56.839Z",
      "updated_at": "2024-12-30T20:40:30.768Z",
      "cooked": "<p>If I understand your requirements correctly, the following solves the problem:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let meta = (\n    name: \"note1\",\n    uuid: \"rupiv\",\n)\n// this has to be a function. If it wasn't,\n// there'd be a cyclic import preventing this from working\n#let body() = {\n  let body = include \"note.typ\"\n\n  // the whole file is a sequence, and the last item is what\n  // the `show: ...` rule makes out of the actual content\n  let body = body.children.last()\n  // we can assure that the first item in that sequence\n  // will be a metadata element containing the raw body\n  let body = body.children.first().value\n\n  body\n}\n\n#show: body =&gt; {\n  // this has to be the first thing\n  // be sure to use `{...}` instead of `[...]` to avoid spaces\n  metadata(body)\n  [= Note]\n  set text(red)\n  body\n}\n\nNote contents\n</code></pre>\n<p>&nbsp;</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"note.typ\": meta, body\n\n#include \"note.typ\"\n\n#body()\n</code></pre>\n<p>I tried to use an example show rule that is sufficiently complex (it styles and also adds content to the raw body). That means that the actual raw body could be nested deep inside what the show rule produces, but by placing some metadata in the beginning we can circumvent any complications and (hopefully) reliably find the raw content.</p>",
      "raw": "If I understand your requirements correctly, the following solves the problem:\n\n```typ\n#let meta = (\n    name: \"note1\",\n    uuid: \"rupiv\",\n)\n// this has to be a function. If it wasn't,\n// there'd be a cyclic import preventing this from working\n#let body() = {\n  let body = include \"note.typ\"\n\n  // the whole file is a sequence, and the last item is what\n  // the `show: ...` rule makes out of the actual content\n  let body = body.children.last()\n  // we can assure that the first item in that sequence\n  // will be a metadata element containing the raw body\n  let body = body.children.first().value\n\n  body\n}\n\n#show: body => {\n  // this has to be the first thing\n  // be sure to use `{...}` instead of `[...]` to avoid spaces\n  metadata(body)\n  [= Note]\n  set text(red)\n  body\n}\n\nNote contents\n```\n\n&nbsp;\n\n```typ\n#import \"note.typ\": meta, body\n\n#include \"note.typ\"\n\n#body()\n```\n\nI tried to use an example show rule that is sufficiently complex (it styles and also adds content to the raw body). That means that the actual raw body could be nested deep inside what the show rule produces, but by placing some metadata in the beginning we can circumvent any complications and (hopefully) reliably find the raw content.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 20,
      "score": 39.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 7074,
      "post_number": 4,
      "username": "gabe",
      "name": "",
      "created_at": "2024-12-30T20:37:10.389Z",
      "updated_at": "2024-12-30T20:37:10.389Z",
      "cooked": "<p>Ooh, that’s exactly it. I hadn’t explored methods on content and assumed that it was just a black box. But being able to explore everything within a content opens up so many things. Thanks for the pointer.</p>",
      "raw": "Ooh, that's exactly it. I hadn't explored methods on content and assumed that it was just a black box. But being able to explore everything within a content opens up so many things. Thanks for the pointer.",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 16,
      "score": 8.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 433
    },
    {
      "id": 7075,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-12-30T20:40:02.173Z",
      "updated_at": "2024-12-30T20:40:02.173Z",
      "cooked": "<p>You’re welcome! definitely look at the <code>repr()</code> function, or simply call <code>func()</code> and <code>fields()</code> methods to find what’s inside a piece of <a href=\"https://typst.app/docs/reference/foundations/content/\">content</a>, it can help with exploring your options.</p>",
      "raw": "You're welcome! definitely look at the `repr()` function, or simply call `func()` and `fields()` methods to find what's inside a piece of [content](https://typst.app/docs/reference/foundations/content/), it can help with exploring your options.",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 16,
      "score": 18.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:53:19.672283"
}