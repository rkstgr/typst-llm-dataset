{
  "topic_metadata": {
    "id": 4245,
    "title": "How to provide assets (image files) with a template so that they could eventually be overwritten?",
    "slug": "how-to-provide-assets-image-files-with-a-template-so-that-they-could-eventually-be-overwritten",
    "posts_count": 5,
    "created_at": "2025-05-23T10:13:20.432Z",
    "last_posted_at": "2025-05-23T20:41:44.459Z",
    "views": 51,
    "like_count": 4,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "vmartel08",
    "tags": [
      "templates",
      "images"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 592
  },
  "posts": [
    {
      "id": 13006,
      "post_number": 1,
      "username": "mononym",
      "name": "",
      "created_at": "2025-05-23T10:13:20.545Z",
      "updated_at": "2025-05-23T10:16:02.876Z",
      "cooked": "<p>Hello. I have question regarding templates and images.</p>\n<p>I made <a href=\"https://typst.app/universe/package/lumen/\">this template</a>. The code sits in <a href=\"https://codeberg.org/mononym/typst-ulb-phd-cover\" rel=\"noopener nofollow ugc\">this repo</a>.</p>\n<p>The template is a cover page and some parts of it are made up of images. A set of images is provided with the template (located in <code>./template/logos</code>).</p>\n<p>The package structure is:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">.\n├── lib.typ\n├── template\n│   ├── logos\n│   │   ├── archi.png\n│   │   ├── FNR.png\n│   │   ├── FNRS-en.png\n│   │   └── FNRS-fr.png\n│   └── main.typ\n└── typst.toml\n</code></pre>\n<p>When creating a new project from the template in the Typst app, the <code>#show</code> function in <code>main.typ</code> does not allow making use of images outside the <code>template</code> folder.</p>\n<p>This is the working default:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"@preview/lumen:0.1.0\": cover\n#show: cover(\n  logo: \"template/logos/archi.png\",\n  [...]\n  fund-logo: \"template/logos/FNRS-fr.png\",\n)\n</code></pre>\n<p>But what I try to make possible is that the user can upload own images and use them in the <code>#show</code> function:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"@preview/lumen:0.1.0\": cover\n#show: cover(\n  logo: \"science.png\",\n  [...]\n  fund-logo: \"new-fund.png\",\n)\n</code></pre>\n<p>Basically I need some help to understand how assets and link to images work for templates.<br>\nThanks !</p>",
      "raw": "Hello. I have question regarding templates and images.\n\nI made [this template](https://typst.app/universe/package/lumen/). The code sits in [this repo](https://codeberg.org/mononym/typst-ulb-phd-cover). \n\nThe template is a cover page and some parts of it are made up of images. A set of images is provided with the template (located in `./template/logos`).\n\nThe package structure is:\n```\n.\n├── lib.typ\n├── template\n│   ├── logos\n│   │   ├── archi.png\n│   │   ├── FNR.png\n│   │   ├── FNRS-en.png\n│   │   └── FNRS-fr.png\n│   └── main.typ\n└── typst.toml\n```\n\nWhen creating a new project from the template in the Typst app, the `#show` function in `main.typ` does not allow making use of images outside the `template` folder. \n\nThis is the working default:\n```typst\n#import \"@preview/lumen:0.1.0\": cover\n#show: cover(\n  logo: \"template/logos/archi.png\",\n  [...]\n  fund-logo: \"template/logos/FNRS-fr.png\",\n)\n```\n\nBut what I try to make possible is that the user can upload own images and use them in the `#show` function:\n```typst\n#import \"@preview/lumen:0.1.0\": cover\n#show: cover(\n  logo: \"science.png\",\n  [...]\n  fund-logo: \"new-fund.png\",\n)\n```\nBasically I need some help to understand how assets and link to images work for templates. \nThanks !",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 44.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1419
    },
    {
      "id": 13011,
      "post_number": 2,
      "username": "vmartel08",
      "name": "Vincent Martel",
      "created_at": "2025-05-23T10:49:47.607Z",
      "updated_at": "2025-05-23T10:55:00.713Z",
      "cooked": "<p>Hi there,</p>\n<p>I believe this PR contains the answer to your question. It’s not released yet but you can access it: <a href=\"https://github.com/typst/packages/blob/07b827f8915838224b2ff9aee162cf0e0c86d092/docs/resources.md\" class=\"inline-onebox\">packages/docs/resources.md at 07b827f8915838224b2ff9aee162cf0e0c86d092 · typst/packages · GitHub</a></p>\n<p>The proper way to let the people using your template overwrite the file to use is to take content as an argument directly, not a string. For example, you should replace this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let cover-page(logo-path: \"logo.png\", title) = {\n  image(logo-path)\n  heading(title)\n}\n</code></pre>\n<p>With something like:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let cover-page(logo: image(\"logo.png\"), title) = {\n  logo\n  heading(title)\n}\n</code></pre>\n<p>EDIT: Also this:</p>\n<aside class=\"quote\" data-post=\"2\" data-topic=\"3063\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/lordbaryhobal/48/855_2.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/how-to-receive-a-user-supplied-path-in-a-package-function/3063/2\">How to receive a user supplied path in a package function?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    Packages cannot access project files, unless the package is installed inside of the project \nIf you want to pass an image to your template, you will have to read it in your project and pass the image object to the template \n#let img = image(\"my_nice_image.png\")\n#show: my-template.with(img)\n  </blockquote>\n</aside>\n",
      "raw": "Hi there, \n\nI believe this PR contains the answer to your question. It's not released yet but you can access it: https://github.com/typst/packages/blob/07b827f8915838224b2ff9aee162cf0e0c86d092/docs/resources.md\n\nThe proper way to let the people using your template overwrite the file to use is to take content as an argument directly, not a string. For example, you should replace this:\n\n```typ\n#let cover-page(logo-path: \"logo.png\", title) = {\n  image(logo-path)\n  heading(title)\n}\n```\nWith something like:\n\n```typ \n#let cover-page(logo: image(\"logo.png\"), title) = {\n  logo\n  heading(title)\n}\n```\n\n\nEDIT: Also this: \n\nhttps://forum.typst.app/t/how-to-receive-a-user-supplied-path-in-a-package-function/3063/2?u=vmartel08",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 3,
      "reads": 18,
      "score": 58.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 936
    },
    {
      "id": 13025,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-23T14:33:42.152Z",
      "updated_at": "2025-05-23T14:47:44.284Z",
      "cooked": "<p>This is true for basic usage, but for something more complex a closure hack by <a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a> can be used:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let cover(logo: none, doc) = {\n  [Logo: #image(logo(), width: 69%)]\n  doc\n}\n</code></pre>\n<br>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@local/name:0.0.0\": cover\n#show: cover.with(logo: () =&gt; read(\"tiger.jpg\", encoding: none))\n</code></pre>\n<p>You either have to mandate that users provide the closure or check the type and do stuff accordingly to it.</p>\n<p>To make it slightly better, define an additional read function:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let read-image = read.with(encoding: none)\n\n#let cover(logo: none, doc) = {\n  [Logo: #image(logo(), width: 69%)]\n  doc\n}\n</code></pre>\n<br>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@local/name:0.0.0\": cover, read-image\n#show: cover.with(logo: () =&gt; read-image(\"tiger.jpg\"))\n</code></pre>\n<p>This is still not very complex, so here, if you just need to edit <code>image</code> settings, you can pass <code>image.with(\"file\")</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show: cover.with(logo: image.with(\"tiger.jpg\"))\n</code></pre>\n<br>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let cover(logo: none, doc) = {\n  [Logo: #logo(width: 69%)]\n  doc\n}\n</code></pre>\n<p>If you want, for example (package structure does have 4 predefined logo file names), to override a directory full of assets, then I’m pretty sure <code>logo: image =&gt; read(\"localdir/\" + image)</code> should work and is complex enough for the hack to be actually useful.</p>",
      "raw": "This is true for basic usage, but for something more complex a closure hack by @SillyFreak can be used:\n\n\n```typ\n#let cover(logo: none, doc) = {\n  [Logo: #image(logo(), width: 69%)]\n  doc\n}\n```\n\n<br>\n\n```typ\n#import \"@local/name:0.0.0\": cover\n#show: cover.with(logo: () => read(\"tiger.jpg\", encoding: none))\n```\n\nYou either have to mandate that users provide the closure or check the type and do stuff accordingly to it.\n\nTo make it slightly better, define an additional read function:\n\n```typ\n#let read-image = read.with(encoding: none)\n\n#let cover(logo: none, doc) = {\n  [Logo: #image(logo(), width: 69%)]\n  doc\n}\n```\n\n<br>\n\n```typ\n#import \"@local/name:0.0.0\": cover, read-image\n#show: cover.with(logo: () => read-image(\"tiger.jpg\"))\n```\n\nThis is still not very complex, so here, if you just need to edit `image` settings, you can pass `image.with(\"file\")`:\n\n```typ\n#show: cover.with(logo: image.with(\"tiger.jpg\"))\n```\n\n<br>\n\n```typ\n#let cover(logo: none, doc) = {\n  [Logo: #logo(width: 69%)]\n  doc\n}\n```\n\nIf you want, for example (package structure does have 4 predefined logo file names), to override a directory full of assets, then I'm pretty sure `logo: image => read(\"localdir/\" + image)` should work and is complex enough for the hack to be actually useful.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 16,
      "score": 13.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 13046,
      "post_number": 4,
      "username": "mononym",
      "name": "",
      "created_at": "2025-05-23T20:19:59.731Z",
      "updated_at": "2025-05-23T20:19:59.731Z",
      "cooked": "<p>Thanks, that is exactly the explanation I was looking for !</p>\n<p>I changed the image path strings with an image object each in <a href=\"https://codeberg.org/mononym/typst-ulb-phd-cover/commit/6ad186ec52f4927307929eb4cdb6c3f293830252\" rel=\"noopener nofollow ugc\">this commit</a>. I’ll stil have to make tests to see if it works as expected.</p>",
      "raw": "Thanks, that is exactly the explanation I was looking for !\n\nI changed the image path strings with an image object each in [this commit](https://codeberg.org/mononym/typst-ulb-phd-cover/commit/6ad186ec52f4927307929eb4cdb6c3f293830252). I'll stil have to make tests to see if it works as expected.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 17,
      "score": 23.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1419
    },
    {
      "id": 13048,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-05-23T20:41:44.459Z",
      "updated_at": "2025-05-23T20:41:44.459Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/mononym\">@mononym</a>, glad you got a satisfying answer! Please don’t forget to mark it as the solution, so that others can more easily find it later. Thanks!</p>",
      "raw": "Hi @mononym, glad you got a satisfying answer! Please don’t forget to mark it as the solution, so that others can more easily find it later. Thanks!",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 17,
      "score": 3.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:47:23.045111"
}