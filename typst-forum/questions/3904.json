{
  "topic_metadata": {
    "id": 3904,
    "title": "Which show rule takes precedence?",
    "slug": "which-show-rule-takes-precedence",
    "posts_count": 14,
    "created_at": "2025-05-02T08:35:07.559Z",
    "last_posted_at": "2025-05-09T14:00:06.330Z",
    "views": 196,
    "like_count": 17,
    "reply_count": 9,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 5,
    "accepted_answer_username": "sijo",
    "tags": [
      "scripting",
      "styling"
    ],
    "category_id": 5,
    "participant_count": 6,
    "word_count": 1627
  },
  "posts": [
    {
      "id": 11887,
      "post_number": 1,
      "username": "Y.D.X",
      "name": "Y.D.X.",
      "created_at": "2025-05-02T08:35:07.665Z",
      "updated_at": "2025-05-02T08:35:07.665Z",
      "cooked": "<p>I am applying show rules after another show rule. I thought all headings would be green according to the second rule.<br>\nHowever, headings after the show-function rule are not. Why?</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#[\n  #show heading: it =&gt; { set text(purple); it }\n  #[\n    #show heading: set text(green)  \n    = purple\n  ]\n  #[\n    #show heading: it =&gt; { set text(green); it }\n    = purple\n  ]\n]\n#[\n  #show heading: set text(purple)\n  #[\n    #show heading: set text(green)  \n    = green\n  ]\n  #[\n    #show heading: it =&gt; { set text(green); it }\n    = green\n  ]\n]\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/2/2894e66f20b3b64f3e0ea8bf59d5d51afeda72d3.png\" data-download-href=\"https://forum.typst.app/uploads/default/2894e66f20b3b64f3e0ea8bf59d5d51afeda72d3\" title=\"图片\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/2/2894e66f20b3b64f3e0ea8bf59d5d51afeda72d3_2_690x305.png\" alt=\"图片\" data-base62-sha1=\"5N07brVl9GEb27vyV40ZGtWTVM7\" width=\"690\" height=\"305\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/2/2894e66f20b3b64f3e0ea8bf59d5d51afeda72d3_2_690x305.png, https://forum.typst.app/uploads/default/optimized/2X/2/2894e66f20b3b64f3e0ea8bf59d5d51afeda72d3_2_1035x457.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/2/2894e66f20b3b64f3e0ea8bf59d5d51afeda72d3_2_1380x610.png 2x\" data-dominant-color=\"F3F2F4\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">图片</span><span class=\"informations\">1505×666 121 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<h2><a name=\"p-11887-my-attempt-1\" class=\"anchor\" href=\"#p-11887-my-attempt-1\"></a>My attempt</h2>\n<p>I can confirm that the selectors do match the heading, because replacing <code>it</code> with <code>it.body</code> will work. (except that the numbering and spaces are lost.)</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/0/08277496e20b5ec2605b7b6735eea087685cd6a3.png\" data-download-href=\"https://forum.typst.app/uploads/default/08277496e20b5ec2605b7b6735eea087685cd6a3\" title=\"图片\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/0/08277496e20b5ec2605b7b6735eea087685cd6a3_2_690x270.png\" alt=\"图片\" data-base62-sha1=\"1a8lRuOEreHYCSd2VXr60bx6D2b\" width=\"690\" height=\"270\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/0/08277496e20b5ec2605b7b6735eea087685cd6a3_2_690x270.png, https://forum.typst.app/uploads/default/optimized/2X/0/08277496e20b5ec2605b7b6735eea087685cd6a3_2_1035x405.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/0/08277496e20b5ec2605b7b6735eea087685cd6a3_2_1380x540.png 2x\" data-dominant-color=\"F2F2F4\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">图片</span><span class=\"informations\">1563×613 109 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>In addition, if I inspect by <code>repr</code>, they will turn green.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/6/662a3918003ddb559db4bd9572a5d68f24663cf1.png\" data-download-href=\"https://forum.typst.app/uploads/default/662a3918003ddb559db4bd9572a5d68f24663cf1\" title=\"图片\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/6/662a3918003ddb559db4bd9572a5d68f24663cf1_2_690x345.png\" alt=\"图片\" data-base62-sha1=\"ezNabVKEAlyDdmsP4kzOQmprUWd\" width=\"690\" height=\"345\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/6/662a3918003ddb559db4bd9572a5d68f24663cf1_2_690x345.png, https://forum.typst.app/uploads/default/optimized/2X/6/662a3918003ddb559db4bd9572a5d68f24663cf1_2_1035x517.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/6/662a3918003ddb559db4bd9572a5d68f24663cf1_2_1380x690.png 2x\" data-dominant-color=\"F1F3F3\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">图片</span><span class=\"informations\">1513×758 199 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<h2><a name=\"p-11887-further-information-2\" class=\"anchor\" href=\"#p-11887-further-information-2\"></a>Further information</h2>\n<p>Background: <a href=\"https://github.com/Ri-Nai/BIT-Typst-Template/issues/11\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">minor revision on page layout · Issue #11 · Ri-Nai/BIT-Typst-Template · GitHub</a> (in Chinese)</p>",
      "raw": "I am applying show rules after another show rule. I thought all headings would be green according to the second rule.\nHowever, headings after the show-function rule are not. Why?\n\n```typst\n#[\n  #show heading: it => { set text(purple); it }\n  #[\n    #show heading: set text(green)  \n    = purple\n  ]\n  #[\n    #show heading: it => { set text(green); it }\n    = purple\n  ]\n]\n#[\n  #show heading: set text(purple)\n  #[\n    #show heading: set text(green)  \n    = green\n  ]\n  #[\n    #show heading: it => { set text(green); it }\n    = green\n  ]\n]\n```\n\n![图片|690x305](upload://5N07brVl9GEb27vyV40ZGtWTVM7.png)\n\n## My attempt\n\nI can confirm that the selectors do match the heading, because replacing `it` with `it.body` will work. (except that the numbering and spaces are lost.)\n\n![图片|690x270](upload://1a8lRuOEreHYCSd2VXr60bx6D2b.png)\n\n\nIn addition, if I inspect by `repr`, they will turn green.\n\n![图片|690x345](upload://ezNabVKEAlyDdmsP4kzOQmprUWd.png)\n\n\n## Further information\n\nBackground: https://github.com/Ri-Nai/BIT-Typst-Template/issues/11 (in Chinese)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 47,
      "score": 239.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 292
    },
    {
      "id": 11888,
      "post_number": 2,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-05-02T08:49:11.171Z",
      "updated_at": "2025-05-02T08:55:18.874Z",
      "cooked": "<p>Which “order” do the show rules apply? We can try with this example:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show heading: it =&gt; { set text(green); [A(] + box(it) + [)a] }\n#show heading: it =&gt; { set text(red); [B(] + box(it) + [)b] }\n#show heading: it =&gt; { set text(blue); [C(] + box(it) + [)c] }\n\n= My Heading\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/d/ded138f1caab43e61468622b8f859dab05679e91.png\" alt=\"bild\" data-base62-sha1=\"vN8fPWCja2lE9Kf7OTdhcHW7iw1\" width=\"314\" height=\"45\"></p>\n<p>The rule A is first in the source and is closest to the heading in the produced document.</p>\n<hr>\n<p>But rule C is applied first, which we can confirm like this, if we use <code>it.body</code> there, it stops:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show heading: it =&gt; { set text(green); [A(] + box(it) + [)a] }\n#show heading: it =&gt; { set text(red); [B(] + box(it) + [)b] }\n#show heading: it =&gt; { set text(blue); [C(] + box(it.body) + [)c] }\n\n= My Heading\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/2/2fc56dc27eeef654782a34bb383e8713c1bef91b.png\" alt=\"bild\" data-base62-sha1=\"6OBqFTPASt8fF7bgy1J5fcI0PnZ\" width=\"215\" height=\"39\"></p>\n<hr>\n<p>So the conclusion is that the rules are applied with C first, then B, then A. But they are applied with nesting</p>\n<ul>\n<li>Apply C, which produces style and a heading</li>\n<li>Apply B style to the heading inside what C produced</li>\n<li>Apply A style to the heading inside what B produced</li>\n</ul>\n<p>So this is an <em>unfortunate</em> or <em>interesting</em> thing with <em>show rules with functions</em>, they sort of apply inside out. The rule that runs last places its <code>set</code> directives closest to the actual heading.</p>",
      "raw": "Which \"order\" do the show rules apply? We can try with this example:\n\n```typst\n#show heading: it => { set text(green); [A(] + box(it) + [)a] }\n#show heading: it => { set text(red); [B(] + box(it) + [)b] }\n#show heading: it => { set text(blue); [C(] + box(it) + [)c] }\n\n= My Heading\n```\n\n![bild|314x45](upload://vN8fPWCja2lE9Kf7OTdhcHW7iw1.png)\n\nThe rule A is first in the source and is closest to the heading in the produced document.\n\n---\n\nBut rule C is applied first, which we can confirm like this, if we use `it.body` there, it stops:\n\n```typst\n#show heading: it => { set text(green); [A(] + box(it) + [)a] }\n#show heading: it => { set text(red); [B(] + box(it) + [)b] }\n#show heading: it => { set text(blue); [C(] + box(it.body) + [)c] }\n\n= My Heading\n```\n\n![bild|215x39](upload://6OBqFTPASt8fF7bgy1J5fcI0PnZ.png)\n\n---\n\nSo the conclusion is that the rules are applied with C first, then B, then A. But they are applied with nesting\n\n- Apply C, which produces style and a heading\n- Apply B style to the heading inside what C produced\n- Apply A style to the heading inside what B produced\n\nSo this is an *unfortunate* or *interesting* thing with *show rules with functions*, they sort of apply inside out. The rule that runs last places its `set` directives closest to the actual heading.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 46,
      "score": 69.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 11889,
      "post_number": 3,
      "username": "Y.D.X",
      "name": "Y.D.X.",
      "created_at": "2025-05-02T08:59:47.441Z",
      "updated_at": "2025-05-02T08:59:47.441Z",
      "cooked": "<p>Thanks! So show-function rules are applied to the content of <code>heading</code>s, rather than the whole <code>heading</code> elements?</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let a(it) = { set text(green); [A(] + box(it) + [)a] }\n#let b(it) = { set text(red); [B(] + box(it) + [)b] }\n#let c(it) = { set text(blue); [C(] + box(it) + [)c] }\n#let c-body(it) = { set text(blue); [C(] + box(it.body) + [)c] }\n\n#let example = [= example]\n\n#[\n  #show heading: a\n  #show heading: b\n  #show heading: c\n  #example\n]\n\n#c(b(a(example)))\n\n#[\n  #show heading: a\n  #show heading: b\n  #show heading: c-body\n  = heading\n]\n\n#c-body(b(a(example)))\n// 💥 Styled does not have field \"body\"\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/5/5a8e04e138879a4e2e66d58f73cafc0446a449ae.png\" data-download-href=\"https://forum.typst.app/uploads/default/5a8e04e138879a4e2e66d58f73cafc0446a449ae\" title=\"图片\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/5/5a8e04e138879a4e2e66d58f73cafc0446a449ae_2_690x338.png\" alt=\"图片\" data-base62-sha1=\"cV5fiBLM5XURQI1oHdMyiF0QC1o\" width=\"690\" height=\"338\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/5/5a8e04e138879a4e2e66d58f73cafc0446a449ae_2_690x338.png, https://forum.typst.app/uploads/default/optimized/2X/5/5a8e04e138879a4e2e66d58f73cafc0446a449ae_2_1035x507.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/5/5a8e04e138879a4e2e66d58f73cafc0446a449ae_2_1380x676.png 2x\" data-dominant-color=\"F0F1F3\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">图片</span><span class=\"informations\">1703×836 190 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "Thanks! So show-function rules are applied to the content of `heading`s, rather than the whole `heading` elements?\n\n```typst\n#let a(it) = { set text(green); [A(] + box(it) + [)a] }\n#let b(it) = { set text(red); [B(] + box(it) + [)b] }\n#let c(it) = { set text(blue); [C(] + box(it) + [)c] }\n#let c-body(it) = { set text(blue); [C(] + box(it.body) + [)c] }\n\n#let example = [= example]\n\n#[\n  #show heading: a\n  #show heading: b\n  #show heading: c\n  #example\n]\n\n#c(b(a(example)))\n\n#[\n  #show heading: a\n  #show heading: b\n  #show heading: c-body\n  = heading\n]\n\n#c-body(b(a(example)))\n// 💥 Styled does not have field \"body\"\n```\n\n![图片|690x338](upload://cV5fiBLM5XURQI1oHdMyiF0QC1o.png)",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 42,
      "score": 23.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 292
    },
    {
      "id": 11891,
      "post_number": 4,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-05-02T09:13:18.379Z",
      "updated_at": "2025-05-02T09:13:18.379Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Y.D.X\" data-post=\"3\" data-topic=\"3904\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/y.d.x/48/252_2.png\" class=\"avatar\"> Y.D.X:</div>\n<blockquote>\n<p>So show-function rules are applied to the content of <code>heading</code>s, rather than the whole <code>heading</code> elements?</p>\n</blockquote>\n</aside>\n<p>It think it looks like it’s still applied to the heading elements, <code>it</code> is always the heading when the rules are applied. But the content that rule C produced around the heading is outside (wrapping) <code>it</code> when rule B is running.</p>",
      "raw": "[quote=\"Y.D.X, post:3, topic:3904\"]\nSo show-function rules are applied to the content of `heading`s, rather than the whole `heading` elements?\n[/quote]\n\nIt think it looks like it's still applied to the heading elements, `it` is always the heading when the rules are applied. But the content that rule C produced around the heading is outside (wrapping) `it` when rule B is running.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 41,
      "score": 33.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 11892,
      "post_number": 5,
      "username": "sijo",
      "name": "",
      "created_at": "2025-05-02T09:26:51.340Z",
      "updated_at": "2025-05-03T07:57:37.159Z",
      "cooked": "<p>Here is how rules are applied for a particular element according to my understanding (copy-pasted from <a href=\"https://forum.typst.app/t/how-can-i-modify-the-reference-format-of-equations/1118/8\">another</a> thread but it better belongs here I guess):</p>\n<ol>\n<li>\n<p>All applicable show-set rules are gathered, with later rules overwriting previous ones so</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show ref: set text(red, weight: \"bold\")\n#show ref: set text(blue)\n</code></pre>\n<p>will show refs in blue and bold.</p>\n</li>\n<li>\n<p>The element is materialized in accordance with these show-set rules. For example after</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show ref: set ref(supplement: [X])\n</code></pre>\n<p>all ref elements with unspecified supplement will be materialized with supplement <code>[X]</code>.</p>\n</li>\n<li>\n<p>Normal show rules (i.e. functions, not show-set) are applied starting with the most local one. The rule functions are called with the materialized element as argument. Each rule is applied recursively to its own output, until the output contains nothing new that matches the show rule. For example</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.equation(numbering: \"(1)\")\n#set ref(supplement: [0])\n#show ref: it =&gt; {\n  let i = int(it.supplement.text)\n  if i &lt; 3 {\n    let new = ref(it.target, supplement: [#(i + 1)])\n    return [{it: #it, new: #new}]\n  }\n  [{final: #it}]\n}\n\n$ x = y $ &lt;eq&gt;\nSee @eq.\n</code></pre>\n<p>produces<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/c/c55425aff45f3c80d382cf1cd5f5439e255e7f4b.png\" alt=\"image\" data-base62-sha1=\"s9Elt0Rc7FAPMSRImsvnDwiP7ib\" width=\"360\" height=\"69\"></p>\n<p>Indeed the first time the show rule is applied, it returns the content <code>{it: #it, new: #new}</code>. The rule is then applied again on the new ref, but not on <code>#it</code> as that has already been processed. This is repeated until the new ref has supplement <code>[3]</code>: then the show rule simply returns <code>{final: #it}</code>. This output contains nothing new matching the show rule, so Typst moves on to the next (more outer) show rule.</p>\n</li>\n</ol>\n<p>Remarks:</p>\n<ul>\n<li>\n<p>Default values are used at the point where the element is materialized. If you change them afterwards it’s too late:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Works for future heading elements (they are not yet materialized)\n#show heading: set heading(outlined: false)\n\n// Doesn't work: the `it` heading is already materialized\n#show heading: it =&gt; { set heading(outlined: false); it }\n\n// Works: the content of the heading is not yet materialized\n#show heading: it =&gt; { set text(purple); it }\n</code></pre>\n</li>\n<li>\n<p>As explained by <a class=\"mention\" href=\"/u/bluss\">@bluss</a>, a show rule applies to the element, but it can return something else than “just the element”. For example</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show heading: it =&gt; { set text(green); [A(] + box(it) + [)a] }\n</code></pre>\n<p>puts a style wrapper and box around every heading.</p>\n</li>\n<li>\n<p>A show rule can replace the element with a new element of the same type:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Replace every level-1 heading with a level-2 heading\n#show heading.where(level: 1): it =&gt; heading(level: 2, it.body)\n</code></pre>\n<p>The show rule can also replace the element with something completely different:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Replace headings with text `x`\n#show heading: [x]\n</code></pre>\n<p>Note that a query will also find discarded elements. So in the first case above, <code>query(heading)</code> will return both the level-1 and level-2 headings. And in the second case it will return the heading that was replaced with <code>[x]</code>.</p>\n</li>\n</ul>",
      "raw": "Here is how rules are applied for a particular element according to my understanding (copy-pasted from [another](https://forum.typst.app/t/how-can-i-modify-the-reference-format-of-equations/1118/8) thread but it better belongs here I guess):\n\n1. All applicable show-set rules are gathered, with later rules overwriting previous ones so\n\n   ```typ\n   #show ref: set text(red, weight: \"bold\")\n   #show ref: set text(blue)\n   ```\n\n   will show refs in blue and bold.\n\n2. The element is materialized in accordance with these show-set rules. For example after\n\n   ```typ\n   #show ref: set ref(supplement: [X])\n   ```\n\n   all ref elements with unspecified supplement will be materialized with supplement `[X]`.\n\n3. Normal show rules (i.e. functions, not show-set) are applied starting with the most local one. The rule functions are called with the materialized element as argument. Each rule is applied recursively to its own output, until the output contains nothing new that matches the show rule. For example\n\n   ```typ\n   #set math.equation(numbering: \"(1)\")\n   #set ref(supplement: [0])\n   #show ref: it => {\n     let i = int(it.supplement.text)\n     if i < 3 {\n       let new = ref(it.target, supplement: [#(i + 1)])\n       return [{it: #it, new: #new}]\n     }\n     [{final: #it}]\n   }\n   \n   $ x = y $ <eq>\n   See @eq.\n   ```\n\n   produces\n   ![image|360x69](upload://s9Elt0Rc7FAPMSRImsvnDwiP7ib)\n\n   Indeed the first time the show rule is applied, it returns the content `{it: #it, new: #new}`. The rule is then applied again on the new ref, but not on `#it` as that has already been processed. This is repeated until the new ref has supplement `[3]`: then the show rule simply returns `{final: #it}`. This output contains nothing new matching the show rule, so Typst moves on to the next (more outer) show rule.\n\nRemarks:\n\n* Default values are used at the point where the element is materialized. If you change them afterwards it's too late:\n   \n   ```typ\n   // Works for future heading elements (they are not yet materialized)\n   #show heading: set heading(outlined: false)\n\n   // Doesn't work: the `it` heading is already materialized\n   #show heading: it => { set heading(outlined: false); it }\n\n   // Works: the content of the heading is not yet materialized\n   #show heading: it => { set text(purple); it }\n   ```\n   \n* As explained by @bluss, a show rule applies to the element, but it can return something else than \"just the element\". For example\n   \n   ```typ\n   #show heading: it => { set text(green); [A(] + box(it) + [)a] }\n   ```\n   \n   puts a style wrapper and box around every heading.\n\n* A show rule can replace the element with a new element of the same type:\n   \n   ```typ\n   // Replace every level-1 heading with a level-2 heading\n   #show heading.where(level: 1): it => heading(level: 2, it.body)\n   ```\n   \n   The show rule can also replace the element with something completely different:\n\n   ```typ\n   // Replace headings with text `x`\n   #show heading: [x]\n   ```\n\n   Note that a query will also find discarded elements. So in the first case above, `query(heading)` will return both the level-1 and level-2 headings. And in the second case it will return the heading that was replaced with `[x]`.",
      "reply_to_post_number": 3,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 6,
      "reads": 40,
      "score": 168.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 11893,
      "post_number": 6,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-05-02T09:37:20.152Z",
      "updated_at": "2025-05-02T09:39:33.441Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"sijo\" data-post=\"5\" data-topic=\"3904\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/s/0A3649/48.png\" class=\"avatar\"> sijo:</div>\n<blockquote>\n<p>The rule functions are called with the materialized element as argument. Each rule is applied recursively to its own output, until the output contains nothing new that matches the show rule.</p>\n</blockquote>\n</aside>\n<p>Thanks for the excellent post.</p>",
      "raw": "[quote=\"sijo, post:5, topic:3904\"]\nThe rule functions are called with the materialized element as argument. Each rule is applied recursively to its own output, until the output contains nothing new that matches the show rule.\n[/quote]\n\nThanks for the excellent post.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 33,
      "score": 21.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 11894,
      "post_number": 7,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-05-02T10:05:06.561Z",
      "updated_at": "2025-05-02T10:51:02.481Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"sijo\" data-post=\"5\" data-topic=\"3904\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/s/0A3649/48.png\" class=\"avatar\"> sijo:</div>\n<blockquote>\n<p>Each rule is applied recursively to its own output, until the output contains nothing new that matches the show rule.</p>\n</blockquote>\n</aside>\n<p>As a side comment, this is the reason why probably packages/templates should return the original <code>it</code> instead of content when possible, so that template rules can compose with user rules. A (coincidentally?) good example is in the <a href=\"https://typst.app/docs/reference/model/ref/#:~:text=Chapter%5D.-,Customization,-If%20you%20write\">reference docs</a>.</p>\n<p>EDIT: below an example from glossarium README</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show: make-glossary\n\n#show ref: it =&gt; {\n  let el = it.element\n  if el != none and el.func() == figure and el.kind == \"glossarium_entry\" {\n    // Make the glossarium entry references dark blue\n    text(fill: blue.darken(60%), it)\n  } else {\n    // Other references as usual.\n    it\n  }\n}\n</code></pre>",
      "raw": "[quote=\"sijo, post:5, topic:3904\"]\nEach rule is applied recursively to its own output, until the output contains nothing new that matches the show rule.\n[/quote]\n\nAs a side comment, this is the reason why probably packages/templates should return the original `it` instead of content when possible, so that template rules can compose with user rules. A (coincidentally?) good example is in the [reference docs](https://typst.app/docs/reference/model/ref/#:~:text=Chapter%5D.-,Customization,-If%20you%20write).\n\nEDIT: below an example from glossarium README\n\n```typ\n#show: make-glossary\n\n#show ref: it => {\n  let el = it.element\n  if el != none and el.func() == figure and el.kind == \"glossarium_entry\" {\n    // Make the glossarium entry references dark blue\n    text(fill: blue.darken(60%), it)\n  } else {\n    // Other references as usual.\n    it\n  }\n}\n```",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 2,
      "reads": 31,
      "score": 46.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 11896,
      "post_number": 8,
      "username": "sijo",
      "name": "",
      "created_at": "2025-05-02T11:10:30.722Z",
      "updated_at": "2025-05-02T11:10:30.722Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"quachpas\" data-post=\"7\" data-topic=\"3904\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/q/662200/48.png\" class=\"avatar\"> quachpas:</div>\n<blockquote>\n<p>probably packages/templates should return the original <code>it</code> instead of content when possible, so that template rules can compose with user rules</p>\n</blockquote>\n</aside>\n<p>the original <code>it</code>, or a new element of the same type (with a trick to avoid recursion) so the user rules still work…</p>",
      "raw": "[quote=\"quachpas, post:7, topic:3904\"]\nprobably packages/templates should return the original `it` instead of content when possible, so that template rules can compose with user rules\n[/quote]\n\nthe original `it`, or a new element of the same type (with a trick to avoid recursion) so the user rules still work...",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 29,
      "score": 25.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 11908,
      "post_number": 9,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-02T20:51:10.519Z",
      "updated_at": "2025-05-06T15:11:59.959Z",
      "cooked": "<p>The short answer is that show rules are wrappers, that can introduce styling issues later down the road (if you need to style the element further). Which is what you see. Therefore, you should always avoid using show rules and instead use set/show-set/set-if/show-set-if rules, i.e., try something else before making show rule. Usually, when you have a single template, it doesn’t matter, since you style everything once, and you know exactly how to style everything.</p>\n<p>And yes, the show rule closure is applied to the content of the heading and not to the element in the show rule selector. See <a href=\"https://github.com/typst/typst/issues/6219\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Set rule inside show rule (closure) for the same element gets applied for table/grid · Issue #6219 · typst/typst · GitHub</a>. If you know this, you can take advantage of it, like <a href=\"https://forum.typst.app/t/what-is-the-easiest-way-to-horizontally-visually-flatten-nested-enum-list/3898/3\">here</a>.</p>",
      "raw": "The short answer is that show rules are wrappers, that can introduce styling issues later down the road (if you need to style the element further). Which is what you see. Therefore, you should always avoid using show rules and instead use set/show-set/set-if/show-set-if rules, i.e., try something else before making show rule. Usually, when you have a single template, it doesn't matter, since you style everything once, and you know exactly how to style everything.\n\nAnd yes, the show rule closure is applied to the content of the heading and not to the element in the show rule selector. See https://github.com/typst/typst/issues/6219. If you know this, you can take advantage of it, like [here](https://forum.typst.app/t/what-is-the-easiest-way-to-horizontally-visually-flatten-nested-enum-list/3898/3?u=andrew).",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 28,
      "score": 55.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12014,
      "post_number": 10,
      "username": "Y.D.X",
      "name": "Y.D.X.",
      "created_at": "2025-05-06T02:08:16.602Z",
      "updated_at": "2025-05-06T02:08:16.602Z",
      "cooked": "<p>I finally have time and got to read through all these helpful explanations. Thank you all!</p>\n<h2><a name=\"p-12014-conclusions-1\" class=\"anchor\" href=\"#p-12014-conclusions-1\"></a>Conclusions</h2>\n<ul>\n<li>Use simple rules (set, show-set, set-if) if possible.</li>\n<li>Show-function rules are applied from top to bottom. However, each function is applied to the element, which may or may not be the output of the last function.</li>\n</ul>",
      "raw": "I finally have time and got to read through all these helpful explanations. Thank you all!\n\n## Conclusions\n\n- Use simple rules (set, show-set, set-if) if possible.\n- Show-function rules are applied from top to bottom. However, each function is applied to the element, which may or may not be the output of the last function.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 25,
      "score": 20.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 292
    },
    {
      "id": 12164,
      "post_number": 11,
      "username": "HuangMI",
      "name": "HuangMI",
      "created_at": "2025-05-09T06:37:22.869Z",
      "updated_at": "2025-05-09T06:37:22.869Z",
      "cooked": "<pre><code class=\"lang-auto\">#{\n  set text(blue); [C(] + { set text(red); [B(] + { set text(green); [A(] + box(heading([My Heading])) + [)a] } + [)b] } + [)c]\n}\n\n\n#show heading: it =&gt; { set text(green); [A(] + box(it) + [)a] }\n#show heading: it =&gt; { set text(red); [B(] + box(it) + [)b] }\n#show heading: it =&gt; { set text(blue); [C(] + box(it) + [)c] }\n\n= My Heading\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/1/182f2265e20622ec3d19f62a3b75bd2c01058374.png\" data-download-href=\"https://forum.typst.app/uploads/default/182f2265e20622ec3d19f62a3b75bd2c01058374\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/1/182f2265e20622ec3d19f62a3b75bd2c01058374_2_690x288.png\" alt=\"image\" data-base62-sha1=\"3rWrxwRzhpoRx6NN62OA6gFFzpi\" width=\"690\" height=\"288\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/1/182f2265e20622ec3d19f62a3b75bd2c01058374_2_690x288.png, https://forum.typst.app/uploads/default/original/2X/1/182f2265e20622ec3d19f62a3b75bd2c01058374.png 1.5x, https://forum.typst.app/uploads/default/original/2X/1/182f2265e20622ec3d19f62a3b75bd2c01058374.png 2x\" data-dominant-color=\"F1F9F2\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">886×371 25.1 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "```\n#{\n  set text(blue); [C(] + { set text(red); [B(] + { set text(green); [A(] + box(heading([My Heading])) + [)a] } + [)b] } + [)c]\n}\n\n\n#show heading: it => { set text(green); [A(] + box(it) + [)a] }\n#show heading: it => { set text(red); [B(] + box(it) + [)b] }\n#show heading: it => { set text(blue); [C(] + box(it) + [)c] }\n\n= My Heading\n```\n\n![image|690x288](upload://3rWrxwRzhpoRx6NN62OA6gFFzpi.png)",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 9.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1479
    },
    {
      "id": 12165,
      "post_number": 12,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-05-09T08:30:37.237Z",
      "updated_at": "2025-05-09T09:12:16.881Z",
      "cooked": "<p>Is there a question here? I think the question is why they are different. We notice bold face is applied differently.</p>\n<p>The reason why is that inherent or existing set rules for heading apply first. When we enter the first rule (C) we already have the default rules for headings, that set bold text weight. These rules apply to everything that matches the <code>show heading</code> rule, so it includes our extra text “C(” and so on.  (These are rules 1. and 2. in sijo’s overview above)</p>",
      "raw": "Is there a question here? I think the question is why they are different. We notice bold face is applied differently.\n\nThe reason why is that inherent or existing set rules for heading apply first. When we enter the first rule (C) we already have the default rules for headings, that set bold text weight. These rules apply to everything that matches the `show heading` rule, so it includes our extra text \"C(\" and so on.  (These are rules 1. and 2. in sijo's overview above)",
      "reply_to_post_number": 11,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 9.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 12185,
      "post_number": 13,
      "username": "HuangMI",
      "name": "HuangMI",
      "created_at": "2025-05-09T12:50:21.488Z",
      "updated_at": "2025-05-09T12:50:21.488Z",
      "cooked": "<p>No question.I want to express that the down code is actually equivalent to the up code</p>",
      "raw": "No question.I want to express that the down code is actually equivalent to the up code",
      "reply_to_post_number": 12,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 9.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1479
    },
    {
      "id": 12186,
      "post_number": 14,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-05-09T14:00:06.330Z",
      "updated_at": "2025-05-09T14:00:06.330Z",
      "cooked": "<p>But visually the result is not equal, so they are different.</p>",
      "raw": "But visually the result is not equal, so they are different.",
      "reply_to_post_number": 13,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 20,
      "score": 4.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    }
  ],
  "scraped_at": "2025-06-10T09:48:23.017117"
}