{
  "topic_metadata": {
    "id": 3579,
    "title": "How can I replace markup tags in a CSV file with Typst markup?",
    "slug": "how-can-i-replace-markup-tags-in-a-csv-file-with-typst-markup",
    "posts_count": 6,
    "created_at": "2025-04-09T10:06:55.111Z",
    "last_posted_at": "2025-04-18T16:25:32.487Z",
    "views": 86,
    "like_count": 4,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Mathemensch",
    "tags": [
      "text-formatting",
      "data-loading"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1096
  },
  "posts": [
    {
      "id": 10836,
      "post_number": 1,
      "username": "maxigaz",
      "name": "maxigaz",
      "created_at": "2025-04-09T10:06:55.275Z",
      "updated_at": "2025-04-09T10:11:57.274Z",
      "cooked": "<p>There’s a video game that stores its dialogue transcript in all the languages supported by the game inside a single <code>.csv</code> file. With Typst, I can turn this into a table, which helps me a lot in learning/practising some of the languages.</p>\n<p>The <code>.csv</code> file contains some game-specific markup that makes pieces of the text show up as bold or italics, or with a different size or colour in the game. Here are a few examples:</p>\n<pre><code class=\"lang-auto\">{i}This{/i} should be emphasized. {i}Another{/i} example.\n\n{color=#3761d9}Blue{/color} coloured text.\n\n{size=20}This{/size} should be smaller.\n</code></pre>\n<p>My end-goal would be to turn the example above into this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#emph[This] should be emphasized. #emph[Another] example.\n\n#text(rgb(\"#3761d9\"), [Blue]) coloured text.\n\n#text(0.7em, [This]) should be smaller.\n</code></pre>\n<details>\n<summary>\nOutput screenshot</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/1/19d16ec5aabef834f52146c2b9bbc3672e332836.png\" alt=\"typst-csv-formatting-goal\" data-base62-sha1=\"3GoDWx3l7d8rwJ5QOthFTsKulOm\" width=\"409\" height=\"109\"></p>\n</details>\n<p>Here’s my attempt so far:</p>\n<details>\n<summary>\nSource code with rules and turning the CSV into a table</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let transcript = csv(\"transcript.csv\", row-type: dictionary)\n\n// Italics and bold\n#show regex(\"\\{i\\}.*\\{/i\\}\"): it =&gt; {\n  show regex(\"\\{i\\}\"): \"\"\n  show regex(\"\\{/i\\}\"): \"\"\n  emph[#it]\n}\n#show regex(\"\\{b\\}.*\\{/b\\}\"): it =&gt; {\n  show regex(\"\\{b\\}\"): \"\"\n  show regex(\"\\{/b\\}\"): \"\"\n  emph[#it]\n}\n\n// Size and colour\n#show regex(\"\\{size=\\d+\\}.*\\{/size\\}\"): it =&gt; {\n  show regex(\"\\{size=\\d+\\}\"): \"\"\n  show regex(\"\\{/size\\}\"): \"\"\n  text(rgb(\"#666\"), it)\n}\n#show regex(\"\\{color=#......\\}.*\\{/color\\}\"): it =&gt; {\n  show regex(\"\\{color=#......\\}\"): \"\"\n  show regex(\"\\{/color\\}\"): \"\"\n  text(rgb(\"#666\"), it)\n}\n\n#table(\n  columns: 4,\n  stroke: 0.3pt,\n  table.header([*Key*], [*English*], [*Spanish*], [*Japanese*],),\n  ..transcript.map(row =&gt; (row.Key, row.Standard, row.Spanish, row.Japanese)).flatten()\n)\n</code></pre>\n</details>\n<p>For handling the markup for colour and size changes, I believe I would need to capture the values for that (like <code>#3761d9</code> and <code>20</code>), which I don’t know how to do (yet). So, for now, I’ve just made two rules that turn anything wrapped in a <code>{color}</code> or <code>{size}</code> into grey. (While not the ideal solution, at least this would be a clear indication that the passage in question is supposed to have some special markup.)</p>\n<p>As for text wrapped in <code>{i}</code> or <code>{b}</code>, the rules mostly work. The only problem is when there are two non-consecutive pieces of text meant to be displayed in italics, everything between them is also turned into italics. (This might have something to do with how greedy the regex rule is.)</p>\n<details>\n<summary>\nOutput screenshot with the italics rule</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/2/2eab0780fa1656727a9267ad269029b223ae2875.png\" alt=\"typst-csv-formatting-italics\" data-base62-sha1=\"6EQojOrujwLKwmqiOObwxe0T0vH\" width=\"397\" height=\"35\"></p>\n</details>\n<p>P.S.: I’ve also thought about manipulating the <code>.csv</code> file with <code>sed</code> in a way that  Typst’s own markup is read from there instead of relying on show rules, but I’m not sure if Typst would recognise the markup that way.</p>",
      "raw": "There's a video game that stores its dialogue transcript in all the languages supported by the game inside a single `.csv` file. With Typst, I can turn this into a table, which helps me a lot in learning/practising some of the languages.\n\nThe `.csv` file contains some game-specific markup that makes pieces of the text show up as bold or italics, or with a different size or colour in the game. Here are a few examples:\n\n```\n{i}This{/i} should be emphasized. {i}Another{/i} example.\n\n{color=#3761d9}Blue{/color} coloured text.\n\n{size=20}This{/size} should be smaller.\n```\n\nMy end-goal would be to turn the example above into this:\n\n```typ\n#emph[This] should be emphasized. #emph[Another] example.\n\n#text(rgb(\"#3761d9\"), [Blue]) coloured text.\n\n#text(0.7em, [This]) should be smaller.\n```\n\n[details=\"Output screenshot\"]\n![typst-csv-formatting-goal|409x109](upload://3GoDWx3l7d8rwJ5QOthFTsKulOm.png)\n[/details]\n\nHere's my attempt so far:\n\n[details=\"Source code with rules and turning the CSV into a table\"]\n```typ\n#let transcript = csv(\"transcript.csv\", row-type: dictionary)\n\n// Italics and bold\n#show regex(\"\\{i\\}.*\\{/i\\}\"): it => {\n  show regex(\"\\{i\\}\"): \"\"\n  show regex(\"\\{/i\\}\"): \"\"\n  emph[#it]\n}\n#show regex(\"\\{b\\}.*\\{/b\\}\"): it => {\n  show regex(\"\\{b\\}\"): \"\"\n  show regex(\"\\{/b\\}\"): \"\"\n  emph[#it]\n}\n\n// Size and colour\n#show regex(\"\\{size=\\d+\\}.*\\{/size\\}\"): it => {\n  show regex(\"\\{size=\\d+\\}\"): \"\"\n  show regex(\"\\{/size\\}\"): \"\"\n  text(rgb(\"#666\"), it)\n}\n#show regex(\"\\{color=#......\\}.*\\{/color\\}\"): it => {\n  show regex(\"\\{color=#......\\}\"): \"\"\n  show regex(\"\\{/color\\}\"): \"\"\n  text(rgb(\"#666\"), it)\n}\n\n#table(\n  columns: 4,\n  stroke: 0.3pt,\n  table.header([*Key*], [*English*], [*Spanish*], [*Japanese*],),\n  ..transcript.map(row => (row.Key, row.Standard, row.Spanish, row.Japanese)).flatten()\n)\n```\n[/details]\n\nFor handling the markup for colour and size changes, I believe I would need to capture the values for that (like `#3761d9` and `20`), which I don't know how to do (yet). So, for now, I've just made two rules that turn anything wrapped in a `{color}` or `{size}` into grey. (While not the ideal solution, at least this would be a clear indication that the passage in question is supposed to have some special markup.)\n\nAs for text wrapped in `{i}` or `{b}`, the rules mostly work. The only problem is when there are two non-consecutive pieces of text meant to be displayed in italics, everything between them is also turned into italics. (This might have something to do with how greedy the regex rule is.)\n\n[details=\"Output screenshot with the italics rule\"]\n![typst-csv-formatting-italics|397x35](upload://6EQojOrujwLKwmqiOObwxe0T0vH.png)\n[/details]\n\nP.S.: I've also thought about manipulating the `.csv` file with `sed` in a way that  Typst's own markup is read from there instead of relying on show rules, but I'm not sure if Typst would recognise the markup that way.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 64.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 738
    },
    {
      "id": 10837,
      "post_number": 2,
      "username": "Mathemensch",
      "name": "Alexander Schulz",
      "created_at": "2025-04-09T10:15:16.242Z",
      "updated_at": "2025-04-09T10:54:39.959Z",
      "cooked": "<p>Hey! I put together a little Typst snippet that does exactly what you described — it handles <em>italics</em>, <em>bold</em>, <em>color</em>, and <em>size</em>, and even extracts the actual values for color and size dynamically.</p>\n<p>I wasn’t sure what font sizes the game actually uses apart from 20, so I just picked an arbitrary scaling factor for now. If there are only a few distinct sizes, it might make more sense to map them explicitly — but for that, I’d need a bit more info on what sizes actually occur.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Italics and bold\n#show regex(\"\\{i\\}.*?\\{/i\\}\"): it =&gt; {\n  emph[#it.text.replace(regex(\"\\{\\/?i\\}\"), \"\")]\n}\n#show regex(\"\\{b\\}.*?\\{/b\\}\"): it =&gt; {\n  strong[#it.text.replace(regex(\"\\{\\/?b\\}\"), \"\")]\n}\n\n// Size and colour\n#show regex(\"\\{size=\\d+\\}.*?\\{/size\\}\"): it =&gt; {\n  let size = int(it.text.match(regex(\"\\{size=(\\d+)\\}.*?\\{/size\\}\")).captures.at(0))\n  text(size: size * 0.03em, it.text.replace(regex(\"\\{\\/?size(?:=\\d+)?\\}\"), \"\"))\n}\n\n#show regex(\"\\{color=#[0-9a-fA-F]+\\}.*?\\{/color\\}\"): it =&gt; {\n  let color = rgb(it.text.match(regex(\"\\{color=(#[0-9a-fA-F]+)\\}.*?\\{/color\\}\")).captures.at(0))\n  text(color, it.text.replace(regex(\"\\{\\/?color+?=?#?[0-9a-fA-F]?+\\}\"), \"\"))\n}\n\n{i}This{/i} should be emphasized. {i}Another{/i} example.\n\n{b}This{/b} should be strong. {b}Another{/b} example.\n\n{color=\\#3761d9}Blue{/color} coloured text.\n\n{size=20}This{/size} should be smaller.\n</code></pre>\n<p>Which results in:<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/9/9b72e68384182c7904409b34abdff7bda34d63ec.png\" data-download-href=\"https://forum.typst.app/uploads/default/9b72e68384182c7904409b34abdff7bda34d63ec\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/9/9b72e68384182c7904409b34abdff7bda34d63ec_2_690x305.png\" alt=\"image\" data-base62-sha1=\"mbabdI3Mj3QNqSHJt1tZ2h15f3K\" width=\"690\" height=\"305\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/9/9b72e68384182c7904409b34abdff7bda34d63ec_2_690x305.png, https://forum.typst.app/uploads/default/original/2X/9/9b72e68384182c7904409b34abdff7bda34d63ec.png 1.5x, https://forum.typst.app/uploads/default/original/2X/9/9b72e68384182c7904409b34abdff7bda34d63ec.png 2x\" data-dominant-color=\"F4F4F4\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">702×311 36 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Let me know if you run into any issues adapting it to your use case! Also, if you can share a short sample of your CSV, that might help refine things even further. Would be happy to help you tweak it if needed!</p>",
      "raw": "Hey! I put together a little Typst snippet that does exactly what you described — it handles *italics*, *bold*, *color*, and *size*, and even extracts the actual values for color and size dynamically.\n\nI wasn’t sure what font sizes the game actually uses apart from 20, so I just picked an arbitrary scaling factor for now. If there are only a few distinct sizes, it might make more sense to map them explicitly — but for that, I’d need a bit more info on what sizes actually occur.\n\n\n```typ\n// Italics and bold\n#show regex(\"\\{i\\}.*?\\{/i\\}\"): it => {\n  emph[#it.text.replace(regex(\"\\{\\/?i\\}\"), \"\")]\n}\n#show regex(\"\\{b\\}.*?\\{/b\\}\"): it => {\n  strong[#it.text.replace(regex(\"\\{\\/?b\\}\"), \"\")]\n}\n\n// Size and colour\n#show regex(\"\\{size=\\d+\\}.*?\\{/size\\}\"): it => {\n  let size = int(it.text.match(regex(\"\\{size=(\\d+)\\}.*?\\{/size\\}\")).captures.at(0))\n  text(size: size * 0.03em, it.text.replace(regex(\"\\{\\/?size(?:=\\d+)?\\}\"), \"\"))\n}\n\n#show regex(\"\\{color=#[0-9a-fA-F]+\\}.*?\\{/color\\}\"): it => {\n  let color = rgb(it.text.match(regex(\"\\{color=(#[0-9a-fA-F]+)\\}.*?\\{/color\\}\")).captures.at(0))\n  text(color, it.text.replace(regex(\"\\{\\/?color+?=?#?[0-9a-fA-F]?+\\}\"), \"\"))\n}\n\n{i}This{/i} should be emphasized. {i}Another{/i} example.\n\n{b}This{/b} should be strong. {b}Another{/b} example.\n\n{color=\\#3761d9}Blue{/color} coloured text.\n\n{size=20}This{/size} should be smaller.\n```\n\nWhich results in:\n![image|690x305](upload://mbabdI3Mj3QNqSHJt1tZ2h15f3K.png)\n\nLet me know if you run into any issues adapting it to your use case! Also, if you can share a short sample of your CSV, that might help refine things even further. Would be happy to help you tweak it if needed!",
      "reply_to_post_number": null,
      "reply_count": 3,
      "quote_count": 0,
      "like_count": 2,
      "reads": 20,
      "score": 49.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 307
    },
    {
      "id": 10845,
      "post_number": 3,
      "username": "maxigaz",
      "name": "maxigaz",
      "created_at": "2025-04-09T12:13:21.752Z",
      "updated_at": "2025-04-09T12:13:21.752Z",
      "cooked": "<p>Thank you very much for the solution! It seems to work perfectly!</p>\n<p>Here’s a sample of the CSV file. I included the very first line from the original (which has the field names) and also 200 lines from somewhere in the middle, which also include lines with markup for italics, size, and color.</p>\n<p><a class=\"attachment\" href=\"/uploads/short-url/wXo0oZxcpZ4Z9S7mukZg0iUMvYI.csv\">transcript-sample.csv</a> (87.6 KB)</p>",
      "raw": "Thank you very much for the solution! It seems to work perfectly!\n\nHere's a sample of the CSV file. I included the very first line from the original (which has the field names) and also 200 lines from somewhere in the middle, which also include lines with markup for italics, size, and color.\n\n[transcript-sample.csv|attachment](upload://wXo0oZxcpZ4Z9S7mukZg0iUMvYI.csv) (87.6 KB)",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 18,
      "score": 18.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 738
    },
    {
      "id": 10953,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-11T22:55:11.466Z",
      "updated_at": "2025-04-11T22:59:56.611Z",
      "cooked": "<p>Since data comes from strings, <code>str.replace</code> can be effectively used here:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let process-text(text) = {\n  import \"@preview/oxifmt:0.2.1\": strfmt\n  let args(left, right, substitution) = (\n    regex(\"\\{\" + left + \"}(.*?)\\{/\" + right + \"}\"),\n    x =&gt; strfmt(substitution, ..x.captures),\n  )\n  let str = text\n    .replace(..args(\"i\", \"i\", \"#emph[{}]\"))\n    .replace(..args(\"b\", \"b\", \"#strong[{}]\"))\n    .replace(..args(\"size=(\\d+)\", \"size\", \"#text({} * 0.03em)[{}]\"))\n    .replace(..args(\"color=#(\\w+)\", \"color\", \"#text(rgb(\\\"{}\\\"))[{}]\"))\n    .replace(regex(\"[$]\"), x =&gt; \"\\\\\" + x.text)\n  eval(str, mode: \"markup\")\n}\n\n#let text = ```\n{i}Just italic{/i}.\n{b}Just bold{/b}.\n{color=#00FF00}Just colored{/color}.\n{size=20}Just resized{/size}.\n\nHere {b} is {i}{size=20}a{/size} mixed{/i} {color=#3761d9}situation{/color}{/b}.\n```.text\n\n#process-text(text)\n\n#let transcript = for row in csv(\"transcript.csv\", row-type: dictionary) {\n  (row.pairs().map(((k, v)) =&gt; ((k): process-text(v))).join(),)\n}\n\n#show table.cell.where(y: 0): strong\n#table(\n  columns: 4,\n  stroke: 0.3pt,\n  table.header[Key][English][Spanish][Japanese],\n  ..transcript\n    .map(row =&gt; (row.Key, row.Standard, row.Spanish, row.Japanese))\n    .flatten(),\n)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/e/e24d3ff6923827a57ede99fb0cc914eb1ee6a8e2.png\" alt=\"image\" data-base62-sha1=\"whXpKHtvLzfh7Wc7hDaQY2oXxgm\" width=\"297\" height=\"57\"></p>\n<p>The solution is much shorter, but requires additional data processing and escaping of stuff that will error in markup mode.</p>\n<aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/typst/typst/issues/2093\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/typst/typst/issues/2093\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/typst/typst</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\" data-github-private-repo=\"false\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/typst/typst/issues/2093\" target=\"_blank\" rel=\"noopener nofollow ugc\">String and regex show rules with a function should pass a match dict, rather than content</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2023-09-09\" data-time=\"14:24:35\" data-timezone=\"UTC\">02:24PM - 09 Sep 23 UTC</span>\n      </div>\n\n        <div class=\"date\">\n          closed <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-08-06\" data-time=\"16:06:15\" data-timezone=\"UTC\">04:06PM - 06 Aug 24 UTC</span>\n        </div>\n\n      <div class=\"user\">\n        <a href=\"https://github.com/emilyyyylime\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n          <img alt=\"emilyyyylime\" src=\"https://forum.typst.app/uploads/default/original/2X/6/660725e6dca9415652fee4ddafeb76399fe0f86f.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"71970F\">\n          emilyyyylime\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          scripting\n        </span>\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          styling\n        </span>\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          change request\n        </span>\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">### Description\n\nLike the dict returned by `str.match`\n\n### Use Case\n\n```\n#show<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\"> regex(\"(?i)hello (\\w+)\"): m =&gt; \"goodbye \" + m.captures.at(1)\n```</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>Also, table header can be simplified.</p>\n<aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/typst/typst/issues/3640\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/typst/typst/issues/3640\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/typst/typst</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\" data-github-private-repo=\"false\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/typst/typst/issues/3640\" target=\"_blank\" rel=\"noopener nofollow ugc\">Unable to style `table.header` and `table.footer`</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-03-12\" data-time=\"19:20:39\" data-timezone=\"UTC\">07:20PM - 12 Mar 24 UTC</span>\n      </div>\n\n\n      <div class=\"user\">\n        <a href=\"https://github.com/MDLC01\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n          <img alt=\"MDLC01\" src=\"https://forum.typst.app/uploads/default/original/1X/41af6371f4684cc3047e3a64a6bad62f1de86391.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"4995B1\">\n          MDLC01\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          bug\n        </span>\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          styling\n        </span>\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">### Description\n\nIt is not possible to style `table.header` and `table.footer` e<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">lements using show rules. \n\nTo reproduce:\n```typ\n#show table.header: set text(weight: \"bold\")\n#show table.footer: set text(weight: \"bold\")\n\n#table(\n  table.header[Header],\n  [Regular cell],\n  table.footer[Fotter],\n)\n```\n\n[Related discussion on Discord.](https://discord.com/channels/1054443721975922748/1182377294682128445/1217187734934917130)\n\n### Reproduction URL\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Typst version\n\n- [X] I am using the latest version of Typst</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
      "raw": "Since data comes from strings, `str.replace` can be effectively used here:\n\n````typ\n#let process-text(text) = {\n  import \"@preview/oxifmt:0.2.1\": strfmt\n  let args(left, right, substitution) = (\n    regex(\"\\{\" + left + \"}(.*?)\\{/\" + right + \"}\"),\n    x => strfmt(substitution, ..x.captures),\n  )\n  let str = text\n    .replace(..args(\"i\", \"i\", \"#emph[{}]\"))\n    .replace(..args(\"b\", \"b\", \"#strong[{}]\"))\n    .replace(..args(\"size=(\\d+)\", \"size\", \"#text({} * 0.03em)[{}]\"))\n    .replace(..args(\"color=#(\\w+)\", \"color\", \"#text(rgb(\\\"{}\\\"))[{}]\"))\n    .replace(regex(\"[$]\"), x => \"\\\\\" + x.text)\n  eval(str, mode: \"markup\")\n}\n\n#let text = ```\n{i}Just italic{/i}.\n{b}Just bold{/b}.\n{color=#00FF00}Just colored{/color}.\n{size=20}Just resized{/size}.\n\nHere {b} is {i}{size=20}a{/size} mixed{/i} {color=#3761d9}situation{/color}{/b}.\n```.text\n\n#process-text(text)\n\n#let transcript = for row in csv(\"transcript.csv\", row-type: dictionary) {\n  (row.pairs().map(((k, v)) => ((k): process-text(v))).join(),)\n}\n\n#show table.cell.where(y: 0): strong\n#table(\n  columns: 4,\n  stroke: 0.3pt,\n  table.header[Key][English][Spanish][Japanese],\n  ..transcript\n    .map(row => (row.Key, row.Standard, row.Spanish, row.Japanese))\n    .flatten(),\n)\n````\n\n![image|297x57](upload://whXpKHtvLzfh7Wc7hDaQY2oXxgm.png)\n\nThe solution is much shorter, but requires additional data processing and escaping of stuff that will error in markup mode.\n\nhttps://github.com/typst/typst/issues/2093\n\nAlso, table header can be simplified.\n\nhttps://github.com/typst/typst/issues/3640",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 16,
      "score": 3.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 11289,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-04-18T15:53:08.871Z",
      "updated_at": "2025-04-18T15:53:08.871Z",
      "cooked": "<p>note that this will struggle with strangely nested tags:</p>\n<pre><code class=\"lang-auto\">{i}{i}This{/i}{/i} should be emphasized.\n</code></pre>\n<p>Result:</p>\n<blockquote>\n<p><em>This{/i}</em> should be emphasized.</p>\n</blockquote>\n<p>This happens because regex (regular expressions) can only parse regular languages, while arbitrarily nested formatting tags form a context-free language which is more general.</p>\n<p>For more info, consult this classic text: <a href=\"https://stackoverflow.com/a/1732454/371191\" class=\"inline-onebox\">html - RegEx match open tags except XHTML self-contained tags - Stack Overflow</a> <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "note that this will struggle with strangely nested tags:\n\n```\n{i}{i}This{/i}{/i} should be emphasized.\n```\n\nResult:\n\n> _This{/i}_ should be emphasized.\n\nThis happens because regex (regular expressions) can only parse regular languages, while arbitrarily nested formatting tags form a context-free language which is more general.\n\nFor more info, consult this classic text: https://stackoverflow.com/a/1732454/371191 :wink:",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 14,
      "score": 7.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 11292,
      "post_number": 6,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-18T16:25:32.487Z",
      "updated_at": "2025-04-18T16:25:32.487Z",
      "cooked": "<p>Strangely nested tags would be strange to see, since they don’t do any good. So for this use case it doesn’t matter. For nested stuff, you need to do much more than just find and replace.</p>",
      "raw": "Strangely nested tags would be strange to see, since they don't do any good. So for this use case it doesn't matter. For nested stuff, you need to do much more than just find and replace.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 14,
      "score": 47.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:49:29.153166"
}