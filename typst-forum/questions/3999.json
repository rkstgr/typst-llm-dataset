{
  "topic_metadata": {
    "id": 3999,
    "title": "How to keep exercise and solution together in source, but render them separately?",
    "slug": "how-to-keep-exercise-and-solution-together-in-source-but-render-them-separately",
    "posts_count": 13,
    "created_at": "2025-05-09T01:03:25.255Z",
    "last_posted_at": "2025-05-13T06:24:25.608Z",
    "views": 176,
    "like_count": 11,
    "reply_count": 8,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 10,
    "accepted_answer_username": "Andrew",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 2121
  },
  "posts": [
    {
      "id": 12154,
      "post_number": 1,
      "username": "John",
      "name": "John",
      "created_at": "2025-05-09T01:03:25.436Z",
      "updated_at": "2025-05-09T17:07:55.379Z",
      "cooked": "<p>I’d like to keep the typst source code for exercises and solutions in the same place. The exercises should be rendered in place. But the solutions should be collected and rendered in a section at the end, with links back to the exercises.</p>\n<p>I’ve seen several exam-like packages. But I don’t think I’ve seen this feature.<br>\nMy use case is a book-like (or monograph) document. I currently just do it manually, adding labels, skipping back and forth.</p>\n<p>If I knew scripting better, I suppose I could put the content into an array with labels, and process it at the end.  But I just started with typst.</p>",
      "raw": "I'd like to keep the typst source code for exercises and solutions in the same place. The exercises should be rendered in place. But the solutions should be collected and rendered in a section at the end, with links back to the exercises.\n\nI've seen several exam-like packages. But I don't think I've seen this feature.\nMy use case is a book-like (or monograph) document. I currently just do it manually, adding labels, skipping back and forth.\n\nIf I knew scripting better, I suppose I could put the content into an array with labels, and process it at the end.  But I just started with typst.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 46,
      "score": 164.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1572
    },
    {
      "id": 12172,
      "post_number": 2,
      "username": "Blaz",
      "name": "Blaz",
      "created_at": "2025-05-09T09:56:25.160Z",
      "updated_at": "2025-05-09T09:56:25.160Z",
      "cooked": "<p>Maybe you can do something like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let show-solutions = true\n#let all-problems = state(\"all-problems\", ())\n\n#let problem(title: \"Example title\", statement: [], solution: []) = {\n  // Collect our title and solution into our all-problems state\n  context {\n    let current-problems = all-problems.get()\n    current-problems.push((title: title, solution: solution, location: here()))\n    all-problems.update(current-problems)\n  }\n  // Display the statement\n  [\n    == #title #label(title)\n    #statement\n  ]\n}\n\n= Problem list\n\n#problem(\n  title: \"Basic arithmetic\",\n  statement: [\n    1. 1+1 = ?\n    2. 2+1 = ?\n  ],\n  solution: [\n    1. 1+1 = 2\n    2. 2+1 = 3\n  ]\n)\n\n#problem(\n  title: \"More stuff\",\n  statement: [\n    1. something\n  ],\n  solution: [\n    1. some solution\n  ]\n)\n\n\n#if show-solutions [\n    #pagebreak()\n    = Solutions\n    #context {\n      let problems = all-problems.get()\n      for p in problems [\n        == #p.title #link(p.location, text(blue)[(go to problem)]) \n        #p.solution\n      ]\n    }\n]\n</code></pre>\n<h1><a name=\"p-12172-breakdown-1\" class=\"anchor\" href=\"#p-12172-breakdown-1\"></a>Breakdown</h1>\n<ol>\n<li>The <code>show-solutions</code> flag allows you to switch between rendering or not rendering the solutions.</li>\n<li>We have the <code>#problem</code> wrapper for our problems. This enables writing the problems and solutions in the same place in your source file.</li>\n<li>As variables defined outside our functions are read-only, we have to use <a href=\"https://typst.app/docs/reference/introspection/state/\">state</a> in order to keep track of our solutions and show them at the end. Notice that the <code>get</code> function for state is contextual, so we have to use <code>context</code> when using it.</li>\n<li>For each problem we store its title, solution and location so we can link back to it.</li>\n</ol>\n<p>I assumed that you want to write a problem and its solution in the same place. If not, you can ignore all the state stuff and the problem wrapper and just “statically” write the solutions in the <code>if</code> block.</p>",
      "raw": "Maybe you can do something like this:\n```typ\n#let show-solutions = true\n#let all-problems = state(\"all-problems\", ())\n\n#let problem(title: \"Example title\", statement: [], solution: []) = {\n  // Collect our title and solution into our all-problems state\n  context {\n    let current-problems = all-problems.get()\n    current-problems.push((title: title, solution: solution, location: here()))\n    all-problems.update(current-problems)\n  }\n  // Display the statement\n  [\n    == #title #label(title)\n    #statement\n  ]\n}\n\n= Problem list\n\n#problem(\n  title: \"Basic arithmetic\",\n  statement: [\n    1. 1+1 = ?\n    2. 2+1 = ?\n  ],\n  solution: [\n    1. 1+1 = 2\n    2. 2+1 = 3\n  ]\n)\n\n#problem(\n  title: \"More stuff\",\n  statement: [\n    1. something\n  ],\n  solution: [\n    1. some solution\n  ]\n)\n\n\n#if show-solutions [\n    #pagebreak()\n    = Solutions\n    #context {\n      let problems = all-problems.get()\n      for p in problems [\n        == #p.title #link(p.location, text(blue)[(go to problem)]) \n        #p.solution\n      ]\n    }\n]\n```\n\n# Breakdown\n\n1. The `show-solutions` flag allows you to switch between rendering or not rendering the solutions.\n2. We have the `#problem` wrapper for our problems. This enables writing the problems and solutions in the same place in your source file.\n3. As variables defined outside our functions are read-only, we have to use [state](https://typst.app/docs/reference/introspection/state/) in order to keep track of our solutions and show them at the end. Notice that the `get` function for state is contextual, so we have to use `context` when using it.\n4. For each problem we store its title, solution and location so we can link back to it.\n\nI assumed that you want to write a problem and its solution in the same place. If not, you can ignore all the state stuff and the problem wrapper and just \"statically\" write the solutions in the `if` block.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 45,
      "score": 49.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 98
    },
    {
      "id": 12177,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-09T10:49:07.813Z",
      "updated_at": "2025-05-09T10:49:07.813Z",
      "cooked": "<p>You are using <code>all-problems.get()</code> and <code>all-problems.update(current-problems)</code> in the same context, which always(?) leads to the converge issue, provided this happens 5 times. And it does here, if there are 5+ problems:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let show-solutions = true\n#let all-problems = state(\"all-problems\", ())\n\n#let problem(title: \"Example title\", statement: [], solution: []) = context {\n  let current-problems = all-problems.get()\n  current-problems.push((title: title, solution: solution, location: here()))\n  all-problems.update(current-problems)\n  [\n    == #title #label(repr(title))\n    #statement\n  ]\n}\n\n= Problem list\n\n#for n in range(1, 6) {\n  problem(title: [Problem #n])\n}\n\n#if show-solutions [\n  #pagebreak()\n  = Solutions\n  #context {\n    for p in all-problems.get() [\n      == #p.title #link(p.location, text(blue)[(go to problem)])\n      #p.solution\n    ]\n  }\n]\n</code></pre>\n<p>To fix this, you should pass closure to the update function instead of overriding the value. Also the title can’t be content, because of the label, which is “fixed” with <code>repr()</code> content wrapper.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let show-solutions = true\n#let all-problems = state(\"all-problems\", ())\n\n#let problem(title: \"Example title\", statement: [], solution: []) = context {\n  let problem = (title: title, solution: solution, location: here())\n  all-problems.update(problems =&gt; problems + (problem,))\n  [\n    == #title #label(repr(title))\n    #statement\n  ]\n}\n\n= Problem list\n\n#for n in range(1, 6) {\n  problem(title: [Problem #n])\n}\n\n#if show-solutions [\n  #pagebreak()\n  = Solutions\n  #context {\n    for p in all-problems.get() [\n      == #p.title #link(p.location, text(blue)[(go to problem)])\n      #p.solution\n    ]\n  }\n]\n</code></pre>",
      "raw": "You are using `all-problems.get()` and `all-problems.update(current-problems)` in the same context, which always(?) leads to the converge issue, provided this happens 5 times. And it does here, if there are 5+ problems:\n\n```typ\n#let show-solutions = true\n#let all-problems = state(\"all-problems\", ())\n\n#let problem(title: \"Example title\", statement: [], solution: []) = context {\n  let current-problems = all-problems.get()\n  current-problems.push((title: title, solution: solution, location: here()))\n  all-problems.update(current-problems)\n  [\n    == #title #label(repr(title))\n    #statement\n  ]\n}\n\n= Problem list\n\n#for n in range(1, 6) {\n  problem(title: [Problem #n])\n}\n\n#if show-solutions [\n  #pagebreak()\n  = Solutions\n  #context {\n    for p in all-problems.get() [\n      == #p.title #link(p.location, text(blue)[(go to problem)])\n      #p.solution\n    ]\n  }\n]\n```\n\nTo fix this, you should pass closure to the update function instead of overriding the value. Also the title can't be content, because of the label, which is \"fixed\" with `repr()` content wrapper.\n\n\n```typ\n#let show-solutions = true\n#let all-problems = state(\"all-problems\", ())\n\n#let problem(title: \"Example title\", statement: [], solution: []) = context {\n  let problem = (title: title, solution: solution, location: here())\n  all-problems.update(problems => problems + (problem,))\n  [\n    == #title #label(repr(title))\n    #statement\n  ]\n}\n\n= Problem list\n\n#for n in range(1, 6) {\n  problem(title: [Problem #n])\n}\n\n#if show-solutions [\n  #pagebreak()\n  = Solutions\n  #context {\n    for p in all-problems.get() [\n      == #p.title #link(p.location, text(blue)[(go to problem)])\n      #p.solution\n    ]\n  }\n]\n```",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 4,
      "reads": 44,
      "score": 73.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12192,
      "post_number": 4,
      "username": "John",
      "name": "John",
      "created_at": "2025-05-09T16:12:36.695Z",
      "updated_at": "2025-05-09T16:12:36.695Z",
      "cooked": "<p>This is a great start. I had looked at the abbr package as a model for collecting things in a dict and then pulling things out and rendering them. But what you have here is closer to a complete solution. I’ll mark the topic as solved once I play with it a bit. I guess I’ll end up putting it in a public package.</p>\n<p>I don’t need to code much for my current role. I’ve been disciplined about not coding (it’s such a time sink). But there are so many things I could use to improve my notes that I know would be not too much work… “Stop me before I code again”.</p>",
      "raw": "This is a great start. I had looked at the abbr package as a model for collecting things in a dict and then pulling things out and rendering them. But what you have here is closer to a complete solution. I'll mark the topic as solved once I play with it a bit. I guess I'll end up putting it in a public package.\n\nI don't need to code much for my current role. I've been disciplined about not coding (it's such a time sink). But there are so many things I could use to improve my notes that I know would be not too much work... \"Stop me before I code again\".",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 40,
      "score": 23.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1572
    },
    {
      "id": 12195,
      "post_number": 5,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-05-09T17:08:31.339Z",
      "updated_at": "2025-05-09T17:08:31.339Z",
      "cooked": "<p>Hey <a class=\"mention\" href=\"/u/john\">@John</a>, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a></p>\n<p>For future posts, make sure your title is a question you’d ask to a friend about Typst. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hey @John, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: https://forum.typst.app/t/how-to-post-in-the-questions-category/11\n\nFor future posts, make sure your title is a question you’d ask to a friend about Typst. :wink:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 39,
      "score": 22.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 12205,
      "post_number": 6,
      "username": "Blaz",
      "name": "Blaz",
      "created_at": "2025-05-09T21:52:48.839Z",
      "updated_at": "2025-05-09T21:52:48.839Z",
      "cooked": "<p>Thanks for fixing it!</p>",
      "raw": "Thanks for fixing it!",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 39,
      "score": 27.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 98
    },
    {
      "id": 12350,
      "post_number": 7,
      "username": "John",
      "name": "John",
      "created_at": "2025-05-12T16:43:50.556Z",
      "updated_at": "2025-05-12T16:43:50.556Z",
      "cooked": "<p>I’d like to have the exercises numbered with the major part following the heading major part. For example, “Exercise 2.1”, “Exercise 2.2”, etc. for exercises in the second major heading.</p>\n<p>The, the solution should refer to these numbers. Something like “Solution Exercise 2.1: solution text” with the number linking back to the statement in the text.</p>\n<p>The following almost does this. But, each number in the solution is actually the number for the previous exercise. (And the first exercise number in the solutions is 0.0)</p>\n<p>exercises.typ:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let all-problems = state(\"all-problems\", ())\n#let c = counter(\"problem\")\n\n#let problem(statement: [], solution: none) = context {\n    let head_maj = counter(heading).get().at(0)\n    let prob_maj = c.get().at(0)\n    if prob_maj == 0 {\n        let head_min = counter(heading).get().at(1, default: 1)\n        c.update((head_maj, head_min))\n    } else if head_maj == prob_maj {\n        c.step(level: 2)\n    } else {\n        c.update((head_maj, 1))\n    }\n    [\n        _Exercise_  #context emph(c.display()): #statement #label(repr(c))\\\n    ]\n    let prob_maj = c.get().at(0)\n    let prob_min = c.get().at(1, default: 0)\n    let problem = (solution: solution, location: here(), number: (prob_maj, prob_min)) // c.get())\n    all-problems.update(problems =&gt; problems + (problem,))\n}\n\n#let display-solutions() = {\n    context {\n        for p in all-problems.get() {\n            if p.solution != none {\n                let maj = p.number.at(0, default: 1)\n                let min = p.number.at(1, default: 1)\n                [_Solution:_ #link(p.location, [_Exercise_ #emph[#maj\\.#min]]) #h(1em) #p.solution\\ \\ ]\n            }\n        }\n    }\n}\n</code></pre>\n<p>Then used in a document</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#set heading(numbering: \"1.1\")\n\n#import \"/lib/exercises.typ\": problem, display-solutions\n\n= First Chapter\n\n#problem(\n    statement: [What is $1 + 1$ ?],\n    solution: [The answer is $2$]\n)\n\n#problem(\n    statement: [What is $1 + 2$ ?],\n    solution: [The answer is $3$]\n)\n\n= Second Chapter\n\n#problem(\n    statement: [Then what is $1 + 3$ ?],\n    solution: [The answer is $4$]\n)\n\n= The Solutions\n\n#display-solutions()\n</code></pre>",
      "raw": "I'd like to have the exercises numbered with the major part following the heading major part. For example, \"Exercise 2.1\", \"Exercise 2.2\", etc. for exercises in the second major heading.\n\nThe, the solution should refer to these numbers. Something like \"Solution Exercise 2.1: solution text\" with the number linking back to the statement in the text.\n\nThe following almost does this. But, each number in the solution is actually the number for the previous exercise. (And the first exercise number in the solutions is 0.0)\n\nexercises.typ:\n```typst\n#let all-problems = state(\"all-problems\", ())\n#let c = counter(\"problem\")\n\n#let problem(statement: [], solution: none) = context {\n    let head_maj = counter(heading).get().at(0)\n    let prob_maj = c.get().at(0)\n    if prob_maj == 0 {\n        let head_min = counter(heading).get().at(1, default: 1)\n        c.update((head_maj, head_min))\n    } else if head_maj == prob_maj {\n        c.step(level: 2)\n    } else {\n        c.update((head_maj, 1))\n    }\n    [\n        _Exercise_  #context emph(c.display()): #statement #label(repr(c))\\\n    ]\n    let prob_maj = c.get().at(0)\n    let prob_min = c.get().at(1, default: 0)\n    let problem = (solution: solution, location: here(), number: (prob_maj, prob_min)) // c.get())\n    all-problems.update(problems => problems + (problem,))\n}\n\n#let display-solutions() = {\n    context {\n        for p in all-problems.get() {\n            if p.solution != none {\n                let maj = p.number.at(0, default: 1)\n                let min = p.number.at(1, default: 1)\n                [_Solution:_ #link(p.location, [_Exercise_ #emph[#maj\\.#min]]) #h(1em) #p.solution\\ \\ ]\n            }\n        }\n    }\n}\n```\n\nThen used in a document\n```typst\n#set heading(numbering: \"1.1\")\n\n#import \"/lib/exercises.typ\": problem, display-solutions\n\n= First Chapter\n\n#problem(\n    statement: [What is $1 + 1$ ?],\n    solution: [The answer is $2$]\n)\n\n#problem(\n    statement: [What is $1 + 2$ ?],\n    solution: [The answer is $3$]\n)\n\n= Second Chapter\n\n#problem(\n    statement: [Then what is $1 + 3$ ?],\n    solution: [The answer is $4$]\n)\n\n= The Solutions\n\n#display-solutions()\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 11.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1572
    },
    {
      "id": 12352,
      "post_number": 8,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-12T17:50:33.421Z",
      "updated_at": "2025-05-12T17:52:07.183Z",
      "cooked": "<p>I don’t follow on the numbering logic, but the issue is that you fetch updated counter state within the same context where it was updated. It won’t work, you need a new context.</p>\n<details><summary>Code</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let all-problems = state(\"all-problems\", ())\n#let problem-counter = counter(\"problem\")\n\n#let problem(statement: [], solution: none) = context {\n  let heading-numbers = counter(heading).get()\n  let head-maj = heading-numbers.first()\n  let prob-maj = problem-counter.get().first()\n  if prob-maj == 0 {\n    let head-min = heading-numbers.at(1, default: 1)\n    problem-counter.update((head-maj, head-min))\n  } else if head-maj == prob-maj {\n    problem-counter.step(level: 2)\n  } else {\n    problem-counter.update((head-maj, 1))\n  }\n  context {\n    let label = label(repr(problem-counter))\n    let problem-number = problem-counter.display()\n    par[_Exercise #problem-number:_ #statement#label]\n    let prob_maj = problem-counter.get().first()\n    let prob_min = problem-counter.get().at(1, default: 0)\n    let problem = (\n      solution: solution,\n      location: here(),\n      number: (prob_maj, prob_min),\n    )\n    all-problems.update(problems =&gt; problems + (problem,))\n  }\n}\n\n#let display-solutions() = context {\n  for p in all-problems.get() {\n    if p.solution != none {\n      let maj = p.number.at(0, default: 1)\n      let min = p.number.at(1, default: 1)\n      let exercise-link = link(p.location, emph[Exercise #maj.#min])\n      par[_Solution:_ #exercise-link #h(1em) #p.solution]\n    }\n  }\n}\n\n#set heading(numbering: \"1.1\")\n\n= First Chapter\n\n#problem(statement: [What is $1 + 1$ ?], solution: [The answer is $2$])\n\n#problem(statement: [What is $1 + 2$ ?], solution: [The answer is $3$])\n\n= Second Chapter\n\n#problem(statement: [Then what is $1 + 3$ ?], solution: [The answer is $4$])\n\n= The Solutions\n\n#display-solutions()\n</code></pre>\n</details>\n<p>You also get and override <code>problem-counter</code> in the same context, which is probably bad, but I don’t know how to get converge warning. Probably because the counter doesn’t update itself with its previous value, but rather with other counter’s value. I guess in its current form, it’s fine.</p>",
      "raw": "I don't follow on the numbering logic, but the issue is that you fetch updated counter state within the same context where it was updated. It won't work, you need a new context.\n\n<details><summary>Code</summary>\n\n```typ\n#let all-problems = state(\"all-problems\", ())\n#let problem-counter = counter(\"problem\")\n\n#let problem(statement: [], solution: none) = context {\n  let heading-numbers = counter(heading).get()\n  let head-maj = heading-numbers.first()\n  let prob-maj = problem-counter.get().first()\n  if prob-maj == 0 {\n    let head-min = heading-numbers.at(1, default: 1)\n    problem-counter.update((head-maj, head-min))\n  } else if head-maj == prob-maj {\n    problem-counter.step(level: 2)\n  } else {\n    problem-counter.update((head-maj, 1))\n  }\n  context {\n    let label = label(repr(problem-counter))\n    let problem-number = problem-counter.display()\n    par[_Exercise #problem-number:_ #statement#label]\n    let prob_maj = problem-counter.get().first()\n    let prob_min = problem-counter.get().at(1, default: 0)\n    let problem = (\n      solution: solution,\n      location: here(),\n      number: (prob_maj, prob_min),\n    )\n    all-problems.update(problems => problems + (problem,))\n  }\n}\n\n#let display-solutions() = context {\n  for p in all-problems.get() {\n    if p.solution != none {\n      let maj = p.number.at(0, default: 1)\n      let min = p.number.at(1, default: 1)\n      let exercise-link = link(p.location, emph[Exercise #maj.#min])\n      par[_Solution:_ #exercise-link #h(1em) #p.solution]\n    }\n  }\n}\n\n#set heading(numbering: \"1.1\")\n\n= First Chapter\n\n#problem(statement: [What is $1 + 1$ ?], solution: [The answer is $2$])\n\n#problem(statement: [What is $1 + 2$ ?], solution: [The answer is $3$])\n\n= Second Chapter\n\n#problem(statement: [Then what is $1 + 3$ ?], solution: [The answer is $4$])\n\n= The Solutions\n\n#display-solutions()\n```\n\n</details>\n\nYou also get and override `problem-counter` in the same context, which is probably bad, but I don't know how to get converge warning. Probably because the counter doesn't update itself with its previous value, but rather with other counter's value. I guess in its current form, it's fine.",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 30,
      "score": 26.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12353,
      "post_number": 9,
      "username": "John",
      "name": "John",
      "created_at": "2025-05-12T18:18:03.014Z",
      "updated_at": "2025-05-12T18:18:03.014Z",
      "cooked": "<p>Great, this works, and neatens the code up a bit. That’s the first typst code I wrote (other than the simplest functions).</p>\n<p>I replaced your <code>par</code> by <code>block</code> because “display” math equations cannot go inside paragraphs.</p>\n<p>The numbering logic so far is just “Excersise x.y”, where <code>x</code> is the major part of the heading counter, and y restarts at <code>1</code> in each heading. In other words, I am following a standard that is common in text books.</p>\n<p>I am not sure that this is the numbering I want in the end because my top level sections are really long; I may want to include the next heading level in the exercise. But, I wanted to start with something that is correct.</p>\n<p>To make it fancier, I might allow a user to pass a function (if this can be done in typst) or else options, to customize how solutions are displayed.</p>\n<p>The other thing would be to distinguish exercises by section, so that solutions could be organized by chapter.  But those can be added later.</p>",
      "raw": "Great, this works, and neatens the code up a bit. That's the first typst code I wrote (other than the simplest functions).\n\nI replaced your `par` by `block` because \"display\" math equations cannot go inside paragraphs.\n\nThe numbering logic so far is just \"Excersise x.y\", where `x` is the major part of the heading counter, and y restarts at `1` in each heading. In other words, I am following a standard that is common in text books.\n\nI am not sure that this is the numbering I want in the end because my top level sections are really long; I may want to include the next heading level in the exercise. But, I wanted to start with something that is correct.\n\nTo make it fancier, I might allow a user to pass a function (if this can be done in typst) or else options, to customize how solutions are displayed.\n\nThe other thing would be to distinguish exercises by section, so that solutions could be organized by chapter.  But those can be added later.",
      "reply_to_post_number": 8,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 30,
      "score": 16.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1572
    },
    {
      "id": 12355,
      "post_number": 10,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-12T19:03:45.662Z",
      "updated_at": "2025-05-12T19:03:45.662Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"John\" data-post=\"9\" data-topic=\"3999\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/j/5C0B42/48.png\" class=\"avatar\"> John:</div>\n<blockquote>\n<p>The numbering logic so far is just “Excersise x.y”, where <code>x</code> is the major part of the heading counter, and y restarts at <code>1</code> in each heading. In other words, I am following a standard that is common in text books.</p>\n</blockquote>\n</aside>\n<p>It’s not “the major part of the heading counter”, it’s the number of the top-/1st level heading. It’s not a versioning schema, it sounds confusing. Also y doesn’t restart after each heading, only after the top-level heading. Which is indeed a common per-section numbering, like in <a href=\"https://typst.app/universe/package/subpar\" class=\"inline-onebox\">subpar – Typst Universe</a> and <a href=\"https://typst.app/universe/package/i-figured\" class=\"inline-onebox\">i-figured – Typst Universe</a>.</p>\n<p>Here is a simple solution:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let all-problems = state(\"all-problems\", ())\n#let problem-counter = counter(\"problem\")\n\n#let problem(statement: [], solution: none) = {\n  problem-counter.step()\n  context {\n    let h1-num = counter(heading).get().first()\n    let problem-number = numbering(\"1.1\", h1-num, ..problem-counter.get())\n    let name = [Exercise #problem-number]\n    let problem = (solution: solution, location: here(), name: name)\n    all-problems.update(problems =&gt; problems + (problem,))\n    block[_#name:_ #statement]\n  }\n}\n\n#let display-solutions() = context for p in all-problems.get() {\n  if p.solution == none { continue }\n  let exercise-link = link(p.location, emph(p.name))\n  block[_Solution:_ #exercise-link#h(1em)#p.solution]\n}\n\n#set heading(numbering: \"1.1\")\n#show heading.where(level: 1): it =&gt; it + problem-counter.update(0)\n\n= First Chapter\n\n#problem(statement: [What is $1 + 1$ ?], solution: [The answer is $2$])\n\n#problem(statement: [What is $1 + 2$ ?], solution: [The answer is $3$])\n\n== Sub\n\n#problem(statement: [What is $1 + 3$ ?], solution: [The answer is $4$])\n\n= Second Chapter\n\n#problem(statement: [Then what is $1 + 4$ ?], solution: [The answer is $5$])\n\n= The Solutions\n\n#display-solutions()\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/d/d7ab13c20550c8f9dcef28d88438afe7157d58b6.png\" alt=\"image\" data-base62-sha1=\"uLTbC1RA4Ywx5WpSAtAgU37I3ky\" width=\"290\" height=\"385\"></p>",
      "raw": "[quote=\"John, post:9, topic:3999\"]\nThe numbering logic so far is just “Excersise x.y”, where `x` is the major part of the heading counter, and y restarts at `1` in each heading. In other words, I am following a standard that is common in text books.\n[/quote]\n\nIt's not \"the major part of the heading counter\", it's the number of the top-/1st level heading. It's not a versioning schema, it sounds confusing. Also y doesn't restart after each heading, only after the top-level heading. Which is indeed a common per-section numbering, like in https://typst.app/universe/package/subpar and https://typst.app/universe/package/i-figured.\n\nHere is a simple solution:\n\n```typ\n#let all-problems = state(\"all-problems\", ())\n#let problem-counter = counter(\"problem\")\n\n#let problem(statement: [], solution: none) = {\n  problem-counter.step()\n  context {\n    let h1-num = counter(heading).get().first()\n    let problem-number = numbering(\"1.1\", h1-num, ..problem-counter.get())\n    let name = [Exercise #problem-number]\n    let problem = (solution: solution, location: here(), name: name)\n    all-problems.update(problems => problems + (problem,))\n    block[_#name:_ #statement]\n  }\n}\n\n#let display-solutions() = context for p in all-problems.get() {\n  if p.solution == none { continue }\n  let exercise-link = link(p.location, emph(p.name))\n  block[_Solution:_ #exercise-link#h(1em)#p.solution]\n}\n\n#set heading(numbering: \"1.1\")\n#show heading.where(level: 1): it => it + problem-counter.update(0)\n\n= First Chapter\n\n#problem(statement: [What is $1 + 1$ ?], solution: [The answer is $2$])\n\n#problem(statement: [What is $1 + 2$ ?], solution: [The answer is $3$])\n\n== Sub\n\n#problem(statement: [What is $1 + 3$ ?], solution: [The answer is $4$])\n\n= Second Chapter\n\n#problem(statement: [Then what is $1 + 4$ ?], solution: [The answer is $5$])\n\n= The Solutions\n\n#display-solutions()\n```\n\n![image|290x385](upload://uLTbC1RA4Ywx5WpSAtAgU37I3ky.png)",
      "reply_to_post_number": 9,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 28,
      "score": 20.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12360,
      "post_number": 11,
      "username": "John",
      "name": "John",
      "created_at": "2025-05-12T20:13:30.168Z",
      "updated_at": "2025-05-12T20:13:30.168Z",
      "cooked": "<p>One thing that bothers me a bit is that this looks inefficient, like it makes a lot of order n copies.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">problems =&gt; problems + (problem,)\n</code></pre>\n<p>I made a few attempts to modify the content. But I’m kind of flying blind.</p>",
      "raw": "One thing that bothers me a bit is that this looks inefficient, like it makes a lot of order n copies.\n```typst\nproblems => problems + (problem,)\n```\nI made a few attempts to modify the content. But I'm kind of flying blind.",
      "reply_to_post_number": 9,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 26,
      "score": 15.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1572
    },
    {
      "id": 12361,
      "post_number": 12,
      "username": "John",
      "name": "John",
      "created_at": "2025-05-12T20:33:02.325Z",
      "updated_at": "2025-05-12T20:35:35.825Z",
      "cooked": "<p>I realize that these aren’t version numbers. But version numbers and the heading counter are sometimes represented in the same way, as a tuple of integers. And they both represent hierarchical organization. Of course, it’s better to use more appropriate language. I mean, I don’t want to start talking about a patch level headings.</p>\n<p>I was not clear when I wrote “y restarts at <code>1</code> in each heading”. I meant that it restarts at one at each top-level heading only. Both your previous solution and your latest do this correctly (assuming this is what one wants— I did)<br>\nBut, I like your latest code better. It looks cleaner and more flexible to me.</p>",
      "raw": "I realize that these aren't version numbers. But version numbers and the heading counter are sometimes represented in the same way, as a tuple of integers. And they both represent hierarchical organization. Of course, it's better to use more appropriate language. I mean, I don't want to start talking about a patch level headings.\n\nI was not clear when I wrote \"y restarts at `1` in each heading\". I meant that it restarts at one at each top-level heading only. Both your previous solution and your latest do this correctly (assuming this is what one wants--- I did)\nBut, I like your latest code better. It looks cleaner and more flexible to me.",
      "reply_to_post_number": 11,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 10.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1572
    },
    {
      "id": 12370,
      "post_number": 13,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-13T06:24:25.608Z",
      "updated_at": "2025-05-13T06:24:25.608Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"John\" data-post=\"11\" data-topic=\"3999\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/j/5C0B42/48.png\" class=\"avatar\"> John:</div>\n<blockquote>\n<p>One thing that bothers me a bit is that this looks inefficient, like it makes a lot of order n copies.</p>\n</blockquote>\n</aside>\n<p>If you like how fast the compilation is, then don’t bother with memory. Typst tries to be as efficient internally as it can, even if sometimes it looks inefficient in the code. Though it’s not perfect.</p>\n<aside class=\"quote no-group\" data-username=\"John\" data-post=\"12\" data-topic=\"3999\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/j/5C0B42/48.png\" class=\"avatar\"> John:</div>\n<blockquote>\n<p>a patch level headings</p>\n</blockquote>\n</aside>\n<p>The headings are only identified by their ordinal levels. The more appropriate/correct language you use, the easier it is to get the message across.</p>",
      "raw": "[quote=\"John, post:11, topic:3999\"]\nOne thing that bothers me a bit is that this looks inefficient, like it makes a lot of order n copies.\n[/quote]\n\nIf you like how fast the compilation is, then don't bother with memory. Typst tries to be as efficient internally as it can, even if sometimes it looks inefficient in the code. Though it's not perfect.\n\n[quote=\"John, post:12, topic:3999\"]\na patch level headings\n[/quote]\n\nThe headings are only identified by their ordinal levels. The more appropriate/correct language you use, the easier it is to get the message across.",
      "reply_to_post_number": 11,
      "reply_count": 0,
      "quote_count": 2,
      "like_count": 0,
      "reads": 22,
      "score": 4.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:48:08.997296"
}