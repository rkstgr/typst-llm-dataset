{
  "topic_metadata": {
    "id": 653,
    "title": "Why am I not able to time travel to find the value of a counter at a later point?",
    "slug": "why-am-i-not-able-to-time-travel-to-find-the-value-of-a-counter-at-a-later-point",
    "posts_count": 6,
    "created_at": "2024-09-24T22:20:47.176Z",
    "last_posted_at": "2024-09-25T00:59:32.162Z",
    "views": 89,
    "like_count": 3,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Eric",
    "tags": [
      "scripting",
      "counter",
      "context"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 922
  },
  "posts": [
    {
      "id": 2500,
      "post_number": 1,
      "username": "Bryn",
      "name": "Bryn Humberstone",
      "created_at": "2024-09-24T22:20:47.384Z",
      "updated_at": "2024-09-25T08:58:31.541Z",
      "cooked": "<p>I am trying to typeset an exam and I would like to have questions and subquestions. I would like the total number of marks for the subquestions to be at the top of the question, but I don’t seem to able to use <code>#context</code> with time-travelling to achieve this goal.</p>\n<p>I seem, at best, to be able to time travel to the second last subquestion, using <code>&lt;label2&gt;</code> in my code.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let qnum = counter(\"questionnumber\")\n#let subqnum = counter(\"subquestionnumber\")\n#let subqmarks = counter(\"subquestionmarks\")\n\n#let question(content) = [\n    #qnum.step()\n    #subqnum.update(0)  // any subquestions (a), (b), (c) start again...\n    #subqmarks.update(0)\n\n    *Question #qnum.display()*\n    (Total marks calculated as #context subqmarks.at(&lt;label1&gt;).first()? or #context subqmarks.at(&lt;label2&gt;).first()?)\n    #linebreak()\n    \n    #content \n    &lt;label1&gt;\n    Actual total marks for this question: #subqmarks.display()\n  ]\n\n#let subquestion(nummarks: 0, content) = [\n  #subqnum.step()\n  #subqmarks.update(n =&gt; n + nummarks)\n  #block[#subqnum.display(\"a.\") #content (#nummarks marks)]\n]\n\n\n#question[\n#subquestion(nummarks: 3)[ 1 + 1 ]\n#subquestion(nummarks: 4)[ 2 + 2 ]\n#subquestion(nummarks: 5)[ 3 + 3 ]\n#subquestion(nummarks: 6)[ 4 + 4 ]\n&lt;label2&gt;\n]\n</code></pre>\n<p>I do not understand why neither label1, nor label2, would tell me that the value of my <code>subqmarks</code> counter is 18 after all the subquestions have been considered.</p>\n<p>The output I receive is:<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/6c43d89c042b4d484bdbab49dee2ba780ec9d8fa.png\" data-download-href=\"https://forum.typst.app/uploads/default/6c43d89c042b4d484bdbab49dee2ba780ec9d8fa\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/6c43d89c042b4d484bdbab49dee2ba780ec9d8fa_2_345x186.png\" alt=\"image\" data-base62-sha1=\"frKVrmrJllRWItJy07OQUPjbtW2\" width=\"345\" height=\"186\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/6c43d89c042b4d484bdbab49dee2ba780ec9d8fa_2_345x186.png, https://forum.typst.app/uploads/default/optimized/1X/6c43d89c042b4d484bdbab49dee2ba780ec9d8fa_2_517x279.png 1.5x, https://forum.typst.app/uploads/default/optimized/1X/6c43d89c042b4d484bdbab49dee2ba780ec9d8fa_2_690x372.png 2x\" data-dominant-color=\"F4F4F4\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1138×614 75.5 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Moreover, if there is a much better way to achieve my goal, then I’d also like to hear that because even if I understand this context stuff, I still have the problem that I need to generate and refer to a unique label for each question.</p>",
      "raw": "I am trying to typeset an exam and I would like to have questions and subquestions. I would like the total number of marks for the subquestions to be at the top of the question, but I don't seem to able to use `#context` with time-travelling to achieve this goal.\n\nI seem, at best, to be able to time travel to the second last subquestion, using `<label2>` in my code.\n\n```typ\n#let qnum = counter(\"questionnumber\")\n#let subqnum = counter(\"subquestionnumber\")\n#let subqmarks = counter(\"subquestionmarks\")\n\n#let question(content) = [\n    #qnum.step()\n    #subqnum.update(0)  // any subquestions (a), (b), (c) start again...\n    #subqmarks.update(0)\n\n    *Question #qnum.display()*\n    (Total marks calculated as #context subqmarks.at(<label1>).first()? or #context subqmarks.at(<label2>).first()?)\n    #linebreak()\n    \n    #content \n    <label1>\n    Actual total marks for this question: #subqmarks.display()\n  ]\n\n#let subquestion(nummarks: 0, content) = [\n  #subqnum.step()\n  #subqmarks.update(n => n + nummarks)\n  #block[#subqnum.display(\"a.\") #content (#nummarks marks)]\n]\n\n\n#question[\n#subquestion(nummarks: 3)[ 1 + 1 ]\n#subquestion(nummarks: 4)[ 2 + 2 ]\n#subquestion(nummarks: 5)[ 3 + 3 ]\n#subquestion(nummarks: 6)[ 4 + 4 ]\n<label2>\n]\n```\n\nI do not understand why neither label1, nor label2, would tell me that the value of my `subqmarks` counter is 18 after all the subquestions have been considered.\n\nThe output I receive is:\n![image|690x372, 50%](upload://frKVrmrJllRWItJy07OQUPjbtW2.png)\n\nMoreover, if there is a much better way to achieve my goal, then I'd also like to hear that because even if I understand this context stuff, I still have the problem that I need to generate and refer to a unique label for each question.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 111.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 389
    },
    {
      "id": 2502,
      "post_number": 2,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-09-24T22:44:01.239Z",
      "updated_at": "2024-09-24T22:45:06.382Z",
      "cooked": "<p>When you use labels the way you do in</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#content \n&lt;label1&gt;\n\n// or later\n\n#subquestion(nummarks: 6)[ 4 + 4 ]\n&lt;label2&gt;\n</code></pre>\n<p>the label is attached to the previous element (<code>#content</code> or the <code>#subquestion</code>). The associated location of these elements point to where they begin, which is <em>before</em> the counter is stepped.</p>\n<p>What you want instead, is to have the label at an element <em>after</em> the content that contains the counter step. You can achieve this, for example, by attaching the label to an empty element:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#content \n#[] &lt;label1&gt;\n</code></pre>\n<hr>\n<p>For your other problem of getting a unique label, you could use the current value of the <code>#qnum</code> counter, for example:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let question(content) = {\n  qnum.step()\n  subqnum.update(0)  // any subquestions (a), (b), (c) start again...\n  subqmarks.update(0)\n\n  context [\n    #let lbl = label(\"after-question-\" + str(qnum.get().first()))\n    \n    *Question #qnum.display()*\n    (Total marks calculated as #context subqmarks.at(lbl).first())\n\n    #content\n\n    #[] #lbl\n  ]\n}\n</code></pre>",
      "raw": "When you use labels the way you do in\n```typ\n#content \n<label1>\n\n// or later\n\n#subquestion(nummarks: 6)[ 4 + 4 ]\n<label2>\n```\nthe label is attached to the previous element (`#content` or the `#subquestion`). The associated location of these elements point to where they begin, which is _before_ the counter is stepped.\n\nWhat you want instead, is to have the label at an element _after_ the content that contains the counter step. You can achieve this, for example, by attaching the label to an empty element:\n```typ\n#content \n#[] <label1>\n```\n---\n\nFor your other problem of getting a unique label, you could use the current value of the `#qnum` counter, for example:\n```typ\n#let question(content) = {\n  qnum.step()\n  subqnum.update(0)  // any subquestions (a), (b), (c) start again...\n  subqmarks.update(0)\n\n  context [\n    #let lbl = label(\"after-question-\" + str(qnum.get().first()))\n    \n    *Question #qnum.display()*\n    (Total marks calculated as #context subqmarks.at(lbl).first())\n\n    #content\n\n    #[] #lbl\n  ]\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 30,
      "score": 21.0,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 2503,
      "post_number": 3,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-09-24T23:11:05.229Z",
      "updated_at": "2024-09-24T23:11:05.229Z",
      "cooked": "<p>As an alternative approach, you can also use a separate marks counter for each question, and combine the question and sub-question counter into one. This eliminates the need for any labels:</p>\n<details>\n<summary>\nImplementation</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let question-counter = counter(\"question\")\n#let marks-counter(num) = counter(\"marks-\" + str(num))\n\n#let question(content) = {\n  // Step main number, reset any sub-question number.\n  question-counter.update((num, ..) =&gt; num + 1)\n\n  context [\n    #let (num, ..) = question-counter.get()\n    #let total-marks = marks-counter(num).final().first()\n    \n    *Question #num* (Total marks calculated as #total-marks)\n    \n    #content\n  ]\n}\n\n#let subquestion(nummarks: 0, content) = {\n  // Step only the sub-question number.\n  question-counter.step(level: 2)\n  \n  context [\n    #let (num, sub) = question-counter.get()\n\n    // Update marks counter for this question number.\n    #marks-counter(num).update(n =&gt; n + nummarks)\n\n    #block[#numbering(\"(a)\", sub) #content (#nummarks marks)]\n  ]\n}\n</code></pre>\n</details>\n<p>Whether one approach is better than the other is hard to say, as whatever works is good enough <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "As an alternative approach, you can also use a separate marks counter for each question, and combine the question and sub-question counter into one. This eliminates the need for any labels:\n\n[details=Implementation]\n```typ\n#let question-counter = counter(\"question\")\n#let marks-counter(num) = counter(\"marks-\" + str(num))\n\n#let question(content) = {\n  // Step main number, reset any sub-question number.\n  question-counter.update((num, ..) => num + 1)\n\n  context [\n    #let (num, ..) = question-counter.get()\n    #let total-marks = marks-counter(num).final().first()\n    \n    *Question #num* (Total marks calculated as #total-marks)\n    \n    #content\n  ]\n}\n\n#let subquestion(nummarks: 0, content) = {\n  // Step only the sub-question number.\n  question-counter.step(level: 2)\n  \n  context [\n    #let (num, sub) = question-counter.get()\n\n    // Update marks counter for this question number.\n    #marks-counter(num).update(n => n + nummarks)\n\n    #block[#numbering(\"(a)\", sub) #content (#nummarks marks)]\n  ]\n}\n```\n[/details]\n\nWhether one approach is better than the other is hard to say, as whatever works is good enough :wink:",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 24,
      "score": 24.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 2506,
      "post_number": 4,
      "username": "Bryn",
      "name": "Bryn Humberstone",
      "created_at": "2024-09-24T23:59:00.728Z",
      "updated_at": "2024-09-24T23:59:00.728Z",
      "cooked": "<p>I prefer your alternative implementation but accepted your first answer since that addressed my immediate question, regarding being able to time travel. I hadn’t realised that labels were like functions which applied to the previous item, so that answer was helpful.</p>\n<p>However, now that I have tried your alternative approach, I am faced with a new problem, namely, how to add up all the marks for the paper and get the total.</p>\n<p>I added to the top:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let overall-marks = counter(\"overall\")\n</code></pre>\n<p>and then edited your definition of <code>question</code>, partly so I could have questions with a number of marks on their own and no subquestions:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let question(nummarks: 0, content) = {\n  question-counter.update((num, ..) =&gt; num + 1)\n\n  context [\n    #let (num, ..) = question-counter.get()\n    #let total-marks = if nummarks == 0 { marks-counter(num).final().first() } else { nummarks }\n    #overall-marks.update(n =&gt; n + total-marks)\n\n    *Question #num* (#total-marks marks)\n\n    #content\n\n    The overall marks is now at #overall-marks.display()\n  ]\n}\n</code></pre>\n<p>However, this also seems to have the issue of always being a question behind in its totals (i.e., after the first question is printed, it says “The overall marks is now at 0.”)</p>\n<p>Do you have any advice for how I can flesh out your alternative approach to keep track of the total marks too?</p>",
      "raw": "I prefer your alternative implementation but accepted your first answer since that addressed my immediate question, regarding being able to time travel. I hadn't realised that labels were like functions which applied to the previous item, so that answer was helpful.\n\nHowever, now that I have tried your alternative approach, I am faced with a new problem, namely, how to add up all the marks for the paper and get the total.\n\nI added to the top:\n\n```typ\n#let overall-marks = counter(\"overall\")\n```\n\nand then edited your definition of `question`, partly so I could have questions with a number of marks on their own and no subquestions:\n\n```typ\n#let question(nummarks: 0, content) = {\n  question-counter.update((num, ..) => num + 1)\n\n  context [\n    #let (num, ..) = question-counter.get()\n    #let total-marks = if nummarks == 0 { marks-counter(num).final().first() } else { nummarks }\n    #overall-marks.update(n => n + total-marks)\n\n    *Question #num* (#total-marks marks)\n\n    #content\n\n    The overall marks is now at #overall-marks.display()\n  ]\n}\n```\n\nHowever, this also seems to have the issue of always being a question behind in its totals (i.e., after the first question is printed, it says \"The overall marks is now at 0.\")\n\nDo you have any advice for how I can flesh out your alternative approach to keep track of the total marks too?",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 4.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 389
    },
    {
      "id": 2507,
      "post_number": 5,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-09-25T00:17:45.545Z",
      "updated_at": "2024-09-25T00:19:54.503Z",
      "cooked": "<p>The problem here is that the counter update and counter display are within the same context block, in which the context represents the state before the <code>overall-marks</code> counter was updated. Thus, when the counter is displayed, it shows the value of the previous question.</p>\n<p>To fix this, you can simply move the counter display in a separate context expression:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let question(...) = {\n  question-counter.update(...)\n\n  context [\n    ... #overall-marks.update(...)\n\n    Overall: #context overall-marks.display()\n  ]\n}\n</code></pre>",
      "raw": "The problem here is that the counter update and counter display are within the same context block, in which the context represents the state before the `overall-marks` counter was updated. Thus, when the counter is displayed, it shows the value of the previous question.\n\nTo fix this, you can simply move the counter display in a separate context expression:\n```typ\n#let question(...) = {\n  question-counter.update(...)\n\n  context [\n    ... #overall-marks.update(...)\n\n    Overall: #context overall-marks.display()\n  ]\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 21,
      "score": 24.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 2508,
      "post_number": 6,
      "username": "Bryn",
      "name": "Bryn Humberstone",
      "created_at": "2024-09-25T00:59:32.162Z",
      "updated_at": "2024-09-25T00:59:32.162Z",
      "cooked": "<p>Thanks, this is excellent. I see that there is some discussion of <code>#context</code> within <code>context</code> in the <a href=\"https://typst.app/docs/reference/context/\">Typst documentation</a>, but I must admit I did not really understand it (as made evident by the questions above). I wonder if anyone will make a video explaining it really clearly for those of us who might have grown too lazy to read documentation thoroughly!</p>",
      "raw": "Thanks, this is excellent. I see that there is some discussion of `#context` within `context` in the [Typst documentation](https://typst.app/docs/reference/context/), but I must admit I did not really understand it (as made evident by the questions above). I wonder if anyone will make a video explaining it really clearly for those of us who might have grown too lazy to read documentation thoroughly!",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 20,
      "score": 4.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 389
    }
  ],
  "scraped_at": "2025-06-10T09:58:07.497253"
}