{
  "topic_metadata": {
    "id": 3697,
    "title": "Space inserted to the end of a line in the source code",
    "slug": "space-inserted-to-the-end-of-a-line-in-the-source-code",
    "posts_count": 11,
    "created_at": "2025-04-17T08:10:04.941Z",
    "last_posted_at": "2025-04-17T16:08:47.079Z",
    "views": 72,
    "like_count": 11,
    "reply_count": 7,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "bluss",
    "tags": [
      "spacing"
    ],
    "category_id": 5,
    "participant_count": 5,
    "word_count": 1318
  },
  "posts": [
    {
      "id": 11209,
      "post_number": 1,
      "username": "Roberto",
      "name": "Roberto Giacomelli",
      "created_at": "2025-04-17T08:10:05.098Z",
      "updated_at": "2025-04-17T10:49:42.045Z",
      "cooked": "<p>Hi there,<br>\nI’m new of Typst and I started to explore the user experience as an old LaTeX user.<br>\nI’m writing a code to typeset multiple boxes one after the other.<br>\nEvery box is width 32pt and has a centered text inside as follow:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#[\n    #set box(\n      outset: 0pt,\n      inset: 0pt,\n      stroke:0.2pt,\n      width:32pt,\n    )\n    #set align(center)\n    #box[1]\n    #box[4]\n    #box[6]\n    #box[4]\n    #box[1]\n]\n</code></pre>\n<p>Typst leaves a space among the boxes. To avoid those spaces the only way I found is make a one line istruction like:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#[\n    // options as before\n    #box[1]#box[4]#box[6]#box[4]#box[1]\n]\n</code></pre>\n<p>It’s not a problem but if the content inside the boxes becomes more complex than a single letter the user may will write every box in a single dedicated line for clearness.<br>\nIn LaTeX is simply a matter to add an ending comment sign % but in Typst this is not the case.<br>\nHow to eliminate the spurious spaces? Something of a par option?<br>\nThank you.<br>\nRoberto</p>",
      "raw": "Hi there,\nI'm new of Typst and I started to explore the user experience as an old LaTeX user.\nI'm writing a code to typeset multiple boxes one after the other.\nEvery box is width 32pt and has a centered text inside as follow:\n\n```typ\n#[\n    #set box(\n      outset: 0pt,\n      inset: 0pt,\n      stroke:0.2pt,\n      width:32pt,\n    )\n    #set align(center)\n    #box[1]\n    #box[4]\n    #box[6]\n    #box[4]\n    #box[1]\n]\n```\n\nTypst leaves a space among the boxes. To avoid those spaces the only way I found is make a one line istruction like:\n\n```typ\n#[\n    // options as before\n    #box[1]#box[4]#box[6]#box[4]#box[1]\n]\n```\n\nIt's not a problem but if the content inside the boxes becomes more complex than a single letter the user may will write every box in a single dedicated line for clearness.\nIn LaTeX is simply a matter to add an ending comment sign % but in Typst this is not the case.\nHow to eliminate the spurious spaces? Something of a par option?\nThank you.\nRoberto",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 80.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1471
    },
    {
      "id": 11213,
      "post_number": 2,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-04-17T08:55:41.676Z",
      "updated_at": "2025-04-17T08:55:41.676Z",
      "cooked": "<p>You can try this syntax and see if you like it as an alternative. <code>#</code> is for entering code mode and <code>(...)</code> is an array. Each box is <em>content</em> so it can be joined without separator in the end.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">    #(\n      box[1],\n      box[4],\n      box[6],\n      box[4],\n      box[1],\n    ).join()\n</code></pre>",
      "raw": "You can try this syntax and see if you like it as an alternative. `#` is for entering code mode and `(...)` is an array. Each box is _content_ so it can be joined without separator in the end.\n\n```typ\n    #(\n      box[1],\n      box[4],\n      box[6],\n      box[4],\n      box[1],\n    ).join()\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 28,
      "score": 10.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 11216,
      "post_number": 3,
      "username": "Roberto",
      "name": "Roberto Giacomelli",
      "created_at": "2025-04-17T09:16:09.944Z",
      "updated_at": "2025-04-17T09:16:09.944Z",
      "cooked": "<p>Thanks. Interesting solution almost unexpected.</p>\n<p>So, the engine always insert a space in order to typeset consecutive non-empty lines. I’m wondering if this can affect the system in impossible situations.</p>\n<p>After some attempts, the answer is no, you can relax <img src=\"https://forum.typst.app/images/emoji/apple/grinning.png?v=12\" title=\":grinning:\" class=\"emoji\" alt=\":grinning:\" loading=\"lazy\" width=\"20\" height=\"20\">. In fact the long comment form works:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#[  #set box(\n    outset: 0pt,\n    inset: 0pt,\n    stroke:0.2pt,\n    width:32pt,\n  )\n\n  #box[#align(center)[ 1 ]]/*\n  */#box[#align(center)[ 4 ]]/*\n  */#box[#align(center)[ 6 ]]/*\n  */#box[#align(center)[ 4 ]]/*\n  */#box[#align(center)[ 1 ]]\n]\n</code></pre>\n<p>Respect the previuos code now the alignment is managed inside each box and the entire sequence is typeset aligned to the left as expected.</p>\n<p>Therefore, the single line comment doesn’t works in this case.</p>\n<p>R.</p>",
      "raw": "Thanks. Interesting solution almost unexpected.\n\nSo, the engine always insert a space in order to typeset consecutive non-empty lines. I'm wondering if this can affect the system in impossible situations.\n\nAfter some attempts, the answer is no, you can relax :grinning:. In fact the long comment form works:\n\n```typ\n#[  #set box(\n    outset: 0pt,\n    inset: 0pt,\n    stroke:0.2pt,\n    width:32pt,\n  )\n\n  #box[#align(center)[ 1 ]]/*\n  */#box[#align(center)[ 4 ]]/*\n  */#box[#align(center)[ 6 ]]/*\n  */#box[#align(center)[ 4 ]]/*\n  */#box[#align(center)[ 1 ]]\n]\n```\nRespect the previuos code now the alignment is managed inside each box and the entire sequence is typeset aligned to the left as expected.\n\nTherefore, the single line comment doesn't works in this case.\n\nR.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 10.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1471
    },
    {
      "id": 11217,
      "post_number": 4,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-04-17T09:22:56.184Z",
      "updated_at": "2025-04-17T09:32:52.759Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Roberto\" data-post=\"3\" data-topic=\"3697\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/roberto/48/2562_2.png\" class=\"avatar\"> Roberto:</div>\n<blockquote>\n<p>So, the engine always insert a space in order to typeset consecutive non-empty lines. I’m wondering if this can affect the system in impossible situations.</p>\n</blockquote>\n</aside>\n<p>Maybe there’s a way to influence that - if someone knows maybe they can answer, I don’t.</p>\n<p>I think using a show rule to apply centering is a good way to handle it, something like this</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">    #show text: set align(center)\n    #(\n      box[1],\n      box[4],\n      box[6],\n      box[4],\n      box[1]\n    ).join()\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/5/55a9f8f7240174f4e122c2bbe39ca34e44adfbe9.png\" alt=\"bild\" data-base62-sha1=\"cdOKsPm48NUoGEk2XA9RkxSCkgF\" width=\"469\" height=\"37\"></p>\n<p>Or - I’m agnostic about how you solve the spacing issue, you can help yourself and define a “new kind of box” to make the repetition easier this way too, as an alternative</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">    // #let cbox = x =&gt; box(align(center, x))  /* easy version */\n    #let cbox(body, ..args) = box(..args, align(center, body))  /* general version */\n    #cbox[1]/*\n  */#cbox[4]/*\n  */#cbox[6]/*\n  */#cbox[4]/*\n  */#cbox[1]\n</code></pre>",
      "raw": "[quote=\"Roberto, post:3, topic:3697\"]\nSo, the engine always insert a space in order to typeset consecutive non-empty lines. I’m wondering if this can affect the system in impossible situations.\n[/quote]\n\nMaybe there's a way to influence that - if someone knows maybe they can answer, I don't.\n\nI think using a show rule to apply centering is a good way to handle it, something like this\n\n```typ\n    #show text: set align(center)\n    #(\n      box[1],\n      box[4],\n      box[6],\n      box[4],\n      box[1]\n    ).join()\n```\n\n![bild|469x37](upload://cdOKsPm48NUoGEk2XA9RkxSCkgF.png)\n\nOr - I'm agnostic about how you solve the spacing issue, you can help yourself and define a \"new kind of box\" to make the repetition easier this way too, as an alternative\n\n```typ\n    // #let cbox = x => box(align(center, x))  /* easy version */\n    #let cbox(body, ..args) = box(..args, align(center, body))  /* general version */\n    #cbox[1]/*\n  */#cbox[4]/*\n  */#cbox[6]/*\n  */#cbox[4]/*\n  */#cbox[1]\n```",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 1,
      "reads": 26,
      "score": 25.2,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 11218,
      "post_number": 5,
      "username": "Roberto",
      "name": "Roberto Giacomelli",
      "created_at": "2025-04-17T09:41:50.177Z",
      "updated_at": "2025-04-17T09:41:50.177Z",
      "cooked": "<p>Very enjoyable code!<br>\nThanks a lot.</p>\n<p>I third way is typeset the boxes inside a code block:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#{\n  set box(\n    outset: 0pt,\n    inset: 0pt,\n    stroke:0.2pt,\n    width:32pt,\n  )\n\nbox[#align(center)[ 1 ]]\nbox[#align(center)[ 4 ]]\nbox[#align(center)[ 6 ]]\nbox[#align(center)[ 4 ]]\nbox[#align(center)[ 1 ]]\n}\n</code></pre>\n<p>Or better using a for loop:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let mycenteredbox = x =&gt; box(\n  align(center, x),\n  stroke:0.2pt,\n  width:32pt,\n)\n\n#for value in (1, 4, 6, 4, 1)  {\n  [#mycenteredbox[#value]]\n}\n</code></pre>\n<p>Great user experience!<br>\nAgain, thank you.</p>",
      "raw": "Very enjoyable code!\nThanks a lot.\n\nI third way is typeset the boxes inside a code block:\n```typ\n#{\n  set box(\n    outset: 0pt,\n    inset: 0pt,\n    stroke:0.2pt,\n    width:32pt,\n  )\n\nbox[#align(center)[ 1 ]]\nbox[#align(center)[ 4 ]]\nbox[#align(center)[ 6 ]]\nbox[#align(center)[ 4 ]]\nbox[#align(center)[ 1 ]]\n}\n```\n\nOr better using a for loop:\n```typ\n#let mycenteredbox = x => box(\n  align(center, x),\n  stroke:0.2pt,\n  width:32pt,\n)\n\n#for value in (1, 4, 6, 4, 1)  {\n  [#mycenteredbox[#value]]\n}\n```\n\nGreat user experience!\nAgain, thank you.",
      "reply_to_post_number": 4,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 2,
      "reads": 25,
      "score": 50.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1471
    },
    {
      "id": 11220,
      "post_number": 6,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-04-17T10:11:27.348Z",
      "updated_at": "2025-04-17T10:11:33.766Z",
      "cooked": "<p>Unless you have some ulterior motive to use boxes, I would recommend you to use a <a href=\"https://typst.app/docs/reference/layout/grid/\"><code>grid</code></a> here. It makes the code a lot cleaner and you can still easily also adjust the width, stroke, inset etc…</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#grid(\n  columns: 5 * (32pt,),\n  align: center,\n  stroke: 0.2pt,\n  ..(1, 4, 6, 4, 1).map(str),\n)\n</code></pre>",
      "raw": "Unless you have some ulterior motive to use boxes, I would recommend you to use a [`grid`](https://typst.app/docs/reference/layout/grid/) here. It makes the code a lot cleaner and you can still easily also adjust the width, stroke, inset etc...\n\n```typ\n#grid(\n  columns: 5 * (32pt,),\n  align: center,\n  stroke: 0.2pt,\n  ..(1, 4, 6, 4, 1).map(str),\n)\n```",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 25,
      "score": 40.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 69
    },
    {
      "id": 11221,
      "post_number": 7,
      "username": "Roberto",
      "name": "Roberto Giacomelli",
      "created_at": "2025-04-17T10:17:20.128Z",
      "updated_at": "2025-04-17T10:17:20.128Z",
      "cooked": "<p>Thank you <a class=\"mention\" href=\"/u/janekfleper\">@janekfleper</a> .</p>\n<p>At the moment I don’t understand the double dot syntax.<br>\nSome further experiment is needed.<br>\nActually I’m trying to typeset a Pascal Triangle as a toy problem.<br>\nI’ll upload the code here when finished.<br>\nNice community.</p>",
      "raw": "Thank you @janekfleper .\n\nAt the moment I don't understand the double dot syntax.\nSome further experiment is needed.\nActually I'm trying to typeset a Pascal Triangle as a toy problem.\nI'll upload the code here when finished.\nNice community.",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 9.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1471
    },
    {
      "id": 11222,
      "post_number": 8,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-04-17T10:48:37.470Z",
      "updated_at": "2025-04-17T10:48:37.470Z",
      "cooked": "<p>Yet another option is to collapse the space between the boxes with a weak horizontal space:</p>\n<details>\n<summary>\nExplicit weak spacing</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">Explicit weak spacing\n#[\n    #set box(\n      outset: 0pt,\n      inset: 0pt,\n      stroke:0.2pt,\n      width:32pt,\n    )\n    #set align(center)\n    #box[1]\n    #h(0pt, weak: true)\n    #box[4]\n    #h(0pt, weak: true)\n    #box[6]\n    #h(0pt, weak: true)\n    #box[4]\n    #h(0pt, weak: true)\n    #box[1]\n    Next content\n]\n</code></pre>\n</details>\n<p>Which is pretty verbose and can be shortened with a custom function:</p>\n<details>\n<summary>\nCustom function that adds weak spacing after each box</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">Custom function that adds weak spacing after each box\n#[\n    #let cbox(body) = {\n      box(\n        outset: 0pt,\n        inset: 0pt,\n        stroke:0.2pt,\n        width:32pt,\n        body\n      )\n      h(0pt, weak: true)\n  }\n    #set align(center)\n    #cbox[1]\n    #cbox[4]\n    #cbox[6]\n    #cbox[4]\n    #cbox[1]\n    Next content\n]\n</code></pre>\n</details>\n<p>But that alters the spacing to the next piece of content that comes after, so defining your boxes as an <code>array</code> then <code>join</code>ing them as <a class=\"mention\" href=\"/u/bluss\">@bluss</a> suggested is probably better.  Unless you want the next content directly next to your boxes of course.</p>\n<p>Results of each option:<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/d/dc95d96cf652a3b88ecf8b86d0d06fa738fcac69.png\" alt=\"image\" data-base62-sha1=\"vto5Q2DQ5dop66TpsOKO8DOfttD\" width=\"663\" height=\"251\"></p>",
      "raw": "Yet another option is to collapse the space between the boxes with a weak horizontal space:\n\n[details=\"Explicit weak spacing\"]\n```typ\nExplicit weak spacing\n#[\n    #set box(\n      outset: 0pt,\n      inset: 0pt,\n      stroke:0.2pt,\n      width:32pt,\n    )\n    #set align(center)\n    #box[1]\n    #h(0pt, weak: true)\n    #box[4]\n    #h(0pt, weak: true)\n    #box[6]\n    #h(0pt, weak: true)\n    #box[4]\n    #h(0pt, weak: true)\n    #box[1]\n    Next content\n]\n```\n[/details]\n\nWhich is pretty verbose and can be shortened with a custom function:\n\n[details=\"Custom function that adds weak spacing after each box\"]\n```typ\nCustom function that adds weak spacing after each box\n#[\n    #let cbox(body) = {\n      box(\n        outset: 0pt,\n        inset: 0pt,\n        stroke:0.2pt,\n        width:32pt,\n        body\n      )\n      h(0pt, weak: true)\n  }\n    #set align(center)\n    #cbox[1]\n    #cbox[4]\n    #cbox[6]\n    #cbox[4]\n    #cbox[1]\n    Next content\n]\n```\n[/details]\n\nBut that alters the spacing to the next piece of content that comes after, so defining your boxes as an `array` then `join`ing them as @bluss suggested is probably better.  Unless you want the next content directly next to your boxes of course.\n\nResults of each option:\n![image|663x251](upload://vto5Q2DQ5dop66TpsOKO8DOfttD.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 23,
      "score": 24.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 11224,
      "post_number": 9,
      "username": "Roberto",
      "name": "Roberto Giacomelli",
      "created_at": "2025-04-17T11:14:08.692Z",
      "updated_at": "2025-04-17T11:17:28.751Z",
      "cooked": "<p>I’m concerned this is out of topic but is so funny!<br>\nMy best to build a triangle Pascal:</p>\n<details>\n<summary>\nA solution for typeset the Pascal's Triangle</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">= Pascal's Triangle\n\n#{\n  let mycenteredbox = x =&gt; box(\n    align(center, [#x]),\n    //stroke:0.2pt,\n    width:32pt,\n  )\n\n  // function that step forward a triangle row\n  let step_row(r) = {\n      for i in range(r.len() - 1, 0, step: -1) {\n      r.at(i) = r.at(i) + r.at(i - 1)\n    }\n    r.push(1)\n    return r\n  }\n\n  // print a single row\n  let typeset_row( row ) = {\n    for value in row {\n      mycenteredbox(value)\n    }\n    // ending newline\n    [\n\n    ]\n  }\n  // print the entire Triangle\n  set align(center)\n  let row = ()\n  for _ in range(0, 13) {\n    row = step_row(row)\n    typeset_row(row)\n  }\n}\n</code></pre>\n</details>\n<p>The code works and compile fast even if at every row a new array is created. The original idea for the <code>step_row()</code> function was adding numbers and push a new 1 element to the same array, the only one growing array.<br>\nUnfortunately the edited array did not survive out of the function. It seam that global modification is not possible in contrary to what the docs of pure function says (array.push() should be works locally over a global variable).</p>\n<p>I think this is absolutely normal. Typst has a very new syntax to learn for me.</p>\n<p>So the next step is to use <a class=\"mention\" href=\"/u/janekfleper\">@janekfleper</a> suggestion and cleaned the code and substitute <code>box</code>es with a single <code>grid</code>.<br>\nThank you.</p>",
      "raw": "I'm concerned this is out of topic but is so funny!\nMy best to build a triangle Pascal:\n\n[details=\"A solution for typeset the Pascal's Triangle\"]\n```typ\n= Pascal's Triangle\n\n#{\n  let mycenteredbox = x => box(\n    align(center, [#x]),\n    //stroke:0.2pt,\n    width:32pt,\n  )\n\n  // function that step forward a triangle row\n  let step_row(r) = {\n      for i in range(r.len() - 1, 0, step: -1) {\n      r.at(i) = r.at(i) + r.at(i - 1)\n    }\n    r.push(1)\n    return r\n  }\n\n  // print a single row\n  let typeset_row( row ) = {\n    for value in row {\n      mycenteredbox(value)\n    }\n    // ending newline\n    [\n\n    ]\n  }\n  // print the entire Triangle\n  set align(center)\n  let row = ()\n  for _ in range(0, 13) {\n    row = step_row(row)\n    typeset_row(row)\n  }\n}\n```\n[/details]\n\nThe code works and compile fast even if at every row a new array is created. The original idea for the `step_row()` function was adding numbers and push a new 1 element to the same array, the only one growing array.\nUnfortunately the edited array did not survive out of the function. It seam that global modification is not possible in contrary to what the docs of pure function says (array.push() should be works locally over a global variable).\n\nI think this is absolutely normal. Typst has a very new syntax to learn for me.\n\nSo the next step is to use @janekfleper suggestion and cleaned the code and substitute `box`es with a single `grid`.\nThank you.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 4.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1471
    },
    {
      "id": 11228,
      "post_number": 10,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-04-17T12:09:50.154Z",
      "updated_at": "2025-04-17T12:10:55.205Z",
      "cooked": "<p>The double dot syntax is the spread operator which basically turns an array into a bunch of elements. You need this here since a grid expects the content for the individual cells as separate arguments. The code in my example turns the array of integers into an array of strings and then “spreads” the array into the grid. The verbose version would be:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#grid(\n  columns: 5 * (32pt,),\n  align: center,\n  stroke: 0.2pt,\n  \"1\", \"4\", \"6\", \"4\", \"1\",\n)\n</code></pre>\n<p>If you just want to show your code beyond the scope of the question, feel free to post it in the <a class=\"hashtag-cooked\" href=\"/c/showcase/6\" data-type=\"category\" data-slug=\"showcase\" data-id=\"6\"><span class=\"hashtag-icon-placeholder\"><svg class=\"fa d-icon d-icon-square-full svg-icon svg-node\"><use href=\"#square-full\"></use></svg></span><span>Showcase</span></a> category. You can then just add a reference to <em>this</em> post.</p>",
      "raw": "The double dot syntax is the spread operator which basically turns an array into a bunch of elements. You need this here since a grid expects the content for the individual cells as separate arguments. The code in my example turns the array of integers into an array of strings and then \"spreads\" the array into the grid. The verbose version would be:\n\n```typ\n#grid(\n  columns: 5 * (32pt,),\n  align: center,\n  stroke: 0.2pt,\n  \"1\", \"4\", \"6\", \"4\", \"1\",\n)\n```\n\nIf you just want to show your code beyond the scope of the question, feel free to post it in the #showcase category. You can then just add a reference to _this_ post.",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 22,
      "score": 29.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 69
    },
    {
      "id": 11246,
      "post_number": 11,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-17T16:08:47.079Z",
      "updated_at": "2025-04-17T16:10:29.454Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Roberto\" data-post=\"5\" data-topic=\"3697\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/roberto/48/2562_2.png\" class=\"avatar\"> Roberto:</div>\n<blockquote>\n<p>I third way is typeset the boxes inside a code block:</p>\n</blockquote>\n</aside>\n<p>For your example, this is the canonical way (although the centering has side effects here). In code mode Typst only inserts what you tell it to insert, but in markup mode there are things like new lines, line breaks, par breaks, etc.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#{\n  set box(outset: 0pt, inset: 0pt, stroke: 0.2pt, width: 32pt)\n  set align(center)\n  box[1]\n  box[4]\n  box[6]\n  box[4]\n  box[1]\n}\n</code></pre>\n<p>But this approach is great if we ignore all other things like the intended use, etc.</p>",
      "raw": "[quote=\"Roberto, post:5, topic:3697\"]\nI third way is typeset the boxes inside a code block:\n[/quote]\n\nFor your example, this is the canonical way (although the centering has side effects here). In code mode Typst only inserts what you tell it to insert, but in markup mode there are things like new lines, line breaks, par breaks, etc.\n\n```typ\n#{\n  set box(outset: 0pt, inset: 0pt, stroke: 0.2pt, width: 32pt)\n  set align(center)\n  box[1]\n  box[4]\n  box[6]\n  box[4]\n  box[1]\n}\n```\n\nBut this approach is great if we ignore all other things like the intended use, etc.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 4,
      "reads": 21,
      "score": 94.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:49:03.936673"
}