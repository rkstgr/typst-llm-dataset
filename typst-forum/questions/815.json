{
  "topic_metadata": {
    "id": 815,
    "title": "How to fill a 2-column-table with key value pairs of an array?",
    "slug": "how-to-fill-a-2-column-table-with-key-value-pairs-of-an-array",
    "posts_count": 5,
    "created_at": "2024-09-30T14:35:03.396Z",
    "last_posted_at": "2024-10-05T08:49:11.748Z",
    "views": 336,
    "like_count": 2,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Eric",
    "tags": [
      "scripting",
      "tables"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 561
  },
  "posts": [
    {
      "id": 3028,
      "post_number": 1,
      "username": "Friedrich_Kirch",
      "name": "Friedrich Kirch",
      "created_at": "2024-09-30T14:35:03.989Z",
      "updated_at": "2024-10-02T19:37:14.546Z",
      "cooked": "<p>Hi, I want to write a function, which gets an array of key value pairs and these pairs must be displayed in a table. Can anybody give me an example?</p>\n<p>I tried this, but it doesnt work:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let mainline(..moves) = {\n  align(center)[\n  #table(\n  columns: (2.6cm, 2.6cm),\n  stroke: none,\n  align: (left, right),\n\n// ??????? What to write here ??????????????// \n\n//  [*1.e2-e4*], [*e7-e5*],\n//  [*2.Sg1-f3*], [*f7-f5*],\n//  [*3.Sf3xe5*],\n  )// table\n] \n} // mainline\n\n\n#mainline(\n  (\n    (\"1.e2-e4\", \"e7-e5\"), \n    (\"2.Sg1-f3\", \"f7-f5\"), \n  ),\n)\n</code></pre>",
      "raw": "Hi, I want to write a function, which gets an array of key value pairs and these pairs must be displayed in a table. Can anybody give me an example?\n\nI tried this, but it doesnt work:\n```typ\n#let mainline(..moves) = {\n  align(center)[\n  #table(\n  columns: (2.6cm, 2.6cm),\n  stroke: none,\n  align: (left, right),\n\n// ??????? What to write here ??????????????// \n\n//  [*1.e2-e4*], [*e7-e5*],\n//  [*2.Sg1-f3*], [*f7-f5*],\n//  [*3.Sf3xe5*],\n  )// table\n] \n} // mainline\n\n\n#mainline(\n  (\n    (\"1.e2-e4\", \"e7-e5\"), \n    (\"2.Sg1-f3\", \"f7-f5\"), \n  ),\n)\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 43,
      "score": 1423.6,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 507
    },
    {
      "id": 3030,
      "post_number": 2,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-09-30T15:39:13.023Z",
      "updated_at": "2024-09-30T15:39:42.799Z",
      "cooked": "<p>Hi Friedrich, and welcome to the forum!</p>\n<p>The table function takes a variable amount of entries as its arguments, which are then laid out row by row. To pass the data as a list of tuples (like you currently do), you can use the <a href=\"https://typst.app/docs/reference/foundations/array/#definitions-flatten\"><code>flatten</code></a> method to convert that list to a one-dimensional array, where the tuple structure is removed.</p>\n<p>Now, since the table function does not take an array as its argument, but a variable amount of values (as in <code>#table(first, second, third, ...)</code>, you can use the <a href=\"https://typst.app/docs/reference/foundations/arguments/#spreading\">spreading operator</a> <code>..</code>, which spreads the contents of the array into the arguments of a function call.</p>\n<p>The <code>moves</code> argument of the <code>mainline</code> function is of type <a href=\"https://typst.app/docs/reference/foundations/arguments/\"><code>arguments</code></a>, which can contain both named and positional arguments. As we only care about the positional ones, you can use the <code>pos</code> function to get them as an array.</p>\n<p>In total, you only need to add a very small piece to what you already have:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let mainline(..moves) = align(center, table(\n  columns: (2.6cm, 2.6cm),\n  stroke: none,\n  align: (left, right),\n  ..moves.pos().flatten()\n))\n</code></pre>\n<p>I also removed a bit of nesting to avoid unnecessary swapping between content mode and code mode. This doesn’t mean that there was anything wrong with it, it’s mostly just personal preference.</p>",
      "raw": "Hi Friedrich, and welcome to the forum!\n\nThe table function takes a variable amount of entries as its arguments, which are then laid out row by row. To pass the data as a list of tuples (like you currently do), you can use the [`flatten`](https://typst.app/docs/reference/foundations/array/#definitions-flatten) method to convert that list to a one-dimensional array, where the tuple structure is removed.\n\nNow, since the table function does not take an array as its argument, but a variable amount of values (as in `#table(first, second, third, ...)`, you can use the [spreading operator](https://typst.app/docs/reference/foundations/arguments/#spreading) `..`, which spreads the contents of the array into the arguments of a function call.\n\nThe `moves` argument of the `mainline` function is of type [`arguments`](https://typst.app/docs/reference/foundations/arguments/), which can contain both named and positional arguments. As we only care about the positional ones, you can use the `pos` function to get them as an array.\n\nIn total, you only need to add a very small piece to what you already have:\n```typ\n#let mainline(..moves) = align(center, table(\n  columns: (2.6cm, 2.6cm),\n  stroke: none,\n  align: (left, right),\n  ..moves.pos().flatten()\n))\n```\n\nI also removed a bit of nesting to avoid unnecessary swapping between content mode and code mode. This doesn't mean that there was anything wrong with it, it's mostly just personal preference.",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 41,
      "score": 68.2,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 3032,
      "post_number": 3,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-30T16:41:54.146Z",
      "updated_at": "2024-09-30T16:41:54.146Z",
      "cooked": "<p>as a minor note, the <code>moves.pos()</code> for the given input results in</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">(\n  (\n    (\"1.e2-e4\", \"e7-e5\"), \n    (\"2.Sg1-f3\", \"f7-f5\"), \n  ),\n)\n</code></pre>\n<p>(an array of all parameters: there was only one parameter, and that parameter is an array containing arrays of two moves each) – since <code>flatten()</code> gets rid of arrays recursively, this extra layer made no difference for the table.</p>\n<p>I suggest additionally doing one of two changes:</p>\n<ol>\n<li>instead of <code>..moves</code>, write <code>moves</code> so that the single parameter (still an array) is processed directly.</li>\n<li>instead of passing an array of arrays, directly pass multiple arrays of moves:<pre><code class=\"lang-auto\">#mainline(\n  (\"1.e2-e4\", \"e7-e5\"), \n  (\"2.Sg1-f3\", \"f7-f5\"), \n)\n</code></pre>\n</li>\n</ol>\n<p>In either case, the parameter (<code>moves</code> or <code>moves.pos()</code>) is the following:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">(\n  (\"1.e2-e4\", \"e7-e5\"), \n  (\"2.Sg1-f3\", \"f7-f5\"), \n)\n</code></pre>\n<p>Which is probably what you actually wanted to work with</p>",
      "raw": "as a minor note, the `moves.pos()` for the given input results in\n```typc\n(\n  (\n    (\"1.e2-e4\", \"e7-e5\"), \n    (\"2.Sg1-f3\", \"f7-f5\"), \n  ),\n)\n```\n(an array of all parameters: there was only one parameter, and that parameter is an array containing arrays of two moves each) -- since `flatten()` gets rid of arrays recursively, this extra layer made no difference for the table.\n\nI suggest additionally doing one of two changes:\n\n1) instead of `..moves`, write `moves` so that the single parameter (still an array) is processed directly.\n2) instead of passing an array of arrays, directly pass multiple arrays of moves:\n   ```\n   #mainline(\n     (\"1.e2-e4\", \"e7-e5\"), \n     (\"2.Sg1-f3\", \"f7-f5\"), \n   )\n   ```\n\nIn either case, the parameter (`moves` or `moves.pos()`) is the following:\n```typc\n(\n  (\"1.e2-e4\", \"e7-e5\"), \n  (\"2.Sg1-f3\", \"f7-f5\"), \n)\n```\nWhich is probably what you actually wanted to work with",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 40,
      "score": 33.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 3057,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-10-01T06:30:46.703Z",
      "updated_at": "2024-10-01T06:30:46.703Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Eric\" data-post=\"2\" data-topic=\"815\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/eric/48/87_2.png\" class=\"avatar\"> Eric:</div>\n<blockquote>\n<p>The table function takes a variable amount of entries as its arguments, which are then laid out row by row.</p>\n</blockquote>\n</aside>\n<p>To be more clear, I would say it lays them from left to right and then from top to bottom.</p>",
      "raw": "[quote=\"Eric, post:2, topic:815\"]\nThe table function takes a variable amount of entries as its arguments, which are then laid out row by row.\n[/quote]\n\nTo be more clear, I would say it lays them from left to right and then from top to bottom.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 32,
      "score": 6.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 3438,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-05T08:49:11.748Z",
      "updated_at": "2024-10-10T14:45:39.108Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/friedrich_kirch\">@Friedrich_Kirch</a>, don’t forget to tick one of the responses if you got a satisfying answer. The answer you choose should usually be the response that you found most correct/helpful/comprehensive for the question you asked.</p>\n<p>Edit: I have marked a response as the solution.</p>",
      "raw": "Hi @Friedrich_Kirch, don’t forget to tick one of the responses if you got a satisfying answer. The answer you choose should usually be the response that you found most correct/helpful/comprehensive for the question you asked.\n\nEdit: I have marked a response as the solution.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 9.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:57:46.973772"
}