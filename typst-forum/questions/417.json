{
  "topic_metadata": {
    "id": 417,
    "title": "Is there a way to programmaticaly generate documents?",
    "slug": "is-there-a-way-to-programmaticaly-generate-documents",
    "posts_count": 12,
    "created_at": "2024-09-17T13:45:24.355Z",
    "last_posted_at": "2024-10-24T13:14:44.677Z",
    "views": 1796,
    "like_count": 13,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 6,
    "accepted_answer_username": "Daniel",
    "tags": [
      "scripting",
      "tooling",
      "data-loading"
    ],
    "category_id": 5,
    "participant_count": 7,
    "word_count": 1375
  },
  "posts": [
    {
      "id": 1626,
      "post_number": 1,
      "username": "Tudor",
      "name": "Tudor",
      "created_at": "2024-09-17T13:45:24.667Z",
      "updated_at": "2024-09-23T07:16:03.881Z",
      "cooked": "<p>I want to use typist to generate PDF reports programmaticaly.</p>\n<p>Currently, I have a jinja template, that I populate with results from the database, but this workflow is very annoying. I would like to create a service that serves pdf and eventually send the PDF by email.<br>\nI have seen posts online similar to my goal, but no concrete examples.</p>\n<p>Ideally I would like to run everything  in python  if possible.</p>",
      "raw": "I want to use typist to generate PDF reports programmaticaly. \n\nCurrently, I have a jinja template, that I populate with results from the database, but this workflow is very annoying. I would like to create a service that serves pdf and eventually send the PDF by email. \nI have seen posts online similar to my goal, but no concrete examples. \n\nIdeally I would like to run everything  in python  if possible.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 136,
      "score": 7027.0,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 337
    },
    {
      "id": 1634,
      "post_number": 2,
      "username": "Daniel",
      "name": "Daniel Cook",
      "created_at": "2024-09-17T13:57:21.390Z",
      "updated_at": "2024-09-17T14:00:28.518Z",
      "cooked": "<p>You can use a similar process to what you already have with jinja templating. In fact, you could even use jinja to create a typst document rather than whatever document format you are using right now (I assume you’re doing HTML then converting to PDF).</p>\n<p>So, if for example:</p>\n<pre data-code-wrap=\"jinja2\"><code class=\"lang-jinja2\">&lt;h1&gt;{{ some_heading }}&lt;/h1&gt;\n&lt;p&gt; Some {{ some_value }} &lt;/p&gt;\n</code></pre>\n<p>You’d convert that to</p>\n<pre data-code-wrap=\"jinja2\"><code class=\"lang-jinja2\">= {{ some_heading }}\nSome {{ some_value }}\n</code></pre>\n<p>and so on.</p>\n<p>You would then</p>\n<ol>\n<li>populate the template with values,</li>\n<li>output a temporary typst file</li>\n<li>use subprocess and convert it to PDF using typst compile.</li>\n<li>delete the temporary file (if need be)</li>\n<li>serve the PDF</li>\n</ol>\n<p>The bottom line is that you are producing a string, writing it to file, and using typst to convert it. There are multiple ways to produce that string, jinja being one of them (and not a bad option imo).</p>",
      "raw": "You can use a similar process to what you already have with jinja templating. In fact, you could even use jinja to create a typst document rather than whatever document format you are using right now (I assume you're doing HTML then converting to PDF).\n\nSo, if for example:\n\n```jinja2\n<h1>{{ some_heading }}</h1>\n<p> Some {{ some_value }} </p>\n```\n\nYou'd convert that to\n```jinja2\n= {{ some_heading }}\nSome {{ some_value }}\n```\n\nand so on.\n\nYou would then\n\n1. populate the template with values,\n2. output a temporary typst file\n3. use subprocess and convert it to PDF using typst compile. \n4. delete the temporary file (if need be)\n5. serve the PDF\n\nThe bottom line is that you are producing a string, writing it to file, and using typst to convert it. There are multiple ways to produce that string, jinja being one of them (and not a bad option imo).",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 136,
      "score": 322.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 94
    },
    {
      "id": 1635,
      "post_number": 3,
      "username": "Tinger",
      "name": "Tinger",
      "created_at": "2024-09-17T14:00:00.393Z",
      "updated_at": "2024-09-17T14:00:13.222Z",
      "cooked": "<blockquote>\n<p>Currently, I have a jinja template, that I populate with results from the database, but this workflow is very annoying. I would like to create a service that serves pdf and eventually send the PDF by email.</p>\n</blockquote>\n<p>What about it is annoying? keep in mind that Typst natively supports reading various data formats (see <a href=\"https://typst.app/docs/reference/data-loading/\" class=\"inline-onebox\">Data Loading – Typst Documentation</a>), so you can load them from within Typst directly and use the familiar <code>#var</code> syntax for displaying values.</p>\n<blockquote>\n<p>Ideally I would like to run everything in python if possible.</p>\n</blockquote>\n<p>You’re in luck, there’s <a href=\"https://pypi.org/project/typst/\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">typst · PyPI</a></p>",
      "raw": "> Currently, I have a jinja template, that I populate with results from the database, but this workflow is very annoying. I would like to create a service that serves pdf and eventually send the PDF by email.\n\nWhat about it is annoying? keep in mind that Typst natively supports reading various data formats (see https://typst.app/docs/reference/data-loading/), so you can load them from within Typst directly and use the familiar `#var` syntax for displaying values.\n\n> Ideally I would like to run everything in python if possible.\n\nYou're in luck, there's https://pypi.org/project/typst/",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 128,
      "score": 245.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 29
    },
    {
      "id": 1637,
      "post_number": 4,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-17T14:13:35.899Z",
      "updated_at": "2024-09-17T14:13:35.899Z",
      "cooked": "<p>While you can use a templating engine like Jinja, personally I would suggest moving the templating to Typst itself. The mixing of markup and code that Typst allows is designed to support exactly that. The post <a href=\"https://forum.typst.app/t/can-i-configure-my-document-e-g-draft-release-version-light-dark-theme-when-creating-a-pdf-without-modifying-the-typst-file-directly/160\" class=\"inline-onebox\">Can I configure my document (e.g. draft/release version, light/dark theme) when creating a PDF without modifying the Typst file directly?</a> imo covers this topic (“rendering different data, serial letter style”)</p>\n<p>Combine data loading with a Python library like the one <a class=\"mention\" href=\"/u/tinger\">@Tinger</a> mentioned, this should get the job done.</p>",
      "raw": "While you can use a templating engine like Jinja, personally I would suggest moving the templating to Typst itself. The mixing of markup and code that Typst allows is designed to support exactly that. The post https://forum.typst.app/t/can-i-configure-my-document-e-g-draft-release-version-light-dark-theme-when-creating-a-pdf-without-modifying-the-typst-file-directly/160 imo covers this topic (\"rendering different data, serial letter style\")\n\nCombine data loading with a Python library like the one @Tinger mentioned, this should get the job done.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 118,
      "score": 103.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 1638,
      "post_number": 5,
      "username": "EaterOfSnacks",
      "name": "EaterOfSnacks",
      "created_at": "2024-09-17T14:15:35.357Z",
      "updated_at": "2024-09-17T14:16:22.474Z",
      "cooked": "<p>Before Typst I used the Python ReportLab library for a few jobs and it worked really well, or at least I could precisely overlay text elements as a second layer atop a pre-designed PDF, and match the house style perfectly (assuming I measured the designer’s dummy document accurately in Illustrator to get the right co-ordinates :) )</p>\n<p>These days I’d prefer an all-Typst workflow, at least for laying out the body of the page. Pre-made, print-ready elements (headers/footers/backgrounds in vector format, etc) I’d incorporate by overlaying on an existing ‘background’ PDF. Afaik Typst doesn’t do this yet but it should be possible with a script that invokes Typst then a Python library that can overlay PDFs (PyPDF2 ?).</p>",
      "raw": "Before Typst I used the Python ReportLab library for a few jobs and it worked really well, or at least I could precisely overlay text elements as a second layer atop a pre-designed PDF, and match the house style perfectly (assuming I measured the designer's dummy document accurately in Illustrator to get the right co-ordinates :) )\n\nThese days I'd prefer an all-Typst workflow, at least for laying out the body of the page. Pre-made, print-ready elements (headers/footers/backgrounds in vector format, etc) I'd incorporate by overlaying on an existing 'background' PDF. Afaik Typst doesn't do this yet but it should be possible with a script that invokes Typst then a Python library that can overlay PDFs (PyPDF2 ?).",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 111,
      "score": 77.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 36
    },
    {
      "id": 1665,
      "post_number": 6,
      "username": "Daniel",
      "name": "Daniel Cook",
      "created_at": "2024-09-17T15:07:02.969Z",
      "updated_at": "2024-09-17T15:47:27.054Z",
      "cooked": "<p>To synthesize <a class=\"mention\" href=\"/u/tinger\">@Tinger</a> and <a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a> with the suggestion of the <code>typst</code> library, here is a simple hello world example in case someone is looking in the future:</p>\n<p>In <code>helloworld.typ</code>:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">= Hello world\n\n#sys.inputs.at(\"some_value\")\n</code></pre>\n<p>In <code>helloworld.py</code>:</p>\n<pre data-code-wrap=\"py\"><code class=\"lang-py\">import typst  # using v0.11.1\n\n# sys_inputs must be a dictionary of type string:string\nsys_inputs: dict[str, str] = {\"some_value\": \"hello world\"}\n\ntypst.compile(input=\"helloworld.typ\", output=\"helloworld.pdf\", sys_inputs=sys_inputs)\n</code></pre>\n<p>The benefit of this method is that you could more easily compose your typst template (i.e. via the website).</p>\n<hr>\n<p><strike><img src=\"https://forum.typst.app/images/emoji/apple/eyes.png?v=12\" title=\":eyes:\" class=\"emoji\" alt=\":eyes:\" loading=\"lazy\" width=\"20\" height=\"20\"> However, <strong>a limitation</strong> seems to be in what you can pass to the template (dictionary of key:value, but both are limited to string type). That likely means that, for example, if you want to pass a tuple of values from a database query, it would have to be converted to string, then in the typst template you would have to convert to a typst-native type.</strike></p><strike>\n</strike><p><strike>So, if you need more versatility in objects, you may need to do string templating of some variety within python (i.e. jinja, or string templates, etc).</strike></p>\n<hr>\n<p><strong>Update</strong>:</p>\n<p>Based on <a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a>’s comment below, here is another example passing JSON data:</p>\n<p>In <code>json_example.py</code>:</p>\n<pre data-code-wrap=\"py\"><code class=\"lang-py\">import typst\nimport json\n\n# convert your data to string with json.dumps\ndata = json.dumps([1, 2, 3, 4, 5])\n\nsys_inputs: dict[str, str] = {\"data\": data}\ntypst.compile(\n    input=\"json_example.typ\", output=\"json_example.pdf\", sys_inputs=sys_inputs\n)\n\n</code></pre>\n<p>In <code>json_example.typ</code>:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let values = json.decode(sys.inputs.data)\n\n#for value in values [\n  #value #linebreak()\n]\n</code></pre>",
      "raw": "To synthesize @Tinger and @SillyFreak with the suggestion of the `typst` library, here is a simple hello world example in case someone is looking in the future:\n\nIn `helloworld.typ`:\n```typst\n= Hello world\n\n#sys.inputs.at(\"some_value\")\n```\n\nIn `helloworld.py`:\n```py\nimport typst  # using v0.11.1\n\n# sys_inputs must be a dictionary of type string:string\nsys_inputs: dict[str, str] = {\"some_value\": \"hello world\"}\n\ntypst.compile(input=\"helloworld.typ\", output=\"helloworld.pdf\", sys_inputs=sys_inputs)\n```\n\nThe benefit of this method is that you could more easily compose your typst template (i.e. via the website). \n\n--- \n\n<strike>👀 However, **a limitation** seems to be in what you can pass to the template (dictionary of key:value, but both are limited to string type). That likely means that, for example, if you want to pass a tuple of values from a database query, it would have to be converted to string, then in the typst template you would have to convert to a typst-native type.\n\nSo, if you need more versatility in objects, you may need to do string templating of some variety within python (i.e. jinja, or string templates, etc).</strike>\n\n----\n\n**Update**:\n\nBased on @SillyFreak's comment below, here is another example passing JSON data:\n\nIn `json_example.py`: \n\n```py\nimport typst\nimport json\n\n# convert your data to string with json.dumps\ndata = json.dumps([1, 2, 3, 4, 5])\n\nsys_inputs: dict[str, str] = {\"data\": data}\ntypst.compile(\n    input=\"json_example.typ\", output=\"json_example.pdf\", sys_inputs=sys_inputs\n)\n\n```\n\nIn `json_example.typ`: \n\n```typst\n#let values = json.decode(sys.inputs.data)\n\n#for value in values [\n  #value #linebreak()\n]\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 111,
      "score": 762.0,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 94
    },
    {
      "id": 1666,
      "post_number": 7,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-17T15:13:50.097Z",
      "updated_at": "2024-09-17T15:13:50.097Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Daniel\" data-post=\"6\" data-topic=\"417\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/d/9335FF/48.png\" class=\"avatar\"> Daniel:</div>\n<blockquote>\n<p>That likely means that, for example, if you want to pass a tuple of values from a database query, it would have to be converted to string, then in the typst template you would have to convert to a typst-native type.</p>\n<p>So, if you need more versatility in objects, you may need to do string templating of some variety within python (i.e. jinja, or string templates, etc).</p>\n</blockquote>\n</aside>\n<p>Actually for that case, you could use JSON or one of the other formats supported by Typst (and Python). Using templating (and then parsing in Typst) for that purpose should not be necessary:</p>\n<aside class=\"quote no-group\" data-username=\"SillyFreak\" data-post=\"3\" data-topic=\"160\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\"><a href=\"https://forum.typst.app/t/can-i-configure-my-document-e-g-draft-release-version-color-theme-when-creating-a-pdf-without-modifying-the-typst-file-directly/160/3\">Can I configure my document (e.g. draft/release version, color theme) when creating a PDF without modifying the Typst file directly?</a></div>\n<blockquote>\n<p>For more complex data input needs, using one of the <a href=\"https://typst.app/docs/reference/data-loading/\">data loading</a> functions is probably the best idea:</p>\n<ul>\n<li>directly in the command line: <code>--input 'data={\"some-num\": 1, \"some-bool\": true}'</code><br>\nthen read via <code>json.decode(sys.inputs.data)</code></li>\n</ul>\n</blockquote>\n</aside>\n<p>(feel free to incorporate that into your response, so that it can be the canonical complete one)</p>",
      "raw": "[quote=\"Daniel, post:6, topic:417\"]\nThat likely means that, for example, if you want to pass a tuple of values from a database query, it would have to be converted to string, then in the typst template you would have to convert to a typst-native type.\n\nSo, if you need more versatility in objects, you may need to do string templating of some variety within python (i.e. jinja, or string templates, etc).\n[/quote]\n\nActually for that case, you could use JSON or one of the other formats supported by Typst (and Python). Using templating (and then parsing in Typst) for that purpose should not be necessary:\n\n[quote=\"SillyFreak, post:3, topic:160\"]\nFor more complex data input needs, using one of the [data loading](https://typst.app/docs/reference/data-loading/) functions is probably the best idea:\n\n* directly in the command line: `--input 'data={\"some-num\": 1, \"some-bool\": true}'`\nthen read via `json.decode(sys.inputs.data)`\n[/quote]\n\n(feel free to incorporate that into your response, so that it can be the canonical complete one)",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 1,
      "reads": 98,
      "score": 214.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 1668,
      "post_number": 8,
      "username": "Daniel",
      "name": "Daniel Cook",
      "created_at": "2024-09-17T15:47:53.683Z",
      "updated_at": "2024-09-17T15:47:53.683Z",
      "cooked": "<p>Nice! I didn’t know about that. I’ve updated my comment.</p>",
      "raw": "Nice! I didn't know about that. I've updated my comment.",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 89,
      "score": 42.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 94
    },
    {
      "id": 1673,
      "post_number": 9,
      "username": "raimann",
      "name": "Felipe Raimann",
      "created_at": "2024-09-17T16:17:15.224Z",
      "updated_at": "2024-09-17T16:17:15.224Z",
      "cooked": "<p>My advice is similar to others: try to make as much as you can with Typst. In my case, <code>toml</code> files have been of help to “configure” the document and some analysis and <code>csv</code> files for data.</p>\n<p>Sadly, this is not always the case so you should rely on another language. Maybe your analysis depends a lot on <code>python</code> and the Typst part is simple. In my case, I have a software which rely on dates types, datafarmes, etc, which are not so advanced in Typst so I coded it in Julia. Then, with <a href=\"https://github.com/jakobjpeters/Typstry.jl\" rel=\"noopener nofollow ugc\">Typstry.jl</a> and <a href=\"https://github.com/andreasKroepelin/TypstJlyfish.jl\" rel=\"noopener nofollow ugc\">TypstJlyfish.jl</a> you can compile with <code>Typst_jll</code> and embed julia code in your typst files. (<a href=\"https://www.youtube.com/watch?v=Kgjl-DVjOMI\" rel=\"noopener nofollow ugc\">video about Jlyfish</a>). Even though is julia, it can help to understand the process.</p>",
      "raw": "My advice is similar to others: try to make as much as you can with Typst. In my case, `toml` files have been of help to \"configure\" the document and some analysis and `csv` files for data.\n\nSadly, this is not always the case so you should rely on another language. Maybe your analysis depends a lot on `python` and the Typst part is simple. In my case, I have a software which rely on dates types, datafarmes, etc, which are not so advanced in Typst so I coded it in Julia. Then, with [Typstry.jl](https://github.com/jakobjpeters/Typstry.jl) and [TypstJlyfish.jl](https://github.com/andreasKroepelin/TypstJlyfish.jl) you can compile with `Typst_jll` and embed julia code in your typst files. ([video about Jlyfish](https://www.youtube.com/watch?v=Kgjl-DVjOMI)). Even though is julia, it can help to understand the process.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 92,
      "score": 78.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 10
    },
    {
      "id": 1681,
      "post_number": 10,
      "username": "Tudor",
      "name": "Tudor",
      "created_at": "2024-09-17T23:43:53.548Z",
      "updated_at": "2024-09-17T23:43:53.548Z",
      "cooked": "<p>Thank you for all of the insights.</p>\n<p>I will definitely try it with the python package and a .typ file.</p>\n<p>Will comeback to share my results, but it won’t be anytime soon.</p>",
      "raw": "Thank you for all of the insights. \n\nI will definitely try it with the python package and a .typ file.\n\nWill comeback to share my results, but it won't be anytime soon.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 83,
      "score": 36.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 337
    },
    {
      "id": 2453,
      "post_number": 11,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-24T11:06:44.862Z",
      "updated_at": "2024-09-24T11:06:44.862Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Tudor\" data-post=\"10\" data-topic=\"417\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/t/66104C/48.png\" class=\"avatar\"> Tudor:</div>\n<blockquote>\n<p>Will comeback to share my results, but it won’t be anytime soon.</p>\n</blockquote>\n</aside>\n<p>Hi, for the time being and for the benefit of other readers, I have marked <a class=\"mention\" href=\"/u/daniel\">@Daniel</a>’s response as the accepted answer. Feel free to change that if your attempts eventually make you conclude that another answer works better <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "[quote=\"Tudor, post:10, topic:417\"]\nWill comeback to share my results, but it won’t be anytime soon.\n[/quote]\n\nHi, for the time being and for the benefit of other readers, I have marked @Daniel's response as the accepted answer. Feel free to change that if your attempts eventually make you conclude that another answer works better :slight_smile:",
      "reply_to_post_number": 10,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 69,
      "score": 23.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 4618,
      "post_number": 12,
      "username": "adriano",
      "name": "Adriano Fantini",
      "created_at": "2024-10-24T13:14:44.677Z",
      "updated_at": "2024-10-24T13:14:44.677Z",
      "cooked": "<p>It is perfectly doable, Typst is awesome for this specific usecase!<br>\nI have created several hundred-pages technical user manuals using (almost) pure Typst.</p>\n<p>I have a large-ish private software project whose components are described by about 500 JSON files, one each.<br>\nDifferent versions of the system combine the components in different way, and for each I needed to generate a different technical manual.</p>\n<p>All the basic data is fetched from JSON; the only thing I had to do outside of Typst is to create a index of such JSONs before compilation, because Typst misses a “does-file-exist?” functionality.</p>\n<p>The Typst code is about 2000 lines, including JSON caching, a small plotting library based on CeTZ, and custom .typ description for a bunch of special components (e.g. some that needed special charts and explanation).</p>\n<p>It is beautiful, reproducible, git-friendly, and easy to maintain!</p>",
      "raw": "It is perfectly doable, Typst is awesome for this specific usecase!\nI have created several hundred-pages technical user manuals using (almost) pure Typst.\n\nI have a large-ish private software project whose components are described by about 500 JSON files, one each.\nDifferent versions of the system combine the components in different way, and for each I needed to generate a different technical manual.\n\nAll the basic data is fetched from JSON; the only thing I had to do outside of Typst is to create a index of such JSONs before compilation, because Typst misses a \"does-file-exist?\" functionality.\n\nThe Typst code is about 2000 lines, including JSON caching, a small plotting library based on CeTZ, and custom .typ description for a bunch of special components (e.g. some that needed special charts and explanation).\n\nIt is beautiful, reproducible, git-friendly, and easy to maintain!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 62,
      "score": 157.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 669
    }
  ],
  "scraped_at": "2025-06-10T09:58:49.000509"
}