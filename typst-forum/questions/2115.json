{
  "topic_metadata": {
    "id": 2115,
    "title": "Canonical neovim console workflow as of 2024 with live(ish) output view?",
    "slug": "canonical-neovim-console-workflow-as-of-2024-with-live-ish-output-view",
    "posts_count": 4,
    "created_at": "2024-12-16T12:06:24.731Z",
    "last_posted_at": "2024-12-16T13:25:29.808Z",
    "views": 180,
    "like_count": 3,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Daniel",
    "tags": [
      "tooling",
      "neovim"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 253
  },
  "posts": [
    {
      "id": 6681,
      "post_number": 1,
      "username": "Vegabook",
      "name": "vegabook",
      "created_at": "2024-12-16T12:06:24.844Z",
      "updated_at": "2024-12-16T19:43:06.744Z",
      "cooked": "<p>I’m evaluating this great-sounding project, and while some of my colleagues will love the web app, I and a few programmers are dedicated terminal junkies. I recall that there was a workflow where you’d type your Typst document in your text editor, and it would live update in your browser whenever you save. I assume it used <code>inotify</code> on Linux and something else on MacOS, but also, what does one run in the browser to get an auto page-refresh? What’s the cleanest way of achieving this?</p>",
      "raw": "I'm evaluating this great-sounding project, and while some of my colleagues will love the web app, I and a few programmers are dedicated terminal junkies. I recall that there was a workflow where you'd type your Typst document in your text editor, and it would live update in your browser whenever you save. I assume it used `inotify` on Linux and something else on MacOS, but also, what does one run in the browser to get an auto page-refresh? What's the cleanest way of achieving this?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 34,
      "score": 456.8,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 942
    },
    {
      "id": 6683,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-12-16T12:23:36.149Z",
      "updated_at": "2024-12-16T12:25:21.819Z",
      "cooked": "<p>Hello <a class=\"mention\" href=\"/u/vegabook\">@Vegabook</a>,</p>\n<p>if you wish to watch the document, then <code>typst watch</code> is your friend. Instant updates would require your text editor to be configured with near-instant save after write. In neovim, that’s the <a href=\"https://neovim.io/doc/user/options.html#'autowriteall'\"><code>autowriteall</code></a> option.</p>\n<pre data-code-wrap=\"shell\"><code class=\"lang-shell\">❯ typst watch -h\nWatches an input file and recompiles on changes\n\nUsage: typst watch [OPTIONS] &lt;INPUT&gt; [OUTPUT]\n\nArguments:`autowriteall`\n  &lt;INPUT&gt;   Path to input Typst file. Use `-` to read input from stdin\n  [OUTPUT]  Path to output file (PDF, PNG, SVG, or HTML). Use `-` to write\n            output to stdout\n</code></pre>",
      "raw": "Hello @Vegabook,\n\nif you wish to watch the document, then `typst watch` is your friend. Instant updates would require your text editor to be configured with near-instant save after write. In neovim, that's the [`autowriteall`](https://neovim.io/doc/user/options.html#'autowriteall') option.\n\n\n```shell\n❯ typst watch -h\nWatches an input file and recompiles on changes\n\nUsage: typst watch [OPTIONS] <INPUT> [OUTPUT]\n\nArguments:`autowriteall`\n  <INPUT>   Path to input Typst file. Use `-` to read input from stdin\n  [OUTPUT]  Path to output file (PDF, PNG, SVG, or HTML). Use `-` to write\n            output to stdout\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 34,
      "score": 56.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 6684,
      "post_number": 3,
      "username": "Daniel",
      "name": "Daniel Cook",
      "created_at": "2024-12-16T12:56:13.744Z",
      "updated_at": "2024-12-16T12:56:13.744Z",
      "cooked": "<p>I had this in a makefile for a bigger project recently, requires the tinymist cli:</p>\n<pre><code class=\"lang-auto\">preview:\n\topen -a firefox \"http://127.0.0.1:23627\"\n\ttinymist preview --no-open $(MAIN)\n</code></pre>\n<p>I use mac, but Safari won’t auto refresh. Firefox worked.</p>",
      "raw": "I had this in a makefile for a bigger project recently, requires the tinymist cli:\n\n\n```\npreview:\n\topen -a firefox \"http://127.0.0.1:23627\"\n\ttinymist preview --no-open $(MAIN)\n```\n\nI use mac, but Safari won't auto refresh. Firefox worked.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 32,
      "score": 76.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 94
    },
    {
      "id": 6685,
      "post_number": 4,
      "username": "Vegabook",
      "name": "vegabook",
      "created_at": "2024-12-16T13:25:29.808Z",
      "updated_at": "2024-12-16T13:25:29.808Z",
      "cooked": "<p><a href=\"https://search.nixos.org/packages?channel=24.11&amp;show=tinymist&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=tinymist\" rel=\"noopener nofollow ugc\">Excellent</a>. That’s what I’ll use.</p>",
      "raw": "[Excellent](https://search.nixos.org/packages?channel=24.11&show=tinymist&from=0&size=50&sort=relevance&type=packages&query=tinymist). That's what I'll use.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 11.2,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 942
    }
  ],
  "scraped_at": "2025-06-10T09:53:35.170811"
}