{
  "topic_metadata": {
    "id": 4273,
    "title": "How do I dynamically add content from a dictionary defined in a template?",
    "slug": "how-do-i-dynamically-add-content-from-a-dictionary-defined-in-a-template",
    "posts_count": 4,
    "created_at": "2025-05-25T12:58:41.248Z",
    "last_posted_at": "2025-05-25T20:22:56.711Z",
    "views": 57,
    "like_count": 1,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Andrew",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 802
  },
  "posts": [
    {
      "id": 13106,
      "post_number": 1,
      "username": "Niklas",
      "name": "Niklas",
      "created_at": "2025-05-25T12:58:41.351Z",
      "updated_at": "2025-05-25T12:58:41.351Z",
      "cooked": "<p>I am using typst for my homework and notes for university. For this I need to reference theorems, lemmas, etc. from the lectures. I want to add a section to the end of my note where all the lecture references, used in that note, are listed and the parts of my note, that refer to these entries, also link to the respective headings.<br>\nTo avoid always retyping the theorems, I frequently use on different documents, I tried to create a template in which I collected all the lecture references and I dynamically add the parts which I need to the document.</p>\n<p>My file <code>template.typ</code> looks like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let lecture_refs = (\n  def1_1: (\n    lecture: 1,\n    index: 1,\n    type: \"Definition\",\n    content: [This is my first definition.],\n  ),\n  the1_2: (\n    lecture: 1,\n    index: 2,\n    type: \"Theorem\",\n    content: [This is the second entry but its a theorem.],\n  ),\n  the2_1: (\n    lecture: 2,\n    index: 1,\n    type: \"Theorem\",\n    content: [This theorem is relevant but I won't need it for the notes.],\n  ),\n  def2_2: (\n    lecture: 2,\n    index: 2,\n    type: \"Definition\",\n    content: [Let's define some more items.],\n  ),\n  lem3_1: (\n    lecture: 3,\n    index: 1,\n    type: \"Lemma\",\n    content: [Now we add a lemma for a change.],\n  ),\n)\n\n#let lecture_ref(def) = context {\n  let state = state(\"used_literature_refs\")\n  let array = state.get()\n  if array == none {\n    state.update((def,))\n  }\n  else if not array.contains(def) {\n    state.update((..array,def))\n  }\n  ref(label(def))\n}\n\n#let used_lecture_refs() = context {\n  let used = state(\"used_literature_refs\").final()\n  if (used != none and used.len() &gt; 0) {\n    text[= Lecture References]\n    set heading(numbering: \"1.1\")\n    for (key, value) in lecture_refs {\n      if key in used {\n        counter(heading).update((value.lecture, value.index - 1))\n        text[\n          #heading(depth: 2, supplement: value.type)[#value.type]#label(key)\n          #value.content\n        ]\n      }\n    }\n  }\n}\n\n#let template(doc) = {\n  doc\n  used_lecture_refs()\n}\n</code></pre>\n<p>Using this template I am able to render <code>note.typ</code> with the following content:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"template.typ\": template, lecture_ref\n\n#show: template\n\n= Homework\n\nIn my homework I need to reference some content from the lectures like #lecture_ref(\"def1_1\"), #lecture_ref(\"the1_2\"), #lecture_ref(\"def2_2\")\n\nUnused lecture references should not appear in the document\n</code></pre>\n<p>But when I add another reference typst fails to render the document.</p>\n<p>My modified <code>note.typ</code> looks like this</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"template.typ\": template, lecture_ref\n\n#show: template\n\n= Homework\n\nIn my homework I need to reference some content from the lectures like #lecture_ref(\"def1_1\"), #lecture_ref(\"the1_2\"), #lecture_ref(\"def2_2\"), #lecture_ref(\"lem3_1\")\n\nUnused lecture references should not appear in the document\n</code></pre>\n<p>I get the error <code>warning: layout did not converge within 5 attempts</code>. I assume it’s due to the scope I am using to keep track of the used IDs.</p>\n<p>I am not sure how to fix this or what I am doing wrong when modifying the state.</p>",
      "raw": "I am using typst for my homework and notes for university. For this I need to reference theorems, lemmas, etc. from the lectures. I want to add a section to the end of my note where all the lecture references, used in that note, are listed and the parts of my note, that refer to these entries, also link to the respective headings.\nTo avoid always retyping the theorems, I frequently use on different documents, I tried to create a template in which I collected all the lecture references and I dynamically add the parts which I need to the document.\n\nMy file `template.typ` looks like this:\n```typ\n#let lecture_refs = (\n  def1_1: (\n    lecture: 1,\n    index: 1,\n    type: \"Definition\",\n    content: [This is my first definition.],\n  ),\n  the1_2: (\n    lecture: 1,\n    index: 2,\n    type: \"Theorem\",\n    content: [This is the second entry but its a theorem.],\n  ),\n  the2_1: (\n    lecture: 2,\n    index: 1,\n    type: \"Theorem\",\n    content: [This theorem is relevant but I won't need it for the notes.],\n  ),\n  def2_2: (\n    lecture: 2,\n    index: 2,\n    type: \"Definition\",\n    content: [Let's define some more items.],\n  ),\n  lem3_1: (\n    lecture: 3,\n    index: 1,\n    type: \"Lemma\",\n    content: [Now we add a lemma for a change.],\n  ),\n)\n\n#let lecture_ref(def) = context {\n  let state = state(\"used_literature_refs\")\n  let array = state.get()\n  if array == none {\n    state.update((def,))\n  }\n  else if not array.contains(def) {\n    state.update((..array,def))\n  }\n  ref(label(def))\n}\n\n#let used_lecture_refs() = context {\n  let used = state(\"used_literature_refs\").final()\n  if (used != none and used.len() > 0) {\n    text[= Lecture References]\n    set heading(numbering: \"1.1\")\n    for (key, value) in lecture_refs {\n      if key in used {\n        counter(heading).update((value.lecture, value.index - 1))\n        text[\n          #heading(depth: 2, supplement: value.type)[#value.type]#label(key)\n          #value.content\n        ]\n      }\n    }\n  }\n}\n\n#let template(doc) = {\n  doc\n  used_lecture_refs()\n}\n```\n\nUsing this template I am able to render `note.typ` with the following content:\n```typ\n#import \"template.typ\": template, lecture_ref\n\n#show: template\n\n= Homework\n\nIn my homework I need to reference some content from the lectures like #lecture_ref(\"def1_1\"), #lecture_ref(\"the1_2\"), #lecture_ref(\"def2_2\")\n\nUnused lecture references should not appear in the document\n```\n\nBut when I add another reference typst fails to render the document.\n\nMy modified `note.typ` looks like this\n```typ\n#import \"template.typ\": template, lecture_ref\n\n#show: template\n\n= Homework\n\nIn my homework I need to reference some content from the lectures like #lecture_ref(\"def1_1\"), #lecture_ref(\"the1_2\"), #lecture_ref(\"def2_2\"), #lecture_ref(\"lem3_1\")\n\nUnused lecture references should not appear in the document\n```\n\nI get the error `warning: layout did not converge within 5 attempts`. I assume it's due to the scope I am using to keep track of the used IDs.\n\nI am not sure how to fix this or what I am doing wrong when modifying the state.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 44.8,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1647
    },
    {
      "id": 13110,
      "post_number": 2,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-05-25T13:54:54.465Z",
      "updated_at": "2025-05-25T13:55:17.658Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Niklas\" data-post=\"1\" data-topic=\"4273\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/niklas/48/3100_2.png\" class=\"avatar\"> Niklas:</div>\n<blockquote>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">  if array == none {\n    state.update((def,))\n  }\n  else if not array.contains(def) {\n    state.update((..array,def))\n  }\n</code></pre>\n</blockquote>\n</aside>\n<p>I don’t know if this is enough to resolve but this is a place where get and update can be combined into a single update and in that case it <em>should</em> be combined. As in <code>state.update(old_array =&gt; compute_new(old_array))</code></p>",
      "raw": "[quote=\"Niklas, post:1, topic:4273\"]\n```typc\n  if array == none {\n    state.update((def,))\n  }\n  else if not array.contains(def) {\n    state.update((..array,def))\n  }\n```\n[/quote]\n\nI don't know if this is enough to resolve but this is a place where get and update can be combined into a single update and in that case it _should_ be combined. As in `state.update(old_array => compute_new(old_array))`",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 23,
      "score": 9.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 13121,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-25T16:59:15.589Z",
      "updated_at": "2025-05-25T16:59:24.468Z",
      "cooked": "<p>Hello. You are stepping into the same trap as <a href=\"https://forum.typst.app/t/how-to-keep-exercise-and-solution-together-in-source-but-render-them-separately/3999/3\" class=\"inline-onebox\">How to keep exercise and solution together in source, but render them separately? - #3 by Andrew</a> and <a href=\"https://forum.typst.app/t/why-is-my-random-shuffle-always-producing-the-same-result-when-using-suiji/4218/9\" class=\"inline-onebox\">Why is my random shuffle always producing the same result when using Suiji? - #9 by Andrew</a>.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let ref-type = (definition: \"Definition\", theorem: \"Theorem\", lemma: \"Lemma\")\n#let lecture-refs = (\n  def1-1: (\n    lecture: 1,\n    index: 1,\n    type: ref-type.definition,\n    content: [This is my first definition.],\n  ),\n  the1-2: (\n    lecture: 1,\n    index: 2,\n    type: ref-type.theorem,\n    content: [This is the second entry but its a theorem.],\n  ),\n  the2-1: (\n    lecture: 2,\n    index: 1,\n    type: ref-type.theorem,\n    content: [This theorem is relevant but I won't need it for the notes.],\n  ),\n  def2-2: (\n    lecture: 2,\n    index: 2,\n    type: ref-type.definition,\n    content: [Let's define some more items.],\n  ),\n  lem3-1: (\n    lecture: 3,\n    index: 1,\n    type: ref-type.lemma,\n    content: [Now we add a lemma for a change.],\n  ),\n)\n\n#let lecture-ref(def) = context {\n  let state = state(\"used-literature-refs\", ())\n  let array = state.get()\n  if not array.contains(def) {\n    state.update(array =&gt; array + (def,))\n  }\n  ref(label(def))\n}\n\n#let used-lecture-refs() = context {\n  let used = state(\"used-literature-refs\").final()\n  if used.len() == 0 { return }\n  [= Lecture References]\n  set heading(numbering: \"1.1\")\n  for (key, value) in used.map(key =&gt; (key, lecture-refs.at(key))) {\n    counter(heading).update((value.lecture, value.index - 1))\n    [#heading(depth: 2, supplement: value.type)[#value.type]#label(key)]\n    value.content\n  }\n}\n\n#let template(doc) = {\n  doc\n  used-lecture-refs()\n}\n\n#show: template\n\n= Homework\nIn my homework I need to reference some content from the lectures like\n#lecture-ref(\"def1-1\"), #lecture-ref(\"the1-2\"), #lecture-ref(\"def2-2\"),\n#lecture-ref(\"lem3-1\")\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/b/b8f6623941607e36c5632c9824fe133c817e62a3.png\" data-download-href=\"https://forum.typst.app/uploads/default/b8f6623941607e36c5632c9824fe133c817e62a3\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/b/b8f6623941607e36c5632c9824fe133c817e62a3_2_690x365.png\" alt=\"image\" data-base62-sha1=\"qofJcWYDCPaHMLiz2FEJHsaqawH\" width=\"690\" height=\"365\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/b/b8f6623941607e36c5632c9824fe133c817e62a3_2_690x365.png, https://forum.typst.app/uploads/default/original/2X/b/b8f6623941607e36c5632c9824fe133c817e62a3.png 1.5x, https://forum.typst.app/uploads/default/original/2X/b/b8f6623941607e36c5632c9824fe133c817e62a3.png 2x\" data-dominant-color=\"141414\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">784×415 44.1 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "Hello. You are stepping into the same trap as https://forum.typst.app/t/how-to-keep-exercise-and-solution-together-in-source-but-render-them-separately/3999/3?u=andrew and https://forum.typst.app/t/why-is-my-random-shuffle-always-producing-the-same-result-when-using-suiji/4218/9?u=andrew.\n\n```typ\n#let ref-type = (definition: \"Definition\", theorem: \"Theorem\", lemma: \"Lemma\")\n#let lecture-refs = (\n  def1-1: (\n    lecture: 1,\n    index: 1,\n    type: ref-type.definition,\n    content: [This is my first definition.],\n  ),\n  the1-2: (\n    lecture: 1,\n    index: 2,\n    type: ref-type.theorem,\n    content: [This is the second entry but its a theorem.],\n  ),\n  the2-1: (\n    lecture: 2,\n    index: 1,\n    type: ref-type.theorem,\n    content: [This theorem is relevant but I won't need it for the notes.],\n  ),\n  def2-2: (\n    lecture: 2,\n    index: 2,\n    type: ref-type.definition,\n    content: [Let's define some more items.],\n  ),\n  lem3-1: (\n    lecture: 3,\n    index: 1,\n    type: ref-type.lemma,\n    content: [Now we add a lemma for a change.],\n  ),\n)\n\n#let lecture-ref(def) = context {\n  let state = state(\"used-literature-refs\", ())\n  let array = state.get()\n  if not array.contains(def) {\n    state.update(array => array + (def,))\n  }\n  ref(label(def))\n}\n\n#let used-lecture-refs() = context {\n  let used = state(\"used-literature-refs\").final()\n  if used.len() == 0 { return }\n  [= Lecture References]\n  set heading(numbering: \"1.1\")\n  for (key, value) in used.map(key => (key, lecture-refs.at(key))) {\n    counter(heading).update((value.lecture, value.index - 1))\n    [#heading(depth: 2, supplement: value.type)[#value.type]#label(key)]\n    value.content\n  }\n}\n\n#let template(doc) = {\n  doc\n  used-lecture-refs()\n}\n\n#show: template\n\n= Homework\nIn my homework I need to reference some content from the lectures like\n#lecture-ref(\"def1-1\"), #lecture-ref(\"the1-2\"), #lecture-ref(\"def2-2\"),\n#lecture-ref(\"lem3-1\")\n```\n\n![image|690x365](upload://qofJcWYDCPaHMLiz2FEJHsaqawH.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 14.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 13133,
      "post_number": 4,
      "username": "Niklas",
      "name": "Niklas",
      "created_at": "2025-05-25T20:22:56.711Z",
      "updated_at": "2025-05-25T20:22:56.711Z",
      "cooked": "<p>Thank you very much! This fixed my problem.</p>",
      "raw": "Thank you very much! This fixed my problem.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 17,
      "score": 18.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1647
    }
  ],
  "scraped_at": "2025-06-10T09:47:19.475265"
}