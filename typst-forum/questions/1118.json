{
  "topic_metadata": {
    "id": 1118,
    "title": "How can I modify the reference format of equations?",
    "slug": "how-can-i-modify-the-reference-format-of-equations",
    "posts_count": 9,
    "created_at": "2024-10-15T13:41:30.770Z",
    "last_posted_at": "2025-06-04T22:56:10.390Z",
    "views": 478,
    "like_count": 7,
    "reply_count": 5,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "sijo",
    "tags": [
      "math",
      "referencing"
    ],
    "category_id": 5,
    "participant_count": 5,
    "word_count": 1321
  },
  "posts": [
    {
      "id": 3943,
      "post_number": 1,
      "username": "shhuang",
      "name": "",
      "created_at": "2024-10-15T13:41:30.921Z",
      "updated_at": "2025-02-21T21:02:46.723Z",
      "cooked": "<p>I want to make the reference of equations like this:<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/ac85d0e30cd09d63a3797d9369967e82f0444ae6.jpeg\" data-download-href=\"https://forum.typst.app/uploads/default/ac85d0e30cd09d63a3797d9369967e82f0444ae6\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/ac85d0e30cd09d63a3797d9369967e82f0444ae6_2_690x255.jpeg\" alt=\"image\" data-base62-sha1=\"oCcP6BwjheRyxJaHxQhoIaVsZTM\" width=\"690\" height=\"255\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/ac85d0e30cd09d63a3797d9369967e82f0444ae6_2_690x255.jpeg, https://forum.typst.app/uploads/default/optimized/1X/ac85d0e30cd09d63a3797d9369967e82f0444ae6_2_1035x382.jpeg 1.5x, https://forum.typst.app/uploads/default/original/1X/ac85d0e30cd09d63a3797d9369967e82f0444ae6.jpeg 2x\" data-dominant-color=\"E2E2E1\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1221×453 294 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div><br>\nIt seems that I can only remove the “Equation” in reference by:</p>\n<pre><code class=\"lang-auto\">#set math.equation(numbering: \"(R1)\", supplement: none)\n</code></pre>\n<p>How can I add the parenthesis?</p>",
      "raw": "I want to make the reference of equations like this:\n![image|690x255](upload://oCcP6BwjheRyxJaHxQhoIaVsZTM.jpeg)\nIt seems that I can only remove the \"Equation\" in reference by:\n```\n#set math.equation(numbering: \"(R1)\", supplement: none)\n```\nHow can I add the parenthesis?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 59,
      "score": 1811.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 556
    },
    {
      "id": 3945,
      "post_number": 2,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-15T13:55:05.146Z",
      "updated_at": "2024-10-15T13:55:05.146Z",
      "cooked": "<p>Here it’s the reference you want to customize, so you need a show rule on <code>ref</code>. I think there’s an <a href=\"https://typst.app/docs/reference/model/ref/#customization\">example in the documentation</a> that does what you want:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set heading(numbering: \"1.\")\n#set math.equation(numbering: \"(1)\")\n\n#show ref: it =&gt; {\n  let eq = math.equation\n  let el = it.element\n  if el != none and el.func() == eq {\n    // Override equation references.\n    numbering(\n      el.numbering,\n      ..counter(eq).at(el.location())\n    )\n  } else {\n    // Other references as usual.\n    it\n  }\n}\n\n= Beginnings &lt;beginning&gt;\nIn @beginning we prove @pythagoras.\n$ a^2 + b^2 = c^2 $ &lt;pythagoras&gt;\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/043c50e5dd260c9fccdc219599328e2c54bf5206.png\" alt=\"image\" data-base62-sha1=\"Bt8s3FSOesGD7fpyTpGy3svD26\" width=\"360\" height=\"117\"></p>",
      "raw": "Here it's the reference you want to customize, so you need a show rule on `ref`. I think there's an [example in the documentation](https://typst.app/docs/reference/model/ref/#customization) that does what you want:\n\n```typ\n#set heading(numbering: \"1.\")\n#set math.equation(numbering: \"(1)\")\n\n#show ref: it => {\n  let eq = math.equation\n  let el = it.element\n  if el != none and el.func() == eq {\n    // Override equation references.\n    numbering(\n      el.numbering,\n      ..counter(eq).at(el.location())\n    )\n  } else {\n    // Other references as usual.\n    it\n  }\n}\n\n= Beginnings <beginning>\nIn @beginning we prove @pythagoras.\n$ a^2 + b^2 = c^2 $ <pythagoras>\n```\n\n![image|480x157, 75%](upload://Bt8s3FSOesGD7fpyTpGy3svD26.png)",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 57,
      "score": 101.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 3979,
      "post_number": 3,
      "username": "shhuang",
      "name": "",
      "created_at": "2024-10-16T01:21:07.760Z",
      "updated_at": "2024-10-16T01:21:07.760Z",
      "cooked": "<p>Thanks! I will read the documentation later.</p>",
      "raw": "Thanks! I will read the documentation later.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 54,
      "score": 10.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 556
    },
    {
      "id": 8062,
      "post_number": 4,
      "username": "Tamas_K_Papp",
      "name": "Tamas K. Papp",
      "created_at": "2025-01-31T12:26:55.066Z",
      "updated_at": "2025-01-31T12:26:55.066Z",
      "cooked": "<p>Sorry for the obvious question (I am new to Typst), but can one package this <code>show</code> rule in a composable way, so that the user can just load this as an option?</p>\n<p>My concern is that, since this is a closure, another customization of <code>ref</code> will just override it.</p>",
      "raw": "Sorry for the obvious question (I am new to Typst), but can one package this `show` rule in a composable way, so that the user can just load this as an option?\n\nMy concern is that, since this is a closure, another customization of `ref` will just override it.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 39,
      "score": 12.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1120
    },
    {
      "id": 8063,
      "post_number": 5,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-01-31T12:41:17.359Z",
      "updated_at": "2025-01-31T12:41:17.359Z",
      "cooked": "<p>Hello, this is not obvious actually, it’s rather precise!<br>\nI recommend going through the tutorial about templates</p><aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://typst.app/docs/tutorial/making-a-template/#set-and-show-rules\">\n  <header class=\"source\">\n      <img src=\"https://forum.typst.app/uploads/default/original/1X/098187a593d51c4db99324614e2baeeb1bb355cc.png\" class=\"site-icon\" data-dominant-color=\"3CA8B6\" width=\"32\" height=\"32\">\n\n      <a href=\"https://typst.app/docs/tutorial/making-a-template/#set-and-show-rules\" target=\"_blank\" rel=\"noopener\">Typst</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/361;\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/db1c18ed802fe6841bee62606931f352da10ed09_2_690x362.png\" class=\"thumbnail\" data-dominant-color=\"7CC2C5\" width=\"690\" height=\"362\"></div>\n\n<h3><a href=\"https://typst.app/docs/tutorial/making-a-template/#set-and-show-rules\" target=\"_blank\" rel=\"noopener\">Making a Template – Typst Documentation</a></h3>\n\n  <p>Typst's tutorial.</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
      "raw": "Hello, this is not obvious actually, it's rather precise!\nI recommend going through the tutorial about templates\nhttps://typst.app/docs/tutorial/making-a-template/#set-and-show-rules",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 36,
      "score": 12.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 8066,
      "post_number": 6,
      "username": "Tamas_K_Papp",
      "name": "Tamas K. Papp",
      "created_at": "2025-01-31T13:24:30.606Z",
      "updated_at": "2025-01-31T13:25:35.574Z",
      "cooked": "<p>Sorry, I guess my question was not clear, it is not about the template mechanism but how <code>show</code> rules compose (if at all).</p>\n<p>Suppose that <strong>in addition to the solution suggested above</strong>, someone wants to define a</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show ref: it =&gt; {\n    ...\n}\n</code></pre>\n<p>for <strong>something else than equations</strong>, either in the main file or in a template.</p>\n<p>Then I am assuming that one of the rules would overwrite the other. Is that correct? Is there a workaround/solution for this?</p>",
      "raw": "Sorry, I guess my question was not clear, it is not about the template mechanism but how `show` rules compose (if at all). \n\nSuppose that **in addition to the solution suggested above**, someone wants to define a\n```typst\n#show ref: it => {\n    ...\n}\n```\nfor **something else than equations**, either in the main file or in a template.\n\nThen I am assuming that one of the rules would overwrite the other. Is that correct? Is there a workaround/solution for this?",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 35,
      "score": 12.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1120
    },
    {
      "id": 8068,
      "post_number": 7,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-01-31T13:31:52.000Z",
      "updated_at": "2025-01-31T13:31:52.000Z",
      "cooked": "<p>I did read too fast, it would indeed be overwritten. Below, a show ref rule to display Bar does not trigger, because it is overwritten by the first one.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let template(doc) = {\n  show ref: it =&gt; [Foo]\n  doc\n}\n\n#show ref: it =&gt; [Bar]\n#show: template\n\n#figure([Foo]) &lt;foo&gt;\n\n@foo\n\n#figure([Bar]) &lt;bar&gt;\n\n@bar\n</code></pre>\n<p>I think it is best if you write it like the following one. Basically, as long as you target your element and return the ref for other references, you can compose show ref rules.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let template(doc) = {\n  show ref: it =&gt; {\n    let el = it.element\n    if el != none and el.func() == figure and el.kind == \"foo\" {\n      [Foo]\n    } else {\n      it\n    }\n  }\n  doc\n}\n\n#show ref: it =&gt; [Bar]\n#show: template\n\n#figure([Foo], kind: \"foo\", supplement: \"\") &lt;foo&gt;\n\n@foo\n\n#figure([Bar]) &lt;bar&gt;\n\n@bar\n</code></pre>",
      "raw": "I did read too fast, it would indeed be overwritten. Below, a show ref rule to display Bar does not trigger, because it is overwritten by the first one.\n\n```typ\n#let template(doc) = {\n  show ref: it => [Foo]\n  doc\n}\n\n#show ref: it => [Bar]\n#show: template\n\n#figure([Foo]) <foo>\n\n@foo\n\n#figure([Bar]) <bar>\n\n@bar\n```\n\nI think it is best if you write it like the following one. Basically, as long as you target your element and return the ref for other references, you can compose show ref rules.\n\n```typ\n#let template(doc) = {\n  show ref: it => {\n    let el = it.element\n    if el != none and el.func() == figure and el.kind == \"foo\" {\n      [Foo]\n    } else {\n      it\n    }\n  }\n  doc\n}\n\n#show ref: it => [Bar]\n#show: template\n\n#figure([Foo], kind: \"foo\", supplement: \"\") <foo>\n\n@foo\n\n#figure([Bar]) <bar>\n\n@bar\n```",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 34,
      "score": 11.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 8164,
      "post_number": 8,
      "username": "sijo",
      "name": "",
      "created_at": "2025-02-03T10:50:35.381Z",
      "updated_at": "2025-02-03T15:30:51.613Z",
      "cooked": "<p>To elaborate on <a class=\"mention\" href=\"/u/quachpas\">@quachpas</a>’s answer, here is how rules are applied for a particular element according to my understanding:</p>\n<ol>\n<li>\n<p>All applicable show-set rules are gathered, with later rules overwriting previous ones so</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show ref: set text(red, weight: \"bold\")\n#show ref: set text(blue)\n</code></pre>\n<p>will show refs in blue and bold.</p>\n</li>\n<li>\n<p>The element is materialized in accordance with these show-set rules. For example after</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show ref: set ref(supplement: [X])\n</code></pre>\n<p>all ref elements with unspecified supplement will be materialized with supplement <code>[X]</code>.</p>\n</li>\n<li>\n<p>Normal show rules (i.e. functions, not show-set) are applied starting with the most local one. The rule functions are called with the materialized element as argument. Each rule is applied recursively to its own output, until the output contains nothing new that matches the show rule. For example</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.equation(numbering: \"(1)\")\n#set ref(supplement: [0])\n#show ref: it =&gt; {\n  let i = int(it.supplement.text)\n  if i &lt; 3 {\n    let new = ref(it.target, supplement: [#(i + 1)])\n    return [{it: #it, new: #new}]\n  }\n  [{final: #it}]\n}\n\n$ x = y $ &lt;eq&gt;\nSee @eq.\n</code></pre>\n<p>produces<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/c/c55425aff45f3c80d382cf1cd5f5439e255e7f4b.png\" alt=\"image\" data-base62-sha1=\"s9Elt0Rc7FAPMSRImsvnDwiP7ib\" width=\"360\" height=\"69\"></p>\n<p>Indeed the first time the show rule is applied, it returns the content <code>{it: #it, new: #new}</code>. The rule is then applied again on the new ref, but not on <code>#it</code> as that has already been processed. This is repeated until the new ref has supplement <code>[3]</code>: then the show rule simply returns <code>{final: #it}</code>. This output contains nothing new matching the show rule, so Typst moves on to the next (more outer) show rule.</p>\n</li>\n</ol>\n<p>So in principle show rules compose in the sense that outer rules are applied to the output of inner rules.</p>\n<p>Where it breaks is if a rule on Element doesn’t include a corresponding Element in its output: in this case, an outer rule on Element will not be applied since the thing that would have matched the rule has been removed (replaced) by the inner rule.</p>\n<p>In the present case, when the ref is to a figure the show rule returns the ref unchanged, so there’s no problem: the ref is still there to be found by other show rules.</p>\n<p>It also works fine if you have a show-set rule for refs:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.equation(numbering: \"(1)\")\n#show ref: set text(red)\n\n#show ref: it =&gt; {\n let el = it.element\n if el != none and el.func() == math.equation {\n   numbering(el.numbering, ..counter(math.equation).at(el.location()))\n } else {\n   it\n }\n}\n\n$ x = y $ &lt;eq&gt;\nSee @eq.\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/0/0a541155c1855e6632d789b681a636f81b498c65.png\" alt=\"image\" data-base62-sha1=\"1tmT78kgpsjiF1VfLMeyDl2fTEh\" width=\"361\" height=\"61\"></p>\n<p>The <code>show ref: set text(red)</code> composes well with the show rule to add brackets.</p>\n<p>What doesn’t work is if we have another regular show rule before the rule that adds brackets:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.equation(numbering: \"(1)\")\n\n// This won't work here...\n#show ref: it =&gt; {\n  set text(red)\n  it\n}\n\n#show ref: it =&gt; {\n let el = it.element\n if el != none and el.func() == math.equation {\n   numbering(el.numbering, ..counter(math.equation).at(el.location()))\n } else {\n   it\n }\n}\n\n// but it would work here\n\n$ x = y $ &lt;eq&gt;\nSee @eq.\n</code></pre>\n<p>To avoid this problem, we’d have to make a show rule for brackets that still returns a ref:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.equation(numbering: \"(1)\", supplement: none)\n\n#show ref: it =&gt; {\n  set text(red)\n  it\n}\n#show ref: it =&gt; {\n let el = it.element\n if el != none and el.func() == math.equation {\n   link(el.location(), [(#it)])\n } else {\n   it\n }\n}\n\n$ x = y $ &lt;eq&gt;\nSee @eq.\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/2/23c9222a5886d5c305e6be3ffae4d2d820c96a98.png\" alt=\"image\" data-base62-sha1=\"56zDy8Dx64vtzgHzwkvH2lSFsUw\" width=\"365\" height=\"63\"></p>\n<p>This works except that the brackets are added <em>around</em> the ref. They’re not part of the ref, so the <code>show ref: set text(red)</code> doesn’t apply to them. But it does if we switch the order of rules:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.equation(numbering: \"(1)\", supplement: none)\n\n#show ref: it =&gt; {\n let el = it.element\n if el != none and el.func() == math.equation {\n   link(el.location(), [(#it)])\n } else {\n   it\n }\n}\n#show ref: it =&gt; {\n  set text(red)\n  it\n}\n\n$ x = y $ &lt;eq&gt;\nSee @eq.\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/7/78ddbc6c60fd3a16fda4d089703608720203e845.png\" alt=\"image\" data-base62-sha1=\"hfemy4XdDyNsYh3wZQlrulsgQV7\" width=\"369\" height=\"64\"></p>\n<p>In this case the brackets are added in a context where <code>text(red)</code> is active.</p>",
      "raw": "To elaborate on @quachpas's answer, here is how rules are applied for a particular element according to my understanding:\n\n1. All applicable show-set rules are gathered, with later rules overwriting previous ones so\n   ```typ\n   #show ref: set text(red, weight: \"bold\")\n   #show ref: set text(blue)\n   ```\n   will show refs in blue and bold.\n\n2. The element is materialized in accordance with these show-set rules. For example after\n   ```typ\n   #show ref: set ref(supplement: [X])\n   ```\n   all ref elements with unspecified supplement will be materialized with supplement `[X]`.\n\n3. Normal show rules (i.e. functions, not show-set) are applied starting with the most local one. The rule functions are called with the materialized element as argument. Each rule is applied recursively to its own output, until the output contains nothing new that matches the show rule. For example\n   ```typ\n   #set math.equation(numbering: \"(1)\")\n   #set ref(supplement: [0])\n   #show ref: it => {\n     let i = int(it.supplement.text)\n     if i < 3 {\n       let new = ref(it.target, supplement: [#(i + 1)])\n       return [{it: #it, new: #new}]\n     }\n     [{final: #it}]\n   }\n\n   $ x = y $ <eq>\n   See @eq.\n   ```\n\n    produces \n   ![image|480x93, 75%](upload://s9Elt0Rc7FAPMSRImsvnDwiP7ib.png)\n\n\n   Indeed the first time the show rule is applied, it returns the content `{it: #it, new: #new}`. The rule is then applied again on the new ref, but not on `#it` as that has already been processed. This is repeated until the new ref has supplement `[3]`: then the show rule simply returns `{final: #it}`. This output contains nothing new matching the show rule, so Typst moves on to the next (more outer) show rule.\n\nSo in principle show rules compose in the sense that outer rules are applied to the output of inner rules.\n\nWhere it breaks is if a rule on Element doesn't include a corresponding Element in its output: in this case, an outer rule on Element will not be applied since the thing that would have matched the rule has been removed (replaced) by the inner rule.\n\nIn the present case, when the ref is to a figure the show rule returns the ref unchanged, so there's no problem: the ref is still there to be found by other show rules.\n\nIt also works fine if you have a show-set rule for refs:\n\n```typ\n#set math.equation(numbering: \"(1)\")\n#show ref: set text(red)\n\n#show ref: it => {\n let el = it.element\n if el != none and el.func() == math.equation {\n   numbering(el.numbering, ..counter(math.equation).at(el.location()))\n } else {\n   it\n }\n}\n\n$ x = y $ <eq>\nSee @eq.\n```\n\n![image|482x82, 75%](upload://1tmT78kgpsjiF1VfLMeyDl2fTEh.png)\n\nThe `show ref: set text(red)` composes well with the show rule to add brackets.\n\nWhat doesn't work is if we have another regular show rule before the rule that adds brackets:\n\n```typ\n#set math.equation(numbering: \"(1)\")\n\n// This won't work here...\n#show ref: it => {\n  set text(red)\n  it\n}\n\n#show ref: it => {\n let el = it.element\n if el != none and el.func() == math.equation {\n   numbering(el.numbering, ..counter(math.equation).at(el.location()))\n } else {\n   it\n }\n}\n\n// but it would work here\n\n$ x = y $ <eq>\nSee @eq.\n```\n\nTo avoid this problem, we'd have to make a show rule for brackets that still returns a ref:\n\n```typ\n#set math.equation(numbering: \"(1)\", supplement: none)\n\n#show ref: it => {\n  set text(red)\n  it\n}\n#show ref: it => {\n let el = it.element\n if el != none and el.func() == math.equation {\n   link(el.location(), [(#it)])\n } else {\n   it\n }\n}\n\n$ x = y $ <eq>\nSee @eq.\n```\n\n![image|487x85, 75%](upload://56zDy8Dx64vtzgHzwkvH2lSFsUw.png)\n\nThis works except that the brackets are added _around_ the ref. They're not part of the ref, so the `show ref: set text(red)` doesn't apply to them. But it does if we switch the order of rules:\n\n```typ\n#set math.equation(numbering: \"(1)\", supplement: none)\n\n#show ref: it => {\n let el = it.element\n if el != none and el.func() == math.equation {\n   link(el.location(), [(#it)])\n } else {\n   it\n }\n}\n#show ref: it => {\n  set text(red)\n  it\n}\n\n$ x = y $ <eq>\nSee @eq.\n```\n![image|492x86, 75%](upload://hfemy4XdDyNsYh3wZQlrulsgQV7.png)\n\nIn this case the brackets are added in a context where `text(red)` is active.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 4,
      "reads": 26,
      "score": 95.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 13717,
      "post_number": 9,
      "username": "th1j5",
      "name": "tpaelman",
      "created_at": "2025-06-04T22:56:10.390Z",
      "updated_at": "2025-06-04T23:01:48.820Z",
      "cooked": "<p>For people stumbling on this topic, my solution is this:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">show ref: it =&gt; { // Use number from equation, thus automatically adding parentheses\n  let el = it.element\n  if el != none and el.func() == math.equation {\n    // Override equation references\n    // Determine used supplement\n    let supp = if it.supplement == auto {\n      // Use automatic supplement, localized by Typst to correct language etc.\n      el.supplement\n    } else if (it.supplement == \"\"\n               or type(it.supplement) == content\n               and it.supplement.fields() == (children: ())) {\n      // Translate empty supplement (string or content) to #none\n      // For example, @eq:example[] will not introduce an extra space.\n      none\n    } else {\n      // Use supplied content\n      it.supplement\n    }\n    // The actual equation reference, being [#supp~#num] or [#num]\n    link(el.location(), {\n          supp\n          if supp != none { sym.space.nobreak }\n          // Use the numbering scheme from the equation. Can be changed.\n          numbering(el.numbering, ..counter(math.equation).at(el.location()))\n        })\n  } else {\n    it\n  }\n}\n</code></pre>\n<p>The advantage is that the correct supplement is always used (the automatically localized ‘Equation’ or ‘Vergelijking’ in Dutch), while giving the different numbering scheme for the number itself. If the supplement is set to the empty string or empty content, also no erroneous non-breaking space is added.<br>\nAnd like the last answer just before me, it uses <code>link</code> to link to the referenced equation.</p>",
      "raw": "For people stumbling on this topic, my solution is this:\n```typc\nshow ref: it => { // Use number from equation, thus automatically adding parentheses\n  let el = it.element\n  if el != none and el.func() == math.equation {\n    // Override equation references\n    // Determine used supplement\n    let supp = if it.supplement == auto {\n      // Use automatic supplement, localized by Typst to correct language etc.\n      el.supplement\n    } else if (it.supplement == \"\"\n               or type(it.supplement) == content\n               and it.supplement.fields() == (children: ())) {\n      // Translate empty supplement (string or content) to #none\n      // For example, @eq:example[] will not introduce an extra space.\n      none\n    } else {\n      // Use supplied content\n      it.supplement\n    }\n    // The actual equation reference, being [#supp~#num] or [#num]\n    link(el.location(), {\n          supp\n          if supp != none { sym.space.nobreak }\n          // Use the numbering scheme from the equation. Can be changed.\n          numbering(el.numbering, ..counter(math.equation).at(el.location()))\n        })\n  } else {\n    it\n  }\n}\n```\nThe advantage is that the correct supplement is always used (the automatically localized 'Equation' or 'Vergelijking' in Dutch), while giving the different numbering scheme for the number itself. If the supplement is set to the empty string or empty content, also no erroneous non-breaking space is added.\nAnd like the last answer just before me, it uses `link` to link to the referenced equation.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 10,
      "score": 1.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1469
    }
  ],
  "scraped_at": "2025-06-10T09:56:49.755108"
}