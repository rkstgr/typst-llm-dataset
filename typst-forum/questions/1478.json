{
  "topic_metadata": {
    "id": 1478,
    "title": "How to continue `enum` throughout entire document?",
    "slug": "how-to-continue-enum-throughout-entire-document",
    "posts_count": 7,
    "created_at": "2024-11-01T13:54:06.109Z",
    "last_posted_at": "2024-11-04T08:49:50.650Z",
    "views": 520,
    "like_count": 4,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 6,
    "accepted_answer_username": "Mc-Zen",
    "tags": [
      "layout"
    ],
    "category_id": 5,
    "participant_count": 5,
    "word_count": 688
  },
  "posts": [
    {
      "id": 4991,
      "post_number": 1,
      "username": "miles-1",
      "name": "miles",
      "created_at": "2024-11-01T13:54:06.284Z",
      "updated_at": "2024-11-01T16:23:34.534Z",
      "cooked": "<p>How can I continue numbering throughout an entire document when using the <code>+</code> bullets? E.g.:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">+ item 1\n\nsome comments\n\n+ item 2\n\nsome comments\n\n+ item 3\n\nsome comments\n</code></pre>\n<p>As it is now, numbering restarts each time the <code>+</code> are broken up by other lines.</p>\n<p>Of course, I can explicitly number each item, but would love if I could use <code>+</code> throughout the document and it keep track of the numbers. I’m guessing there’s a way to do it with <code>counter</code>s, but don’t know how. I’ll take a swing at it and post a solution if I can find one, but am posting here first since I imagine this would be generally helpful and want to contribute to the forum.</p>\n<p><em>Edit</em>: I should have been more clear, I understand that indentation can avoid this issue, but I would love to be able to separate some <code>enum</code>s by headers, and be able to style <code>enum</code>s separately from the content that follows. For example:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show enum: (it) =&gt; text(gray, it)\n= Section 1\n\n+ This is question 1\n\nthis is my answer to question 1\n\n+ This is question 2\n\nthis is my answer to question 2\n\n+ This is question 3\n\nthis is my answer to question 3\n\n= Section 2\n\n+ This is question 4\n\nthis is my answer to question 4\n\n</code></pre>",
      "raw": "How can I continue numbering throughout an entire document when using the `+` bullets? E.g.:\n```typst\n+ item 1\n\nsome comments\n\n+ item 2\n\nsome comments\n\n+ item 3\n\nsome comments\n```\nAs it is now, numbering restarts each time the `+` are broken up by other lines.\n\nOf course, I can explicitly number each item, but would love if I could use `+` throughout the document and it keep track of the numbers. I'm guessing there's a way to do it with `counter`s, but don't know how. I'll take a swing at it and post a solution if I can find one, but am posting here first since I imagine this would be generally helpful and want to contribute to the forum.\n\n*Edit*: I should have been more clear, I understand that indentation can avoid this issue, but I would love to be able to separate some `enum`s by headers, and be able to style `enum`s separately from the content that follows. For example:\n\n```typst\n#show enum: (it) => text(gray, it)\n= Section 1\n\n+ This is question 1\n\nthis is my answer to question 1\n\n+ This is question 2\n\nthis is my answer to question 2\n\n+ This is question 3\n\nthis is my answer to question 3\n\n= Section 2\n\n+ This is question 4\n\nthis is my answer to question 4\n\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 50,
      "score": 2300.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 177
    },
    {
      "id": 5001,
      "post_number": 2,
      "username": "maucejo",
      "name": "Mathieu Aucejo",
      "created_at": "2024-11-01T16:12:59.475Z",
      "updated_at": "2024-11-01T16:12:59.475Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/miles-1\">@miles-1</a>. Actually to avoid <code>enum</code> breaking, you have to respect indentation. Normally, the following lines should work:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">+ item 1\n  \n  some comments\n\n+ item 2\n\n  some comments\n\n+ item 3\n\n  some comments\n</code></pre>\n<p>Another possibility consists in writing :</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">+ item 1\n  \n  some comments\n\n+ item 2\n\nsome comments\n\n3. item 3\n\n  some comments\n\n+ item 4\n   \n  some comments \n</code></pre>",
      "raw": "Hi @miles-1. Actually to avoid `enum` breaking, you have to respect indentation. Normally, the following lines should work: \n```typ\n+ item 1\n  \n  some comments\n\n+ item 2\n\n  some comments\n\n+ item 3\n\n  some comments\n```\n\nAnother possibility consists in writing :\n```typ\n+ item 1\n  \n  some comments\n\n+ item 2\n\nsome comments\n\n3. item 3\n\n  some comments\n\n+ item 4\n   \n  some comments \n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 48,
      "score": 29.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 125
    },
    {
      "id": 5003,
      "post_number": 3,
      "username": "miles-1",
      "name": "miles",
      "created_at": "2024-11-01T16:25:16.086Z",
      "updated_at": "2024-11-01T16:25:16.086Z",
      "cooked": "<p>Sorry, I should have been more clear why indentation is not the solution I’m looking for, I edited my question. Also, I am aware that numbering can be explicitly stated and it will continue from there, but that “hard coding” makes it difficult to rearrange questions without needing to manually count out <code>enum</code>s from scratch.</p>",
      "raw": "Sorry, I should have been more clear why indentation is not the solution I'm looking for, I edited my question. Also, I am aware that numbering can be explicitly stated and it will continue from there, but that \"hard coding\" makes it difficult to rearrange questions without needing to manually count out `enum`s from scratch.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 44,
      "score": 18.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 177
    },
    {
      "id": 5005,
      "post_number": 4,
      "username": "maucejo",
      "name": "Mathieu Aucejo",
      "created_at": "2024-11-01T16:46:49.086Z",
      "updated_at": "2024-11-02T09:12:54.764Z",
      "cooked": "<p>Ok <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\">. For this kind of things, I’ve created a counter and a function. Here is the code :</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let c = counter(\"question\")\n#let question(body) = [\n  #c.step()\n  #context[\n    *Question #c.get().first() #h(0.5em)*\n  ]\n  #body\n]\n</code></pre>\n<p>I prefer to avoid modifying the <code>enum</code> function, because I sometimes need enumeration inside a question.</p>",
      "raw": "Ok :slight_smile:. For this kind of things, I've created a counter and a function. Here is the code : \n```typ\n#let c = counter(\"question\")\n#let question(body) = [\n  #c.step()\n  #context[\n    *Question #c.get().first() #h(0.5em)*\n  ]\n  #body\n]\n```\n\nI prefer to avoid modifying the `enum` function, because I sometimes need enumeration inside a question.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 44,
      "score": 28.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 125
    },
    {
      "id": 5006,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-11-01T16:56:22.720Z",
      "updated_at": "2024-11-01T16:56:22.720Z",
      "cooked": "<p>Another approach to this <em>if your sections are not numbered</em> could be to use headings instead:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show heading.where(level: 2): set text(gray, 1em / 1.2, weight: \"regular\")\n// oops, this will make question 4 to be numbered question 1 again!\n// #show heading.where(level: 1): set heading(numbering: \"1.\")\n#show heading.where(level: 2): set heading(numbering: (_, ..nums) =&gt; numbering(\"1.\", ..nums))\n= Section 1\n\n== This is question 1\n\nthis is my answer to question 1\n\n== This is question 2\n\nthis is my answer to question 2\n\n== This is question 3\n\nthis is my answer to question 3\n\n= Section 2\n\n== This is question 4\n\nthis is my answer to question 4\n</code></pre>",
      "raw": "Another approach to this _if your sections are not numbered_ could be to use headings instead:\n```typ\n#show heading.where(level: 2): set text(gray, 1em / 1.2, weight: \"regular\")\n// oops, this will make question 4 to be numbered question 1 again!\n// #show heading.where(level: 1): set heading(numbering: \"1.\")\n#show heading.where(level: 2): set heading(numbering: (_, ..nums) => numbering(\"1.\", ..nums))\n= Section 1\n\n== This is question 1\n\nthis is my answer to question 1\n\n== This is question 2\n\nthis is my answer to question 2\n\n== This is question 3\n\nthis is my answer to question 3\n\n= Section 2\n\n== This is question 4\n\nthis is my answer to question 4\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 48,
      "score": 44.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 5063,
      "post_number": 6,
      "username": "Mc-Zen",
      "name": "Mc-Zen",
      "created_at": "2024-11-03T12:21:55.934Z",
      "updated_at": "2024-11-03T12:21:55.934Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/miles-1\">@miles-1</a> ,</p>\n<p>while <a class=\"mention\" href=\"/u/maucejo\">@maucejo</a> solution is very good and suitable for most cases, I want to point out that this is actually possible to configure with a simple <code>show</code> rule if you want to keep using the enum syntax and don’t care for nested enumerations.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let item-counter = counter(\"item-counter\")\n#set enum(start: 0)\n\n#show enum: it =&gt; {\n  if it.start != 0 { return it }\n  let args = it.fields()\n  let items = args.remove(\"children\")\n  context enum(..args, start: item-counter.get().first() + 1, ..items)\n  item-counter.update(i =&gt; i + it.children.len())\n}\n</code></pre>\n<p>What this does is to create a counter that keeps track of the number of already processed items and set the <code>start</code> parameter of the enumeration according to that counter. The line <code>#set enum(start: 0)</code> is a trick to prevent the show rule being called recursively.</p>\n<p>Now this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">  + Item\n  + Item\n\n  Some text in between\n  \n  + Item\n  + Item\n  \n  Some more text in between\n  \n  + Item\n  + Item\n</code></pre>\n<p>will produce the following output:<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/5/5c0a25c8bcb8a5a8dd7cc86a20baa9007837c930.png\" alt=\"image\" data-base62-sha1=\"d8dFrkQFvxXUv5qUqWJek4NGcYU\" width=\"234\" height=\"228\"></p>",
      "raw": "Hi @miles-1 ,\n\nwhile @maucejo solution is very good and suitable for most cases, I want to point out that this is actually possible to configure with a simple `show` rule if you want to keep using the enum syntax and don't care for nested enumerations. \n```typ\n#let item-counter = counter(\"item-counter\")\n#set enum(start: 0)\n\n#show enum: it => {\n  if it.start != 0 { return it }\n  let args = it.fields()\n  let items = args.remove(\"children\")\n  context enum(..args, start: item-counter.get().first() + 1, ..items)\n  item-counter.update(i => i + it.children.len())\n}\n```\nWhat this does is to create a counter that keeps track of the number of already processed items and set the `start` parameter of the enumeration according to that counter. The line `#set enum(start: 0)` is a trick to prevent the show rule being called recursively. \n\n\nNow this:\n```typ\n  + Item\n  + Item\n\n  Some text in between\n  \n  + Item\n  + Item\n  \n  Some more text in between\n  \n  + Item\n  + Item\n```\nwill produce the following output:\n![image|313x304, 75%](upload://d8dFrkQFvxXUv5qUqWJek4NGcYU.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 38,
      "score": 187.6,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 9
    },
    {
      "id": 5095,
      "post_number": 7,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-11-04T08:49:50.650Z",
      "updated_at": "2024-11-04T08:49:50.650Z",
      "cooked": "<p>A nested version of this is also discussed in <a href=\"https://forum.typst.app/t/resuming-nested-numbered-lists/1519\" class=\"inline-onebox\">Resuming Nested Numbered Lists</a></p>",
      "raw": "A nested version of this is also discussed in https://forum.typst.app/t/resuming-nested-numbered-lists/1519",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 28,
      "score": 50.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    }
  ],
  "scraped_at": "2025-06-10T09:55:39.702188"
}