{
  "topic_metadata": {
    "id": 2718,
    "title": "Can contextual math attachments be properly aligned?",
    "slug": "can-contextual-math-attachments-be-properly-aligned",
    "posts_count": 6,
    "created_at": "2025-02-07T11:11:18.719Z",
    "last_posted_at": "2025-02-09T16:18:00.254Z",
    "views": 140,
    "like_count": 1,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "janekfleper",
    "tags": [
      "math",
      "context"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 592
  },
  "posts": [
    {
      "id": 8323,
      "post_number": 1,
      "username": "Denys",
      "name": "Denys",
      "created_at": "2025-02-07T11:11:18.719Z",
      "updated_at": "2025-02-07T13:55:31.600Z",
      "cooked": "<p>If I have this code (the final version)</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let my-counter = counter(\"my-counter\")\n\n#let alternate(it) = {\n  context {\n    let value = my-counter.get().first()\n    if calc.even(value) {\n      it\n     }\n  }\n  my-counter.step()\n}\n\n\n\n$\n  alternate(integral)_1^2 \\\n  integral_1^2 \\\n  alternate(integral)_1^2 \n$\n</code></pre>\n<p>the function alternate doesn’t properly alternate the integral, if you will (in typst 12 and 13).<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/5/5e30b96332f77056563beb749eeb8a3c52a59533.png\" alt=\"{E915078B-53A2-4A1E-A911-C93697A2EC5A}\" data-base62-sha1=\"drfgWt29tT8UpDEAXQHus7wqByj\" width=\"276\" height=\"372\"></p>\n<p>I was told this due to the fact that typst no longer knows how to attach the accents because of the context. But maybe there’s a way to take this into account for this function?</p>",
      "raw": "If I have this code (the final version) \n```typ\n#let my-counter = counter(\"my-counter\")\n\n#let alternate(it) = {\n  context {\n    let value = my-counter.get().first()\n    if calc.even(value) {\n      it\n     }\n  }\n  my-counter.step()\n}\n\n\n\n$\n  alternate(integral)_1^2 \\\n  integral_1^2 \\\n  alternate(integral)_1^2 \n$\n```\n\nthe function alternate doesn't properly alternate the integral, if you will (in typst 12 and 13). \n![{E915078B-53A2-4A1E-A911-C93697A2EC5A}|276x372](upload://drfgWt29tT8UpDEAXQHus7wqByj.png)\n\nI was told this due to the fact that typst no longer knows how to attach the accents because of the context. But maybe there's a way to take this into account for this function?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 39,
      "score": 107.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 123
    },
    {
      "id": 8349,
      "post_number": 2,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-02-08T13:45:28.613Z",
      "updated_at": "2025-02-08T13:45:28.613Z",
      "cooked": "<p>You can pass the entire integral with the attachments to the function <code>alternate()</code> and then disable the <code>integral</code> symbol with a conditional show rule. This will correctly align the attachments relative to the integral symbol.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let my-counter = counter(\"my-counter\")\n\n#let alternate(it) = {\n  context {\n    let value = my-counter.get().first()\n    show sym.integral: if calc.odd(value) { none } else { it =&gt; it }\n    it\n  }\n  my-counter.step()\n}\n\n$\n  alternate(integral_1^2) \\\n  integral_1^2 \\\n  alternate(integral_1^2)\n$\n</code></pre>",
      "raw": "You can pass the entire integral with the attachments to the function `alternate()` and then disable the `integral` symbol with a conditional show rule. This will correctly align the attachments relative to the integral symbol.\n\n```typ\n#let my-counter = counter(\"my-counter\")\n\n#let alternate(it) = {\n  context {\n    let value = my-counter.get().first()\n    show sym.integral: if calc.odd(value) { none } else { it => it }\n    it\n  }\n  my-counter.step()\n}\n\n$\n  alternate(integral_1^2) \\\n  integral_1^2 \\\n  alternate(integral_1^2)\n$\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 11.2,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 69
    },
    {
      "id": 8358,
      "post_number": 3,
      "username": "Denys",
      "name": "Denys",
      "created_at": "2025-02-08T21:03:33.588Z",
      "updated_at": "2025-02-08T21:03:33.588Z",
      "cooked": "<p>I find this solution very specific and not extensible, yet it achieves the goal in this very specific case.</p>\n<p>For instance, to include the sum symbol I’d have to manually add it as well as any other new symbol. And what about alternating just content without the math mode, how would I know which part to keep (i.e. what would be the attachment)?</p>",
      "raw": "I find this solution very specific and not extensible, yet it achieves the goal in this very specific case.\n\nFor instance, to include the sum symbol I'd have to manually add it as well as any other new symbol. And what about alternating just content without the math mode, how would I know which part to keep (i.e. what would be the attachment)?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 10.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 123
    },
    {
      "id": 8361,
      "post_number": 4,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-02-09T00:08:46.892Z",
      "updated_at": "2025-02-09T00:08:46.892Z",
      "cooked": "<p>I would argue that my solution just matches the specificity of your question. <img src=\"https://forum.typst.app/images/emoji/apple/grinning.png?v=12\" title=\":grinning:\" class=\"emoji\" alt=\":grinning:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>If you want to adapt the solution to other (math) symbols, you can use the following show rule</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">show it.base.text: if calc.odd(value) { none } else { it =&gt; it }\n</code></pre>\n<p>Note that this requires the input to have at least one attachment. Otherwise <code>it.base</code> is not available and you would have to use <code>it.text</code> directly. You could parse the function parameter <code>it</code> to figure out what you need to extract to further generalize your show rule.</p>\n<p>Do you have an example what you would want to alternate without math mode? Maybe the counter + context approach is not even necessary and there is an easier solution available.</p>",
      "raw": "I would argue that my solution just matches the specificity of your question. :grinning:\n\nIf you want to adapt the solution to other (math) symbols, you can use the following show rule\n\n```typc\nshow it.base.text: if calc.odd(value) { none } else { it => it }\n```\n\nNote that this requires the input to have at least one attachment. Otherwise `it.base` is not available and you would have to use `it.text` directly. You could parse the function parameter `it` to figure out what you need to extract to further generalize your show rule.\n\nDo you have an example what you would want to alternate without math mode? Maybe the counter + context approach is not even necessary and there is an easier solution available.",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 15.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 69
    },
    {
      "id": 8366,
      "post_number": 5,
      "username": "Denys",
      "name": "Denys",
      "created_at": "2025-02-09T08:43:11.464Z",
      "updated_at": "2025-02-09T08:43:11.464Z",
      "cooked": "<p>I guess you’re right. It’s just this particular function is of low interest to me I picked it because of <a href=\"https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164\">this post</a> thinking it’s of some importance since it’s been discussed before. My very initial motivation was <a href=\"https://discord.com/channels/1054443721975922748/1335252524755845120\" rel=\"noopener nofollow ugc\">this usage</a> and there my first design was very similar to the alternate function</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let my-counter = counter(\"my-counter\")\n#let k = 1\n#let group(it) = {\n  context {\n    let value = my-counter.get().first()\n    if value==k{\n      hide(it)\n     }\n   else{\n      it   \n     }\n  }\n  my-counter.step()\n}\n</code></pre>\n<p>This function suffers from that same problem with attachments. This particular usage with manim gives natural examples of the use outside of math context e.g.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#group[= Introduction]\n... \n</code></pre>\n<p>But maybe if I combined these two approaches making 2 functions and using this one only if there’s an attachment it would make more sense than trying to write one huge function for each edge case.</p>",
      "raw": "I guess you're right. It's just this particular function is of low interest to me I picked it because of [this post](https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164) thinking it's of some importance since it's been discussed before. My very initial motivation was [this usage](https://discord.com/channels/1054443721975922748/1335252524755845120) and there my first design was very similar to the alternate function\n\n```typ\n#let my-counter = counter(\"my-counter\")\n#let k = 1\n#let group(it) = {\n  context {\n    let value = my-counter.get().first()\n    if value==k{\n      hide(it)\n     }\n   else{\n      it   \n     }\n  }\n  my-counter.step()\n}\n```\n\nThis function suffers from that same problem with attachments. This particular usage with manim gives natural examples of the use outside of math context e.g. \n```typ \n#group[= Introduction]\n... \n```\nBut maybe if I combined these two approaches making 2 functions and using this one only if there's an attachment it would make more sense than trying to write one huge function for each edge case.",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 19.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 123
    },
    {
      "id": 8392,
      "post_number": 6,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-02-09T16:18:00.254Z",
      "updated_at": "2025-02-09T16:18:00.254Z",
      "cooked": "<p>If I understand it correctly that you would like to selectively hide elements to build animations, it could be worth it to take a look at the source code of the <a href=\"https://typst.app/universe/package/touying/\">Touying</a> package? They have implemented functions to hide content based on the current slide.</p>",
      "raw": "If I understand it correctly that you would like to selectively hide elements to build animations, it could be worth it to take a look at the source code of the [Touying](https://typst.app/universe/package/touying/) package? They have implemented functions to hide content based on the current slide.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 19,
      "score": 23.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 69
    }
  ],
  "scraped_at": "2025-06-10T09:51:57.526455"
}