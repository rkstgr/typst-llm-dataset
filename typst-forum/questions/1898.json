{
  "topic_metadata": {
    "id": 1898,
    "title": "How can I remove spaces between bold and non-bold content with show rule?",
    "slug": "how-can-i-remove-spaces-between-bold-and-non-bold-content-with-show-rule",
    "posts_count": 4,
    "created_at": "2024-11-26T14:32:47.187Z",
    "last_posted_at": "2024-11-26T16:01:06.717Z",
    "views": 108,
    "like_count": 4,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "ParaN3xus",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 257
  },
  "posts": [
    {
      "id": 6117,
      "post_number": 1,
      "username": "miles-1",
      "name": "miles",
      "created_at": "2024-11-26T14:32:47.324Z",
      "updated_at": "2024-11-26T14:32:47.324Z",
      "cooked": "<p>With the function <code>ns</code> defined below, I can replace spaces with the text <code>SPACE</code></p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let ns(txt) = {\n  show regex(\"\\ \"): it =&gt; [SPACE]\n  txt\n}\n\n#ns[one two three four] // shows oneSPACEtwoSPACEthreeSPACEfour\n</code></pre>\n<p>However, if some of that content is bolded, the show rule is ineffective for adjacent spaces:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#ns[one *two* three four] \n</code></pre>\n<p>This shows “one <strong>two</strong> threeSPACEfour”. Using <code>repr</code>, I see the two inputs are structured differently:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#repr[one two three four] \n// gives [one two three four]\n#repr[one *two* three four] \n// gives sequence([one], [ ], strong(body:[two]), [ ], [three four]) \n</code></pre>\n<p>… but I’m still not sure why the <code>show</code> rule isn’t catching the space between bolded and unbolded words. How can I use <code>show</code> rules that apply to those spaces as well?</p>",
      "raw": "With the function `ns` defined below, I can replace spaces with the text `SPACE`\n```typst\n#let ns(txt) = {\n  show regex(\"\\ \"): it => [SPACE]\n  txt\n}\n\n#ns[one two three four] // shows oneSPACEtwoSPACEthreeSPACEfour\n```\nHowever, if some of that content is bolded, the show rule is ineffective for adjacent spaces:\n```typst\n#ns[one *two* three four] \n```\nThis shows \"one **two** threeSPACEfour\". Using `repr`, I see the two inputs are structured differently:\n```typst\n#repr[one two three four] \n// gives [one two three four]\n#repr[one *two* three four] \n// gives sequence([one], [ ], strong(body:[two]), [ ], [three four]) \n```\n... but I'm still not sure why the `show` rule isn't catching the space between bolded and unbolded words. How can I use `show` rules that apply to those spaces as well?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 26,
      "score": 305.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 177
    },
    {
      "id": 6118,
      "post_number": 2,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-11-26T14:38:00.705Z",
      "updated_at": "2024-11-26T14:38:00.705Z",
      "cooked": "<p>Solution:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let func-seq = [].func()\n\n#show func-seq: it =&gt; {\n  let blank = [ ]\n  let c = it.children\n  if (blank in c) {\n    func-seq(c.filter(x =&gt; x != blank))\n  } else {\n    it\n  }\n}\n\none *two* three\n</code></pre>",
      "raw": "Solution:\n```typ\n#let func-seq = [].func()\n\n#show func-seq: it => {\n  let blank = [ ]\n  let c = it.children\n  if (blank in c) {\n    func-seq(c.filter(x => x != blank))\n  } else {\n    it\n  }\n}\n\none *two* three\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 10.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 6121,
      "post_number": 3,
      "username": "miles-1",
      "name": "miles",
      "created_at": "2024-11-26T14:56:34.474Z",
      "updated_at": "2024-11-26T14:56:34.474Z",
      "cooked": "<p>Thanks. I applied your solution like this:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let func-seq = [].func()\n\n#let ns(txt) = {\n  show regex(\"\\ \"): it =&gt; []\n  show func-seq: it =&gt; {\n    let blank = [ ]\n    let c = it.children\n    if (blank in c) {func-seq(c.filter(x =&gt; x != blank))} else {it}\n  }\n  txt\n}\n\n/aʊ/ as in #ns[*ou* t]\n</code></pre>",
      "raw": "Thanks. I applied your solution like this:\n```typst\n#let func-seq = [].func()\n\n#let ns(txt) = {\n  show regex(\"\\ \"): it => []\n  show func-seq: it => {\n    let blank = [ ]\n    let c = it.children\n    if (blank in c) {func-seq(c.filter(x => x != blank))} else {it}\n  }\n  txt\n}\n\n/aʊ/ as in #ns[*ou* t]\n```",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 26,
      "score": 25.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 177
    },
    {
      "id": 6128,
      "post_number": 4,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-11-26T16:01:06.717Z",
      "updated_at": "2024-11-26T16:02:09.046Z",
      "cooked": "<p>You can simplify this in two ways:</p>\n<ul>\n<li>There is no need for a regex, as you can just match a string containing a space.</li>\n<li>You don’t need to edit sequences by hand, as you can create a show rule for <code>space</code> elements.</li>\n</ul>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let ns(txt) = {\n  show \" \": none\n  show [ ].func(): none\n  txt\n}\n</code></pre>",
      "raw": "You can simplify this in two ways:\n- There is no need for a regex, as you can just match a string containing a space.\n- You don't need to edit sequences by hand, as you can create a show rule for `space` elements.\n\n```typ\n#let ns(txt) = {\n  show \" \": none\n  show [ ].func(): none\n  txt\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 25,
      "score": 60.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    }
  ],
  "scraped_at": "2025-06-10T09:54:22.522514"
}