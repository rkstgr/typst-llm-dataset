{
  "topic_metadata": {
    "id": 322,
    "title": "How to get differently-sized header or footer depending on page number?",
    "slug": "how-to-get-differently-sized-header-or-footer-depending-on-page-number",
    "posts_count": 14,
    "created_at": "2024-09-16T09:56:06.269Z",
    "last_posted_at": "2024-10-25T19:09:11.709Z",
    "views": 1490,
    "like_count": 13,
    "reply_count": 8,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 8,
    "accepted_answer_username": "laurmaedje",
    "tags": [
      "page",
      "header-footer"
    ],
    "category_id": 5,
    "participant_count": 8,
    "word_count": 2804
  },
  "posts": [
    {
      "id": 1201,
      "post_number": 1,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-16T09:56:06.389Z",
      "updated_at": "2024-09-23T07:13:40.877Z",
      "cooked": "<p>With a <code>#set page</code> rule and <code>context</code>, it is possible to define header, footer, and page background depending on the page number.</p>\n<p>How to do something similar for the size of header and footer, meaning page margins? Imagine wanting a much larger footer on odd pages, for example. If I understand correctly, the above approach does not work here because <code>context</code> always produces (opaque) <code>content</code> values, not a length value or other types required for the <code>margin</code> parameter in the <code>page</code> function.</p>",
      "raw": "With a `#set page` rule and `context`, it is possible to define header, footer, and page background depending on the page number.\n\nHow to do something similar for the size of header and footer, meaning page margins? Imagine wanting a much larger footer on odd pages, for example. If I understand correctly, the above approach does not work here because `context` always produces (opaque) `content` values, not a length value or other types required for the `margin` parameter in the `page` function.",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 114,
      "score": 5452.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1253,
      "post_number": 2,
      "username": "xkevio",
      "name": "Kevio",
      "created_at": "2024-09-16T12:22:07.193Z",
      "updated_at": "2024-09-16T12:23:12.290Z",
      "cooked": "<p>If you want alternating page margins for binding, i.e., inside and outside margins that alternate based on whether it’s the inner or outer side of a page, you can use <code>inside</code> and <code>outside</code> inside a dictionary for the <code>margin</code> parameter.</p>\n<p>For top and bottom margins, it is indeed more difficult. I think it is currently not possible, precisely because of the reason you stated. As a workaround you can always manually add <code>v(1cm)</code> for example in the header or footer.</p>",
      "raw": "If you want alternating page margins for binding, i.e., inside and outside margins that alternate based on whether it's the inner or outer side of a page, you can use `inside` and `outside` inside a dictionary for the `margin` parameter.\n\nFor top and bottom margins, it is indeed more difficult. I think it is currently not possible, precisely because of the reason you stated. As a workaround you can always manually add `v(1cm)` for example in the header or footer.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 114,
      "score": 77.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 21
    },
    {
      "id": 1377,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-16T17:06:06.253Z",
      "updated_at": "2024-09-16T17:13:45.968Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"1\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>With a <code>#set page</code> rule and <code>context</code>, it is possible to define header, footer, and page background depending on the page number.</p>\n</blockquote>\n</aside>\n<p>Yes. But what does “page background” mean? <code>background</code> or <code>fill</code>? <a href=\"https://typst.app/docs/reference/layout/page/\" class=\"inline-onebox\">Page Function – Typst Documentation</a></p>\n<p>Here are a few examples that should cover all basic cases:</p>\n<details>\n<summary>\nset page(header + footer + background)</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(fill: gray, height: 4cm, width: 4cm, margin: 1cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n  background: context if is-odd-page() [odd] else [even] + \" background\",\n)\n#for n in range(1, 5) {\n  [page #n]\n  n += 1\n  pagebreak(weak: true)\n}\n</code></pre>\n<div align=\"center\">\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/3412a0b06ef7e16d2f0262471502b330662dc5f7.png\" alt=\"image\" data-base62-sha1=\"7qEJLidADFa8MOJJs43HE8q2vqv\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/1229b3e0753b0adce3a2ff25ed0a0ee0ea1d02d5.png\" alt=\"image\" data-base62-sha1=\"2AFWoVRxSx5kllRzqnAEOugKMnP\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/d5723ca75bc92b143cbe58800d84ddcd91f5bae9.png\" alt=\"image\" data-base62-sha1=\"uses4agNBKq6tetmxM8lQHIuWcF\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/3cac84bc7335d7157ad7e4a43cf969fac50ce486.png\" alt=\"image\" data-base62-sha1=\"8EKgzVcHnHJ0TNcbrmcY1Qsru1E\" width=\"170\" height=\"170\"></p>\n</div>\n</details>\n<details>\n<summary>\ncontext set page(fill)</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(height: 4cm, width: 4cm, margin: 1cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#for n in range(1, 5) {\n  context {\n    set page(fill: if is-odd-page() { orange } else { purple })\n    [page #n]\n  }\n  n += 1\n  pagebreak(weak: true)\n}\n</code></pre>\n<div align=\"center\">\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/575f2143dd93807b82c257e065a02f47c60d5676.png\" alt=\"image\" data-base62-sha1=\"csVm0c4Jmi42KlJpxL1iFREBftY\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/afcbbbb3a5fe4f0eaab116b6aba1b3a7139030c8.png\" alt=\"image\" data-base62-sha1=\"p5a3kusQdT76Ki8LIiazjteHfTi\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/058027641dc539921387a3209b60bdec9b646708.png\" alt=\"image\" data-base62-sha1=\"MEXfVhnLZg1qXmtxRnmO4R6IKk\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/2896ddfac48d06075a37ccc29756ab26a377690f.png\" alt=\"image\" data-base62-sha1=\"5N4ksVmliQKjkAwG0prfAt4Iroj\" width=\"170\" height=\"170\"></p>\n</div>\n</details>\n<details>\n<summary>\ncontext page(fill)[]</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(height: 4cm, width: 4cm, margin: 1cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#for n in range(1, 5) {\n  context page(fill: if is-odd-page() { orange } else { purple })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n</code></pre>\n<div align=\"center\">\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/575f2143dd93807b82c257e065a02f47c60d5676.png\" alt=\"image\" data-base62-sha1=\"csVm0c4Jmi42KlJpxL1iFREBftY\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/afcbbbb3a5fe4f0eaab116b6aba1b3a7139030c8.png\" alt=\"image\" data-base62-sha1=\"p5a3kusQdT76Ki8LIiazjteHfTi\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/058027641dc539921387a3209b60bdec9b646708.png\" alt=\"image\" data-base62-sha1=\"MEXfVhnLZg1qXmtxRnmO4R6IKk\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/2896ddfac48d06075a37ccc29756ab26a377690f.png\" alt=\"image\" data-base62-sha1=\"5N4ksVmliQKjkAwG0prfAt4Iroj\" width=\"170\" height=\"170\"></p>\n</div>\n</details>\n<details>\n<summary>\nset page(header + footer + background) + context page(fill)[]</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(height: 4cm, width: 4cm, margin: 1cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n  background: context if is-odd-page() [odd] else [even] + \" background\",\n)\n#for n in range(1, 5) {\n  context page(fill: if is-odd-page() { orange } else { purple })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n</code></pre>\n<div align=\"center\">\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/35bc999032dc4488abc8441abec80fdde1c698eb.png\" alt=\"image\" data-base62-sha1=\"7FnnvSXPH5OvpLjc3IljnkFbn6z\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/cd8991d90961e9d46903af48150e3647dab77eaa.png\" alt=\"image\" data-base62-sha1=\"tkgCDAPMUwR7RS0VDHH4C3cAb7c\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/74eaae8c59ca0c0c956f7f1a8f5dd7ee372ae9f8.png\" alt=\"image\" data-base62-sha1=\"gGibMDtEi3dgj1BxnZUVzDxmMyY\" width=\"170\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/f87f1b53a9debdd3b1a32803cee931529bc9e5c2.png\" alt=\"image\" data-base62-sha1=\"zsiJJoRCPeNA2S41IgadofFrYHg\" width=\"170\" height=\"170\"></p>\n</div>\n</details>\n<p>Note that some of these only work (correctly or at all) from the git version, meaning they all will work in the future version 0.12.0. Try compiling them with v0.11.1 and see if it works.</p>\n<p>Overall, you can define <code>set page()</code> once at the top of a document if you need for a field that can be of a <code>content</code> type to be set (because <code>context</code> will return <code>content</code> type, at least in the v0.11.1 and in git version from 2024-09-09). This includes <code>header</code>, <code>footer</code>, <code>background</code> etc.</p>\n<p>But if you need to set a field that cannot be of a <code>content</code> type, then you would have to use <code>set page()</code> or <code>page()[]</code> for every new page (where you want the behavior to apply).  This includes <code>fill</code>, <code>margin</code> etc.</p>\n<p>Thankfully, you can split mixed <code>set page()</code> into two: 1 for <code>content</code>-type fields and 1 for other-type fields.</p>\n<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"1\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>How to do something similar for the size of header and footer, meaning page margins? Imagine wanting a much larger footer on odd pages, for example.</p>\n</blockquote>\n</aside>\n<p>For <code>margin</code> it’s practically the same thing as the example with <code>fill</code>:</p>\n<details>\n<summary>\nset page(header, footer) + context page(margin)[]</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(fill: gray, height: 4cm, width: 6cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n)\n#for n in range(1, 5) {\n  context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n</code></pre>\n<div align=\"center\">\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/7c08a7f1e3311c5c55e68252e049116536bba36b.png\" alt=\"image\" data-base62-sha1=\"hHfKBW2zHOjQ1VK2aItuogbimAX\" width=\"255\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/3915bf8d1ecbf73c5e5969ea0d8320e8212c8302.png\" alt=\"image\" data-base62-sha1=\"88ZOiks9lxWKwUj7a2jY7LryPUC\" width=\"255\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/e39c3dede8689077950f5a451d5b399de7f9d029.png\" alt=\"image\" data-base62-sha1=\"wtx8duN4XdM8zGneB5pB05rO7kR\" width=\"255\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/5be474aa4480a270e511c5bcaf1ba3963ba239ac.png\" alt=\"image\" data-base62-sha1=\"d6UUFbx4pf0DMs7DWncYXKoz4de\" width=\"255\" height=\"170\"></p>\n</div>\n</details>\n<details>\n<summary>\nLoop clarification</summary>\n<p>The loop in the examples is a shorthand for this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[page 1]\n#pagebreak()\n#context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[page 2]\n#pagebreak()\n#context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[page 3]\n#pagebreak()\n#context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[page 4]\n</code></pre>\n<p>But you can simplify this by using a wrapper function:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#let page-margin(..args) = {\n  context page(margin: if is-odd-page() { 1cm } else { 1.5cm }, ..args)\n}\n#page-margin[page 1]\n#pagebreak()\n#page-margin[page 2]\n#pagebreak()\n#page-margin[page 3]\n#pagebreak()\n#page-margin[page 4]\n</code></pre>\n</details>\n<p>As you can see, there are quite a few thing that can be written in different ways to achieve the same goal. Use whichever is more readable so that you will be able to maintain/go back to the code snippet and understand what it does.</p>\n<p>One last note that is worth mentioning is that to have a syntax that accesses some context-based value (without the <code>context</code> keyword) in a separate place (to re-use it multiple times) you have to define a function and not a variable.</p>\n<details>\n<summary>\nExamples (variable vs. function)</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// error: `counter(page).get()` can only be used when context is known\n#let is-odd-page = calc.rem(counter(page).get().first(), 2) == 1\n\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n// error: `counter(page).get()` can only be used when context is known\n#let page-margin = page.with(margin: if is-odd-page() { 1cm } else { 1.5cm }) \n\n// Correct:\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#let page-margin(..args) = page(margin: if is-odd-page() { 1cm } else { 1.5cm }, ..args) \n\n// Or consume the context altogether:\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#let page-margin(..args) = context {\n  page(margin: if is-odd-page() { 1cm } else { 1.5cm }, ..args)\n}\n</code></pre>\n</details>",
      "raw": "[quote=\"maven, post:1, topic:322\"]\nWith a `#set page` rule and `context`, it is possible to define header, footer, and page background depending on the page number.\n[/quote]\n\nYes. But what does \"page background\" mean? `background` or `fill`? https://typst.app/docs/reference/layout/page/\n\nHere are a few examples that should cover all basic cases:\n\n[details=\"set page(header + footer + background)\"]\n```typ\n#set page(fill: gray, height: 4cm, width: 4cm, margin: 1cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n  background: context if is-odd-page() [odd] else [even] + \" background\",\n)\n#for n in range(1, 5) {\n  [page #n]\n  n += 1\n  pagebreak(weak: true)\n}\n```\n\n<div align=\"center\">\n\n![image|227x227, 75%](upload://7qEJLidADFa8MOJJs43HE8q2vqv.png)\n\n![image|227x227, 75%](upload://2AFWoVRxSx5kllRzqnAEOugKMnP.png)\n\n![image|227x227, 75%](upload://uses4agNBKq6tetmxM8lQHIuWcF.png)\n\n![image|227x227, 75%](upload://8EKgzVcHnHJ0TNcbrmcY1Qsru1E.png)\n</div>\n[/details]\n\n[details=\"context set page(fill)\"]\n```typ\n#set page(height: 4cm, width: 4cm, margin: 1cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#for n in range(1, 5) {\n  context {\n    set page(fill: if is-odd-page() { orange } else { purple })\n    [page #n]\n  }\n  n += 1\n  pagebreak(weak: true)\n}\n```\n\n<div align=\"center\">\n\n![image|227x227, 75%](upload://csVm0c4Jmi42KlJpxL1iFREBftY.png)\n\n![image|227x227, 75%](upload://p5a3kusQdT76Ki8LIiazjteHfTi.png)\n\n![image|227x227, 75%](upload://MEXfVhnLZg1qXmtxRnmO4R6IKk.png)\n\n![image|227x227, 75%](upload://5N4ksVmliQKjkAwG0prfAt4Iroj.png)\n</div>\n[/details]\n\n[details=\"context page(fill)[]\"]\n```typ\n#set page(height: 4cm, width: 4cm, margin: 1cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#for n in range(1, 5) {\n  context page(fill: if is-odd-page() { orange } else { purple })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n```\n\n<div align=\"center\">\n\n![image|227x227, 75%](upload://csVm0c4Jmi42KlJpxL1iFREBftY.png)\n\n![image|227x227, 75%](upload://p5a3kusQdT76Ki8LIiazjteHfTi.png)\n\n![image|227x227, 75%](upload://MEXfVhnLZg1qXmtxRnmO4R6IKk.png)\n\n![image|227x227, 75%](upload://5N4ksVmliQKjkAwG0prfAt4Iroj.png)\n</div>\n[/details]\n\n[details=\"set page(header + footer + background) + context page(fill)[]\"]\n```typ\n#set page(height: 4cm, width: 4cm, margin: 1cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n  background: context if is-odd-page() [odd] else [even] + \" background\",\n)\n#for n in range(1, 5) {\n  context page(fill: if is-odd-page() { orange } else { purple })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n```\n\n<div align=\"center\">\n\n![image|227x227, 75%](upload://7FnnvSXPH5OvpLjc3IljnkFbn6z.png)\n\n![image|227x227, 75%](upload://tkgCDAPMUwR7RS0VDHH4C3cAb7c.png)\n\n![image|227x227, 75%](upload://gGibMDtEi3dgj1BxnZUVzDxmMyY.png)\n\n![image|227x227, 75%](upload://zsiJJoRCPeNA2S41IgadofFrYHg.png)\n</div>\n[/details]\n\nNote that some of these only work (correctly or at all) from the git version, meaning they all will work in the future version 0.12.0. Try compiling them with v0.11.1 and see if it works.\n\nOverall, you can define `set page()` once at the top of a document if you need for a field that can be of a `content` type to be set (because `context` will return `content` type, at least in the v0.11.1 and in git version from 2024-09-09). This includes `header`, `footer`, `background` etc.\n\nBut if you need to set a field that cannot be of a `content` type, then you would have to use `set page()` or `page()[]` for every new page (where you want the behavior to apply).  This includes `fill`, `margin` etc.\n\nThankfully, you can split mixed `set page()` into two: 1 for `content`-type fields and 1 for other-type fields.\n\n[quote=\"maven, post:1, topic:322\"]\nHow to do something similar for the size of header and footer, meaning page margins? Imagine wanting a much larger footer on odd pages, for example.\n[/quote]\n\nFor `margin` it's practically the same thing as the example with `fill`:\n\n[details=\"set page(header, footer) + context page(margin)[]\"]\n```typ\n#set page(fill: gray, height: 4cm, width: 6cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n)\n#for n in range(1, 5) {\n  context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n```\n\n<div align=\"center\">\n\n![image|340x227, 75%](upload://hHfKBW2zHOjQ1VK2aItuogbimAX.png)\n\n![image|340x227, 75%](upload://88ZOiks9lxWKwUj7a2jY7LryPUC.png)\n\n![image|340x227, 75%](upload://wtx8duN4XdM8zGneB5pB05rO7kR.png)\n\n![image|340x227, 75%](upload://d6UUFbx4pf0DMs7DWncYXKoz4de.png)\n</div>\n[/details]\n\n[details=\"Loop clarification\"]\n\nThe loop in the examples is a shorthand for this:\n\n```typ\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[page 1]\n#pagebreak()\n#context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[page 2]\n#pagebreak()\n#context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[page 3]\n#pagebreak()\n#context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[page 4]\n```\n\nBut you can simplify this by using a wrapper function:\n\n```typ\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#let page-margin(..args) = {\n  context page(margin: if is-odd-page() { 1cm } else { 1.5cm }, ..args)\n}\n#page-margin[page 1]\n#pagebreak()\n#page-margin[page 2]\n#pagebreak()\n#page-margin[page 3]\n#pagebreak()\n#page-margin[page 4]\n```\n\n[/details]\n\nAs you can see, there are quite a few thing that can be written in different ways to achieve the same goal. Use whichever is more readable so that you will be able to maintain/go back to the code snippet and understand what it does.\n\nOne last note that is worth mentioning is that to have a syntax that accesses some context-based value (without the `context` keyword) in a separate place (to re-use it multiple times) you have to define a function and not a variable.\n\n[details=\"Examples (variable vs. function)\"]\n```typ\n// error: `counter(page).get()` can only be used when context is known\n#let is-odd-page = calc.rem(counter(page).get().first(), 2) == 1\n\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n// error: `counter(page).get()` can only be used when context is known\n#let page-margin = page.with(margin: if is-odd-page() { 1cm } else { 1.5cm }) \n\n// Correct:\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#let page-margin(..args) = page(margin: if is-odd-page() { 1cm } else { 1.5cm }, ..args) \n\n// Or consume the context altogether:\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#let page-margin(..args) = context {\n  page(margin: if is-odd-page() { 1cm } else { 1.5cm }, ..args)\n}\n```\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 3,
      "quote_count": 1,
      "like_count": 2,
      "reads": 108,
      "score": 251.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 1623,
      "post_number": 4,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-17T13:18:05.209Z",
      "updated_at": "2024-09-17T13:18:05.209Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"xkevio\" data-post=\"2\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/xkevio/48/37_2.png\" class=\"avatar\"> xkevio:</div>\n<blockquote>\n<p>As a workaround you can always manually add <code>v(1cm)</code> for example in the header or footer.</p>\n</blockquote>\n</aside>\n<p>That does not change the size of the header/footer however. The header/footer content is then just clipped at page top/bottom.</p>",
      "raw": "[quote=\"xkevio, post:2, topic:322\"]\nAs a workaround you can always manually add `v(1cm)` for example in the header or footer.\n[/quote]\n\nThat does not change the size of the header/footer however. The header/footer content is then just clipped at page top/bottom.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 84,
      "score": 26.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1625,
      "post_number": 5,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-17T13:38:06.522Z",
      "updated_at": "2024-09-17T13:38:06.522Z",
      "cooked": "<p><a class=\"mention\" href=\"/u/andrew\">@Andrew</a></p>\n<p>Thanks for the extensive reply. Unfortunately, my question is still not answered. (I suspect that it’s simply not possible though.)</p>\n<p>When using <code>page</code> as a function, a “subdocument” of sorts with its own content is created and inserted as separate pages. What I wanted was to have a document (imagine it just being <code>#lorem(10000)</code>) have non-trivial per-page styling. This is possible, as everyone agrees, for header/footer and background content, but probably not for other page properties like margins.</p>\n<p>Unless someone knows more?</p>\n<p>I thought that <code>#show: it =&gt; ...</code> might help, but it doesn’t, as far as I could see, because it postprocesses the main document content, not the typeset pages…</p>\n<p>By the way, there is a simple workaround for <code>fill</code>, using <code>background</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// instead of `#set page(fill: context { ... })`\n#set page(\n  background: context {\n    let color = if calc.rem(counter(page).get().at(0), 2) == 0 {\n      aqua\n    } else {\n      lime\n    }\n    rect(\n      height: 100%,\n      width: 100%,\n      fill: color,\n    )\n  }\n)\n\n#lorem(10000)\n</code></pre>",
      "raw": "@Andrew \n\nThanks for the extensive reply. Unfortunately, my question is still not answered. (I suspect that it's simply not possible though.)\n\nWhen using `page` as a function, a \"subdocument\" of sorts with its own content is created and inserted as separate pages. What I wanted was to have a document (imagine it just being `#lorem(10000)`) have non-trivial per-page styling. This is possible, as everyone agrees, for header/footer and background content, but probably not for other page properties like margins.\n\nUnless someone knows more?\n\nI thought that `#show: it => ...` might help, but it doesn't, as far as I could see, because it postprocesses the main document content, not the typeset pages...\n\nBy the way, there is a simple workaround for `fill`, using `background`:\n\n```typ\n// instead of `#set page(fill: context { ... })`\n#set page(\n  background: context {\n    let color = if calc.rem(counter(page).get().at(0), 2) == 0 {\n      aqua\n    } else {\n      lime\n    }\n    rect(\n      height: 100%,\n      width: 100%,\n      fill: color,\n    )\n  }\n)\n\n#lorem(10000)\n```",
      "reply_to_post_number": 3,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 85,
      "score": 76.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1628,
      "post_number": 6,
      "username": "Tinger",
      "name": "Tinger",
      "created_at": "2024-09-17T13:48:47.563Z",
      "updated_at": "2024-09-17T13:48:47.563Z",
      "cooked": "<p>I don’t think you can do this at the moment, there are some related discussions about specifying styles which depend on other styles scattered over various issues.</p>\n<p>One I remember which is fairly similar at the core is defining themes for documents using a state variable, the same problem presented itself for setting the colors depending on the variable in the state, e.g.:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let theme = state(\"theme\", (\n  foreground: black,\n  background: white,\n))\n\n#set text(fill: theme.get()) // doens't work, needs context\n#set text(fill: context theme.get()) // doens't work, is opaque\n</code></pre>\n<p>You can see the whole discussion here:</p>\n<aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/typst/typst/issues/3104\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/typst/typst/issues/3104\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/typst/typst</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\" data-github-private-repo=\"false\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/typst/typst/issues/3104\" target=\"_blank\" rel=\"noopener nofollow ugc\">Theme-dependent default color value, so packages don't use hardcoded `black` as the default line/fill color</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2023-12-30\" data-time=\"20:17:53\" data-timezone=\"UTC\">08:17PM - 30 Dec 23 UTC</span>\n      </div>\n\n        <div class=\"date\">\n          closed <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-02-28\" data-time=\"11:30:03\" data-timezone=\"UTC\">11:30AM - 28 Feb 24 UTC</span>\n        </div>\n\n      <div class=\"user\">\n        <a href=\"https://github.com/Leedehai\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n          <img alt=\"Leedehai\" src=\"https://forum.typst.app/uploads/default/original/1X/4d228dd918476710f282b0bed56bcfbb13e0225d.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"6E98C3\">\n          Leedehai\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          feature request\n        </span>\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">### Description\n\nAs discussed in Discord, nowadays authors of packages often s<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">et the default color of strokes, filles etc. to be `black`, while in most cases what they actually intended is \"the foreground color\". At the moment, using `black` as the default color is okay since the only current export format is PDF and PDF's background is almost always white.\n\nHowever, this assumption will change when Typst supports [HTML export]([HTML output](https://github.com/typst/typst/issues/721)) format, where the background color could be black-ish (especially Dark Mode, if Typst wants to [support this trend](https://bootcamp.uxdesign.cc/the-rise-of-dark-mode-a-design-trend-thats-here-to-stay-fdcacc28bd30)) or other customizable theme color. Therefore, we need to provide a color value that is theme-aware, so that package authors can set the default stroke/fill color to this value, instead of hardcoding it to `black`.\n\n👉 This might look a bit too ahead-thinking at the first glance, but in fact there's value to provide this feature early on. Otherwise, packages would be locked in the hardcoded `black` default color, and it would be a HUGE pain to ask third-party packages to migrate to theme-dependent default color later when Typst supports Dark Mode (or user-customizable themes).\n\n---\n🔔  Below is a _possible_ API proposal. There can be widely different ways to address the issue above. This proposal _is not tied_ to the issue in and of itself.\n\nA possible API (thanks to @tingerrr) is\n```typ\n#set color(theme: (fg: black, bg: white))\n\n#let draw-something(..., color:  color.theme(\"fg\")) = { ... }  // A package function's implementation\n```\n`color.theme(\"fg\")` will pick the `theme.fg` color customized above, and if it's missing or no theme was set, it defaults to `black`.\n\nA detail worth noting is `color.theme()`'s computation needs to take `Location` into account, because the actual color value of the default color depends on where `draw-something()` is called in the user doc.\n\n\n### Use Case\n\nIf one day Typst supports Dark Mode, packages that use `color.theme(\"fg\")` (instead of hardcoded `black`) as the default color can still draw nicely. Otherwise, those packages would render bad, and therefore Dark Mode wouldn't be enabled after all, and the impression \"Typst doesn't support Dark Mode nicely; let's use X instead\" might ensue.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>While the underlying motivation different, the problem of one of the solutions was the same and remains unsolved. I outlined some ideas for resolving some of the style values contextually (see the comment about <code>Lazy Colors</code>, which could probably be applied to all style rules).</p>",
      "raw": "I don't think you can do this at the moment, there are some related discussions about specifying styles which depend on other styles scattered over various issues.\n\nOne I remember which is fairly similar at the core is defining themes for documents using a state variable, the same problem presented itself for setting the colors depending on the variable in the state, e.g.:\n\n```typ\n#let theme = state(\"theme\", (\n  foreground: black,\n  background: white,\n))\n\n#set text(fill: theme.get()) // doens't work, needs context\n#set text(fill: context theme.get()) // doens't work, is opaque\n```\n You can see the whole discussion here:\n\nhttps://github.com/typst/typst/issues/3104\n\nWhile the underlying motivation different, the problem of one of the solutions was the same and remains unsolved. I outlined some ideas for resolving some of the style values contextually (see the comment about `Lazy Colors`, which could probably be applied to all style rules).",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 80,
      "score": 45.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 29
    },
    {
      "id": 1636,
      "post_number": 7,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-17T14:12:54.868Z",
      "updated_at": "2024-09-17T14:12:54.868Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"5\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>Unfortunately, my question is still not answered.</p>\n</blockquote>\n</aside>\n<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"1\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>How to do something similar for the size of header and footer, meaning page margins? Imagine wanting a much larger footer on odd pages, for example.</p>\n</blockquote>\n</aside>\n<p>I don’t understand how this does not answer the question:</p>\n<aside class=\"quote no-group\" data-username=\"Andrew\" data-post=\"3\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<p>For <code>margin</code> it’s practically the same thing as the example with <code>fill</code>:</p>\n<details>\n<summary>\nset page(header, footer) + context page(margin)[]</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(fill: gray, height: 4cm, width: 6cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n)\n#for n in range(1, 5) {\n  context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/7c08a7f1e3311c5c55e68252e049116536bba36b.png\" alt=\"image\" data-base62-sha1=\"hHfKBW2zHOjQ1VK2aItuogbimAX\" width=\"255\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/3915bf8d1ecbf73c5e5969ea0d8320e8212c8302.png\" alt=\"image\" data-base62-sha1=\"88ZOiks9lxWKwUj7a2jY7LryPUC\" width=\"255\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/e39c3dede8689077950f5a451d5b399de7f9d029.png\" alt=\"image\" data-base62-sha1=\"wtx8duN4XdM8zGneB5pB05rO7kR\" width=\"255\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/5be474aa4480a270e511c5bcaf1ba3963ba239ac.png\" alt=\"image\" data-base62-sha1=\"d6UUFbx4pf0DMs7DWncYXKoz4de\" width=\"255\" height=\"170\"></p>\n</details>\n</blockquote>\n</aside>\n<p>The code does allow you to have a much larger footer/header (margins) on odd pages than on even pages. Well, actually, I messed up a little, I set smaller margins for odd pages, but the fix is to just swap the values:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">context page(margin: if is-odd-page() { 1.5cm } else { 1cm })[\n</code></pre>\n<p>Maybe you mean how to do the same thing but without calling <code>context page()[]</code> or <code>context [#set page();]</code> at the start of every new page? Meaning, you are only allowed to call <code>set page()</code> once at the very top of a document. Then I don’t think it is possible.</p>\n<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"5\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>By the way, there is a simple workaround for <code>fill</code>, using <code>background</code></p>\n</blockquote>\n</aside>\n<p>If I <em>now</em> understand correctly, then sure. There is a similar topic, where I wrote a <a href=\"https://forum.typst.app/t/how-to-use-a-pattern-image-as-the-page-background/370/6\">post</a> comparing <code>page.fill</code> and <code>page.background</code>.</p>",
      "raw": "[quote=\"maven, post:5, topic:322\"]\nUnfortunately, my question is still not answered.\n[/quote]\n\n[quote=\"maven, post:1, topic:322\"]\nHow to do something similar for the size of header and footer, meaning page margins? Imagine wanting a much larger footer on odd pages, for example.\n[/quote]\n\nI don't understand how this does not answer the question:\n\n[quote=\"Andrew, post:3, topic:322\"]\nFor `margin` it’s practically the same thing as the example with `fill`:\n\n[details=\"set page(header, footer) + context page(margin)[]\"]\n```typ\n#set page(fill: gray, height: 4cm, width: 6cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n)\n#for n in range(1, 5) {\n  context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n```\n\n![image|255x170](upload://hHfKBW2zHOjQ1VK2aItuogbimAX)\n\n![image|255x170](upload://88ZOiks9lxWKwUj7a2jY7LryPUC)\n\n![image|255x170](upload://wtx8duN4XdM8zGneB5pB05rO7kR)\n\n![image|255x170](upload://d6UUFbx4pf0DMs7DWncYXKoz4de)\n[/details]\n[/quote]\n\nThe code does allow you to have a much larger footer/header (margins) on odd pages than on even pages. Well, actually, I messed up a little, I set smaller margins for odd pages, but the fix is to just swap the values:\n\n```typc\ncontext page(margin: if is-odd-page() { 1.5cm } else { 1cm })[\n```\n\nMaybe you mean how to do the same thing but without calling `context page()[]` or `context [#set page();]` at the start of every new page? Meaning, you are only allowed to call `set page()` once at the very top of a document. Then I don't think it is possible.\n\n[quote=\"maven, post:5, topic:322\"]\nBy the way, there is a simple workaround for `fill`, using `background`\n[/quote]\n\nIf I *now* understand correctly, then sure. There is a similar topic, where I wrote a [post](https://forum.typst.app/t/how-to-use-a-pattern-image-as-the-page-background/370/6) comparing `page.fill` and `page.background`.",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 3,
      "like_count": 0,
      "reads": 81,
      "score": 76.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 1640,
      "post_number": 8,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-17T14:18:28.858Z",
      "updated_at": "2024-09-17T14:18:28.858Z",
      "cooked": "<p>I can confirm that it is not possible. Especially varying side margins are hard to implement because the paragraph width can then change based on where a pagebreak falls. That’s why inside/outside margins are ok: They don’t affect the inner width in this way.</p>\n<p>There are plans to make this kind of stuff possible at the layout engine level in the future.</p>",
      "raw": "I can confirm that it is not possible. Especially varying side margins are hard to implement because the paragraph width can then change based on where a pagebreak falls. That's why inside/outside margins are ok: They don't affect the inner width in this way.\n\nThere are plans to make this kind of stuff possible at the layout engine level in the future.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 4,
      "reads": 78,
      "score": 200.4,
      "accepted_answer": true,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 1667,
      "post_number": 9,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-17T15:17:22.355Z",
      "updated_at": "2024-09-17T15:17:22.355Z",
      "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"Andrew\" data-post=\"7\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<p>I don’t understand how this does not answer the question:</p>\n<p>For <code>margin</code> it’s practically the same thing as the example with <code>fill</code>:</p>\n<p>set page(header, footer) + context page(margin)<span class=\"chcklst-box fa fa-square-o fa-fw\"></span></p>\n<aside class=\"quote no-group\" data-username=\"Andrew\" data-post=\"3\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<pre><code class=\"lang-auto\">#set page(fill: gray, height: 4cm, width: 6cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n)\n#for n in range(1, 5) {\n  context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/7c08a7f1e3311c5c55e68252e049116536bba36b.png\" alt=\"image\" data-base62-sha1=\"hHfKBW2zHOjQ1VK2aItuogbimAX\" width=\"255\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/3915bf8d1ecbf73c5e5969ea0d8320e8212c8302.png\" alt=\"image\" data-base62-sha1=\"88ZOiks9lxWKwUj7a2jY7LryPUC\" width=\"255\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/e39c3dede8689077950f5a451d5b399de7f9d029.png\" alt=\"image\" data-base62-sha1=\"wtx8duN4XdM8zGneB5pB05rO7kR\" width=\"255\" height=\"170\"></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/5be474aa4480a270e511c5bcaf1ba3963ba239ac.png\" alt=\"image\" data-base62-sha1=\"d6UUFbx4pf0DMs7DWncYXKoz4de\" width=\"255\" height=\"170\"></p>\n</blockquote>\n</aside>\n<p>The code does allow you to have a much larger footer/header (margins) on odd pages than on even pages.</p>\n</blockquote>\n</aside>\n<p>Let me still reply to this: You’re calling <code>page</code> multiple times to create pages with specific properties. That of course you can do, but then, each of those pages has separate content provided to each <code>page</code> call. In such a case, depending on what you want to do, you probably don’t even need <code>context</code>, just a good old <code>page</code> call with whatever arguments/properties you desire per page. I’m aware it’s not exactly the same thing, but when I would create individual separate pages like this, I probably would not use <code>context</code> to set their individual properties.</p>\n<p>What I wanted is to have page-number-specific layout or style (top/bottom margins specifically) applied to the (however many) pages that are typeset from one content value (the “entire” document).</p>\n<p>I hope that clears it up. But thanks for your inputs anyway!</p>\n<p>Cheers</p>",
      "raw": "[quote=\"Andrew, post:7, topic:322\"]\nI don’t understand how this does not answer the question:\n\nFor `margin` it’s practically the same thing as the example with `fill`:\n\nset page(header, footer) + context page(margin)[]\n[quote=\"Andrew, post:3, topic:322\"]\n```\n#set page(fill: gray, height: 4cm, width: 6cm)\n#let is-odd-page() = calc.rem(counter(page).get().first(), 2) == 1\n#set page(\n  header: context if is-odd-page() [odd] else [even] + \" header\",\n  footer: context if is-odd-page() [odd] else [even] + \" footer\",\n)\n#for n in range(1, 5) {\n  context page(margin: if is-odd-page() { 1cm } else { 1.5cm })[\n    page #n\n  ]\n  n += 1\n  pagebreak(weak: true)\n}\n```\n\n![image|255x170](upload://hHfKBW2zHOjQ1VK2aItuogbimAX)\n\n![image|255x170](upload://88ZOiks9lxWKwUj7a2jY7LryPUC)\n\n![image|255x170](upload://wtx8duN4XdM8zGneB5pB05rO7kR)\n\n![image|255x170](upload://d6UUFbx4pf0DMs7DWncYXKoz4de)\n[/quote]\n\nThe code does allow you to have a much larger footer/header (margins) on odd pages than on even pages.\n[/quote]\n\nLet me still reply to this: You're calling `page` multiple times to create pages with specific properties. That of course you can do, but then, each of those pages has separate content provided to each `page` call. In such a case, depending on what you want to do, you probably don't even need `context`, just a good old `page` call with whatever arguments/properties you desire per page. I'm aware it's not exactly the same thing, but when I would create individual separate pages like this, I probably would not use `context` to set their individual properties.\n\nWhat I wanted is to have page-number-specific layout or style (top/bottom margins specifically) applied to the (however many) pages that are typeset from one content value (the \"entire\" document).\n\nI hope that clears it up. But thanks for your inputs anyway!\n\nCheers",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 2,
      "like_count": 0,
      "reads": 79,
      "score": 65.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1772,
      "post_number": 10,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-18T14:17:56.737Z",
      "updated_at": "2024-09-18T14:17:56.737Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"9\" data-topic=\"322\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>I hope that clears it up.</p>\n</blockquote>\n</aside>\n<p>Yes, it did, thank you.</p>",
      "raw": "[quote=\"maven, post:9, topic:322\"]\nI hope that clears it up.\n[/quote]\n\nYes, it did, thank you.",
      "reply_to_post_number": 9,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 2,
      "reads": 67,
      "score": 68.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 3685,
      "post_number": 11,
      "username": "RamkumarKB",
      "name": "Ramkumar KB",
      "created_at": "2024-10-11T03:13:22.826Z",
      "updated_at": "2024-10-11T03:13:22.826Z",
      "cooked": "<p>I have logged an issue, capturing the gist of this discussion, in the Github project - <a href=\"https://github.com/typst/typst/issues/5182\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Ability to use context in page margin attribute · Issue #5182 · typst/typst · GitHub</a></p>",
      "raw": "I have logged an issue, capturing the gist of this discussion, in the Github project - https://github.com/typst/typst/issues/5182",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 60,
      "score": 12.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 294
    },
    {
      "id": 4624,
      "post_number": 12,
      "username": "mojtaba_baghban",
      "name": "",
      "created_at": "2024-10-24T15:42:40.529Z",
      "updated_at": "2024-10-24T15:42:40.529Z",
      "cooked": "<p>Is it possible to have differently-sized header for odd and even page in new version 0.12?</p>",
      "raw": "Is it possible to have differently-sized header for odd and even page in new version 0.12?",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 52,
      "score": 45.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 671
    },
    {
      "id": 4647,
      "post_number": 13,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-10-25T07:40:52.764Z",
      "updated_at": "2024-10-25T07:40:52.764Z",
      "cooked": "<p>No, it’s not possible yet.</p>",
      "raw": "No, it's not possible yet.",
      "reply_to_post_number": 12,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 54,
      "score": 120.8,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 4685,
      "post_number": 14,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-10-25T19:09:11.709Z",
      "updated_at": "2024-10-25T19:26:38.841Z",
      "cooked": "<p>Here’s an attempt. Unfortunately it leads to layout divergence very easily (as is to be expected with this kind of hack), in particular if you have anything (a paragraph, grid etc.) that spans more than one page at once. You also need to ensure there’s at least <em>one</em> top-level paragraph or block on every page so the workaround is applied. Even though it’s cumbersome and (most of the time) broken, I’ll leave it here in case others want to improve on it.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// === CHANGE THESE ===\n#let smallest-margin = 2em\n#let margin-for(page) = if calc.even(page) { 7em } else { smallest-margin }\n// ====================\n\n#let in-block = metadata(\"Yup, we are in a block\")\n#let in-header = metadata(\"We are in the header\")\n\n// === USE MAKE-HEADER FOR YOUR HEADER ===\n#let make-header(body) = {\n  // Indicate to our show rule we should ignore headers\n  // Use style instead of state to avoid layout divergence\n  set outline(title: in-header)\n  context place(top, dy: -page.header-ascent, {\n  // Pretend stuff inside the header has as much height as our concept of margin allows\n    block(height: margin-for(here().page()), body)\n  })\n}\n\n// Ensure we don't try to place floats inside blocks (doesn't work)\n#show &lt;marg&gt;: set bibliography(title: in-block)\n#show block: it =&gt; {\n  show block: set bibliography(title: in-block)\n  it\n}\n\n#set page(margin: smallest-margin)\n\n// On each top-level paragraph or block\n#show selector(par).or(block): it =&gt; context {\n  if outline.title == in-header {\n    // Don't try to add fake margin inside the header\n    // (it is, itself, limited by the real margin)\n    return it\n  }\n  if bibliography.title == in-block {\n    // Can't parent-scope stuff inside a block.\n    return it\n  }\n  // Add a top float to the page to simulate increased margin.\n  let previous = query(selector(&lt;marg&gt;).before(here()))\n  let this-page = here().page()\n  if previous.len() == 0 or previous.last().location().page() != this-page {\n    [#place(\n      top,\n      float: true,\n      scope: \"parent\",\n      clearance: margin-for(this-page) - smallest-margin,\n    )[] &lt;marg&gt;]\n    it\n  } else {\n    it\n  }\n}\n</code></pre>\n<p>Here’s some sample usage.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// USAGE:\n\n// Use make-header!\n#set page(height: 200pt, header: make-header[\n  #rect(height: 100%)\n])\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#rect(fill: red)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/2/2ca22a02675805d43f186578d8b0e0faab990a71.png\" data-download-href=\"https://forum.typst.app/uploads/default/2ca22a02675805d43f186578d8b0e0faab990a71\" title=\"output: different margins for even pages\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/2/2ca22a02675805d43f186578d8b0e0faab990a71_2_368x500.png\" alt=\"output: different margins for even pages\" data-base62-sha1=\"6mQrvvlaKMvyQrEUbWBpFdSyQxP\" width=\"368\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/2/2ca22a02675805d43f186578d8b0e0faab990a71_2_368x500.png, https://forum.typst.app/uploads/default/optimized/2X/2/2ca22a02675805d43f186578d8b0e0faab990a71_2_552x750.png 1.5x, https://forum.typst.app/uploads/default/original/2X/2/2ca22a02675805d43f186578d8b0e0faab990a71.png 2x\" data-dominant-color=\"DADADC\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">output: different margins for even pages</span><span class=\"informations\">609×826 146 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Any very long paragraph or block (or basically almost anything) will lead to problems… so usage of this solution is extremely discouraged. <img src=\"https://forum.typst.app/images/emoji/apple/sweat_smile.png?v=12\" title=\":sweat_smile:\" class=\"emoji\" alt=\":sweat_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>The only ideal solution would be a built-in implementation, which unfortunately isn’t there yet.</p>",
      "raw": "Here's an attempt. Unfortunately it leads to layout divergence very easily (as is to be expected with this kind of hack), in particular if you have anything (a paragraph, grid etc.) that spans more than one page at once. You also need to ensure there's at least _one_ top-level paragraph or block on every page so the workaround is applied. Even though it's cumbersome and (most of the time) broken, I'll leave it here in case others want to improve on it.\n\n```typ\n// === CHANGE THESE ===\n#let smallest-margin = 2em\n#let margin-for(page) = if calc.even(page) { 7em } else { smallest-margin }\n// ====================\n\n#let in-block = metadata(\"Yup, we are in a block\")\n#let in-header = metadata(\"We are in the header\")\n\n// === USE MAKE-HEADER FOR YOUR HEADER ===\n#let make-header(body) = {\n  // Indicate to our show rule we should ignore headers\n  // Use style instead of state to avoid layout divergence\n  set outline(title: in-header)\n  context place(top, dy: -page.header-ascent, {\n  // Pretend stuff inside the header has as much height as our concept of margin allows\n    block(height: margin-for(here().page()), body)\n  })\n}\n\n// Ensure we don't try to place floats inside blocks (doesn't work)\n#show <marg>: set bibliography(title: in-block)\n#show block: it => {\n  show block: set bibliography(title: in-block)\n  it\n}\n\n#set page(margin: smallest-margin)\n\n// On each top-level paragraph or block\n#show selector(par).or(block): it => context {\n  if outline.title == in-header {\n    // Don't try to add fake margin inside the header\n    // (it is, itself, limited by the real margin)\n    return it\n  }\n  if bibliography.title == in-block {\n    // Can't parent-scope stuff inside a block.\n    return it\n  }\n  // Add a top float to the page to simulate increased margin.\n  let previous = query(selector(<marg>).before(here()))\n  let this-page = here().page()\n  if previous.len() == 0 or previous.last().location().page() != this-page {\n    [#place(\n      top,\n      float: true,\n      scope: \"parent\",\n      clearance: margin-for(this-page) - smallest-margin,\n    )[] <marg>]\n    it\n  } else {\n    it\n  }\n}\n```\n\nHere's some sample usage.\n\n```typ\n// USAGE:\n\n// Use make-header!\n#set page(height: 200pt, header: make-header[\n  #rect(height: 100%)\n])\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#rect(fill: red)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n\n#lorem(25)\n```\n![output: different margins for even pages|368x500](upload://6mQrvvlaKMvyQrEUbWBpFdSyQxP.png)\n\nAny very long paragraph or block (or basically almost anything) will lead to problems... so usage of this solution is extremely discouraged. :sweat_smile:\n\nThe only ideal solution would be a built-in implementation, which unfortunately isn't there yet.",
      "reply_to_post_number": 12,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 54,
      "score": 80.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    }
  ],
  "scraped_at": "2025-06-10T09:58:53.457278"
}