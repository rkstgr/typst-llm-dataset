{
  "topic_metadata": {
    "id": 2778,
    "title": "How to prevent recursion on `show`?",
    "slug": "how-to-prevent-recursion-on-show",
    "posts_count": 4,
    "created_at": "2025-02-11T21:03:38.792Z",
    "last_posted_at": "2025-02-12T09:03:16.400Z",
    "views": 96,
    "like_count": 6,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "Electron_Wizard",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 573
  },
  "posts": [
    {
      "id": 8480,
      "post_number": 1,
      "username": "wilker",
      "name": "Wilker",
      "created_at": "2025-02-11T21:03:38.931Z",
      "updated_at": "2025-02-11T21:03:38.931Z",
      "cooked": "<p>i have a Word¹, and every time i write this Word¹ i want a footnote attached to it, displaying its definition</p>\n<hr>\n<h6><a name=\"p-8480-word-_a-wording-word-worded-in-the-wording-world_-1\" class=\"anchor\" href=\"#p-8480-word-_a-wording-word-worded-in-the-wording-world_-1\"></a>¹<strong>word</strong> <em>a wording word worded in the wording world.</em></h6>\n<hr>\n<p>so what happened is that i gravitated towards using the <code>show</code> keyword like so:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show \"word\": [*word* #footnote[/ word: a wording word worded in the wording world.]\n</code></pre>\n<p>the problem is that the resulting footnote contains <code>word</code>, which seems to be caught by <code>show</code>, because every time i attempt to write it in, my local compiler hangs, and i also have to reboot my lsp Tinymist. my current workaround is to avoid using the word¹ altogether in the footnote, but that then also means i can’t place a Definition in the footnote.</p>\n<p>any solutions?</p>\n<h6><a name=\"p-8480-thank-you-for-reading-2\" class=\"anchor\" href=\"#p-8480-thank-you-for-reading-2\"></a>thank you for reading</h6>",
      "raw": "i have a Word¹, and every time i write this Word¹ i want a footnote attached to it, displaying its definition\n\n---\n\n###### ¹**word** _a wording word worded in the wording world._\n\n---\nso what happened is that i gravitated towards using the `show` keyword like so:\n\n```typ\n#show \"word\": [*word* #footnote[/ word: a wording word worded in the wording world.]\n```\n\nthe problem is that the resulting footnote contains `word`, which seems to be caught by `show`, because every time i attempt to write it in, my local compiler hangs, and i also have to reboot my lsp Tinymist. my current workaround is to avoid using the word¹ altogether in the footnote, but that then also means i can't place a Definition in the footnote.\n\nany solutions?\n\n###### thank you for reading",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 28,
      "score": 155.6,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1180
    },
    {
      "id": 8490,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-02-12T07:09:54.016Z",
      "updated_at": "2025-02-12T07:09:54.016Z",
      "cooked": "<p>Hello <a class=\"mention\" href=\"/u/wilker\">@wilker</a>,</p>\n<p>I do not recommend show rules like that. Instead, use a variable.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let word = [*word* #footnote[/ word: a wording word worded in the wording world]]\n\nThis is a #word.\n</code></pre>",
      "raw": "Hello @wilker,\n\nI do not recommend show rules like that. Instead, use a variable.\n\n```typ\n#let word = [*word* #footnote[/ word: a wording word worded in the wording world]]\n\nThis is a #word.\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 26,
      "score": 35.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 8492,
      "post_number": 3,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-02-12T08:05:52.411Z",
      "updated_at": "2025-02-12T08:05:52.411Z",
      "cooked": "<p>Here’s a hacky way to get closer to your original idea.  The problem of too many footnotes could be solved with the use of a <code>state</code> variable, but I’ll leave that as an exercise for the reader.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show regex(\"\\b[wW]ord\\b\"): it =&gt; {\n  let newWord = [#it.text.slice(0,2)#[#sym.zwj]#it.text.slice(2)]\n  newWord\n  footnote([/ wo#[#sym.zwj]rd: a wording wo#[#sym.zwj]rd wor#[#sym.zwj]ded in the wording world.])\n}\n\nThis word is important.  Whenever you write this word (or Word, but not WORD), a footnote gets added.\nBut doing it this way results in too many footnotes for the word word.\n</code></pre>\n<details>\n<summary>\nResults</summary>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/b/b2ffd670e950b21da7ade0fe6403fd59b3c66183.png\" data-download-href=\"https://forum.typst.app/uploads/default/b2ffd670e950b21da7ade0fe6403fd59b3c66183\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/b/b2ffd670e950b21da7ade0fe6403fd59b3c66183_2_360x500.png\" alt=\"image\" data-base62-sha1=\"pxv7oYdf8SNYfJLvoFqkQmFk3pV\" width=\"360\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/b/b2ffd670e950b21da7ade0fe6403fd59b3c66183_2_360x500.png, https://forum.typst.app/uploads/default/optimized/2X/b/b2ffd670e950b21da7ade0fe6403fd59b3c66183_2_540x750.png 1.5x, https://forum.typst.app/uploads/default/original/2X/b/b2ffd670e950b21da7ade0fe6403fd59b3c66183.png 2x\" data-dominant-color=\"EBEBEB\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">637×884 52.4 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>",
      "raw": "Here's a hacky way to get closer to your original idea.  The problem of too many footnotes could be solved with the use of a `state` variable, but I'll leave that as an exercise for the reader.\n```typ\n#show regex(\"\\b[wW]ord\\b\"): it => {\n  let newWord = [#it.text.slice(0,2)#[#sym.zwj]#it.text.slice(2)]\n  newWord\n  footnote([/ wo#[#sym.zwj]rd: a wording wo#[#sym.zwj]rd wor#[#sym.zwj]ded in the wording world.])\n}\n\nThis word is important.  Whenever you write this word (or Word, but not WORD), a footnote gets added.\nBut doing it this way results in too many footnotes for the word word.\n```\n\n[details=\"Results\"]\n![image|360x500](upload://pxv7oYdf8SNYfJLvoFqkQmFk3pV.png)\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 26,
      "score": 25.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 8494,
      "post_number": 4,
      "username": "Electron_Wizard",
      "name": "Electron Wizard",
      "created_at": "2025-02-12T09:03:16.400Z",
      "updated_at": "2025-02-12T09:13:29.847Z",
      "cooked": "<p>To spoil the fun a bit for <em>gezepi</em> (I usually dislike having not the solution spoon fed to me), I’ll spoon feed you the solution, which might not be the best, nor might it actually work correctly.</p>\n<p>So here’s the code. It uses fancy regex (which I assume can turn into a huge resource hog at some point).</p>\n<p>The show rule is contructed by combining all the listed regex’es together, so only one show rule exists. Then the <code>it</code> is used to acquire the term information from the <code>descriptions</code> dictionary. The <code>state</code> member is used to detect if it is the first occurence of the term (<code>true</code> = not yet detected, <code>false</code> = previously detected).</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let descriptions = (\n  word: (\n    regex: \"\\b[wW]ord\\b\",\n    state: state(\"word\", true),\n    description: \"a wording word worded in the wording world.\"\n  ),\n  footnote: (\n    regex: \"\\b[fF]ootnote\\b\",\n    state: state(\"footnote\", true),\n    description: \"footnote is not noting foots on a note.\"\n  ),\n)\n\n#show regex(descriptions.values().map(x =&gt; x.regex).join(\"|\")): it =&gt; context {   \n  let term = descriptions.at(lower(it.text))\n  if term.state.get() == true {\n    term.state.update(false)\n    underline(it)\n    let tex = (strong(lower(it.text)) + \": \" + term.description)\n    footnote(\"Hello\")// footnote(tex) breaks the online compiler\n  } else {\n    it\n  }\n}\n\nThis word is important.  Whenever you write this word (or Word, but not WORD), a footnote gets added. But doing it this way results in too many footnotes for the word 'word'.\n</code></pre>\n<details>\n<summary>\nResult</summary>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/0/0cc04e08e80145d687638228ac70fb37c2023991.png\" data-download-href=\"https://forum.typst.app/uploads/default/0cc04e08e80145d687638228ac70fb37c2023991\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/0/0cc04e08e80145d687638228ac70fb37c2023991_2_358x500.png\" alt=\"image\" data-base62-sha1=\"1ONJVKnknmQLgZo7g0cFvKMGN2x\" width=\"358\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/0/0cc04e08e80145d687638228ac70fb37c2023991_2_358x500.png, https://forum.typst.app/uploads/default/original/2X/0/0cc04e08e80145d687638228ac70fb37c2023991.png 1.5x, https://forum.typst.app/uploads/default/original/2X/0/0cc04e08e80145d687638228ac70fb37c2023991.png 2x\" data-dominant-color=\"FCFCFC\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">471×656 19.5 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>\n<p>The biggest issue this solution has, is my instance of the web app just breaks when I insert <code>footnote(tex)</code> and I don’t know why exactly. The description texts are correctly concated.</p>\n<p>My conclussion would be: use a glossary package, which does this job for you.</p>",
      "raw": "To spoil the fun a bit for _gezepi_ (I usually dislike having not the solution spoon fed to me), I'll spoon feed you the solution, which might not be the best, nor might it actually work correctly.\n\nSo here's the code. It uses fancy regex (which I assume can turn into a huge resource hog at some point).\n\nThe show rule is contructed by combining all the listed regex'es together, so only one show rule exists. Then the `it` is used to acquire the term information from the `descriptions` dictionary. The `state` member is used to detect if it is the first occurence of the term (`true` = not yet detected, `false` = previously detected).\n\n```typst\n#let descriptions = (\n  word: (\n    regex: \"\\b[wW]ord\\b\",\n    state: state(\"word\", true),\n    description: \"a wording word worded in the wording world.\"\n  ),\n  footnote: (\n    regex: \"\\b[fF]ootnote\\b\",\n    state: state(\"footnote\", true),\n    description: \"footnote is not noting foots on a note.\"\n  ),\n)\n\n#show regex(descriptions.values().map(x => x.regex).join(\"|\")): it => context {   \n  let term = descriptions.at(lower(it.text))\n  if term.state.get() == true {\n    term.state.update(false)\n    underline(it)\n    let tex = (strong(lower(it.text)) + \": \" + term.description)\n    footnote(\"Hello\")// footnote(tex) breaks the online compiler\n  } else {\n    it\n  }\n}\n\nThis word is important.  Whenever you write this word (or Word, but not WORD), a footnote gets added. But doing it this way results in too many footnotes for the word 'word'.\n```\n\n[details=\"Result\"]\n![image|358x500](upload://1ONJVKnknmQLgZo7g0cFvKMGN2x.png)\n[/details]\n\nThe biggest issue this solution has, is my instance of the web app just breaks when I insert `footnote(tex)` and I don't know why exactly. The description texts are correctly concated.\n\nMy conclussion would be: use a glossary package, which does this job for you.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 21,
      "score": 74.2,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 997
    }
  ],
  "scraped_at": "2025-06-10T09:51:46.759019"
}