{
  "topic_metadata": {
    "id": 1305,
    "title": "What is the `it` in show rules exactly?",
    "slug": "what-is-the-it-in-show-rules-exactly",
    "posts_count": 15,
    "created_at": "2024-10-23T09:47:57.016Z",
    "last_posted_at": "2025-01-23T16:35:13.676Z",
    "views": 702,
    "like_count": 23,
    "reply_count": 13,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "gezepi",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 7,
    "word_count": 1237
  },
  "posts": [
    {
      "id": 4519,
      "post_number": 1,
      "username": "SebastianJL",
      "name": "Johannes Lade",
      "created_at": "2024-10-23T09:47:57.121Z",
      "updated_at": "2024-10-23T09:58:45.985Z",
      "cooked": "<p>I cannot quite figure out what <code>it</code> is in show rules. I have this example that I use to prevent line breaks on inline equations:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show math.equation.where(block: false): it =&gt; {\n  box(it)\n}\n</code></pre>\n<p>What is <code>it</code> exactly in this case? I am a bit puzzled that this just works, e.g. the correct math styling is still applied still applied to the inline equations.</p>",
      "raw": "I cannot quite figure out what `it` is in show rules. I have this example that I use to prevent line breaks on inline equations:\n\n```typst\n#show math.equation.where(block: false): it => {\n  box(it)\n}\n```\nWhat is `it` exactly in this case? I am a bit puzzled that this just works, e.g. the correct math styling is still applied still applied to the inline equations.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 118,
      "score": 1813.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 591
    },
    {
      "id": 4520,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-23T09:58:34.587Z",
      "updated_at": "2024-10-23T09:58:34.587Z",
      "cooked": "<p>The right part of this show rule is an <a href=\"https://typst.app/docs/reference/foundations/function/#unnamed\">unnamed function</a>. The <a href=\"https://typst.app/docs/reference/styling/#show-rules\">show rule docs</a> have other examples; using a function and show-set are the two fundamental forms of show rules.</p>\n<p>In the anonymous function, <code>it</code> is the parameter and is filled by the show rule with its target: the element that matched the show rule. In this case, the function would be called once for every non-block equation.</p>",
      "raw": "The right part of this show rule is an [unnamed function](https://typst.app/docs/reference/foundations/function/#unnamed). The [show rule docs](https://typst.app/docs/reference/styling/#show-rules) have other examples; using a function and show-set are the two fundamental forms of show rules.\n\nIn the anonymous function, `it` is the parameter and is filled by the show rule with its target: the element that matched the show rule. In this case, the function would be called once for every non-block equation.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 117,
      "score": 58.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 4521,
      "post_number": 3,
      "username": "SebastianJL",
      "name": "Johannes Lade",
      "created_at": "2024-10-23T10:15:33.812Z",
      "updated_at": "2024-10-23T10:16:37.263Z",
      "cooked": "<p>So is the show rule above equivalent to replacing every</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#math.equation(block: false, ...)\nor\n$...$\n</code></pre>\n<p>with</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#box(math.equation(block:false, ...))\n</code></pre>\n<p>?</p>",
      "raw": "So is the show rule above equivalent to replacing every\n\n```typst\n#math.equation(block: false, ...)\nor\n$...$\n```\n\nwith\n\n```typst\n#box(math.equation(block:false, ...))\n```\n?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 114,
      "score": 62.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 591
    },
    {
      "id": 4522,
      "post_number": 4,
      "username": "gezepi",
      "name": "",
      "created_at": "2024-10-23T10:44:39.120Z",
      "updated_at": "2024-10-23T11:38:53.961Z",
      "cooked": "<p>A useful way to explore what things are is to use the <a href=\"https://typst.app/docs/reference/foundations/repr/\"><code>repr()</code></a> function.  For instance:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show math.equation.where(block: false): it =&gt; repr(it)\n\n$1+2=3$\n</code></pre>\n<p>Results in:</p>\n<pre><code class=\"lang-auto\">equation(\n  block: false,\n  numbering: none,\n  number-align: end + horizon,\n  supplement: [Equation],\n  body: sequence([1], [+], [2], [=], [3]),\n)\n</code></pre>\n<p>So  in this case you can see that <code>it</code> is an equation, and you could access some of its properties within your function, or use those properties as part of a filter (the <code>.where</code> in the first part of the show rule).</p>\n<p>I’d like to note also that the name <code>it</code> is not required, it’s just a common choice (though I’m not sure why).  The following all produce identical results:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show math.equation.where(block: false): a-name-other-than-it =&gt; repr(a-name-other-than-it)\n#show math.equation.where(block: false): it =&gt; repr(it)\n#show math.equation.where(block: false): repr\n</code></pre>\n<p>In the third case no name is given, but that’s ok because when the show rule is applied to the equation, it is looking for a function to pass what it finds to.  In this case the show rule finds/matches an equation, then that equation is passed directly to <code>repr</code> which accepts a single piece of content as a valid way to call the function.</p>\n<p>Edit:<br>\nThe tooltips that the web app (and Tinymist) provide are also very helpful.  Hovering my mouse over the <code>it</code> shows the same info that <code>repr</code> does:<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/a/a481a5e0349c0f0e6036cbc7007d3de0e50133a3.png\" data-download-href=\"https://forum.typst.app/uploads/default/a481a5e0349c0f0e6036cbc7007d3de0e50133a3\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/a/a481a5e0349c0f0e6036cbc7007d3de0e50133a3_2_690x170.png\" alt=\"image\" data-base62-sha1=\"nti4CNLTtz6yakvVC4e2p6GlsMr\" width=\"690\" height=\"170\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/a/a481a5e0349c0f0e6036cbc7007d3de0e50133a3_2_690x170.png, https://forum.typst.app/uploads/default/original/2X/a/a481a5e0349c0f0e6036cbc7007d3de0e50133a3.png 1.5x, https://forum.typst.app/uploads/default/original/2X/a/a481a5e0349c0f0e6036cbc7007d3de0e50133a3.png 2x\" data-dominant-color=\"F0F1F3\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">702×173 18 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "A useful way to explore what things are is to use the [`repr()`](https://typst.app/docs/reference/foundations/repr/) function.  For instance:\n```typ\n#show math.equation.where(block: false): it => repr(it)\n\n$1+2=3$\n```\nResults in:\n```\nequation(\n  block: false,\n  numbering: none,\n  number-align: end + horizon,\n  supplement: [Equation],\n  body: sequence([1], [+], [2], [=], [3]),\n)\n```\nSo  in this case you can see that `it` is an equation, and you could access some of its properties within your function, or use those properties as part of a filter (the `.where` in the first part of the show rule).\n\nI'd like to note also that the name `it` is not required, it's just a common choice (though I'm not sure why).  The following all produce identical results:\n```typ\n#show math.equation.where(block: false): a-name-other-than-it => repr(a-name-other-than-it)\n#show math.equation.where(block: false): it => repr(it)\n#show math.equation.where(block: false): repr\n```\nIn the third case no name is given, but that's ok because when the show rule is applied to the equation, it is looking for a function to pass what it finds to.  In this case the show rule finds/matches an equation, then that equation is passed directly to `repr` which accepts a single piece of content as a valid way to call the function.\n\nEdit:\nThe tooltips that the web app (and Tinymist) provide are also very helpful.  Hovering my mouse over the `it` shows the same info that `repr` does:\n![image|690x170](upload://nti4CNLTtz6yakvVC4e2p6GlsMr.png)",
      "reply_to_post_number": null,
      "reply_count": 3,
      "quote_count": 0,
      "like_count": 3,
      "reads": 107,
      "score": 171.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 4524,
      "post_number": 5,
      "username": "SebastianJL",
      "name": "Johannes Lade",
      "created_at": "2024-10-23T11:01:18.579Z",
      "updated_at": "2024-10-23T11:01:18.579Z",
      "cooked": "<p>Thanks a lot for the repr tipp. This allows me to explore things in typst myself instead of asking here <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Thanks a lot for the repr tipp. This allows me to explore things in typst myself instead of asking here :slight_smile:",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 88,
      "score": 77.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 591
    },
    {
      "id": 4527,
      "post_number": 6,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-23T11:37:15.473Z",
      "updated_at": "2024-10-23T11:37:15.473Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"SebastianJL\" data-post=\"3\" data-topic=\"1305\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sebastianjl/48/870_2.png\" class=\"avatar\"> SebastianJL:</div>\n<blockquote>\n<p>So is the show rule above equivalent to replacing every</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#math.equation(block: false, ...)\nor\n$...$\n</code></pre>\n<p>with</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#box(math.equation(block:false, ...))\n</code></pre>\n<p>?</p>\n</blockquote>\n</aside>\n<p>Exactly. As an aside, since your show rule’s function (<code>it =&gt; box(it)</code>) only calls box and nothing else, you can just use that function directly:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show math.equation.where(block: false): box\n</code></pre>\n<p>or, if you pass some additional parameters to <code>box</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show math.equation.where(block: false): box.with(fill: red)\n</code></pre>\n<p>This would be equivalent to using <code>it =&gt; box(fill: red, it)</code></p>\n<aside class=\"quote no-group\" data-username=\"gezepi\" data-post=\"4\" data-topic=\"1305\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/g/C34CE0/48.png\" class=\"avatar\"> gezepi:</div>\n<blockquote>\n<p>I’d like to note also that the name <code>it</code> is not required, it’s just a common choice (though I’m not sure why). The following all produce identical results:</p>\n</blockquote>\n</aside>\n<p>Yes, thanks for pointing that out. I forgot to mention that and it’s commonly misunderstood.</p>\n<p>As far as I know, “it” is just the English word, i.e. it roughly means “the thing”. Another meaning that I’ve seen is “item” but I think that has a bit less attestation. I also like to use “body”, especially for templates intended to be called as “show-everything” rules:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// main.typ\n#import \"template.typ\": my-template\n#show: my-template(config: true)\n\nThis is the body\n\n// template.typ\n#let my-template(\n  config: false,\n  // ... and other options\n) = body =&gt; {\n  // ... apply some styling\n  body\n}\n</code></pre>\n<p>(the example is a bit more complex than it needs to be, as <code>my-template</code> is a function returning a function, but I wanted to write the example like I would actually write my templates)</p>",
      "raw": "[quote=\"SebastianJL, post:3, topic:1305, full:true\"]\nSo is the show rule above equivalent to replacing every\n\n```typ\n#math.equation(block: false, ...)\nor\n$...$\n```\n\nwith\n\n```typ\n#box(math.equation(block:false, ...))\n```\n\n?\n[/quote]\n\nExactly. As an aside, since your show rule's function (`it => box(it)`) only calls box and nothing else, you can just use that function directly:\n```typ\n#show math.equation.where(block: false): box\n```\nor, if you pass some additional parameters to `box`:\n```typ\n#show math.equation.where(block: false): box.with(fill: red)\n```\nThis would be equivalent to using `it => box(fill: red, it)`\n\n[quote=\"gezepi, post:4, topic:1305\"]\nI’d like to note also that the name `it` is not required, it’s just a common choice (though I’m not sure why). The following all produce identical results:\n[/quote]\n\nYes, thanks for pointing that out. I forgot to mention that and it's commonly misunderstood.\n\nAs far as I know, \"it\" is just the English word, i.e. it roughly means \"the thing\". Another meaning that I've seen is \"item\" but I think that has a bit less attestation. I also like to use \"body\", especially for templates intended to be called as \"show-everything\" rules:\n```typ\n// main.typ\n#import \"template.typ\": my-template\n#show: my-template(config: true)\n\nThis is the body\n\n// template.typ\n#let my-template(\n  config: false,\n  // ... and other options\n) = body => {\n  // ... apply some styling\n  body\n}\n```\n(the example is a bit more complex than it needs to be, as `my-template` is a function returning a function, but I wanted to write the example like I would actually write my templates)",
      "reply_to_post_number": 3,
      "reply_count": 2,
      "quote_count": 2,
      "like_count": 0,
      "reads": 89,
      "score": 37.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 4546,
      "post_number": 7,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-23T12:56:18.692Z",
      "updated_at": "2024-10-23T12:56:18.849Z",
      "cooked": "<p>3 posts were split to a new topic: <a href=\"/t/what-are-the-values-that-are-shown-when-hovering-over-a-variable/1311\">What are the values that are shown when hovering over a variable?</a></p>",
      "raw": "3 posts were split to a new topic: [What are the values that are shown when hovering over a variable?](/t/what-are-the-values-that-are-shown-when-hovering-over-a-variable/1311)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 68,
      "score": 13.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 4533,
      "post_number": 8,
      "username": "SebastianJL",
      "name": "Johannes Lade",
      "created_at": "2024-10-23T12:12:54.971Z",
      "updated_at": "2024-10-23T12:19:19.046Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"SillyFreak\" data-post=\"6\" data-topic=\"1305\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\"> SillyFreak:</div>\n<blockquote>\n<p>(the example is a bit more complex than it needs to be, as <code>my-template</code> is a function returning a function, but I wanted to write the example like I would actually write my templates)</p>\n</blockquote>\n</aside>\n<p>Why do you write your templates as functions? I do it like this:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let template(text-color: black, title: \"\", body) = [\n  #set text(fill: text-color)\n  #text(weight: \"bold\", size: 20pt)[title]\n  #body\n]\n\n#show: template.with(\n  text-color: blue.darken(50%),\n  title: \"hello my friends\"\n)\n\nHi this is my template\n</code></pre>\n<p><strong>Edit:</strong><br>\nReplaced the code with a working version.</p>",
      "raw": "[quote=\"SillyFreak, post:6, topic:1305\"]\n(the example is a bit more complex than it needs to be, as `my-template` is a function returning a function, but I wanted to write the example like I would actually write my templates)\n[/quote]\n\nWhy do you write your templates as functions? I do it like this:\n\n```typst\n#let template(text-color: black, title: \"\", body) = [\n  #set text(fill: text-color)\n  #text(weight: \"bold\", size: 20pt)[title]\n  #body\n]\n\n#show: template.with(\n  text-color: blue.darken(50%),\n  title: \"hello my friends\"\n)\n\nHi this is my template\n```\n\n**Edit:**\nReplaced the code with a working version.",
      "reply_to_post_number": 6,
      "reply_count": 2,
      "quote_count": 1,
      "like_count": 0,
      "reads": 68,
      "score": 38.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 591
    },
    {
      "id": 4537,
      "post_number": 9,
      "username": "Tinger",
      "name": "Tinger",
      "created_at": "2024-10-23T12:19:34.555Z",
      "updated_at": "2024-10-23T12:19:42.026Z",
      "cooked": "<p>It comes down to the same thing, I do this too, because I prefer it that way, saves the unnecessary <code>.with</code> and looks a little cleaner IMO.</p>",
      "raw": "It comes down to the same thing, I do this too, because I prefer it that way, saves the unnecessary `.with` and looks a little cleaner IMO.",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 63,
      "score": 57.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 29
    },
    {
      "id": 4538,
      "post_number": 10,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-23T12:20:33.874Z",
      "updated_at": "2024-10-23T12:20:59.282Z",
      "cooked": "<p>exactly to avoid the <code>with</code> <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> it’s a bit more effort (time and mental load) for the template author, but saves a bit for the template consumer. And hopefully the template will be used a bunch, so prioritizing that hopefully pays off <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "exactly to avoid the `with` :slight_smile: it's a bit more effort (time and mental load) for the template author, but saves a bit for the template consumer. And hopefully the template will be used a bunch, so prioritizing that hopefully pays off :slight_smile:",
      "reply_to_post_number": 8,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 64,
      "score": 37.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 4539,
      "post_number": 11,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-23T12:27:02.346Z",
      "updated_at": "2024-10-23T12:27:27.274Z",
      "cooked": "<p>I prefer the plain version that requires a <code>with</code>: I’m afraid that hiding it will obscure things for new users and push them in a “I don’t know what this is but it magically works” state of mind instead of learning the basics of the scripting language.</p>\n<p>But there’s probably no right answer, it’s all a bit subjective…</p>",
      "raw": "I prefer the plain version that requires a `with`: I'm afraid that hiding it will obscure things for new users and push them in a \"I don't know what this is but it magically works\" state of mind instead of learning the basics of the scripting language.\n\nBut there's probably no right answer, it's all a bit subjective...",
      "reply_to_post_number": 10,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 62,
      "score": 37.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 4540,
      "post_number": 12,
      "username": "SebastianJL",
      "name": "Johannes Lade",
      "created_at": "2024-10-23T12:37:37.364Z",
      "updated_at": "2024-10-23T12:38:00.939Z",
      "cooked": "<p>I had the \"I don’t know how it works, guess I’ll just write the <code>with</code> \" moment <img src=\"https://forum.typst.app/images/emoji/apple/laughing.png?v=12\" title=\":laughing:\" class=\"emoji\" alt=\":laughing:\" loading=\"lazy\" width=\"20\" height=\"20\"> .<br>\nTo be honest, the documentation and the tutorials are not quite there yet where I am able to just search for things and have them easily explained. Especially on google the info is kind of hard to find.</p>",
      "raw": "I had the \"I don't know how it works, guess I'll just write the `with` \" moment :laughing: .\nTo be honest, the documentation and the tutorials are not quite there yet where I am able to just search for things and have them easily explained. Especially on google the info is kind of hard to find.",
      "reply_to_post_number": 11,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 4,
      "reads": 61,
      "score": 77.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 591
    },
    {
      "id": 4724,
      "post_number": 14,
      "username": "KS84",
      "name": "KS84",
      "created_at": "2024-10-27T09:16:35.246Z",
      "updated_at": "2024-10-27T09:16:35.246Z",
      "cooked": "<p>Just mentioning this as I didn’t see it mentioned anywhere below. <code>it</code> is just a variable name. You can use any name that you want. It doesn’t have to be it.</p>",
      "raw": "Just mentioning this as I didn’t see it mentioned anywhere below. `it` is just a variable name. You can use any name that you want. It doesn’t have to be it.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 4,
      "reads": 60,
      "score": 107.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 114
    },
    {
      "id": 7399,
      "post_number": 15,
      "username": "neuralpain",
      "name": "neuralpain",
      "created_at": "2025-01-11T17:03:22.303Z",
      "updated_at": "2025-01-11T17:03:22.303Z",
      "cooked": "<p>I know this is question is already answered but,</p>\n<aside class=\"quote no-group\" data-username=\"gezepi\" data-post=\"4\" data-topic=\"1305\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/g/C34CE0/48.png\" class=\"avatar\"> gezepi:</div>\n<blockquote>\n<p>I’d like to note also that the name <code>it</code> is not required, it’s just a common choice <strong>(though I’m not sure why)</strong>.</p>\n</blockquote>\n</aside>\n<aside class=\"quote no-group\" data-username=\"SillyFreak\" data-post=\"6\" data-topic=\"1305\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\"> SillyFreak:</div>\n<blockquote>\n<p>As far as I know, “it” is just the English word, i.e. it roughly means “the thing”. Another meaning that I’ve seen is “item” but I think that has a bit less attestation.</p>\n</blockquote>\n</aside>\n<p>I personally found it amusing when I saw the <code>show</code> rules example using <code>it</code> as the variable. It was like reading plain English:</p>\n<pre><code class=\"lang-auto\">show (...): it =&gt; [ /* this particular way */ ]\n</code></pre>\n<p>Brilliant.</p>\n<p>Though, I prefer to use names more tailored to the specific rule, or more meaning, if you will.</p>",
      "raw": "I know this is question is already answered but,\n\n[quote=\"gezepi, post:4, topic:1305\"]\nI’d like to note also that the name `it` is not required, it’s just a common choice **(though I’m not sure why)**.\n[/quote]\n\n[quote=\"SillyFreak, post:6, topic:1305\"]\nAs far as I know, “it” is just the English word, i.e. it roughly means “the thing”. Another meaning that I’ve seen is “item” but I think that has a bit less attestation.\n[/quote]\n\nI personally found it amusing when I saw the `show` rules example using `it` as the variable. It was like reading plain English: \n\n```\nshow (...): it => [ /* this particular way */ ]\n```\n\nBrilliant.\n\nThough, I prefer to use names more tailored to the specific rule, or more meaning, if you will.",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 2,
      "like_count": 1,
      "reads": 46,
      "score": 34.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 946
    },
    {
      "id": 7808,
      "post_number": 16,
      "username": "KS84",
      "name": "KS84",
      "created_at": "2025-01-23T16:35:13.676Z",
      "updated_at": "2025-01-23T16:35:13.676Z",
      "cooked": "<p>I may be wrong but i think it’s short for “item”. That would be a more conventional choice for documentation like this.</p>",
      "raw": "I may be wrong but i think it’s short for “item”. That would be a more conventional choice for documentation like this.",
      "reply_to_post_number": 15,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 36,
      "score": 17.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 114
    }
  ],
  "scraped_at": "2025-06-10T09:56:06.453032"
}