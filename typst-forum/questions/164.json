{
  "topic_metadata": {
    "id": 164,
    "title": "Why is the value I receive from context always content?",
    "slug": "why-is-the-value-i-receive-from-context-always-content",
    "posts_count": 4,
    "created_at": "2024-09-15T10:09:32.125Z",
    "last_posted_at": "2025-02-07T13:55:54.926Z",
    "views": 1362,
    "like_count": 12,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "laurmaedje",
    "tags": [
      "scripting",
      "context"
    ],
    "category_id": 5,
    "participant_count": 1,
    "word_count": 879
  },
  "posts": [
    {
      "id": 660,
      "post_number": 1,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-15T10:09:32.287Z",
      "updated_at": "2024-09-19T17:47:16.832Z",
      "cooked": "<p>I am trying to use a counter to switch between displaying something and not displaying it. To do that, I check whether the counter is even and then increase it by one.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let my-counter = counter(\"my-counter\")\n\n#let alternate(it) = {\n  let value = context my-counter.get().first()\n  if calc.even(value) {\n    it\n  }\n  my-counter.step()\n}\n\n#alternate[I'm visible]\n#alternate[I'm not]\n#alternate[I'm again visible]\n</code></pre>\n<p>However, when trying to use the value from the context, I get this error:</p>\n<pre><code class=\"lang-plaintext\">error: expected integer, found content\n</code></pre>\n<p>Why is this happening and how can I get the value from the context?</p>",
      "raw": "I am trying to use a counter to switch between displaying something and not displaying it. To do that, I check whether the counter is even and then increase it by one.\n\n```typ\n#let my-counter = counter(\"my-counter\")\n\n#let alternate(it) = {\n  let value = context my-counter.get().first()\n  if calc.even(value) {\n    it\n  }\n  my-counter.step()\n}\n\n#alternate[I'm visible]\n#alternate[I'm not]\n#alternate[I'm again visible]\n```\n\nHowever, when trying to use the value from the context, I get this error:\n```text\nerror: expected integer, found content\n```\nWhy is this happening and how can I get the value from the context?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 140,
      "score": 3913.0,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 661,
      "post_number": 2,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-15T10:10:01.536Z",
      "updated_at": "2024-09-15T10:10:01.536Z",
      "cooked": "<p>When working with context, you need to put everything that depends on the contextual information into the context block/expression itself. The explicit <code>context</code> expression is a trade-off: You get to know <em>where in the document</em> you are (accessible via <a href=\"https://typst.app/docs/reference/introspection/here/\"><code>here()</code></a>) and <em>which set rules</em> are active there (accessible via things like <code>text.lang</code>). In return, the context value itself becomes opaque. You cannot peek into it, so everything that depends on the contextual information must happen within it.</p>\n<p>Let’s look at this example to understand why:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let val = context text.lang + \"!\"\n\n#set text(lang: \"de\")\n#val // \"de!\"\n\n#set text(lang: \"fr\")\n#val // \"fr!\"\n</code></pre>\n<p>We have a context expression that accesses the text language and adds an exclamation point to it. We store the resulting value in <code>val</code>. Then, we use it in multiple places of our document. As the comments indicate, it outputs different things: once “de!” and once “fr!”.</p>\n<p>Now, let’s try using that same <code>val</code> and performing a string operation on it:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let val = context text.lang + \"!\"\n\n// error: type content has no method `starts-with`\n#if val.starts-with(\"d\") {\n  ..\n}\n</code></pre>\n<p>Typst complains with <code>type content has no method `starts-with` </code>. But why is <code>val</code> of type content rather than string?</p>\n<p>Because <code>val</code> is <em>not well-defined</em> unless you put it into the document, as content. Depending on where in the document you put <code>val</code>, it can produce different things. <code>val</code> is not a string, it can <em>become</em> a string once it knows all the relevant contextual information. As long as <code>val</code> is just stored in a variable, the code within the context block never actually runs! And if you put it into the document twice, then it runs twice.</p>\n<p>Thus, to fix the error, we must move all logic that depends on the contextual information into the context itself. Since the <code>starts-with</code> logic depends on the text language, we must move it inside:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let val() = text.lang + \"!\"\n\n#context {\n  if val().starts-with(\"d\") {\n    ..\n  }\n}\n</code></pre>\n<p>To encapsulate the logic of adding the exlamation point, we have turned <code>val</code> into a function. Context will pass through from where it is made available to every called function.</p>\n<p>Note that since context wraps any expression and <code>if ..</code> happens to be one, we can actually also just write it like this, without extra braces:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#context if val().starts-with(\"d\") { .. }\n</code></pre>\n<p>Equipped with this knowledge, let’s take another look at the original problem. The goal was to display something if a counter is even and then step it. The conditional that checks <code>calc.even</code> definitely depends on the counter value and must thus move into the context expression:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let my-counter = counter(\"my-counter\")\n\n#let alternate(it) = context {\n  let value = my-counter.get().first()\n  if calc.even(value) {\n    it\n  }\n  my-counter.step()\n}\n\n#alternate[I'm visible]\n#alternate[I'm not]\n#alternate[I'm again visible]\n</code></pre>\n<h3><a name=\"p-661-where-to-put-the-context-block-1\" class=\"anchor\" href=\"#p-661-where-to-put-the-context-block-1\"></a>Where to put the context block?</h3>\n<p>You might have noticed that, technically, the <em>counter step</em> does not depend on the current counter value, so there’s no need to put it into the context. We could just as well write this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let alternate(it) = {\n  context {\n    let value = my-counter.get().first()\n    if calc.even(value) {\n      it\n    }\n  }\n  my-counter.step()\n}\n</code></pre>\n<p>In this case, there’s no harm in having the step within the context as well and it makes the code a little simpler, so I’ve opted for that. However, you might ask yourself where best to put the context block in general. To answer that question, consider <strong>what information you want to acquire.</strong></p>\n<p>The information provided by a context block is uniform across the whole block. If you have additional set rules or counter updates <em>within</em> the block, you’ll not see the effects of those.</p>\n<p>Thus, if you put your whole document into one big context block, you’ll be able to get the default values of Typst’s standard properties, but not much more. Sometimes that’s enough and then there’s no harm in putting everything into a big context block. <sup class=\"footnote-ref\"><a href=\"#footnote-661-1\" id=\"footnote-ref-661-1\">[1]</a></sup></p>\n<p>On the other hand, sometimes you need to work with local information, like the current font size or counters that step often. Then, you probably want to keep your context closely scoped to your logic.</p>\n<hr class=\"footnotes-sep\">\n\n<ol class=\"footnotes-list\">\n<li id=\"footnote-661-1\" class=\"footnote-item\"><p>Well, at least once Typst 0.12 is released. As of Typst 0.11.1, there are still a few bugs with contexts that wrap around pagebreaks creating empty pages. <a href=\"#footnote-ref-661-1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>",
      "raw": "When working with context, you need to put everything that depends on the contextual information into the context block/expression itself. The explicit `context` expression is a trade-off: You get to know _where in the document_ you are (accessible via [`here()`](https://typst.app/docs/reference/introspection/here/)) and _which set rules_ are active there (accessible via things like `text.lang`). In return, the context value itself becomes opaque. You cannot peek into it, so everything that depends on the contextual information must happen within it.\n\nLet's look at this example to understand why:\n\n```typ\n#let val = context text.lang + \"!\"\n\n#set text(lang: \"de\")\n#val // \"de!\"\n\n#set text(lang: \"fr\")\n#val // \"fr!\"\n```\n\nWe have a context expression that accesses the text language and adds an exclamation point to it. We store the resulting value in `val`. Then, we use it in multiple places of our document. As the comments indicate, it outputs different things: once \"de!\" and once \"fr!\".\n\nNow, let's try using that same `val` and performing a string operation on it:\n\n```typ\n#let val = context text.lang + \"!\"\n\n// error: type content has no method `starts-with`\n#if val.starts-with(\"d\") {\n  ..\n}\n```\n\nTypst complains with ``type content has no method `starts-with` ``. But why is `val` of type content rather than string? \n\nBecause `val` is _not well-defined_ unless you put it into the document, as content. Depending on where in the document you put `val`, it can produce different things. `val` is not a string, it can _become_ a string once it knows all the relevant contextual information. As long as `val` is just stored in a variable, the code within the context block never actually runs! And if you put it into the document twice, then it runs twice.\n\nThus, to fix the error, we must move all logic that depends on the contextual information into the context itself. Since the `starts-with` logic depends on the text language, we must move it inside:\n\n```typ\n#let val() = text.lang + \"!\"\n\n#context {\n  if val().starts-with(\"d\") {\n    ..\n  }\n}\n```\n\nTo encapsulate the logic of adding the exlamation point, we have turned `val` into a function. Context will pass through from where it is made available to every called function. \n\nNote that since context wraps any expression and `if ..` happens to be one, we can actually also just write it like this, without extra braces:\n\n```typ\n#context if val().starts-with(\"d\") { .. }\n```\n\nEquipped with this knowledge, let's take another look at the original problem. The goal was to display something if a counter is even and then step it. The conditional that checks `calc.even` definitely depends on the counter value and must thus move into the context expression:\n\n```typ\n#let my-counter = counter(\"my-counter\")\n\n#let alternate(it) = context {\n  let value = my-counter.get().first()\n  if calc.even(value) {\n    it\n  }\n  my-counter.step()\n}\n\n#alternate[I'm visible]\n#alternate[I'm not]\n#alternate[I'm again visible]\n```\n\n### Where to put the context block?\nYou might have noticed that, technically, the _counter step_ does not depend on the current counter value, so there's no need to put it into the context. We could just as well write this:\n\n```typ\n#let alternate(it) = {\n  context {\n    let value = my-counter.get().first()\n    if calc.even(value) {\n      it\n    }\n  }\n  my-counter.step()\n}\n```\n\nIn this case, there's no harm in having the step within the context as well and it makes the code a little simpler, so I've opted for that. However, you might ask yourself where best to put the context block in general. To answer that question, consider **what information you want to acquire.**\n\nThe information provided by a context block is uniform across the whole block. If you have additional set rules or counter updates _within_ the block, you'll not see the effects of those.\n\nThus, if you put your whole document into one big context block, you'll be able to get the default values of Typst's standard properties, but not much more. Sometimes that's enough and then there's no harm in putting everything into a big context block. [^1]\n\nOn the other hand, sometimes you need to work with local information, like the current font size or counters that step often. Then, you probably want to keep your context closely scoped to your logic.\n\n[^1]: Well, at least once Typst 0.12 is released. As of Typst 0.11.1, there are still a few bugs with contexts that wrap around pagebreaks creating empty pages.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 9,
      "reads": 135,
      "score": 792.0,
      "accepted_answer": true,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 8332,
      "post_number": 3,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2025-02-07T13:55:31.645Z",
      "updated_at": "2025-02-07T13:55:31.645Z",
      "cooked": "<p>A post was split to a new topic: <a href=\"/t/can-contextual-math-attachments-be-properly-aligned/2718\">Can contextual math attachments be properly aligned?</a></p>",
      "raw": "A post was split to a new topic: [Can contextual math attachments be properly aligned?](/t/can-contextual-math-attachments-be-properly-aligned/2718)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 57,
      "score": 31.4,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 8333,
      "post_number": 4,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2025-02-07T13:55:54.926Z",
      "updated_at": "2025-02-07T13:55:54.926Z",
      "cooked": "",
      "raw": "",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 56,
      "score": 11.2,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    }
  ],
  "scraped_at": "2025-06-10T09:58:58.015737"
}