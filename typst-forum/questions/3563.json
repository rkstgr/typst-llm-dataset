{
  "topic_metadata": {
    "id": 3563,
    "title": "How to create a function that takes a array of dictionaries?",
    "slug": "how-to-create-a-function-that-takes-a-array-of-dictionaries",
    "posts_count": 5,
    "created_at": "2025-04-08T13:40:09.049Z",
    "last_posted_at": "2025-04-08T15:36:13.153Z",
    "views": 115,
    "like_count": 0,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "janekfleper",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 1132
  },
  "posts": [
    {
      "id": 10780,
      "post_number": 1,
      "username": "TheJanzap",
      "name": "",
      "created_at": "2025-04-08T13:40:09.436Z",
      "updated_at": "2025-04-08T13:40:09.436Z",
      "cooked": "<p>I want to create a function that takes data for a table. I’d like it to have one parameter that takes a <code>result</code> that is mutiple rows of data:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Feedback</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>John</td>\n<td>Did not find the button</td>\n<td>Not OK</td>\n</tr>\n<tr>\n<td>Jane</td>\n<td>Did find the button immediately</td>\n<td>OK</td>\n</tr>\n</tbody>\n</table>\n</div><p>What is the best way to pass this to my function? Note that this data does not come from an external source like a CSV, I plan to put it directly as a function argument in Typst.</p>\n<p>Below you find my currently failing attempt at constructing a function like that</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise-table = (\nid,\ntask,\nresult: ((name: \"\", feedback: \"\", status: \"\"),)\n) = {\n  table(\n    columns: (auto, 1fr, auto),\n    [ID], table.cell(colspan: 2, id),\n    [Task], table.cell(colspan: 2, task),\n    for r in result {\n         table.cell[r.at(\"name\")]\n         table.cell[r.at(\"feedback\")]\n         table.cell[r.at(\"status\")]\n    }\n  )\n}\n</code></pre>\n<p>Calling with</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">exercise-table(\n   \"1\",\n   \"Test\",\n   ((\n      name: \"John\",\n      feedback: \"Did not find the button\",\n      status: \"Not OK\"\n   ), )\n</code></pre>\n<p>Apologies for the title, I couldn’t think of anything better.</p>",
      "raw": "I want to create a function that takes data for a table. I'd like it to have one parameter that takes a `result` that is mutiple rows of data:\n\n|Name | Feedback | Status|\n|--- | --- | ---|\n|John | Did not find the button | Not OK|\n|Jane | Did find the button immediately | OK|\n\nWhat is the best way to pass this to my function? Note that this data does not come from an external source like a CSV, I plan to put it directly as a function argument in Typst.\n\nBelow you find my currently failing attempt at constructing a function like that\n```typ\n#let exercise-table = (\nid,\ntask,\nresult: ((name: \"\", feedback: \"\", status: \"\"),)\n) = {\n  table(\n    columns: (auto, 1fr, auto),\n    [ID], table.cell(colspan: 2, id),\n    [Task], table.cell(colspan: 2, task),\n    for r in result {\n         table.cell[r.at(\"name\")]\n         table.cell[r.at(\"feedback\")]\n         table.cell[r.at(\"status\")]\n    }\n  )\n}\n```\nCalling with\n```typ\nexercise-table(\n   \"1\",\n   \"Test\",\n   ((\n      name: \"John\",\n      feedback: \"Did not find the button\",\n      status: \"Not OK\"\n   ), )\n```\nApologies for the title, I couldn't think of anything better.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 440.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 132
    },
    {
      "id": 10783,
      "post_number": 2,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-04-08T14:01:45.110Z",
      "updated_at": "2025-04-08T14:02:59.645Z",
      "cooked": "<p>Passing an array of dictionaries to the function is perfectly fine. Inside the table you can then directly grab the values from the dictionaries to fill the table. This only works under the assumption that every row of the table has all three items “name”, “feedback” and “status”. If this is not the case, you have to add the relevant checks inside <code>result.map()</code>.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise-table(\n  id,\n  task,\n  result: ((name: \"\", feedback: \"\", status: \"\"),)\n) = {\n  table(\n    columns: (auto, 1fr, auto),\n    [ID], table.cell(colspan: 2, id),\n    [Task], table.cell(colspan: 2, task),\n    ..result.map(row =&gt; row.values()).flatten()\n  )\n}\n\n#exercise-table(\n   \"1\",\n   \"Test\",\n   result: ((\n      name: \"John\",\n      feedback: \"Did not find the button\",\n      status: \"Not OK\"\n   ), )\n )\n</code></pre>\n<p>Since you did not specify which part of your example was failing exactly, these are the two mistakes I noticed:</p>\n<ul>\n<li>By using <code>table.cell[]</code> with square brackets the function expects content. You either have to use the prefix <code>#</code> to access the variable <code>r</code> or you can directly use parentheses <code>table.cell(r.at(\"name\"))</code>.</li>\n<li>The argument “result” is a named argument. You therefore have to explicitly use the name when calling the function.</li>\n</ul>",
      "raw": "Passing an array of dictionaries to the function is perfectly fine. Inside the table you can then directly grab the values from the dictionaries to fill the table. This only works under the assumption that every row of the table has all three items \"name\", \"feedback\" and \"status\". If this is not the case, you have to add the relevant checks inside `result.map()`.\n\n```typ\n#let exercise-table(\n  id,\n  task,\n  result: ((name: \"\", feedback: \"\", status: \"\"),)\n) = {\n  table(\n    columns: (auto, 1fr, auto),\n    [ID], table.cell(colspan: 2, id),\n    [Task], table.cell(colspan: 2, task),\n    ..result.map(row => row.values()).flatten()\n  )\n}\n\n#exercise-table(\n   \"1\",\n   \"Test\",\n   result: ((\n      name: \"John\",\n      feedback: \"Did not find the button\",\n      status: \"Not OK\"\n   ), )\n )\n```\n\nSince you did not specify which part of your example was failing exactly, these are the two mistakes I noticed:\n- By using `table.cell[]` with square brackets the function expects content. You either have to use the prefix `#` to access the variable `r` or you can directly use parentheses `table.cell(r.at(\"name\"))`.\n- The argument \"result\" is a named argument. You therefore have to explicitly use the name when calling the function.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 44.8,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 69
    },
    {
      "id": 10785,
      "post_number": 3,
      "username": "TheJanzap",
      "name": "",
      "created_at": "2025-04-08T14:16:49.970Z",
      "updated_at": "2025-04-08T14:16:49.970Z",
      "cooked": "<p>Thank you, this worked! I got a wierd error regarding “Module not found” from my template.typ, so something strange was going on. I think my main issue was that I did not specify <code>result:</code> on the function call.</p>",
      "raw": "Thank you, this worked! I got a wierd error regarding \"Module not found\" from my template.typ, so something strange was going on. I think my main issue was that I did not specify `result:` on the function call.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 20,
      "score": 9.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 132
    },
    {
      "id": 10788,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-08T15:13:38.077Z",
      "updated_at": "2025-04-08T15:34:15.474Z",
      "cooked": "<p>I don’t understand the logic behind additional <code>id</code> and <code>task</code> arguments that create 2 rows of 2 columns in a 3 column table. Is this intended? IMO, this is not readable and not how tables are usually used.</p>\n<p>Also, not sure if you actually need to use dictionary over a list. From the for loop, it looks like you just want to create the table provided in the OP. And normally you would put table in a figure with a caption and maybe add a label.</p>\n<p>If you really just want to recreate the table, use this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise-table(result: ()) = table(\n  columns: (auto, 1fr, auto),\n  table.header[Name][Feedback][Status],\n  ..result.map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  result: (\n    (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n    (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n  ),\n)\n</code></pre>\n<details><summary>with id &amp; task</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise-table(id, task, result: ()) = table(\n  columns: (auto, 1fr, auto),\n  [ID],\n  table.cell(colspan: 2, id),\n  [Task],\n  table.cell(colspan: 2, task),\n  ..result.map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  \"1\",\n  \"Test\",\n  result: (\n    (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n    (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n  ),\n)\n</code></pre>\n</details>\n<p>Or this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise-table(result) = table(\n  columns: (auto, 1fr, auto),\n  table.header[Name][Feedback][Status],\n  ..result.map(dictionary.values).flatten(),\n)\n\n#exercise-table((\n  (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n  (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n))\n</code></pre>\n<details><summary>with id &amp; task</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise-table(id, task, result) = table(\n  columns: (auto, 1fr, auto),\n  [ID],\n  table.cell(colspan: 2, id),\n  [Task],\n  table.cell(colspan: 2, task),\n  ..result.map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  \"1\",\n  \"Test\",\n  (\n    (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n    (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n  ),\n)\n</code></pre>\n</details>\n<p>Or even this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise-table(..result) = table(\n  columns: (auto, 1fr, auto),\n  table.header[Name][Feedback][Status],\n  ..result.pos().map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n  (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n)\n</code></pre>\n<details><summary>with id &amp; task</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let exercise-table(id, task, ..result) = table(\n  columns: (auto, 1fr, auto),\n  [ID],\n  table.cell(colspan: 2, id),\n  [Task],\n  table.cell(colspan: 2, task),\n  ..result.pos().map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  \"1\",\n  \"Test\",\n  (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n  (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n)\n</code></pre>\n</details>\n<p>But without additional context, I don’t see a point in using the dictionary:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Row schema: (name, feedback, status)\n#let exercise-table(..result) = table(\n  columns: (auto, 1fr, auto),\n  table.header[Name][Feedback][Status],\n  ..result.pos().flatten(),\n)\n\n#exercise-table(\n  (\"John\", \"Did not find the button\", \"Not OK\"),\n  (\"Jane\", \"Did find the button immediately\", \"OK\"),\n)\n</code></pre>\n<details><summary>with id &amp; task</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Row schema: (name, feedback, status)\n#let exercise-table(id, task, ..result) = table(\n  columns: (auto, 1fr, auto),\n  [ID],\n  table.cell(colspan: 2, id),\n  [Task],\n  table.cell(colspan: 2, task),\n  ..result.pos().flatten(),\n)\n\n#exercise-table(\n  \"1\",\n  \"Test\",\n  (\"John\", \"Did not find the button\", \"Not OK\"),\n  (\"Jane\", \"Did find the button immediately\", \"OK\"),\n)\n</code></pre>\n</details>\n<p>The cool thing about dictionaries though is that they <a href=\"https://typst.app/docs/reference/foundations/dictionary/#summary\">preserve order</a>:</p>\n<blockquote>\n<p>You can iterate over the pairs in a dictionary using a <a href=\"https://typst.app/docs/reference/scripting/#loops\">for loop</a>. This will iterate in the order the pairs were inserted / declared.</p>\n</blockquote>\n<p>Which is why converting it to flatten array works.</p>",
      "raw": "I don't understand the logic behind additional `id` and `task` arguments that create 2 rows of 2 columns in a 3 column table. Is this intended? IMO, this is not readable and not how tables are usually used.\n\nAlso, not sure if you actually need to use dictionary over a list. From the for loop, it looks like you just want to create the table provided in the OP. And normally you would put table in a figure with a caption and maybe add a label.\n\nIf you really just want to recreate the table, use this:\n\n```typ\n#let exercise-table(result: ()) = table(\n  columns: (auto, 1fr, auto),\n  table.header[Name][Feedback][Status],\n  ..result.map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  result: (\n    (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n    (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n  ),\n)\n```\n\n<details><summary>with id & task</summary>\n\n```typ\n#let exercise-table(id, task, result: ()) = table(\n  columns: (auto, 1fr, auto),\n  [ID],\n  table.cell(colspan: 2, id),\n  [Task],\n  table.cell(colspan: 2, task),\n  ..result.map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  \"1\",\n  \"Test\",\n  result: (\n    (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n    (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n  ),\n)\n```\n\n</details>\n\nOr this:\n\n```typ\n#let exercise-table(result) = table(\n  columns: (auto, 1fr, auto),\n  table.header[Name][Feedback][Status],\n  ..result.map(dictionary.values).flatten(),\n)\n\n#exercise-table((\n  (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n  (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n))\n```\n\n<details><summary>with id & task</summary>\n\n```typ\n#let exercise-table(id, task, result) = table(\n  columns: (auto, 1fr, auto),\n  [ID],\n  table.cell(colspan: 2, id),\n  [Task],\n  table.cell(colspan: 2, task),\n  ..result.map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  \"1\",\n  \"Test\",\n  (\n    (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n    (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n  ),\n)\n```\n\n</details>\n\nOr even this:\n\n```typ\n#let exercise-table(..result) = table(\n  columns: (auto, 1fr, auto),\n  table.header[Name][Feedback][Status],\n  ..result.pos().map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n  (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n)\n```\n\n<details><summary>with id & task</summary>\n\n```typ\n#let exercise-table(id, task, ..result) = table(\n  columns: (auto, 1fr, auto),\n  [ID],\n  table.cell(colspan: 2, id),\n  [Task],\n  table.cell(colspan: 2, task),\n  ..result.pos().map(dictionary.values).flatten(),\n)\n\n#exercise-table(\n  \"1\",\n  \"Test\",\n  (name: \"John\", feedback: \"Did not find the button\", status: \"Not OK\"),\n  (name: \"Jane\", feedback: \"Did find the button immediately\", status: \"OK\"),\n)\n```\n\n</details>\n\nBut without additional context, I don't see a point in using the dictionary:\n\n```typ\n// Row schema: (name, feedback, status)\n#let exercise-table(..result) = table(\n  columns: (auto, 1fr, auto),\n  table.header[Name][Feedback][Status],\n  ..result.pos().flatten(),\n)\n\n#exercise-table(\n  (\"John\", \"Did not find the button\", \"Not OK\"),\n  (\"Jane\", \"Did find the button immediately\", \"OK\"),\n)\n```\n\n<details><summary>with id & task</summary>\n\n```typ\n// Row schema: (name, feedback, status)\n#let exercise-table(id, task, ..result) = table(\n  columns: (auto, 1fr, auto),\n  [ID],\n  table.cell(colspan: 2, id),\n  [Task],\n  table.cell(colspan: 2, task),\n  ..result.pos().flatten(),\n)\n\n#exercise-table(\n  \"1\",\n  \"Test\",\n  (\"John\", \"Did not find the button\", \"Not OK\"),\n  (\"Jane\", \"Did find the button immediately\", \"OK\"),\n)\n```\n\n</details>\n\nThe cool thing about dictionaries though is that they [preserve order](https://typst.app/docs/reference/foundations/dictionary/#summary):\n\n> You can iterate over the pairs in a dictionary using a [for loop](https://typst.app/docs/reference/scripting/#loops). This will iterate in the order the pairs were inserted / declared.\n\nWhich is why converting it to flatten array works.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 18,
      "score": 23.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 10789,
      "post_number": 5,
      "username": "TheJanzap",
      "name": "",
      "created_at": "2025-04-08T15:36:13.153Z",
      "updated_at": "2025-04-08T15:37:46.984Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Andrew\" data-post=\"4\" data-topic=\"3563\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<p>I don’t understand the logic behind additional <code>id</code> and <code>task</code> arguments that create 2 rows of 2 columns in a 3 column table. Is this intended? IMO, this is not readable and not how tables are usually used.</p>\n</blockquote>\n</aside>\n<p>The table is supposed to represent a exercise (described by the Task row) that has an ID (it has some more fields in my document, but I simplified it a little to focus on <code>results</code>). The data passed in with <code>result</code> represents different people solving that task and their feedback on it. <code>The colspan: 2</code> is just for aesthetic reasons.</p>\n<aside class=\"quote no-group\">\n<blockquote>\n<p>Also, not sure if you actually need to use dictionary over a list.</p>\n</blockquote>\n</aside>\n<p>I was unsure if I should use a dictionary, but I thought it would be nice to have names assigned to the data.</p>",
      "raw": "[quote=\"Andrew, post:4, topic:3563\"]\nI don’t understand the logic behind additional `id` and `task` arguments that create 2 rows of 2 columns in a 3 column table. Is this intended? IMO, this is not readable and not how tables are usually used.\n[/quote]\n\nThe table is supposed to represent a exercise (described by the Task row) that has an ID (it has some more fields in my document, but I simplified it a little to focus on `results`). The data passed in with `result` represents different people solving that task and their feedback on it. `The colspan: 2` is just for aesthetic reasons.\n\n[quote]\nAlso, not sure if you actually need to use dictionary over a list. \n[/quote]\n\nI was unsure if I should use a dictionary, but I thought it would be nice to have names assigned to the data.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 14,
      "score": 2.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 132
    }
  ],
  "scraped_at": "2025-06-10T09:49:32.776996"
}