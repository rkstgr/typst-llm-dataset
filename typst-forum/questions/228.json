{
  "topic_metadata": {
    "id": 228,
    "title": "What is the best way to retrieve template argument outside the template?",
    "slug": "what-is-the-best-way-to-retrieve-template-argument-outside-the-template",
    "posts_count": 7,
    "created_at": "2024-09-15T16:31:38.813Z",
    "last_posted_at": "2024-09-16T12:52:55.968Z",
    "views": 748,
    "like_count": 9,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "PgBiel",
    "tags": [
      "scripting",
      "templates",
      "package-authoring"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 2253
  },
  "posts": [
    {
      "id": 983,
      "post_number": 1,
      "username": "maucejo",
      "name": "Mathieu Aucejo",
      "created_at": "2024-09-15T16:31:39.308Z",
      "updated_at": "2025-05-14T10:13:22.174Z",
      "cooked": "<p>Generally, in the template I create, I define a list of colors as:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let colors = (\n    primary: red,\n    secondary: blue\n)\n</code></pre>\n<p>My question is “What is the best way to give the user access to the template colors?”</p>\n<p>Should I use a <code>state</code> variable ?</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// in template.typ\n#let user-colors = state(\"user-colors\", colors)\n\n// in main.typ\n#let colors = context user-colors.get() // it gives a content\n</code></pre>\n<p>Do you have any recommendation ?</p>\n<p>Thank you</p>",
      "raw": "Generally, in the template I create, I define a list of colors as:\n```typ\n#let colors = (\n    primary: red,\n    secondary: blue\n)\n```\nMy question is \"What is the best way to give the user access to the template colors?\"\n\nShould I use a `state` variable ? \n```typ\n// in template.typ\n#let user-colors = state(\"user-colors\", colors)\n\n// in main.typ\n#let colors = context user-colors.get() // it gives a content\n```\n\nDo you have any recommendation ?\n\nThank you",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 86,
      "score": 1472.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 125
    },
    {
      "id": 987,
      "post_number": 2,
      "username": "xkevio",
      "name": "Kevio",
      "created_at": "2024-09-15T17:19:56.929Z",
      "updated_at": "2024-09-15T17:19:56.929Z",
      "cooked": "<p>If you want the user to be able to change (read/write access) the colors, then yes you will need a <code>state</code>-variable. They can use <code>user-colors.update(...)</code> without <code>context</code> and it will change for all content that relies on the color provided you used the <code>state</code> there.</p>\n<p>However, for simple access, you will need <code>context</code> indeed and it will return content, see here: <a href=\"https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2\" class=\"inline-onebox\">Why is the value I receive from context always content? - #2 by laurmaedje</a></p>",
      "raw": "If you want the user to be able to change (read/write access) the colors, then yes you will need a `state`-variable. They can use `user-colors.update(...)` without `context` and it will change for all content that relies on the color provided you used the `state` there.\n\nHowever, for simple access, you will need `context` indeed and it will return content, see here: https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 91,
      "score": 58.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 21
    },
    {
      "id": 1057,
      "post_number": 3,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-09-15T20:59:30.985Z",
      "updated_at": "2024-09-15T21:13:08.007Z",
      "cooked": "<p>Hey maucejo, if your <code>colors</code> value is read-only and always the same regardless of the template parameters, you can expose it as a global variable in your template file, for example:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// template.typ\n#let colors = (primary: red, secondary: blue)\n\n// main.typ\n#import \"template.typ\": colors, template\n\n#show: template.with(...) // does not affect 'colors'\n\nThe colors are #colors.primary and #colors.secondary\n</code></pre>\n<p>However, if the value of <code>colors</code> depends on the parameters specified by the template, then you can’t define a variable inside the <code>template</code> function and expose it to the template user, as the variable would be local to the template function’s body (thus not accessible outside of it at all). Rather, you have two options (as of Typst 0.11.0):</p>\n<ol>\n<li>\n<p>For <strong>read-only values</strong> (such as colors and text, but maybe even functions) <strong>which depend on template parameters</strong>, you can create a second function (let’s say, <code>setup</code>) which takes the template parameters, generates the read-only values and functions - including the <code>template</code> function itself - based on those parameters, and returns them so the user can access them. Here’s an example of how this could work (let’s say your values and functions depend on a <code>title</code> text parameter the user would specify to the template). Consider the template file below:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// template.typ\n\n// Function depending on the 'title' parameter\n#let title-with-color(title, color) = text(color)[#title]\n\n// This will generate a read-only value depending on\n// the 'title' parameter\n#let generate-bold-title(title) = [*#title*]\n\n// This is your template which applies styles\n// to the document according to certain parameters.\n// We will expose this function exclusively through\n// 'setup' below, which will provide the 'title'\n// parameter.\n#let template(title, doc) = {\n  set document(title: title)\n  set heading(numbering: \"1.\")\n  set text(font: \"New Computer Modern\")\n\n  align(center, text(54pt)[#title])\n  doc\n}\n\n// This is the main function you expose to your user.\n// It takes the parameters and, with them, prepares\n// constants and functions (such as the 'template' function)\n// which are returned to the user.\n#let setup(title: \"Default title\") = {\n  // 1. Generate read-only constants\n  // based on the setup parameters\n  let bold-title = generate-bold-title(title)\n  let emph-title = [_#title;_]\n\n  // 2. Generate functions we want to expose\n  // We will expose a function which allows the user\n  // of the template to easily place the title they specified\n  // with a certain color\n  // Here, we pre-apply the 'title' parameter to the 'title-with-color'\n  // function so that the template user only has to specify the 'color'\n  // parameter later.\n  let title-with-color = title-with-color.with(title)\n  // Prepare the template function itself, pre-apply the parameters\n  // (It has to remain a function to receive the 'doc' parameter,\n  // apply styles and add content to it, and return the new,\n  // modified document)\n  let template = template.with(title)\n\n  // 3. Return the values and functions generated based on\n  // the given parameters\n  (\n    bold-title: bold-title,\n    emph-title: emph-title,\n    title-with-color: title-with-color,\n    template: template\n  )\n}\n</code></pre>\n<p>You could then use that template as follows:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// main.typ\n#import \"template.typ\": setup\n\n// 1. Customize the template's parameters,\n// obtain customized values and functions\n#let (bold-title, emph-title, title-with-color, template) = setup(title: \"My Thesis\")\n\n// 2. Apply the customized template function to the document\n// It will change the font, display the title at the top, and so on\n#show: template\n\n// 3. You can now use the template's generated values and functions!\nThe bold title is #bold-title \\\nThe emphasized title is #emph-title \\\nHere's my title but red: #title-with-color(red)\n</code></pre>\n<p>This will produce the output below:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/6808dade71e53129e5884fb9b4b0cda17abef5e1.png\" data-download-href=\"https://forum.typst.app/uploads/default/6808dade71e53129e5884fb9b4b0cda17abef5e1\" title=\"output of main.typ above\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/6808dade71e53129e5884fb9b4b0cda17abef5e1_2_690x350.png\" alt=\"output of main.typ above\" data-base62-sha1=\"eQkCYhaGFveR0xNiFCG5J244ccF\" width=\"690\" height=\"350\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/6808dade71e53129e5884fb9b4b0cda17abef5e1_2_690x350.png, https://forum.typst.app/uploads/default/original/1X/6808dade71e53129e5884fb9b4b0cda17abef5e1.png 1.5x, https://forum.typst.app/uploads/default/original/1X/6808dade71e53129e5884fb9b4b0cda17abef5e1.png 2x\" data-dominant-color=\"FBFBFB\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">output of main.typ above</span><span class=\"informations\">822×417 24.5 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</li>\n<li>\n<p>For <strong>read-write values</strong> depending on template parameters, your only option will be to use Typst’s <code>state</code> system (see docs: <a href=\"https://typst.app/docs/reference/introspection/state/\" class=\"inline-onebox\">State Type – Typst Documentation</a>), as highlighted by <a class=\"mention\" href=\"/u/xkevio\">@xkevio</a> above (<a href=\"https://forum.typst.app/t/what-is-the-best-way-to-retrieve-template-argument-outside-the-template/228/2\" class=\"inline-onebox\">What is the best way to retrieve template argument outside the template? - #2 by xkevio</a>). The way the <code>state</code> system works is that the value in a <code>state</code> variable with a certain key depends on your location in the document, so you can specify a initial value for your <code>state</code> anywhere in the document (for example, in your template function’s body) and later place special elements called “state updates” (created through, for example, <code>my_state.update(5)</code> to update a certain state to <code>5</code>) in the document, which tell the Typst compiler “any queries for this state’s value AFTER this point in the document should return this new value.” This is why querying a state value requires a <code>context { }</code> block (see explanation: <a href=\"https://typst.app/docs/reference/context/\" class=\"inline-onebox\">Context – Typst Documentation</a>), which returns document content: the code inside it depends on where in the document it is evaluated, so the only way to know what the context block evaluates to is to place it <em>somewhere</em> in the document so it can use the correct values at that location. Consider the example below for how you would apply this to a template:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// template.typ\n\n// Expose the state variable to template users so they can\n// query or change its value later if needed.\n#let title-state = state(\"template-title\", \"\")\n\n// Similar to the previous example, but this time the 'title'\n// value is specified through the state and thus can be changed\n// through updates to it. Therefore, to access the state's value,\n// we wrap our code in `context` as the call to 'title-state.get()'\n// can return different values depending on where this function's\n// output is placed in the document (before or after state updates).\n#let title-with-color(color) = context {\n   text(color)[#title-state.get()]\n}\n\n#let template(doc, title: none) = {\n  // Apply styles as usual\n  set heading(numbering: \"1.\")\n  set text(font: \"New Computer Modern\")\n\n  // Place a state update element at the top of the document\n  // setting the initial value of the title state to the given\n  // parameter. The user can change this later.\n  title-state.update(title)\n\n  // Place the title and the document.\n  align(center, text(54pt)[#title])\n  doc\n}\n</code></pre>\n<p>You can then use the template above as follows:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// main.typ\n#import \"template.typ\": template, title-state, title-with-color\n\n// Apply template styles and initialize 'title-state'\n#show: template.with(title: \"My Article\")\n\n// We can now use the template's functions normally\n// They will access the current value of 'title-state'\nHere's a red title: #title-with-color(red)\n\n// You can also access the title state's value itself, but note\n// that you need 'context' (which returns content that\n// needs to be placed to run your code) since the value of\n// the state depends on your document location, therefore\n// the same code can produce different outputs depending on\n// the current document context!\n#let title-indicator = context { \"The title is \" + title-state.get() }\n\n#title-indicator\n#title-state.update(\"New Title\")\n\n// Notice how 'title-indicator' appears to have changed below,\n// since we updated the title state! Actually, it never changed:\n// 'title-indicator' is an element (contextual element) which\n// runs your code differently depending on the current context\n// each time it is placed! Hence why it is classified as 'content'\n// despite evaluating to a string (due to the \"double quotes\").\n#title-indicator\n\n// Even the 'title-with-color' function is producing different output now!\n// After the title state was updated, all calls to 'title-state.get()' will return\n// the new value - but for it to know which value to return, it has to be\n// aware of the current document location, which is only possible inside\n// a 'context' block! Hence why the function was defined using one.\nHere's a blue title: #title-with-color(blue)\n</code></pre>\n<p>The document above produces:<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/ea2bad8eb475dcf5a4d846d72b563b7f3a0eb349.png\" data-download-href=\"https://forum.typst.app/uploads/default/ea2bad8eb475dcf5a4d846d72b563b7f3a0eb349\" title=\"output of main.typ using state\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/ea2bad8eb475dcf5a4d846d72b563b7f3a0eb349_2_690x347.png\" alt=\"output of main.typ using state\" data-base62-sha1=\"xpzj4IMUjmb7S7jkFOVnriXUmRH\" width=\"690\" height=\"347\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/ea2bad8eb475dcf5a4d846d72b563b7f3a0eb349_2_690x347.png, https://forum.typst.app/uploads/default/original/1X/ea2bad8eb475dcf5a4d846d72b563b7f3a0eb349.png 1.5x, https://forum.typst.app/uploads/default/original/1X/ea2bad8eb475dcf5a4d846d72b563b7f3a0eb349.png 2x\" data-dominant-color=\"FAFAFA\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">output of main.typ using state</span><span class=\"informations\">786×396 23.9 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</li>\n</ol>\n<p>Note that an initial <code>setup</code> function isn’t required when you use <code>state</code> for read-write values like in the second example above. It is, however, required if you want to expose read-only values, which is why the <code>setup</code> method is usually recommended if possible, given that, with it, you don’t need to use <code>state</code> and the introspection machinery (which requires placing content in the document) to access the exposed values. You can also mix both approaches to have a few easy-to-access but read-only values and functions (generated through <code>setup</code>) and a few read-write but harder to access (as it requires placing content in the document) values simultaneously. It’s all up to you!</p>\n<p>Note that there are some ongoing proposals to make the <code>setup</code> example simpler, such as <a href=\"https://github.com/typst/typst/issues/2403\" class=\"inline-onebox\">Syntax for calling a package entrypoint on import · Issue #2403 · typst/typst · GitHub</a> and <a href=\"https://github.com/typst/typst/issues/4853\" class=\"inline-onebox\">Explicit module syntax · Issue #4853 · typst/typst · GitHub</a>, but they are still being discussed and no concrete changes are planned at the moment. Still, stay tuned for potential future improvements to the process of making templates, including, for example, custom types and elements (a planned feature).</p>\n<p>Let us know if there are any further questions on the topic! Don’t forget to check out the Typst reference (<a href=\"https://typst.app/docs/reference/\" class=\"inline-onebox\">Reference – Typst Documentation</a>) as well as the template guide (<a href=\"https://typst.app/docs/tutorial/making-a-template/\" class=\"inline-onebox\">Making a Template – Typst Documentation</a>) for even more useful information.</p>",
      "raw": "Hey maucejo, if your `colors` value is read-only and always the same regardless of the template parameters, you can expose it as a global variable in your template file, for example:\n\n```typ\n// template.typ\n#let colors = (primary: red, secondary: blue)\n\n// main.typ\n#import \"template.typ\": colors, template\n\n#show: template.with(...) // does not affect 'colors'\n\nThe colors are #colors.primary and #colors.secondary\n```\n\nHowever, if the value of `colors` depends on the parameters specified by the template, then you can't define a variable inside the `template` function and expose it to the template user, as the variable would be local to the template function's body (thus not accessible outside of it at all). Rather, you have two options (as of Typst 0.11.0):\n\n1. For **read-only values** (such as colors and text, but maybe even functions) **which depend on template parameters**, you can create a second function (let's say, `setup`) which takes the template parameters, generates the read-only values and functions - including the `template` function itself - based on those parameters, and returns them so the user can access them. Here's an example of how this could work (let's say your values and functions depend on a `title` text parameter the user would specify to the template). Consider the template file below:\n\n    ```typ\n    // template.typ\n    \n    // Function depending on the 'title' parameter\n    #let title-with-color(title, color) = text(color)[#title]\n    \n    // This will generate a read-only value depending on\n    // the 'title' parameter\n    #let generate-bold-title(title) = [*#title*]\n    \n    // This is your template which applies styles\n    // to the document according to certain parameters.\n    // We will expose this function exclusively through\n    // 'setup' below, which will provide the 'title'\n    // parameter.\n    #let template(title, doc) = {\n      set document(title: title)\n      set heading(numbering: \"1.\")\n      set text(font: \"New Computer Modern\")\n    \n      align(center, text(54pt)[#title])\n      doc\n    }\n    \n    // This is the main function you expose to your user.\n    // It takes the parameters and, with them, prepares\n    // constants and functions (such as the 'template' function)\n    // which are returned to the user.\n    #let setup(title: \"Default title\") = {\n      // 1. Generate read-only constants\n      // based on the setup parameters\n      let bold-title = generate-bold-title(title)\n      let emph-title = [_#title;_]\n    \n      // 2. Generate functions we want to expose\n      // We will expose a function which allows the user\n      // of the template to easily place the title they specified\n      // with a certain color\n      // Here, we pre-apply the 'title' parameter to the 'title-with-color'\n      // function so that the template user only has to specify the 'color'\n      // parameter later.\n      let title-with-color = title-with-color.with(title)\n      // Prepare the template function itself, pre-apply the parameters\n      // (It has to remain a function to receive the 'doc' parameter,\n      // apply styles and add content to it, and return the new,\n      // modified document)\n      let template = template.with(title)\n    \n      // 3. Return the values and functions generated based on\n      // the given parameters\n      (\n        bold-title: bold-title,\n        emph-title: emph-title,\n        title-with-color: title-with-color,\n        template: template\n      )\n    }\n    ```\n    You could then use that template as follows:\n    ```typ\n    // main.typ\n    #import \"template.typ\": setup\n\n    // 1. Customize the template's parameters,\n    // obtain customized values and functions\n    #let (bold-title, emph-title, title-with-color, template) = setup(title: \"My Thesis\")\n\n    // 2. Apply the customized template function to the document\n    // It will change the font, display the title at the top, and so on\n    #show: template\n\n    // 3. You can now use the template's generated values and functions!\n    The bold title is #bold-title \\\n    The emphasized title is #emph-title \\\n    Here's my title but red: #title-with-color(red)\n    ```\n\n    This will produce the output below:\n    \n    ![output of main.typ above|690x350](upload://eQkCYhaGFveR0xNiFCG5J244ccF.png)\n\n2. For **read-write values** depending on template parameters, your only option will be to use Typst's `state` system (see docs: https://typst.app/docs/reference/introspection/state/), as highlighted by @xkevio above (https://forum.typst.app/t/what-is-the-best-way-to-retrieve-template-argument-outside-the-template/228/2). The way the `state` system works is that the value in a `state` variable with a certain key depends on your location in the document, so you can specify a initial value for your `state` anywhere in the document (for example, in your template function's body) and later place special elements called \"state updates\" (created through, for example, `my_state.update(5)` to update a certain state to `5`) in the document, which tell the Typst compiler \"any queries for this state's value AFTER this point in the document should return this new value.\" This is why querying a state value requires a `context { }` block (see explanation: https://typst.app/docs/reference/context/), which returns document content: the code inside it depends on where in the document it is evaluated, so the only way to know what the context block evaluates to is to place it _somewhere_ in the document so it can use the correct values at that location. Consider the example below for how you would apply this to a template:\n\n    ```typ\n    // template.typ\n\n    // Expose the state variable to template users so they can\n    // query or change its value later if needed.\n    #let title-state = state(\"template-title\", \"\")\n\n    // Similar to the previous example, but this time the 'title'\n    // value is specified through the state and thus can be changed\n    // through updates to it. Therefore, to access the state's value,\n    // we wrap our code in `context` as the call to 'title-state.get()'\n    // can return different values depending on where this function's\n    // output is placed in the document (before or after state updates).\n    #let title-with-color(color) = context {\n       text(color)[#title-state.get()]\n    }\n\n    #let template(doc, title: none) = {\n      // Apply styles as usual\n      set heading(numbering: \"1.\")\n      set text(font: \"New Computer Modern\")\n\n      // Place a state update element at the top of the document\n      // setting the initial value of the title state to the given\n      // parameter. The user can change this later.\n      title-state.update(title)\n\n      // Place the title and the document.\n      align(center, text(54pt)[#title])\n      doc\n    }\n    ```\n    You can then use the template above as follows:\n    ```typ\n    // main.typ\n    #import \"template.typ\": template, title-state, title-with-color\n\n    // Apply template styles and initialize 'title-state'\n    #show: template.with(title: \"My Article\")\n\n    // We can now use the template's functions normally\n    // They will access the current value of 'title-state'\n    Here's a red title: #title-with-color(red)\n\n    // You can also access the title state's value itself, but note\n    // that you need 'context' (which returns content that\n    // needs to be placed to run your code) since the value of\n    // the state depends on your document location, therefore\n    // the same code can produce different outputs depending on\n    // the current document context!\n    #let title-indicator = context { \"The title is \" + title-state.get() }\n\n    #title-indicator\n    #title-state.update(\"New Title\")\n\n    // Notice how 'title-indicator' appears to have changed below,\n    // since we updated the title state! Actually, it never changed:\n    // 'title-indicator' is an element (contextual element) which\n    // runs your code differently depending on the current context\n    // each time it is placed! Hence why it is classified as 'content'\n    // despite evaluating to a string (due to the \"double quotes\").\n    #title-indicator\n\n    // Even the 'title-with-color' function is producing different output now!\n    // After the title state was updated, all calls to 'title-state.get()' will return\n    // the new value - but for it to know which value to return, it has to be\n    // aware of the current document location, which is only possible inside\n    // a 'context' block! Hence why the function was defined using one.\n    Here's a blue title: #title-with-color(blue)\n    ```\n    The document above produces:\n    ![output of main.typ using state|690x347](upload://xpzj4IMUjmb7S7jkFOVnriXUmRH.png)\n\n    \n\nNote that an initial `setup` function isn't required when you use `state` for read-write values like in the second example above. It is, however, required if you want to expose read-only values, which is why the `setup` method is usually recommended if possible, given that, with it, you don't need to use `state` and the introspection machinery (which requires placing content in the document) to access the exposed values. You can also mix both approaches to have a few easy-to-access but read-only values and functions (generated through `setup`) and a few read-write but harder to access (as it requires placing content in the document) values simultaneously. It's all up to you!\n\nNote that there are some ongoing proposals to make the `setup` example simpler, such as https://github.com/typst/typst/issues/2403 and https://github.com/typst/typst/issues/4853, but they are still being discussed and no concrete changes are planned at the moment. Still, stay tuned for potential future improvements to the process of making templates, including, for example, custom types and elements (a planned feature).\n\nLet us know if there are any further questions on the topic! Don't forget to check out the Typst reference (https://typst.app/docs/reference/) as well as the template guide (https://typst.app/docs/tutorial/making-a-template/) for even more useful information.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 6,
      "reads": 85,
      "score": 472.0,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 1129,
      "post_number": 4,
      "username": "maucejo",
      "name": "Mathieu Aucejo",
      "created_at": "2024-09-16T07:58:52.891Z",
      "updated_at": "2024-09-16T07:58:52.891Z",
      "cooked": "<p>Thank you <a class=\"mention\" href=\"/u/xkevio\">@xkevio</a> , as you suggest, my current try are to use <code>state</code> without success for the moment. I will read the doc again ;)</p>",
      "raw": "Thank you @xkevio , as you suggest, my current try are to use `state` without success for the moment. I will read the doc again ;)",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 55,
      "score": 21.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 125
    },
    {
      "id": 1130,
      "post_number": 5,
      "username": "maucejo",
      "name": "Mathieu Aucejo",
      "created_at": "2024-09-16T08:02:17.994Z",
      "updated_at": "2024-09-16T08:02:17.994Z",
      "cooked": "<p>Wow <a class=\"mention\" href=\"/u/pgbiel\">@PgBiel</a> ! Thank you for this detail and pedagogical answer. Currently, I use a global variable which works great for my personal use, but not from an user perspective.</p>\n<p>I will try to work on the basis of your answer to find a solution that fits my need.</p>\n<p>Thank you !</p>",
      "raw": "Wow @PgBiel ! Thank you for this detail and pedagogical answer. Currently, I use a global variable which works great for my personal use, but not from an user perspective.\n\nI will try to work on the basis of your answer to find a solution that fits my need.\n\nThank you !",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 56,
      "score": 16.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 125
    },
    {
      "id": 1176,
      "post_number": 6,
      "username": "maucejo",
      "name": "Mathieu Aucejo",
      "created_at": "2024-09-16T09:14:57.736Z",
      "updated_at": "2024-09-16T09:14:57.736Z",
      "cooked": "<p><a class=\"mention\" href=\"/u/pgbiel\">@PgBiel</a> and <a class=\"mention\" href=\"/u/xkevio\">@xkevio</a> I have thought to my problem. In the original question, the problem is that a <code>context</code> gives a content. Despite the content of the <code>content</code> is correct (it is a <code>dictionary</code>), I can’t access to the content of the content itself.</p>\n<p>It is like a picture, but you can see the object, but you don’t have it. In the case of a title, it works well, because <code>text</code> accepts a <code>content</code>.</p>\n<p>To sum up, “How to access to the content of a <code>content</code>” ? If you think, it is another question, I open another thread.</p>",
      "raw": "@PgBiel and @xkevio I have thought to my problem. In the original question, the problem is that a `context` gives a content. Despite the content of the `content` is correct (it is a `dictionary`), I can't access to the content of the content itself.\n\nIt is like a picture, but you can see the object, but you don't have it. In the case of a title, it works well, because `text` accepts a `content`.\n\nTo sum up, \"How to access to the content of a `content`\" ? If you think, it is another question, I open another thread.",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 49,
      "score": 14.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 125
    },
    {
      "id": 1261,
      "post_number": 7,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-09-16T12:52:55.968Z",
      "updated_at": "2024-09-16T12:54:19.887Z",
      "cooked": "<p>Hey maucejo, recall this bit from my response:</p>\n<blockquote>\n<p>This is why querying a state value requires a <code>context { }</code> block (see explanation: <a href=\"https://typst.app/docs/reference/context/\">Context – Typst Documentation</a>), which returns document content: the code inside it depends on where in the document it is evaluated, so the only way to know what the context block evaluates to is to place it <em>somewhere</em> in the document so it can use the correct values at that location.</p>\n</blockquote>\n<p>It returns content regardless of what your code evaluates to, because code inside it is sensitive to where it is located in the document, so if you could access what is returned inside the <code>context { }</code> block outside of it (without placing some content somewhere), it would always be the same value as it would not have a fixed location in the document (which only <code>content</code> can have), but that’s not what you want (code outside of <code>context { }</code> is evaluated early, before document layout, so it would have no way to be aware of state updates, current location and other context-aware information). So, instead of:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let value = context { value-state.get() + 5 }\n\n// Error: trying to access context-aware code\n// from non-context-aware code\n#let sum = value + 10\nThe sum is #sum\n</code></pre>\n<p>Instead indicate that <em>all of your relevant code</em> is context-aware and needs to be placed in the document to work, as such:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#context {\n   // Ok: All code depending on the context is\n   // encapsulated in a context block\n   let value = value-state.get() + 5\n   let sum = value + 10\n   [The sum is #sum]\n}\n</code></pre>\n<p>Note that if you have a function which depends on the context to return a value that isn’t content, you can simply have it not return <code>context</code> to allow users to access what it returns, as long as they themselves use <code>context</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Don't:\n#let get-height() = context here().pos().y\n// Error: can't get contextual value from non-contextual code\n#let sum = get-height() + 5pt \n#sum\n\n// Do instead:\n#let get-height() = here().pos().y\n// Error: here() requires context, so this call fails\n#let sum = get-height() + 5pt \n\n// Ok: wrapping in context, we can access what get-height()\n// would return at this location\n#context {\n  let sum = get-height() + 5pt\n  sum\n}\n</code></pre>\n<p>For more information (and for further help on this matter), please check out this thread: <a href=\"https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2\" class=\"inline-onebox\">Why is the value I receive from context always content? - #2 by laurmaedje</a></p>",
      "raw": "Hey maucejo, recall this bit from my response:\n\n> This is why querying a state value requires a `context { }` block (see explanation: [Context – Typst Documentation](https://typst.app/docs/reference/context/)), which returns document content: the code inside it depends on where in the document it is evaluated, so the only way to know what the context block evaluates to is to place it *somewhere* in the document so it can use the correct values at that location.\n\nIt returns content regardless of what your code evaluates to, because code inside it is sensitive to where it is located in the document, so if you could access what is returned inside the `context { }` block outside of it (without placing some content somewhere), it would always be the same value as it would not have a fixed location in the document (which only `content` can have), but that's not what you want (code outside of `context { }` is evaluated early, before document layout, so it would have no way to be aware of state updates, current location and other context-aware information). So, instead of:\n\n```typ\n#let value = context { value-state.get() + 5 }\n\n// Error: trying to access context-aware code\n// from non-context-aware code\n#let sum = value + 10\nThe sum is #sum\n```\nInstead indicate that _all of your relevant code_ is context-aware and needs to be placed in the document to work, as such:\n\n```typ\n#context {\n   // Ok: All code depending on the context is\n   // encapsulated in a context block\n   let value = value-state.get() + 5\n   let sum = value + 10\n   [The sum is #sum]\n}\n```\n\nNote that if you have a function which depends on the context to return a value that isn't content, you can simply have it not return `context` to allow users to access what it returns, as long as they themselves use `context`:\n\n```typ\n// Don't:\n#let get-height() = context here().pos().y\n// Error: can't get contextual value from non-contextual code\n#let sum = get-height() + 5pt \n#sum\n\n// Do instead:\n#let get-height() = here().pos().y\n// Error: here() requires context, so this call fails\n#let sum = get-height() + 5pt \n\n// Ok: wrapping in context, we can access what get-height()\n// would return at this location\n#context {\n  let sum = get-height() + 5pt\n  sum\n}\n```\n\nFor more information (and for further help on this matter), please check out this thread: https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 48,
      "score": 79.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    }
  ],
  "scraped_at": "2025-06-10T09:58:55.695896"
}