{
  "topic_metadata": {
    "id": 1197,
    "title": "How to \"spread\" a 2d array in table?",
    "slug": "how-to-spread-a-2d-array-in-table",
    "posts_count": 7,
    "created_at": "2024-10-19T05:44:34.810Z",
    "last_posted_at": "2024-10-20T08:41:22.937Z",
    "views": 494,
    "like_count": 4,
    "reply_count": 5,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "ParaN3xus",
    "tags": [
      "scripting",
      "tables"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 641
  },
  "posts": [
    {
      "id": 4207,
      "post_number": 1,
      "username": "raj2569",
      "name": "Raj",
      "created_at": "2024-10-19T05:44:34.958Z",
      "updated_at": "2024-10-19T11:50:57.270Z",
      "cooked": "<p>Hi,</p>\n<p>I have a 2d array defined in a json file with following structure</p>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">[\n    [\n        \"Date\",\n        \"Tran Type\",\n        \"Tran ID\",\n        \"Withdrawals\",\n        \"Deposits\"\n    ],\n    [\n        \"01/05/2024\",\n        \"TFR\",\n        \"S81420904\",\n        \"700.00\",\n        \"\"\n    ],\n    [\n        \"01/05/2024\",\n        \"TFR\",\n        \"S84554541\",\n        \"\",\n        \"1.01\"\n    ]\n]\n</code></pre>\n<p>I am looking to format this as a table. The first row is the header and after that it’s data rows. The attempt I have made is as follows:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let txn = json(\"data1.json\")\n\n#txn.at(0)\n\n#let to_content(r) = [#r.at(0) #r.at(1) #r.at(2) #r.at(3) #r.at(4)]\n\n#table(\n  columns: 5,\n  to_content(..txn)\n)\n</code></pre>\n<p>Which obviously is not working. Is there a means to format the 2d array as a table directly?</p>",
      "raw": "Hi,\n\nI have a 2d array defined in a json file with following structure\n```json\n[\n    [\n        \"Date\",\n        \"Tran Type\",\n        \"Tran ID\",\n        \"Withdrawals\",\n        \"Deposits\"\n    ],\n    [\n        \"01/05/2024\",\n        \"TFR\",\n        \"S81420904\",\n        \"700.00\",\n        \"\"\n    ],\n    [\n        \"01/05/2024\",\n        \"TFR\",\n        \"S84554541\",\n        \"\",\n        \"1.01\"\n    ]\n]\n```\n\nI am looking to format this as a table. The first row is the header and after that it's data rows. The attempt I have made is as follows:\n\n```typ\n#let txn = json(\"data1.json\")\n\n#txn.at(0)\n\n#let to_content(r) = [#r.at(0) #r.at(1) #r.at(2) #r.at(3) #r.at(4)]\n\n#table(\n  columns: 5,\n  to_content(..txn)\n)\n```\nWhich obviously is not working. Is there a means to format the 2d array as a table directly?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 51,
      "score": 2345.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 619
    },
    {
      "id": 4215,
      "post_number": 2,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-10-19T08:22:15.064Z",
      "updated_at": "2024-10-19T08:22:15.064Z",
      "cooked": "<p>Use <code>array.flatten()</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let txn = json(\"data1.json\")\n\n#table(\n  columns: 5,\n  ..txn.flatten()\n)\n</code></pre>",
      "raw": "Use `array.flatten()`:\n```typ\n#let txn = json(\"data1.json\")\n\n#table(\n  columns: 5,\n  ..txn.flatten()\n)\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 45,
      "score": 79.0,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 4283,
      "post_number": 3,
      "username": "raj2569",
      "name": "Raj",
      "created_at": "2024-10-20T06:28:25.295Z",
      "updated_at": "2024-10-20T06:28:25.295Z",
      "cooked": "<p>Thanks! Its working fine.</p>\n<p>Just a followup question about how <code>flatten()</code> work here. I can understand that the <code>..</code> spread operator converts the resultent arraay into individual rows that can be used by <code>#table</code> . But I could not yet fully understand the <code>flatten()</code> operator. The table expects (in my faulty understanding) data in the form of a row, which is what each row of <code>..txn</code> provides, what additional facility does <code>flatten()</code> provides?</p>\n<p>The reference also do not shed much light into the implication of <code>flatten()</code></p>\n<blockquote>\n<p>Combine all nested arrays into a single flat one.</p>\n</blockquote>\n<p>Thanks!</p>",
      "raw": "Thanks! Its working fine. \n\nJust a followup question about how `flatten()` work here. I can understand that the `..` spread operator converts the resultent arraay into individual rows that can be used by `#table` . But I could not yet fully understand the `flatten()` operator. The table expects (in my faulty understanding) data in the form of a row, which is what each row of `..txn` provides, what additional facility does `flatten()` provides?\n\nThe reference also do not shed much light into the implication of `flatten()`\n> Combine all nested arrays into a single flat one.\n\nThanks!",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 40,
      "score": 23.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 619
    },
    {
      "id": 4285,
      "post_number": 4,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-10-20T07:24:16.483Z",
      "updated_at": "2024-10-20T07:24:16.483Z",
      "cooked": "<ul>\n<li>\n<p>What does <code>flatten</code> do?<br>\n<code>flatten()</code> converts a multi-dimensional array into a one-dimensional array. For example, in your case, <code>txn</code> is a 2D array (which means elements in array are 1D array) like:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">(\n    (\n        \"Date\",\n        \"Tran Type\",\n        \"Tran ID\",\n        \"Withdrawals\",\n        \"Deposits\"\n    ),\n    (\n        \"01/05/2024\",\n        \"TFR\",\n        \"S81420904\",\n        \"700.00\",\n        \"\"\n    ),\n    (\n        \"01/05/2024\",\n        \"TFR\",\n        \"S84554541\",\n        \"\",\n        \"1.01\"\n    )\n)\n</code></pre>\n<p>and <code>txn.flatten()</code> returns a 1D array like:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">(\n    \"Date\",\n    \"Tran Type\",\n    \"Tran ID\",\n    \"Withdrawals\",\n    \"Deposits\",\n    \"01/05/2024\",\n    \"TFR\",\n    \"S81420904\",\n    \"700.00\",\n    \"\",\n    \"01/05/2024\",\n    \"TFR\",\n    \"S84554541\",\n    \"\",\n    \"1.01\",\n)\n</code></pre>\n</li>\n<li>\n<p>What should we provide to <code>table</code> ?<br>\nThe <code>table</code> does not treat cells from different columns differently, so you don’t need to use other functions (like your <code>to_content</code>) to construct a complete row. Instead, we should provide the table with individual cell content.</p>\n<p>Simply using <code>..array.flatten()</code> works because the data you provide comes in groups of five, and the table is set to have five columns, so each group of data perfectly fills one row.</p>\n</li>\n<li>\n<p>About <code>..</code> operator<br>\nBasically, you can think of the <code>..</code> operator as removing the brackets from around the list. For example:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let txn = (\n  (\n    \"Date\",\n    \"Tran Type\",\n  ),\n  (\n    \"01/05/2024\",\n    \"TFR\",\n  ),\n)\n#table(columns: 2, ..txn)\n</code></pre>\n<p>is equivalent to (simply replacing the variable):</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#table(columns: 2, ..(\n  (\n    \"Date\",\n    \"Tran Type\",\n  ),\n  (\n    \"01/05/2024\",\n    \"TFR\",\n  ),\n))\n</code></pre>\n<p>is equivalent to (spread <code>array</code> with <code>..</code>)</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#table(\n  columns: 2,\n  (\n    \"Date\",\n    \"Tran Type\",\n  ),\n  (\n    \"01/05/2024\",\n    \"TFR\",\n  ),\n)\n</code></pre>\n<p>This won’t work because <code>table</code> does not accept <code>array</code> as row, (it receives <code>str</code> or <code>content</code> as individual cell, as we mentioned above), but with <code>..txn.flatten()</code>, we will get:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#table(\n  columns: 2,\n  \"Date\", \"Tran Type\",\n  \"01/05/2024\", \"TFR\",\n)\n</code></pre>\n<p>That’s exactly what we want.</p>\n</li>\n</ul>",
      "raw": "- What does `flatten` do?   \n  `flatten()` converts a multi-dimensional array into a one-dimensional array. For example, in your case, `txn` is a 2D array (which means elements in array are 1D array) like:\n  \n  ```typ\n  (\n      (\n          \"Date\",\n          \"Tran Type\",\n          \"Tran ID\",\n          \"Withdrawals\",\n          \"Deposits\"\n      ),\n      (\n          \"01/05/2024\",\n          \"TFR\",\n          \"S81420904\",\n          \"700.00\",\n          \"\"\n      ),\n      (\n          \"01/05/2024\",\n          \"TFR\",\n          \"S84554541\",\n          \"\",\n          \"1.01\"\n      )\n  )\n  ```\n  \n  and `txn.flatten()` returns a 1D array like:\n  \n  ```typ\n  (\n      \"Date\",\n      \"Tran Type\",\n      \"Tran ID\",\n      \"Withdrawals\",\n      \"Deposits\",\n      \"01/05/2024\",\n      \"TFR\",\n      \"S81420904\",\n      \"700.00\",\n      \"\",\n      \"01/05/2024\",\n      \"TFR\",\n      \"S84554541\",\n      \"\",\n      \"1.01\",\n  )\n  ```\n\n- What should we provide to `table` ?\n  The `table` does not treat cells from different columns differently, so you don't need to use other functions (like your `to_content`) to construct a complete row. Instead, we should provide the table with individual cell content.\n  \n  Simply using `..array.flatten()` works because the data you provide comes in groups of five, and the table is set to have five columns, so each group of data perfectly fills one row.\n\n- About `..` operator\n  Basically, you can think of the `..` operator as removing the brackets from around the list. For example:\n  ```typ\n  #let txn = (\n    (\n      \"Date\",\n      \"Tran Type\",\n    ),\n    (\n      \"01/05/2024\",\n      \"TFR\",\n    ),\n  )\n  #table(columns: 2, ..txn)\n  ```\n  is equivalent to (simply replacing the variable):\n  ```typ\n  #table(columns: 2, ..(\n    (\n      \"Date\",\n      \"Tran Type\",\n    ),\n    (\n      \"01/05/2024\",\n      \"TFR\",\n    ),\n  ))\n  ```\n  is equivalent to (spread `array` with `..`)\n  ```typ\n  #table(\n    columns: 2,\n    (\n      \"Date\",\n      \"Tran Type\",\n    ),\n    (\n      \"01/05/2024\",\n      \"TFR\",\n    ),\n  )\n  ```\n  This won't work because `table` does not accept `array` as row, (it receives `str` or `content` as individual cell, as we mentioned above), but with `..txn.flatten()`, we will get:\n  ```typ\n  #table(\n    columns: 2,\n    \"Date\", \"Tran Type\",\n    \"01/05/2024\", \"TFR\",\n  )\n  ```\n  That's exactly what we want.",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 31,
      "score": 86.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 4289,
      "post_number": 5,
      "username": "raj2569",
      "name": "Raj",
      "created_at": "2024-10-20T08:03:40.040Z",
      "updated_at": "2024-10-20T08:03:40.040Z",
      "cooked": "<p>Thanks for the helpful explanation! Couple of questions, if I may:</p>\n<p>In <code>..array.flatten()</code> in which order does the operations happen? ie does the <code>flatten()</code> happen first or does the <code>..</code> spread happen first?</p>\n<ol>\n<li>If <code>flatten()</code> happen first, then how does the <code>..</code> knows how to split the array into rows, because it will be just one big 1d array.</li>\n<li>If <code>..</code> happen first then we have a <em>collection</em> of 1d arrays, and the <code>flatten()</code> operator do not have a multi-dimentional array to work with. In this case, will it just return a just a <em>collection</em> of content?</li>\n</ol>",
      "raw": "Thanks for the helpful explanation! Couple of questions, if I may:\n\nIn `..array.flatten()` in which order does the operations happen? ie does the `flatten()` happen first or does the `..` spread happen first?\n\n1. If `flatten()` happen first, then how does the `..` knows how to split the array into rows, because it will be just one big 1d array.\n2. If `..` happen first then we have a _collection_ of 1d arrays, and the `flatten()` operator do not have a multi-dimentional array to work with. In this case, will it just return a just a _collection_ of content?",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 9.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 619
    },
    {
      "id": 4290,
      "post_number": 6,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-10-20T08:08:47.170Z",
      "updated_at": "2024-10-20T08:08:47.170Z",
      "cooked": "<p><code>flatten()</code> happens first.</p>\n<p><code>..</code> <em>DOES NOT</em> split array. It just unpacks. <code>table</code> splits providing cells into rows based on <code>columns</code> argument.</p>",
      "raw": "`flatten()` happens first.\n\n`..` *DOES NOT* split array. It just unpacks. `table` splits providing cells into rows based on `columns` argument.",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 23,
      "score": 24.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 4292,
      "post_number": 7,
      "username": "raj2569",
      "name": "Raj",
      "created_at": "2024-10-20T08:41:22.937Z",
      "updated_at": "2024-10-20T08:41:22.937Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"ParaN3xus\" data-post=\"6\" data-topic=\"1197\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/paran3xus/48/32_2.png\" class=\"avatar\"> ParaN3xus:</div>\n<blockquote>\n<p><code>table</code> splits providing cells into rows based on <code>columns</code> argument.</p>\n</blockquote>\n</aside>\n<p>Thanks, that clarifies it!</p>",
      "raw": "[quote=\"ParaN3xus, post:6, topic:1197\"]\n`table` splits providing cells into rows based on `columns` argument.\n[/quote]\n\nThanks, that clarifies it!",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 23,
      "score": 19.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 619
    }
  ],
  "scraped_at": "2025-06-10T09:56:28.233924"
}