{
  "topic_metadata": {
    "id": 2509,
    "title": "Has the state a limit of 4 entries per array?",
    "slug": "has-the-state-a-limit-of-4-entries-per-array",
    "posts_count": 8,
    "created_at": "2025-01-22T13:24:02.598Z",
    "last_posted_at": "2025-01-23T14:28:08.085Z",
    "views": 125,
    "like_count": 7,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 5,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "scripting",
      "state"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 958
  },
  "posts": [
    {
      "id": 7764,
      "post_number": 1,
      "username": "Sebastian_Vogt",
      "name": "Sebastian Vogt",
      "created_at": "2025-01-22T13:24:02.735Z",
      "updated_at": "2025-01-22T13:24:02.735Z",
      "cooked": "<p>Hi all,</p>\n<p>i have a question regarding the state.<br>\nSome context: I try creating an exam containing some figures the students should draw stuff in. Since some of them will mess up some sketches unreadable i want to have some figure sheet containing all “messupable” graphics. For that i have a function, that takes the graphic and its heading counter at the current context and appends it to an state array and prints the graphic itself:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let _all_graphics = state(\"all_graphics\", ())\n\n#let messupable_graphic(body) = context{\n  let all_graphics = _all_graphics.get()\n  let section_number = counter(heading).get()\n  let state_element = (section_number, body)\n\n  all_graphics.push(state_element)\n  _all_graphics.update(all_graphics)\n  \n  [Section number: #section_number \\ \\ ]\n  [State element: #state_element \\ \\ ]\n  [State input: #all_graphics \\ \\ ]\n\n  body\n}\n</code></pre>\n<p>Called it should look like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.1\"\n\n#let question1(color) = context {\n  let graphic = context {\n    cetz.canvas(length: 1cm, {\n      import cetz.draw: *\n      rect((0, 0), (1, 1), fill: color)\n    })\n  }\n  [\n    === foo. \\\n    #messupable_graphic(graphic)\n  ]\n}\n</code></pre>\n<p>This state will then be used in a figure template (which is called at the end of the exam template) like this: (reducing the heading count by 1 setting a heading and printing the graphic.)</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">  #let all_graphics = _all_graphics.final()\n  #for graphic in all_graphics {\n    let heading_counter = graphic.at(0)\n    if(heading_counter.len() &gt; 1){\n      heading_counter.at(-1) -= 1\n    }\n    counter(heading).update(heading_counter)\n    [=== ]\n    graphic.at(1)\n  }\n</code></pre>\n<p>When i call it up to 3 times everything is fine and as expected. But with the fourth call the first heading counter gets wrong and with the fifth and more the first value is lost.<br>\nIs there a limit to the state that it can only hold 4 element stuff (same problem occurs when i try using a dict or make the state a list containing the actual all_graphics array as second entry, this second entry also can only hold 4 elements) or am i missing some <code>context</code> somewhere?</p>\n<p><img src=\"/uploads/default/original/2X/7/7f737786845c029139269d2ff749c9a1631fba4b.png\" alt=\"question\" data-base62-sha1=\"ibu1zL1HG8mivK6BDU3dn9iEE2L\" width=\"690\" height=\"486\"></p>\n<p>Full code for a minimal running example:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.1\"\n\n#let _all_graphics = state(\"all_graphics\", ())\n\n#let messupable_graphic(body) = context{\n  let all_graphics = _all_graphics.get()\n  let section_number = counter(heading).get()\n  let state_element = (section_number, body)\n\n  all_graphics.push(state_element)\n  _all_graphics.update(all_graphics)\n  \n  [Section number: #section_number \\ \\ ]\n  [State element: #state_element \\ \\ ]\n  [State input: #all_graphics \\ \\ ]\n\n  body\n\n}\n\n#let question1(color) = context {\n\n  let graphic = context {\n    cetz.canvas(length: 1cm, {\n      import cetz.draw: *\n\n      rect((0, 0), (1, 1), fill: color)\n    })\n  }\n\n  [\n    === foo. \\\n    #messupable_graphic(graphic)\n  ]\n\n}\n\n#let figure_template(\n  body,\n) = context {\n\n  set heading(numbering: (..nums) =&gt; {\n    let nums = nums.pos()\n    // the zero-based level of the current heading\n    let level = nums.len() - 1\n\n    if level == 2 {\n      numbering(\"I.1\", nums.at(nums.len() - 2), nums.last())\n    }\n  })\n\n  let all_graphics = _all_graphics.final()\n  for graphic in all_graphics {\n    let heading_counter = graphic.at(0)\n    if(heading_counter.len() &gt; 1){\n      heading_counter.at(-1) -= 1\n    }\n    counter(heading).update(heading_counter)\n    [=== ]\n    graphic.at(1)\n  }\n\n}\n\n#let exam_template(body) = context {\n\n  show heading.where(level: 3): it =&gt; {\n      set text(luma(50), weight: 700)\n      [Question ] + counter(heading).display(it.numbering)\n      if (measure(it.body).width &gt; 0.1cm) {\n        set text(luma(50), weight: 400) \n        [ -- ] + it.body\n      }\n    }\n  set heading(numbering: (..nums) =&gt; {\n      let nums = nums.pos()\n      // the zero-based level of the current heading\n      let level = nums.len() - 1\n      \n      if level == 2 {\n        numbering(\"I.1\", nums.at(nums.len() - 2), nums.last())\n      } \n\n    })\n\n  body\n\n  context figure_template()[]\n}\n\n#show: exam_template.with()\n\n#context [\n  = \n  == \n  #context{\n    let current_state = _all_graphics.at(here())\n    [State before green: #current_state \\ \\ ]\n  }\n  #question1(green)\n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after green: #current_state \\ \\ ]\n  }\n  #question1(red)\n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after red: #current_state \\ \\ ]\n  }\n  #question1(blue)\n  \n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after blue: #current_state \\ \\ ]\n  }\n\n  #question1(gray)\n  \n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after gray: #current_state \\ \\ ]\n  }\n  == \n  #question1(yellow)\n  \n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after yellow: #current_state \\ \\ ]\n  }\n\n  #question1(orange)\n\n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after orange: #current_state \\ \\ ]\n  }\n  #line(length: 100%)\n]\n\n</code></pre>",
      "raw": "Hi all,\n\ni have a question regarding the state.\nSome context: I try creating an exam containing some figures the students should draw stuff in. Since some of them will mess up some sketches unreadable i want to have some figure sheet containing all \"messupable\" graphics. For that i have a function, that takes the graphic and its heading counter at the current context and appends it to an state array and prints the graphic itself:\n\n```typ\n#let _all_graphics = state(\"all_graphics\", ())\n\n#let messupable_graphic(body) = context{\n  let all_graphics = _all_graphics.get()\n  let section_number = counter(heading).get()\n  let state_element = (section_number, body)\n\n  all_graphics.push(state_element)\n  _all_graphics.update(all_graphics)\n  \n  [Section number: #section_number \\ \\ ]\n  [State element: #state_element \\ \\ ]\n  [State input: #all_graphics \\ \\ ]\n\n  body\n}\n```\n\nCalled it should look like this:\n\n```typ \n#import \"@preview/cetz:0.3.1\"\n\n#let question1(color) = context {\n  let graphic = context {\n    cetz.canvas(length: 1cm, {\n      import cetz.draw: *\n      rect((0, 0), (1, 1), fill: color)\n    })\n  }\n  [\n    === foo. \\\n    #messupable_graphic(graphic)\n  ]\n}\n```\n\nThis state will then be used in a figure template (which is called at the end of the exam template) like this: (reducing the heading count by 1 setting a heading and printing the graphic.)\n\n```typ\n  #let all_graphics = _all_graphics.final()\n  #for graphic in all_graphics {\n    let heading_counter = graphic.at(0)\n    if(heading_counter.len() > 1){\n      heading_counter.at(-1) -= 1\n    }\n    counter(heading).update(heading_counter)\n    [=== ]\n    graphic.at(1)\n  }\n```\n\nWhen i call it up to 3 times everything is fine and as expected. But with the fourth call the first heading counter gets wrong and with the fifth and more the first value is lost.\nIs there a limit to the state that it can only hold 4 element stuff (same problem occurs when i try using a dict or make the state a list containing the actual all_graphics array as second entry, this second entry also can only hold 4 elements) or am i missing some ```context``` somewhere?\n\n![question|690x486](upload://ibu1zL1HG8mivK6BDU3dn9iEE2L.png)\n\nFull code for a minimal running example:\n\n```typ\n#import \"@preview/cetz:0.3.1\"\n\n#let _all_graphics = state(\"all_graphics\", ())\n\n#let messupable_graphic(body) = context{\n  let all_graphics = _all_graphics.get()\n  let section_number = counter(heading).get()\n  let state_element = (section_number, body)\n\n  all_graphics.push(state_element)\n  _all_graphics.update(all_graphics)\n  \n  [Section number: #section_number \\ \\ ]\n  [State element: #state_element \\ \\ ]\n  [State input: #all_graphics \\ \\ ]\n\n  body\n\n}\n\n#let question1(color) = context {\n\n  let graphic = context {\n    cetz.canvas(length: 1cm, {\n      import cetz.draw: *\n\n      rect((0, 0), (1, 1), fill: color)\n    })\n  }\n\n  [\n    === foo. \\\n    #messupable_graphic(graphic)\n  ]\n\n}\n\n#let figure_template(\n  body,\n) = context {\n\n  set heading(numbering: (..nums) => {\n    let nums = nums.pos()\n    // the zero-based level of the current heading\n    let level = nums.len() - 1\n\n    if level == 2 {\n      numbering(\"I.1\", nums.at(nums.len() - 2), nums.last())\n    }\n  })\n\n  let all_graphics = _all_graphics.final()\n  for graphic in all_graphics {\n    let heading_counter = graphic.at(0)\n    if(heading_counter.len() > 1){\n      heading_counter.at(-1) -= 1\n    }\n    counter(heading).update(heading_counter)\n    [=== ]\n    graphic.at(1)\n  }\n\n}\n\n#let exam_template(body) = context {\n\n  show heading.where(level: 3): it => {\n      set text(luma(50), weight: 700)\n      [Question ] + counter(heading).display(it.numbering)\n      if (measure(it.body).width > 0.1cm) {\n        set text(luma(50), weight: 400) \n        [ -- ] + it.body\n      }\n    }\n  set heading(numbering: (..nums) => {\n      let nums = nums.pos()\n      // the zero-based level of the current heading\n      let level = nums.len() - 1\n      \n      if level == 2 {\n        numbering(\"I.1\", nums.at(nums.len() - 2), nums.last())\n      } \n\n    })\n\n  body\n\n  context figure_template()[]\n}\n\n#show: exam_template.with()\n\n#context [\n  = \n  == \n  #context{\n    let current_state = _all_graphics.at(here())\n    [State before green: #current_state \\ \\ ]\n  }\n  #question1(green)\n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after green: #current_state \\ \\ ]\n  }\n  #question1(red)\n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after red: #current_state \\ \\ ]\n  }\n  #question1(blue)\n  \n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after blue: #current_state \\ \\ ]\n  }\n\n  #question1(gray)\n  \n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after gray: #current_state \\ \\ ]\n  }\n  == \n  #question1(yellow)\n  \n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after yellow: #current_state \\ \\ ]\n  }\n\n  #question1(orange)\n\n  #context{\n    let current_state = _all_graphics.at(here())\n    [State after orange: #current_state \\ \\ ]\n  }\n  #line(length: 100%)\n]\n\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 41,
      "score": 263.2,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1083
    },
    {
      "id": 7765,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-01-22T13:39:37.639Z",
      "updated_at": "2025-01-22T13:39:37.639Z",
      "cooked": "<p>I admit I haven’t read your whole post, but this sounds suspiciously like the problem also discussed here:</p>\n<aside class=\"quote quote-modified\" data-post=\"1\" data-topic=\"1483\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/r/220F66/48.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/why-is-state-final-not-final/1483\">Why is State Final not \"final\"?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    Hi all, \nI’ve been trying to keep track of an array of objects within my document in a “state” variable. I use the end result of the state at the end of the document to create a table at the beginning of my document. (it’s for document referencing) \nI’m running into the odd problem that the “final” keyword does not seem to return the final version of the array. In fact, as far as I can tell it returns an array that should have never existed anywhere in the code. \nMinimum Viable Product code: \n#c…\n  </blockquote>\n</aside>\n\n<p>Maybe this helps you already <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "I admit I haven't read your whole post, but this sounds suspiciously like the problem also discussed here:\n\nhttps://forum.typst.app/t/why-is-state-final-not-final/1483?u=sillyfreak\n\nMaybe this helps you already :slight_smile:",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 37,
      "score": 47.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 7766,
      "post_number": 3,
      "username": "Florian",
      "name": "Florian",
      "created_at": "2025-01-22T13:39:54.193Z",
      "updated_at": "2025-01-22T13:39:54.193Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/sebastian_vogt\">@Sebastian_Vogt</a>,</p>\n<p>i haven’t had the time to fully read through your code. But no the state is not limited.</p>\n<p>Doing state based content creation in a with-based template leads to a recursive situation which usually leads to the Warning:</p>\n<blockquote>\n<p>Layout did not converge within 5 attempts</p>\n</blockquote>\n<p>After which the typst compiler stops to render the document.</p>",
      "raw": "Hi @Sebastian_Vogt,\n\ni haven't had the time to fully read through your code. But no the state is not limited.\n\nDoing state based content creation in a with-based template leads to a recursive situation which usually leads to the Warning:\n\n> Layout did not converge within 5 attempts\n\nAfter which the typst compiler stops to render the document.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 34,
      "score": 51.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 251
    },
    {
      "id": 7767,
      "post_number": 4,
      "username": "Sebastian_Vogt",
      "name": "Sebastian Vogt",
      "created_at": "2025-01-22T14:22:00.282Z",
      "updated_at": "2025-01-22T14:24:03.663Z",
      "cooked": "<p>Sounds like the same problem. But I struggle fixing it:<br>\nI tried<br>\n<code>_all_graphics.update(x =&gt; x.push(state_element))</code> and remove all other get/and update stuff. Then i get “type none has no push method”. (It somehow seems to get called (), none, (), none … ) Even adding a guard like that does not help: <code>_all_graphics.update(x =&gt; if(type(x) == none){x} else {x.push(state_element)})</code>. Trying to cast x as an array gives me “Cannot mutate a temporary value”</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let messupable_graphic(body) = context{\n  let section_number = counter(heading).get()\n  let state_element = (section_number, body)\n\n  _all_graphics.update(x =&gt; x.push(state_element))\n  \n  [Section number: #section_number \\ \\ ]\n  [State element: #state_element \\ \\ ]\n\n  body\n}```</code></pre>",
      "raw": "Sounds like the same problem. But I struggle fixing it:\nI tried\n```_all_graphics.update(x => x.push(state_element))``` and remove all other get/and update stuff. Then i get \"type none has no push method\". (It somehow seems to get called (), none, (), none ... ) Even adding a guard like that does not help: ```_all_graphics.update(x => if(type(x) == none){x} else {x.push(state_element)})```. Trying to cast x as an array gives me \"Cannot mutate a temporary value\"\n\n```typ\n#let messupable_graphic(body) = context{\n  let section_number = counter(heading).get()\n  let state_element = (section_number, body)\n\n  _all_graphics.update(x => x.push(state_element))\n  \n  [Section number: #section_number \\ \\ ]\n  [State element: #state_element \\ \\ ]\n\n  body\n}```",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 21.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1083
    },
    {
      "id": 7768,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-01-22T14:28:33.788Z",
      "updated_at": "2025-01-22T14:29:03.640Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Sebastian_Vogt\" data-post=\"4\" data-topic=\"2509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/s/441A5E/48.png\" class=\"avatar\"> Sebastian_Vogt:</div>\n<blockquote>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">_all_graphics.update(x =&gt; x.push(state_element))\n</code></pre>\n</blockquote>\n</aside>\n<p>the problem here is that <code>push()</code> modifies the array, but doesn’t return it. You can rewrite this in two ways:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">x =&gt; {\n  x.push(new-element)\n  x\n}\n</code></pre>\n<p>whis is your approach but with the missing result, or</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">x =&gt; (..x, new-element)\n// or\nx =&gt; x + (new-element,)\n</code></pre>\n<p>which doesn’t “modify” the original array but constructs a new one with the additional element</p>",
      "raw": "[quote=\"Sebastian_Vogt, post:4, topic:2509\"]\n```typc\n_all_graphics.update(x => x.push(state_element))\n```\n[/quote]\nthe problem here is that `push()` modifies the array, but doesn't return it. You can rewrite this in two ways:\n\n```typc\nx => {\n  x.push(new-element)\n  x\n}\n```\nwhis is your approach but with the missing result, or\n```typc\nx => (..x, new-element)\n// or\nx => x + (new-element,)\n```\nwhich doesn't \"modify\" the original array but constructs a new one with the additional element",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 2,
      "reads": 30,
      "score": 41.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 7783,
      "post_number": 6,
      "username": "Sebastian_Vogt",
      "name": "Sebastian Vogt",
      "created_at": "2025-01-22T16:29:06.295Z",
      "updated_at": "2025-01-22T16:29:06.295Z",
      "cooked": "<p>Thank you so much. What a dumb newbie mistake -.-</p>",
      "raw": "Thank you so much. What a dumb newbie mistake -.-",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 27,
      "score": 25.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1083
    },
    {
      "id": 7805,
      "post_number": 7,
      "username": "eike",
      "name": "Eike Schulte",
      "created_at": "2025-01-23T14:03:54.380Z",
      "updated_at": "2025-01-23T14:03:54.748Z",
      "cooked": "<p>For what it’s worth: I don’t think this is a dumb mistake. This is easily one of the most tricky parts of Typst.</p>",
      "raw": "For what it's worth: I don't think this is a dumb mistake. This is easily one of the most tricky parts of Typst.",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 19,
      "score": 68.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 357
    },
    {
      "id": 7806,
      "post_number": 8,
      "username": "Sebastian_Vogt",
      "name": "Sebastian Vogt",
      "created_at": "2025-01-23T14:28:08.085Z",
      "updated_at": "2025-01-23T14:28:08.085Z",
      "cooked": "<p>For the non coverage stuff I agree. But here i meant the <code>push</code> does not give a return value and thus cannot be used alone as update function <img src=\"https://forum.typst.app/images/emoji/apple/sweat_smile.png?v=12\" title=\":sweat_smile:\" class=\"emoji\" alt=\":sweat_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "For the non coverage stuff I agree. But here i meant the ```push``` does not give a return value and thus cannot be used alone as update function :sweat_smile:",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 17,
      "score": 3.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1083
    }
  ],
  "scraped_at": "2025-06-10T09:52:34.540022"
}