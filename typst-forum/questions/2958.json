{
  "topic_metadata": {
    "id": 2958,
    "title": "How can I extract source code examples from a typ file?",
    "slug": "how-can-i-extract-source-code-examples-from-a-typ-file",
    "posts_count": 4,
    "created_at": "2025-02-24T14:42:33.807Z",
    "last_posted_at": "2025-02-24T17:19:54.997Z",
    "views": 116,
    "like_count": 1,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "eike",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 437
  },
  "posts": [
    {
      "id": 8976,
      "post_number": 1,
      "username": "rm7",
      "name": "Ricardo",
      "created_at": "2025-02-24T14:42:33.945Z",
      "updated_at": "2025-03-07T21:07:29.436Z",
      "cooked": "<p>Hi all,</p>\n<p>I’m curious about the best method to extract source code examples from a Typst intermediate file, where the variables have already been processed.<br>\nPreviously, I achieved this by using Asciidoctor to generate an HTML file, then running a script to extract each tagged source block into a separate file.</p>\n<p>Any advice would be appreciated.<br>\nThanks in advance!</p>",
      "raw": "Hi all,\n\nI’m curious about the best method to extract source code examples from a Typst intermediate file, where the variables have already been processed.\nPreviously, I achieved this by using Asciidoctor to generate an HTML file, then running a script to extract each tagged source block into a separate file.\n\nAny advice would be appreciated.\nThanks in advance!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 464.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1239
    },
    {
      "id": 8979,
      "post_number": 2,
      "username": "eike",
      "name": "Eike Schulte",
      "created_at": "2025-02-24T14:58:01.876Z",
      "updated_at": "2025-02-24T14:58:01.876Z",
      "cooked": "<p>I don’t have time for a longer answer right now but you might look into using Typst’s support for command line queries, <a href=\"https://typst.app/docs/reference/introspection/query/#command-line-queries\">see here</a> in the documentation.</p>",
      "raw": "I don't have time for a longer answer right now but you might look into using Typst's support for command line queries, [see here](https://typst.app/docs/reference/introspection/query/#command-line-queries) in the documentation.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 20,
      "score": 9.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 357
    },
    {
      "id": 9008,
      "post_number": 3,
      "username": "eike",
      "name": "Eike Schulte",
      "created_at": "2025-02-24T16:48:14.883Z",
      "updated_at": "2025-02-24T16:48:14.883Z",
      "cooked": "<p>Okay, with a bit more time: You can label each piece of source code that you want to export with a common label, like <code>&lt;export-code&gt;</code>:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">```python\ndef test():\n    print(\"Hello World!\")\n``` &lt;export-code&gt;\n</code></pre>\n<p>Then, you can use the command <code>typst query main.typ \"&lt;export-code&gt;\"</code> (with Typst installed locally on your computer, the web app cannot do this) to get a JSON with all those source elements, like this:</p>\n<pre><code class=\"lang-auto\">[{\"func\":\"raw\",\"text\":\"def test():\\n    print(\\\"#output\\\")\",\"block\":true,\"lang\":\"python\",\"align\":\"start\",\"syntaxes\":[],\"theme\":\"auto\",\"tab-size\":2,\"lines\":[{\"func\":\"line\",\"number\":1,\"count\":2,\"text\":\"def test():\",\"body\":{\"func\":\"sequence\",\"children\":[{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"def\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\" \"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"test\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"(\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\")\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\":\"},\"styles\":\"..\"}]}},{\"func\":\"line\",\"number\":2,\"count\":2,\"text\":\"    print(\\\"#output\\\")\",\"body\":{\"func\":\"sequence\",\"children\":[{\"func\":\"text\",\"text\":\"    \"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"print\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"(\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"\\\"\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"#output\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"\\\"\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\")\"},\"styles\":\"..\"}]}}],\"label\":\"&lt;export-code&gt;\"}]\n</code></pre>\n<p>or you can say <code>typst query main.typ \"&lt;export-code&gt;\" --field text</code> to just get the source snippets, i.e.</p>\n<pre><code class=\"lang-auto\">[\"def test():\\n    print(\\\"Hello World!\\\")\"]\n</code></pre>\n<p>If you construct your code examples using Typst variables, <code>query</code> will reflect the final result. (But writing parametric code like this is not super nice as the raw blocks disable variable interpolation. You can do it by constructing <code>raw</code> elements by hand, though.)</p>\n<p>There is currently no way of getting all <code>raw</code> elements without labeling them, as they are not “locatable”. The documention promises that this restriction will be lifted in the future.</p>",
      "raw": "Okay, with a bit more time: You can label each piece of source code that you want to export with a common label, like `<export-code>`:\n\n```typst\n```python\ndef test():\n    print(\"Hello World!\")\n``` <export-code>\n```\nThen, you can use the command `typst query main.typ \"<export-code>\"` (with Typst installed locally on your computer, the web app cannot do this) to get a JSON with all those source elements, like this:\n\n```\n[{\"func\":\"raw\",\"text\":\"def test():\\n    print(\\\"#output\\\")\",\"block\":true,\"lang\":\"python\",\"align\":\"start\",\"syntaxes\":[],\"theme\":\"auto\",\"tab-size\":2,\"lines\":[{\"func\":\"line\",\"number\":1,\"count\":2,\"text\":\"def test():\",\"body\":{\"func\":\"sequence\",\"children\":[{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"def\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\" \"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"test\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"(\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\")\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\":\"},\"styles\":\"..\"}]}},{\"func\":\"line\",\"number\":2,\"count\":2,\"text\":\"    print(\\\"#output\\\")\",\"body\":{\"func\":\"sequence\",\"children\":[{\"func\":\"text\",\"text\":\"    \"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"print\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"(\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"\\\"\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"#output\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\"\\\"\"},\"styles\":\"..\"},{\"func\":\"styled\",\"child\":{\"func\":\"text\",\"text\":\")\"},\"styles\":\"..\"}]}}],\"label\":\"<export-code>\"}]\n```\nor you can say `typst query main.typ \"<export-code>\" --field text` to just get the source snippets, i.e.\n```\n[\"def test():\\n    print(\\\"Hello World!\\\")\"]\n```\n\nIf you construct your code examples using Typst variables, `query` will reflect the final result. (But writing parametric code like this is not super nice as the raw blocks disable variable interpolation. You can do it by constructing `raw` elements by hand, though.)\n\nThere is currently no way of getting all `raw` elements without labeling them, as they are not \"locatable\". The documention promises that this restriction will be lifted in the future.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 15,
      "score": 58.0,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 357
    },
    {
      "id": 9011,
      "post_number": 4,
      "username": "rm7",
      "name": "Ricardo",
      "created_at": "2025-02-24T17:19:54.997Z",
      "updated_at": "2025-02-24T17:20:52.837Z",
      "cooked": "<p>Thank you <a class=\"mention\" href=\"/u/eike\">@eike</a> !<br>\nI don’t know why I thought that Typst produced some kind of intermediate file that could be read.<br>\nYour comments helped me further.</p>",
      "raw": "Thank you @eike !\nI don't know why I thought that Typst produced some kind of intermediate file that could be read.\nYour comments helped me further.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 14,
      "score": 2.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1239
    }
  ],
  "scraped_at": "2025-06-10T09:51:15.289773"
}