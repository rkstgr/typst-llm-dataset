{
  "topic_metadata": {
    "id": 937,
    "title": "How to sum column values in a table?",
    "slug": "how-to-sum-column-values-in-a-table",
    "posts_count": 11,
    "created_at": "2024-10-05T07:49:58.429Z",
    "last_posted_at": "2024-10-23T22:07:20.370Z",
    "views": 549,
    "like_count": 3,
    "reply_count": 7,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "scripting",
      "tables"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1040
  },
  "posts": [
    {
      "id": 3434,
      "post_number": 1,
      "username": "voyager",
      "name": "voyager",
      "created_at": "2024-10-05T07:49:58.585Z",
      "updated_at": "2024-10-10T14:57:49.223Z",
      "cooked": "<p>is there a way to sum column values in a standard table?</p>",
      "raw": "is there a way to sum column values in a standard table?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 64,
      "score": 2472.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 415
    },
    {
      "id": 3445,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-05T12:41:43.385Z",
      "updated_at": "2024-10-23T21:31:36.116Z",
      "cooked": "<p>Yes, there are just two things to make sure:</p>\n<ol>\n<li>you need to store the data somewhere <em>before</em> creating the table</li>\n<li>you need to make sure that you operate on numbers and not <code>content</code></li>\n</ol>\n<p>For demonstration, let’s look at a table you may be starting with:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#table(\n  columns: 2,\n  align: right,\n  stroke: none,\n  table.header([Col A], [Col B]),\n  table.hline(),\n  [1], [2],\n  [3], [4],\n  [5], [6],\n  table.hline(),\n  [9],\n  [12],\n)\n</code></pre>\n<p>This table has three rows of actual data, a header, and manually calculated column sums.</p>\n<p>Advice 1 means you should create a variable to store the data before putting it into the table:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let data = (\n  ([1], [2]),\n  ([3], [4]),\n  ([5], [6]),\n)\n\n#table(\n  // ...\n  table.hline(),\n  ..data.flatten(),\n  table.hline(),\n  // ...\n)\n</code></pre>\n<p><code>data</code> contains an array of arrays – each element is a row, and each row consists of the two columns. This is easier for us to work with, but we need <code>flatten()</code> because <code>table()</code> doesn’t accept this kind of nested array.</p>\n<p>Advice 2 means that instead of writing <code>[1]</code>, we should just use <code>1</code>, so that we can actually calculate something:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let data = (\n  (1, 2),\n  (3, 4),\n  (5, 6),\n)\n\n#table(\n  // ...\n  table.hline(),\n  ..data.flatten().map(num =&gt; [#num]),\n  table.hline(),\n  // ...\n)\n</code></pre>\n<p>Again, <code>table()</code> can’t simply show numbers, thus I also used <code>map(num =&gt; [#num])</code> to convert each number back into content before displaying.</p>\n<p>But by doing this, we’re now ready to actually do calculations with the numbers:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// ...\n\n#let col-a-sum = data.map(row =&gt; row.at(0)).sum()\n#let col-b-sum = data.map(row =&gt; row.at(1)).sum()\n\n#table(\n  // ...\n  table.hline(),\n  ..data.flatten().map(num =&gt; [#num]),\n  table.hline(),\n  [#col-a-sum], [#col-b-sum],\n)\n</code></pre>\n<p>This extracts from each row the first or second column, respectively, and sums them up. Then, the numbers are added to the table as content.</p>\n<p>In this example, all columns were summed up. To avoid duplication, you could do all columns in a loop like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let col-sums = ()\n#for i in array.range(data.first().len()) {\n  let col-sum = data.map(row =&gt; row.at(i)).sum()\n  col-sums.push(col-sum)\n}\n\n#table(\n  // ...\n  ..col-sums.map(num =&gt; [#num]),\n)\n</code></pre>\n<p>This can be shortened in a few ways; I wanted to show a loop as the main solution because it’s not as terse as these other options, but they do exist:</p>\n<details>\n<summary>\nShorter sums for all columns</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// like the loop before, but using `map()`\n// instead of pushing element by element\n#let col-sums = array.range(data.first().len()).map(i =&gt; {\n  data.map(row =&gt; row.at(i)).sum()\n})\n\n// using a sort of transpose operation to get\n// an array of columns from the array of rows\n#let col-sums = array.zip(..data).map(array.sum)\n</code></pre>\n</details>\n<p>As a final example, here’s how to sum up all columns read from a csv file with header:</p>\n<details>\n<summary>\nTable with column sums from CSV</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let csv-data = csv.decode(```\nCol A,Col B\n1,2\n3,4\n5,6\n```.text)\n// When the data come from a file, you'd write this instead:\n// #let csv-data = csv(\"filename.csv\")\n\n#let (header, ..data) = csv-data\n#let col-sums = array.zip(..data).map(column =&gt; column.map(int).sum())\n\n#table(\n  columns: 2,\n  align: right,\n  stroke: none,\n  table.header(..header),\n  table.hline(),\n  ..data.flatten(),\n  table.hline(),\n  ..col-sums.map(num =&gt; [#num]),\n)\n</code></pre>\n<p>What’s a bit different here is that instead of having to convert the data to <code>content</code>, it comes out of the csv file as strings. So we don’t need to convert to content (strings work in tables), but <em>do</em> need to convert each number to <code>int</code> before calculating.</p>\n</details>",
      "raw": "Yes, there are just two things to make sure:\n1. you need to store the data somewhere _before_ creating the table\n2. you need to make sure that you operate on numbers and not `content`\n\nFor demonstration, let's look at a table you may be starting with:\n```typ\n#table(\n  columns: 2,\n  align: right,\n  stroke: none,\n  table.header([Col A], [Col B]),\n  table.hline(),\n  [1], [2],\n  [3], [4],\n  [5], [6],\n  table.hline(),\n  [9],\n  [12],\n)\n```\nThis table has three rows of actual data, a header, and manually calculated column sums.\n\nAdvice 1 means you should create a variable to store the data before putting it into the table:\n```typ\n#let data = (\n  ([1], [2]),\n  ([3], [4]),\n  ([5], [6]),\n)\n\n#table(\n  // ...\n  table.hline(),\n  ..data.flatten(),\n  table.hline(),\n  // ...\n)\n```\n`data` contains an array of arrays -- each element is a row, and each row consists of the two columns. This is easier for us to work with, but we need `flatten()` because `table()` doesn't accept this kind of nested array.\n\nAdvice 2 means that instead of writing `[1]`, we should just use `1`, so that we can actually calculate something:\n```typ\n#let data = (\n  (1, 2),\n  (3, 4),\n  (5, 6),\n)\n\n#table(\n  // ...\n  table.hline(),\n  ..data.flatten().map(num => [#num]),\n  table.hline(),\n  // ...\n)\n```\nAgain, `table()` can't simply show numbers, thus I also used `map(num => [#num])` to convert each number back into content before displaying.\n\nBut by doing this, we're now ready to actually do calculations with the numbers:\n```typ\n// ...\n\n#let col-a-sum = data.map(row => row.at(0)).sum()\n#let col-b-sum = data.map(row => row.at(1)).sum()\n\n#table(\n  // ...\n  table.hline(),\n  ..data.flatten().map(num => [#num]),\n  table.hline(),\n  [#col-a-sum], [#col-b-sum],\n)\n```\nThis extracts from each row the first or second column, respectively, and sums them up. Then, the numbers are added to the table as content.\n\nIn this example, all columns were summed up. To avoid duplication, you could do all columns in a loop like this:\n```typ\n#let col-sums = ()\n#for i in array.range(data.first().len()) {\n  let col-sum = data.map(row => row.at(i)).sum()\n  col-sums.push(col-sum)\n}\n\n#table(\n  // ...\n  ..col-sums.map(num => [#num]),\n)\n```\nThis can be shortened in a few ways; I wanted to show a loop as the main solution because it's not as terse as these other options, but they do exist:\n\n[details=\"Shorter sums for all columns\"]\n```typ\n// like the loop before, but using `map()`\n// instead of pushing element by element\n#let col-sums = array.range(data.first().len()).map(i => {\n  data.map(row => row.at(i)).sum()\n})\n\n// using a sort of transpose operation to get\n// an array of columns from the array of rows\n#let col-sums = array.zip(..data).map(array.sum)\n```\n[/details]\n\nAs a final example, here's how to sum up all columns read from a csv file with header:\n\n[details=\"Table with column sums from CSV\"]\n```typ\n#let csv-data = csv.decode(```\nCol A,Col B\n1,2\n3,4\n5,6\n```.text)\n// When the data come from a file, you'd write this instead:\n// #let csv-data = csv(\"filename.csv\")\n\n#let (header, ..data) = csv-data\n#let col-sums = array.zip(..data).map(column => column.map(int).sum())\n\n#table(\n  columns: 2,\n  align: right,\n  stroke: none,\n  table.header(..header),\n  table.hline(),\n  ..data.flatten(),\n  table.hline(),\n  ..col-sums.map(num => [#num]),\n)\n```\n\nWhat's a bit different here is that instead of having to convert the data to `content`, it comes out of the csv file as strings. So we don't need to convert to content (strings work in tables), but _do_ need to convert each number to `int` before calculating.\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 3,
      "quote_count": 0,
      "like_count": 1,
      "reads": 63,
      "score": 257.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 3446,
      "post_number": 3,
      "username": "raimann",
      "name": "Felipe Raimann",
      "created_at": "2024-10-05T13:06:55.317Z",
      "updated_at": "2024-10-05T13:08:15.877Z",
      "cooked": "<p>Please see <a href=\"https://github.com/Amelia-Mowers/typst-tabut\" rel=\"noopener nofollow ugc\">tabut</a> package. From \" Aggregation using Map and Sum\" of their docs:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"usd.typ\": usd\n#import \"example-data/titanic.typ\": titanic, classes\n\n#table(\n  columns: (auto, auto),\n  [*Fare, Total:*], [#usd(titanic.map(r =&gt; r.Fare).sum())],\n  [*Fare, Avg:*], [#usd(titanic.map(r =&gt; r.Fare).sum() / titanic.len())], \n  stroke: none\n)\n</code></pre>",
      "raw": "Please see [tabut](https://github.com/Amelia-Mowers/typst-tabut) package. From \" Aggregation using Map and Sum\" of their docs:\n\n```typst\n#import \"usd.typ\": usd\n#import \"example-data/titanic.typ\": titanic, classes\n\n#table(\n  columns: (auto, auto),\n  [*Fare, Total:*], [#usd(titanic.map(r => r.Fare).sum())],\n  [*Fare, Avg:*], [#usd(titanic.map(r => r.Fare).sum() / titanic.len())], \n  stroke: none\n)\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 51,
      "score": 70.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 10
    },
    {
      "id": 3456,
      "post_number": 4,
      "username": "voyager",
      "name": "voyager",
      "created_at": "2024-10-05T15:29:41.071Z",
      "updated_at": "2024-10-05T15:29:41.071Z",
      "cooked": "<p>Thanks a lot.<br>\nI will try to adapt to my tables</p>",
      "raw": "Thanks a lot.\nI will try to adapt to my tables",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 45,
      "score": 9.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 415
    },
    {
      "id": 3457,
      "post_number": 5,
      "username": "voyager",
      "name": "voyager",
      "created_at": "2024-10-05T15:30:31.580Z",
      "updated_at": "2024-10-05T15:30:31.580Z",
      "cooked": "<p>OK I will look. Thank a lots</p>",
      "raw": "OK I will look. Thank a lots",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 44,
      "score": 23.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 415
    },
    {
      "id": 4580,
      "post_number": 6,
      "username": "Walter_H_Schreiber",
      "name": "Walter H. Schreiber",
      "created_at": "2024-10-23T19:25:35.698Z",
      "updated_at": "2024-10-23T19:32:54.012Z",
      "cooked": "<p>Given the following code reading data from a csv-File:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let csv-data = csv.decode(```\nText, Value\n\"A\",2\n\"B\",4.5\n\"C\",6\n```.text)\n\n#let (header, ..data) = csv-data\nThis I have copied from another example.\n</code></pre>\n<p>How can I get the the sum of the variable “Value”. I tried all kind of variations, breaking down much more complex operations, but to no avail.</p>",
      "raw": "Given the following code reading data from a csv-File:\n\n````typ\n#let csv-data = csv.decode(```\nText, Value\n\"A\",2\n\"B\",4.5\n\"C\",6\n```.text)\n\n#let (header, ..data) = csv-data\nThis I have copied from another example.\n````\n\nHow can I get the the sum of the variable \"Value\". I tried all kind of variations, breaking down much more complex operations, but to no avail.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 35,
      "score": 12.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 429
    },
    {
      "id": 4583,
      "post_number": 7,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-23T19:34:19.509Z",
      "updated_at": "2024-10-23T19:34:19.509Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"SillyFreak\" data-post=\"2\" data-topic=\"937\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\"> SillyFreak:</div>\n<blockquote>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let col-b-sum = data.map(row =&gt; row.at(1)).sum()\n</code></pre>\n</blockquote>\n</aside>\n<p>and re csv:</p>\n<aside class=\"quote no-group\" data-username=\"SillyFreak\" data-post=\"2\" data-topic=\"937\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\"> SillyFreak:</div>\n<blockquote>\n<p>What’s a bit different here is that instead of having to convert the data to <code>content</code>, it comes out of the csv file as strings. So we don’t need to convert to content (strings work in tables), but <em>do</em> need to convert each number to <code>int</code> before calculating.</p>\n</blockquote>\n</aside>\n<p>Is there a problem with doing it this way?</p>",
      "raw": "[quote=\"SillyFreak, post:2, topic:937\"]\n```typ\n#let col-b-sum = data.map(row => row.at(1)).sum()\n```\n[/quote]\n\nand re csv:\n\n[quote=\"SillyFreak, post:2, topic:937\"]\nWhat’s a bit different here is that instead of having to convert the data to `content`, it comes out of the csv file as strings. So we don’t need to convert to content (strings work in tables), but *do* need to convert each number to `int` before calculating.\n[/quote]\n\nIs there a problem with doing it this way?",
      "reply_to_post_number": 6,
      "reply_count": 2,
      "quote_count": 1,
      "like_count": 0,
      "reads": 34,
      "score": 41.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 4584,
      "post_number": 8,
      "username": "Walter_H_Schreiber",
      "name": "Walter H. Schreiber",
      "created_at": "2024-10-23T20:03:39.055Z",
      "updated_at": "2024-10-23T20:03:39.055Z",
      "cooked": "<p>Thank you for the fast answer.</p>\n<p>Regrettably <span class=\"hashtag-raw\">#col-b-sum</span> returns 24.56 which is a string concatenation of the values.</p>\n<p>I had this result before in one of my myriad attempts.</p>",
      "raw": "Thank you for the fast answer.\n\nRegrettably #col-b-sum returns 24.56 which is a string concatenation of the values.\n\nI had this result before in one of my myriad attempts.",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 21.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 429
    },
    {
      "id": 4587,
      "post_number": 9,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-23T21:30:43.065Z",
      "updated_at": "2024-10-23T21:30:43.065Z",
      "cooked": "<p>That’s what the</p>\n<aside class=\"quote no-group\" data-username=\"SillyFreak\" data-post=\"2\" data-topic=\"937\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\"> SillyFreak:</div>\n<blockquote>\n<p>So we don’t need to convert to content (strings work in tables), but <em>do</em> need to convert each number to <code>int</code> before calculating.</p>\n</blockquote>\n</aside>\n<p>part is about. If you look at the CSV snippet, it has a <code>column.map(int)</code> in there, to convert the strings into integers. Admittedly, it’s easy to miss when you don’t look what you’re looking for. The complete adapted code (but converting to float, not int) would be this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let col-b-sum = data.map(row =&gt; float(row.at(1))).sum()\n</code></pre>",
      "raw": "That's what the\n\n[quote=\"SillyFreak, post:2, topic:937\"]\nSo we don’t need to convert to content (strings work in tables), but *do* need to convert each number to `int` before calculating.\n[/quote]\n\npart is about. If you look at the CSV snippet, it has a `column.map(int)` in there, to convert the strings into integers. Admittedly, it's easy to miss when you don't look what you're looking for. The complete adapted code (but converting to float, not int) would be this:\n```typ\n#let col-b-sum = data.map(row => float(row.at(1))).sum()\n```",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 32,
      "score": 21.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 4590,
      "post_number": 10,
      "username": "Walter_H_Schreiber",
      "name": "Walter H. Schreiber",
      "created_at": "2024-10-23T21:57:19.653Z",
      "updated_at": "2024-10-30T13:13:52.643Z",
      "cooked": "<p>I solved it myself</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let csv-data = csv.decode(```\nText, Value\n\"A\",2\n\"B\",4.5\n\"C\",6\n```.text)\n\n#let (header, ..data) = csv-data\n\n#let numeric_data = data.map(row =&gt; float(row.at(1))) // convert to float\n#let Value_Sum = numeric_data.sum()\n\n#Value_Sum\n</code></pre>",
      "raw": "I solved it myself\n```typ\n#let csv-data = csv.decode(```\nText, Value\n\"A\",2\n\"B\",4.5\n\"C\",6\n```.text)\n\n#let (header, ..data) = csv-data\n\n#let numeric_data = data.map(row => float(row.at(1))) // convert to float\n#let Value_Sum = numeric_data.sum()\n\n#Value_Sum\n```",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 6.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 429
    },
    {
      "id": 4591,
      "post_number": 11,
      "username": "Walter_H_Schreiber",
      "name": "Walter H. Schreiber",
      "created_at": "2024-10-23T22:07:20.370Z",
      "updated_at": "2024-10-23T22:07:20.370Z",
      "cooked": "<p>Sorry, had not seen your answer early enough, more elegant than ‘my’ solution.</p>\n<p>Thanks a lot for your assistance.</p>",
      "raw": "Sorry, had not seen your answer early enough, more elegant than 'my' solution.\n\nThanks a lot for your assistance.",
      "reply_to_post_number": 9,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 30,
      "score": 16.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 429
    }
  ],
  "scraped_at": "2025-06-10T09:57:23.084211"
}