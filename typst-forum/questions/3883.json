{
  "topic_metadata": {
    "id": 3883,
    "title": "How to create a chapter edge index / thumb index?",
    "slug": "how-to-create-a-chapter-edge-index-thumb-index",
    "posts_count": 8,
    "created_at": "2025-04-30T10:39:55.166Z",
    "last_posted_at": "2025-04-30T15:09:57.489Z",
    "views": 75,
    "like_count": 4,
    "reply_count": 5,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 7,
    "accepted_answer_username": "Eric",
    "tags": [
      "scripting",
      "page"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 914
  },
  "posts": [
    {
      "id": 11824,
      "post_number": 1,
      "username": "sunnytown",
      "name": "sunnytown",
      "created_at": "2025-04-30T10:39:55.288Z",
      "updated_at": "2025-05-04T12:35:59.984Z",
      "cooked": "<p>EDIT: Solution in my last reply.</p>\n<p>I’m trying to create a chapter thumb index on the right side of the page.  I want each page to display a little box on the side with the chapter number, so that the reader of the book has a visual clue where to open the book when it’s closed.</p>\n<p>How can I manage to automatically set the chapter number as well as the shift the index block downwards on the page using the dy argument? Essentially, I believe I need to query the state of the headings in their final state to obtain the total number of headings. Using this number, I should be able to calculate the vertical offset of the first chapter index so that all index markers are distributed around the vertical center of the page. Unfortunately, I haven’t found a way to implement this yet.</p>\n<p>This is the code that I have so far. However, I’m having issues retrieving the heading counter for the headings obtained from the query. Thanks for you help in advance!</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(\n  background: context{\n  let headings_before = query(heading.where(level: 1).before(here()))\n  let headings_after = query(heading.where(level: 1).after(here()))\n  let number = none\n  if headings_before.len() == 0 {\n    // this line doesn't work, why?\n    number = counter(headings_after.first()).get().first()\n  } else {\n    let page = here().page()\n    let page_next = headings_after.first().location().page()\n    if page_next == page {\n      // this line doesn't work, why?\n      number = counter(headings_after.first()).get().first()\n    } else {\n      // this line doesn't work, why?\n      number = counter(headings_before.first()).get().first()\n    }\n  }\n  place(\n    horizon + right,\n    block(width: 1cm, height: 1cm, fill: gray)[\n      #set align(center)\n      #text(fill: white, weight: \"bold\", size: 25pt)[#number]\n    ]\n  )\n}\n)\n</code></pre>",
      "raw": "EDIT: Solution in my last reply.\n\nI'm trying to create a chapter thumb index on the right side of the page.  I want each page to display a little box on the side with the chapter number, so that the reader of the book has a visual clue where to open the book when it's closed. \n\nHow can I manage to automatically set the chapter number as well as the shift the index block downwards on the page using the dy argument? Essentially, I believe I need to query the state of the headings in their final state to obtain the total number of headings. Using this number, I should be able to calculate the vertical offset of the first chapter index so that all index markers are distributed around the vertical center of the page. Unfortunately, I haven't found a way to implement this yet.\n\nThis is the code that I have so far. However, I'm having issues retrieving the heading counter for the headings obtained from the query. Thanks for you help in advance!\n\n```typ\n#set page(\n  background: context{\n  let headings_before = query(heading.where(level: 1).before(here()))\n  let headings_after = query(heading.where(level: 1).after(here()))\n  let number = none\n  if headings_before.len() == 0 {\n    // this line doesn't work, why?\n    number = counter(headings_after.first()).get().first()\n  } else {\n    let page = here().page()\n    let page_next = headings_after.first().location().page()\n    if page_next == page {\n      // this line doesn't work, why?\n      number = counter(headings_after.first()).get().first()\n    } else {\n      // this line doesn't work, why?\n      number = counter(headings_before.first()).get().first()\n    }\n  }\n  place(\n    horizon + right,\n    block(width: 1cm, height: 1cm, fill: gray)[\n      #set align(center)\n      #text(fill: white, weight: \"bold\", size: 25pt)[#number]\n    ]\n  )\n}\n)\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 34,
      "score": 86.6,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1539
    },
    {
      "id": 11825,
      "post_number": 2,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-04-30T10:50:28.598Z",
      "updated_at": "2025-04-30T10:50:28.598Z",
      "cooked": "<p>When you say “this line doesn’t work, why?”, what is the error message? What’s the expected vs actual behaviour?</p>",
      "raw": "When you say \"this line doesn't work, why?\", what is the error message? What's the expected vs actual behaviour?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 6.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 11826,
      "post_number": 3,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-04-30T10:56:16.063Z",
      "updated_at": "2025-04-30T10:56:16.063Z",
      "cooked": "<p>The error you should have gotten is that you are passing content, but the expected type is function/label/selector/etc.</p>\n<p>tl;dr: the <a href=\"https://typst.app/docs/reference/introspection/counter/\"><code>counter</code></a> type expects a selector and will do the query. So just pass your selector instead.</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">let number = counter(heading.where(level: 1).after(here())).get().first()\n</code></pre>",
      "raw": "The error you should have gotten is that you are passing content, but the expected type is function/label/selector/etc.\n\ntl;dr: the [`counter`](https://typst.app/docs/reference/introspection/counter/) type expects a selector and will do the query. So just pass your selector instead.\n\n```typc\nlet number = counter(heading.where(level: 1).after(here())).get().first()\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 11.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 11830,
      "post_number": 4,
      "username": "sunnytown",
      "name": "sunnytown",
      "created_at": "2025-04-30T13:55:45.379Z",
      "updated_at": "2025-04-30T13:55:45.379Z",
      "cooked": "<p>Thanks, that helps! However, when I use <code>after</code>, it just gives me <code>(0, )</code>. When I use  <code>before</code> instead, it works fine.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#context{\n  counter(heading.where(level: 1).after(here())).get()\n}\n</code></pre>",
      "raw": "Thanks, that helps! However, when I use `after`, it just gives me `(0, )`. When I use  `before` instead, it works fine. \n\n\n```typ\n#context{\n  counter(heading.where(level: 1).after(here())).get()\n}\n```",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 10.2,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1539
    },
    {
      "id": 11831,
      "post_number": 5,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-04-30T13:58:43.673Z",
      "updated_at": "2025-04-30T13:58:43.673Z",
      "cooked": "<p><code>(0,)</code> is an array, I suppose the result of <code>get()</code>, then you need to pick an item out of that array. Hence you use <code>.get().first()</code>. <code>get()</code> returns you the results of the counter.</p>",
      "raw": "`(0,)` is an array, I suppose the result of `get()`, then you need to pick an item out of that array. Hence you use `.get().first()`. `get()` returns you the results of the counter.",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 9.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 11832,
      "post_number": 6,
      "username": "sunnytown",
      "name": "sunnytown",
      "created_at": "2025-04-30T14:03:10.276Z",
      "updated_at": "2025-04-30T14:06:01.313Z",
      "cooked": "<p>I understand that it is an array and that I need to get the first element, which is supposed to be my heading number. The issue is that this number is always 0, even if there are multiple first level headings before and after the querying of the counter. On the other hand, using <code>before</code> instead of <code>after</code> for the selector will correctly return the actual number of the previous heading, not 0.</p>\n<p>Let me give a clear example of the issue:</p>\n<p>Test code:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set heading(numbering: \"1.1\")\n= Heading 1\n= Heading 2\n\nThis is the number of the previous heading: \n#context{\n  counter(selector(heading).before(here())).get().first()\n}\n\nThis is the number of the following heading (wrong):\n#context{\n  counter(selector(heading).after(here())).get().first()\n}\n\n= Heading 3\n= Heading 4\n</code></pre>\n<p>Output:<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/7/73315fa91b18aca89d946bf2b08664afd9b06e04.png\" alt=\"grafik\" data-base62-sha1=\"gr2GSVZjfRZxIBUYSqFMHUmOlh2\" width=\"452\" height=\"271\"></p>",
      "raw": "I understand that it is an array and that I need to get the first element, which is supposed to be my heading number. The issue is that this number is always 0, even if there are multiple first level headings before and after the querying of the counter. On the other hand, using `before` instead of `after` for the selector will correctly return the actual number of the previous heading, not 0.\n\nLet me give a clear example of the issue:\n\nTest code:\n```typ\n#set heading(numbering: \"1.1\")\n= Heading 1\n= Heading 2\n\nThis is the number of the previous heading: \n#context{\n  counter(selector(heading).before(here())).get().first()\n}\n\nThis is the number of the following heading (wrong):\n#context{\n  counter(selector(heading).after(here())).get().first()\n}\n\n= Heading 3\n= Heading 4\n```\n\nOutput:\n![grafik|452x271](upload://gr2GSVZjfRZxIBUYSqFMHUmOlh2.png)",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 28,
      "score": 45.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1539
    },
    {
      "id": 11833,
      "post_number": 7,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-04-30T14:05:29.835Z",
      "updated_at": "2025-04-30T14:15:52.469Z",
      "cooked": "<p>The counter you want to use is probably just <code>counter(heading)</code>. <s>Using a custom selector instead just creates a completely different counter which is not stepped automatically.</s></p>\n<p>To get the number of a specific heading, you can then use the <code>at</code> method of the counter as in</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let next-heading = query(selector(...)).first()\n#let number = counter(heading).at(next-heading.location())\n</code></pre>",
      "raw": "The counter you want to use is probably just `counter(heading)`. ~~Using a custom selector instead just creates a completely different counter which is not stepped automatically.~~\n\nTo get the number of a specific heading, you can then use the `at` method of the counter as in\n```typ\n#let next-heading = query(selector(...)).first()\n#let number = counter(heading).at(next-heading.location())\n```",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 25,
      "score": 44.8,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 11835,
      "post_number": 8,
      "username": "sunnytown",
      "name": "sunnytown",
      "created_at": "2025-04-30T15:09:57.489Z",
      "updated_at": "2025-04-30T15:10:06.836Z",
      "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"Eric\" data-post=\"7\" data-topic=\"3883\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/eric/48/87_2.png\" class=\"avatar\"> Eric:</div>\n<blockquote>\n<p>The counter you want to use is just <code>counter(heading)</code>. Using a custom selector instead just creates a completely different counter which is not stepped automatically.</p>\n</blockquote>\n</aside>\n<p>Thank you so much for your help, this solved the issue for me! Here is my full code for the thumb index implemented with your solution, in case anybody needs it in the future.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let thumb-index(height: 1cm, width: 1cm) = context{\n  let total-headings = counter(heading.where(level: 1)).final().first()\n  let previous-headings = query(selector(heading).before(here()))\n  let next-headings = query(selector(heading).after(here()))\n  let number = none\n  if previous-headings.len() == 0 and next-headings.len() == 0 {\n    // if there are no headings in the document, return none\n    return\n  }\n  if next-headings.len() == 0{\n    // if there are no more headings after, the numbering continues indefinitely\n    number = counter(heading).at(previous-headings.last().location()).first()\n  } else if previous-headings.len() == 0 {\n    // if there are no previous headings, use the first heading found\n    number = counter(heading).at(next-headings.first().location()).first()\n  } else {\n    let current-page = here().page()\n    let next-heading-page = next-headings.first().location().page()\n    if next-heading-page == current-page {\n      // if the next heading is on the current page, use the next heading's number\n      number = counter(heading).at(next-headings.first().location()).first()\n    } else {\n      // otherwise (general case) use the previous heading's number\n      number = counter(heading).at(previous-headings.last().location()).first()\n    } \n  }\n  // vertical offset for the thumb markers\n  let offset = (number - 1 - (total-headings - 1) / 2) * height\n  \n  place(\n    horizon + right,\n    dy: offset,\n    block(width: width, height: height, fill: gray)[\n      #set align(center)\n      #text(fill: white, weight: \"bold\", size: 25pt)[#number]\n    ]\n  )\n}\n\n#set page(\n  background: thumb-index(height: 3cm)\n)\n</code></pre>",
      "raw": "[quote=\"Eric, post:7, topic:3883, full:true\"]\nThe counter you want to use is just `counter(heading)`. Using a custom selector instead just creates a completely different counter which is not stepped automatically.\n[/quote]\n\nThank you so much for your help, this solved the issue for me! Here is my full code for the thumb index implemented with your solution, in case anybody needs it in the future.\n\n```typ\n#let thumb-index(height: 1cm, width: 1cm) = context{\n  let total-headings = counter(heading.where(level: 1)).final().first()\n  let previous-headings = query(selector(heading).before(here()))\n  let next-headings = query(selector(heading).after(here()))\n  let number = none\n  if previous-headings.len() == 0 and next-headings.len() == 0 {\n    // if there are no headings in the document, return none\n    return\n  }\n  if next-headings.len() == 0{\n    // if there are no more headings after, the numbering continues indefinitely\n    number = counter(heading).at(previous-headings.last().location()).first()\n  } else if previous-headings.len() == 0 {\n    // if there are no previous headings, use the first heading found\n    number = counter(heading).at(next-headings.first().location()).first()\n  } else {\n    let current-page = here().page()\n    let next-heading-page = next-headings.first().location().page()\n    if next-heading-page == current-page {\n      // if the next heading is on the current page, use the next heading's number\n      number = counter(heading).at(next-headings.first().location()).first()\n    } else {\n      // otherwise (general case) use the previous heading's number\n      number = counter(heading).at(previous-headings.last().location()).first()\n    } \n  }\n  // vertical offset for the thumb markers\n  let offset = (number - 1 - (total-headings - 1) / 2) * height\n  \n  place(\n    horizon + right,\n    dy: offset,\n    block(width: width, height: height, fill: gray)[\n      #set align(center)\n      #text(fill: white, weight: \"bold\", size: 25pt)[#number]\n    ]\n  )\n}\n\n#set page(\n  background: thumb-index(height: 3cm)\n)\n```",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 24,
      "score": 24.6,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1539
    }
  ],
  "scraped_at": "2025-06-10T09:48:28.176216"
}