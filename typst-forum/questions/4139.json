{
  "topic_metadata": {
    "id": 4139,
    "title": "How to render math equations inline and in CeTZ in html export?",
    "slug": "how-to-render-math-equations-inline-and-in-cetz-in-html-export",
    "posts_count": 9,
    "created_at": "2025-05-17T17:21:02.286Z",
    "last_posted_at": "2025-05-22T15:33:41.215Z",
    "views": 152,
    "like_count": 7,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "PgBiel",
    "tags": [
      "math",
      "cetz",
      "html"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 862
  },
  "posts": [
    {
      "id": 12663,
      "post_number": 1,
      "username": "shigma",
      "name": "shigma",
      "created_at": "2025-05-17T17:21:02.388Z",
      "updated_at": "2025-05-22T19:17:11.566Z",
      "cooked": "<p>Hi! I have two questions about HTML rendering:</p>\n<ol>\n<li>When rendering inline math equations, the left and right content will be separated into different <code>&lt;p&gt;</code> s. Is this expected? Is there a way to output it in the same <code>&lt;p&gt;</code> (or simply not wrap the <code>&lt;p&gt;</code> )?,</li>\n<li>When using cetz, the math equations in the content disappears. How can I make it display?</li>\n</ol>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n#show math.equation: html.frame\n#let canvas(..args) = html.frame(cetz.canvas(..args))\n#import cetz.draw: *\n\na$x$b // display as &lt;p&gt;a&lt;/p&gt;&lt;svg&gt;..&lt;/svg&gt;&lt;p&gt;b&lt;/p&gt;\n\n// cetz example\n#let data = (\n  [A$x$b], ([B], [C], [D]), ([E], [F])\n)\n\n#canvas({\n  import cetz.draw: *\n\n  set-style(content: (padding: .2),\n    fill: gray.lighten(70%),\n    stroke: gray.lighten(70%))\n\n  cetz.tree.tree(data, spread: 2.5, grow: 1.5, draw-node: (node, ..) =&gt; {\n    circle((), radius: .45, stroke: none)\n    content((), node.content)\n  }, draw-edge: (from, to, ..) =&gt; {\n    line((a: from, number: .6, b: to),\n         (a: to, number: .6, b: from), mark: (end: \"&gt;\"))\n  }, name: \"tree\")\n\n  // Draw a \"custom\" connection between two nodes\n  let (a, b) = (\"tree.0-0-1\", \"tree.0-1-0\",)\n  line((a, .6, b), (b, .6, a), mark: (end: \"&gt;\", start: \"&gt;\"))\n})\n</code></pre>",
      "raw": "Hi! I have two questions about HTML rendering:\n\n1. When rendering inline math equations, the left and right content will be separated into different `<p>` s. Is this expected? Is there a way to output it in the same `<p>` (or simply not wrap the `<p>` )?,\n2. When using cetz, the math equations in the content disappears. How can I make it display?\n\n```\n#import \"@preview/cetz:0.3.4\"\n#show math.equation: html.frame\n#let canvas(..args) = html.frame(cetz.canvas(..args))\n#import cetz.draw: *\n\na$x$b // display as <p>a</p><svg>..</svg><p>b</p>\n\n// cetz example\n#let data = (\n  [A$x$b], ([B], [C], [D]), ([E], [F])\n)\n\n#canvas({\n  import cetz.draw: *\n\n  set-style(content: (padding: .2),\n    fill: gray.lighten(70%),\n    stroke: gray.lighten(70%))\n\n  cetz.tree.tree(data, spread: 2.5, grow: 1.5, draw-node: (node, ..) => {\n    circle((), radius: .45, stroke: none)\n    content((), node.content)\n  }, draw-edge: (from, to, ..) => {\n    line((a: from, number: .6, b: to),\n         (a: to, number: .6, b: from), mark: (end: \">\"))\n  }, name: \"tree\")\n\n  // Draw a \"custom\" connection between two nodes\n  let (a, b) = (\"tree.0-0-1\", \"tree.0-1-0\",)\n  line((a, .6, b), (b, .6, a), mark: (end: \">\", start: \">\"))\n})\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 121.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1611
    },
    {
      "id": 12666,
      "post_number": 2,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-05-17T17:27:59.035Z",
      "updated_at": "2025-05-17T17:27:59.035Z",
      "cooked": "<p>Hey <a class=\"mention\" href=\"/u/shigma\">@shigma</a>, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a></p>\n<p>Make sure your title is a question you’d ask to a friend about Typst. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hey @shigma, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: https://forum.typst.app/t/how-to-post-in-the-questions-category/11\n\nMake sure your title is a question you’d ask to a friend about Typst. :wink:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 31,
      "score": 21.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 12671,
      "post_number": 3,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-05-17T17:36:42.885Z",
      "updated_at": "2025-05-17T17:36:42.885Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"shigma\" data-post=\"1\" data-topic=\"4139\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/shigma/48/3000_2.png\" class=\"avatar\"> shigma:</div>\n<blockquote>\n<ol>\n<li>When rendering inline math equations, the left and right content will be separated into different <code>&lt;p&gt;</code> s. Is this expected? Is there a way to output it in the same <code>&lt;p&gt;</code> (or simply not wrap the <code>&lt;p&gt;</code> )?,</li>\n</ol>\n</blockquote>\n</aside>\n<p>This is likely because <code>html.frame</code> isn’t an inline element (only text decoration elements and horizontal spacing are inline), so it interrupts paragraphs, similarly to e.g. <code>image</code> outside of html export. You’ll need to wrap them in a <code>box</code> for inline equations:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show math.equation: html.frame\n#show math.equation.where(block: false): box\n</code></pre>\n<aside class=\"quote no-group\" data-username=\"shigma\" data-post=\"1\" data-topic=\"4139\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/shigma/48/3000_2.png\" class=\"avatar\"> shigma:</div>\n<blockquote>\n<ol start=\"2\">\n<li>When using cetz, the math equations in the content disappears. How can I make it display?</li>\n</ol>\n</blockquote>\n</aside>\n<p>That’s because you’re wrapping the canvas in a frame, causing the canvas to be exported as SVG, and then the show rule wrapping equations in <code>html.frame</code> is being applied, which has no effect in SVG export (only in HTML export).</p>\n<p>You’ll need to ensure the show rule is not applied inside a CeTZ canvas. One way to do this involves <code>state</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let in-canvas = state(\"in-cetz-canvas\", false)\n#show math.equation: it =&gt; context {\n  if in-canvas.get() { it } else { html.frame(it) }\n}\n#show math.equation.where(block: false): box\n#let canvas(..args) = {\n  in-canvas.update(true)\n  html.frame(cetz.canvas(..args))\n  in-canvas.update(false)\n  // NOTE: this simplified version assumes you won't\n  // create a canvas inside a canvas.\n}\n</code></pre>",
      "raw": "[quote=\"shigma, post:1, topic:4139\"]\n1. When rendering inline math equations, the left and right content will be separated into different `<p>` s. Is this expected? Is there a way to output it in the same `<p>` (or simply not wrap the `<p>` )?,\n[/quote]\n\nThis is likely because `html.frame` isn't an inline element (only text decoration elements and horizontal spacing are inline), so it interrupts paragraphs, similarly to e.g. `image` outside of html export. You'll need to wrap them in a `box` for inline equations:\n\n```typ\n#show math.equation: html.frame\n#show math.equation.where(block: false): box\n```\n\n[quote=\"shigma, post:1, topic:4139\"]\n2. When using cetz, the math equations in the content disappears. How can I make it display?\n[/quote]\n\nThat's because you're wrapping the canvas in a frame, causing the canvas to be exported as SVG, and then the show rule wrapping equations in `html.frame` is being applied, which has no effect in SVG export (only in HTML export).\n\nYou'll need to ensure the show rule is not applied inside a CeTZ canvas. One way to do this involves `state`:\n\n```typ\n#let in-canvas = state(\"in-cetz-canvas\", false)\n#show math.equation: it => context {\n  if in-canvas.get() { it } else { html.frame(it) }\n}\n#show math.equation.where(block: false): box\n#let canvas(..args) = {\n  in-canvas.update(true)\n  html.frame(cetz.canvas(..args))\n  in-canvas.update(false)\n  // NOTE: this simplified version assumes you won't\n  // create a canvas inside a canvas.\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 2,
      "reads": 31,
      "score": 66.2,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 12676,
      "post_number": 4,
      "username": "shigma",
      "name": "shigma",
      "created_at": "2025-05-17T17:42:59.750Z",
      "updated_at": "2025-05-17T17:42:59.750Z",
      "cooked": "<p>Thank you very much for your answer! All the math equations now display as expected! I feel a little more understanding of typst’s <code>#show</code> rule now.</p>",
      "raw": "Thank you very much for your answer! All the math equations now display as expected! I feel a little more understanding of typst's `#show` rule now.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 30,
      "score": 56.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1611
    },
    {
      "id": 12677,
      "post_number": 5,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-05-17T17:48:09.730Z",
      "updated_at": "2025-05-17T17:48:09.730Z",
      "cooked": "<p>Here’s a more flexible solution which ought to work in more situations (not only in a CeTZ canvas):</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show math.equation: it =&gt; context {\n  // only wrap in frame on html export\n  if target() == \"html\" {\n    // wrap frames of inline equations in a box\n    // so they don't interrupt the paragraph\n    show: if it.block { it =&gt; it } else { box }\n    html.frame(it)\n  } else {\n    it\n  }\n}\n</code></pre>\n<p>Replacing the original math equation show rule in your post’s example code with the code above is enough to fix both problems.</p>",
      "raw": "Here's a more flexible solution which ought to work in more situations (not only in a CeTZ canvas):\n\n```typ\n#show math.equation: it => context {\n  // only wrap in frame on html export\n  if target() == \"html\" {\n    // wrap frames of inline equations in a box\n    // so they don't interrupt the paragraph\n    show: if it.block { it => it } else { box }\n    html.frame(it)\n  } else {\n    it\n  }\n}\n```\n\nReplacing the original math equation show rule in your post's example code with the code above is enough to fix both problems.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 30,
      "score": 31.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 12836,
      "post_number": 6,
      "username": "shigma",
      "name": "shigma",
      "created_at": "2025-05-21T03:13:53.489Z",
      "updated_at": "2025-05-21T03:13:53.489Z",
      "cooked": "<p>Another question is that when generating HTML, we often have to write code like this:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#html.frame(cetz.canvas(..))\n#html.frame(fletcher.diagram(..))\n</code></pre>\n<p>Is there a way, similar to <code>#show math.equation</code>, to omit the <code>html.frame</code> here?</p>",
      "raw": "Another question is that when generating HTML, we often have to write code like this:\n\n```typst\n#html.frame(cetz.canvas(..))\n#html.frame(fletcher.diagram(..))\n```\n\nIs there a way, similar to `#show math.equation`, to omit the `html.frame` here?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 9.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1611
    },
    {
      "id": 12888,
      "post_number": 7,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-05-21T15:19:45.607Z",
      "updated_at": "2025-05-21T15:20:08.698Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"shigma\" data-post=\"6\" data-topic=\"4139\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/shigma/48/3000_2.png\" class=\"avatar\"> shigma:</div>\n<blockquote>\n<p>Is there a way, similar to <code>#show math.equation</code>, to omit the <code>html.frame</code> here?</p>\n</blockquote>\n</aside>\n<p>Yes:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let canvas(..args) = html.frame(cetz.canvas(..args))\n\n// Usage:\n#canvas({\n  import cetz.draw: *\n  // and so on\n})\n</code></pre>",
      "raw": "[quote=\"shigma, post:6, topic:4139\"]\nIs there a way, similar to `#show math.equation`, to omit the `html.frame` here?\n[/quote]\n\nYes:\n\n```\n#let canvas(..args) = html.frame(cetz.canvas(..args))\n\n// Usage:\n#canvas({\n  import cetz.draw: *\n  // and so on\n})\n```",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 20,
      "score": 19.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 12921,
      "post_number": 8,
      "username": "shigma",
      "name": "shigma",
      "created_at": "2025-05-22T05:10:54.508Z",
      "updated_at": "2025-05-22T05:10:54.508Z",
      "cooked": "<p>Well, I know this way of writing, but similar encapsulation is needed for every packages. What I really want is a piece of “prelude” code that can be applied to any HTML rendering scenario and is no different in use from other environments. The <code>#show math.equation</code> above achieves this perfectly <img src=\"https://forum.typst.app/images/emoji/apple/+1.png?v=12\" title=\":+1:\" class=\"emoji\" alt=\":+1:\" loading=\"lazy\" width=\"20\" height=\"20\"> , but the <code>#let canvas</code> here doesn’t (because I can’t include every package, and I can’t prevent users from using the <code>cetz.canvas</code> directly).</p>\n<p>Background: I’m developing <a href=\"https://github.com/shigma/slidev-addon-typst\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - shigma/slidev-addon-typst: Typst addon for Slidev</a>, and as a library I don’t want the development experience to be interrupted by <code>html.frame</code>.</p>",
      "raw": "Well, I know this way of writing, but similar encapsulation is needed for every packages. What I really want is a piece of \"prelude\" code that can be applied to any HTML rendering scenario and is no different in use from other environments. The `#show math.equation` above achieves this perfectly :+1: , but the `#let canvas` here doesn't (because I can't include every package, and I can't prevent users from using the `cetz.canvas` directly).\n\nBackground: I'm developing https://github.com/shigma/slidev-addon-typst, and as a library I don't want the development experience to be interrupted by `html.frame`.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 17,
      "score": 8.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1611
    },
    {
      "id": 12954,
      "post_number": 9,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-22T15:33:41.215Z",
      "updated_at": "2025-05-22T15:35:38.090Z",
      "cooked": "<p>I’m not sure if this is currently possible to not use <code>html</code> module inline for HTML to work. I can only think of</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// https://forum.typst.app/t/3701/2\n#let target = dictionary(std).at(\"target\", default: () =&gt; \"paged\")\n\n#let some-wrapper(it) = context {\n    if target() == \"paged\" { it } else { html.frame(it) }\n}\n</code></pre>\n<p>Maybe you can do <code>show box/block: html.frame</code>, but that is probably very bad.</p>",
      "raw": "I'm not sure if this is currently possible to not use `html` module inline for HTML to work. I can only think of\n\n```typ\n// https://forum.typst.app/t/3701/2\n#let target = dictionary(std).at(\"target\", default: () => \"paged\")\n\n#let some-wrapper(it) = context {\n    if target() == \"paged\" { it } else { html.frame(it) }\n}\n```\n\nMaybe you can do `show box/block: html.frame`, but that is probably very bad.",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 14,
      "score": 17.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:47:43.216374"
}