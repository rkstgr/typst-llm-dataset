{
  "topic_metadata": {
    "id": 2389,
    "title": "How to write and align type inference rules?",
    "slug": "how-to-write-and-align-type-inference-rules",
    "posts_count": 3,
    "created_at": "2025-01-13T16:28:06.373Z",
    "last_posted_at": "2025-01-13T20:05:39.427Z",
    "views": 204,
    "like_count": 3,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Eric",
    "tags": [
      "math",
      "latex-migration"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 713
  },
  "posts": [
    {
      "id": 7435,
      "post_number": 1,
      "username": "Marvin",
      "name": "Marvin",
      "created_at": "2025-01-13T16:28:06.499Z",
      "updated_at": "2025-01-14T07:21:58.513Z",
      "cooked": "<p>Hi! I started learning Typst yesterday and I’m currently in the process of translating some LaTeX code to Typst and was wondering how I can elegantly (and typographically beautiful) write type inference (i.e. natural deduction, gentzen, sequent calculus) diagrams.</p>\n<p>In LaTeX I use</p>\n<pre data-code-wrap=\"latex\"><code class=\"lang-latex\">\\begin{mathpar}\n    \\inferrule*[right=Var]\n    {x : \\tau \\in \\Gamma}\n    {\\Gamma \\vdash x : \\tau}\n\n    \\inferrule*[right=Abs]\n    {\\Gamma, x : \\tau_1 \\vdash e : \\tau_2}\n    {\\Gamma \\vdash \\lambda x : \\tau_1.\\ e : \\tau_1 \\to \\tau_2}\n\n    \\inferrule*[right=App]\n    {\\Gamma \\vdash e_1 : \\tau_1 \\to \\tau_2 \\\\\n     \\Gamma \\vdash e_2 : \\tau_1}\n    {\\Gamma \\vdash e_1\\ e_2 : \\tau_2}\n\\end{mathpar}\n</code></pre>\n<p>Which results in the following:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/d/daead0e468e4fe1afc3afed5cb209d39dd52c89f.png\" data-download-href=\"https://forum.typst.app/uploads/default/daead0e468e4fe1afc3afed5cb209d39dd52c89f\" title=\"2025-01-13_17-24\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/d/daead0e468e4fe1afc3afed5cb209d39dd52c89f_2_690x205.png\" alt=\"2025-01-13_17-24\" data-base62-sha1=\"veDb7WyxwyJTf1HeqmrhJE8gXVB\" width=\"690\" height=\"205\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/d/daead0e468e4fe1afc3afed5cb209d39dd52c89f_2_690x205.png, https://forum.typst.app/uploads/default/original/2X/d/daead0e468e4fe1afc3afed5cb209d39dd52c89f.png 1.5x, https://forum.typst.app/uploads/default/original/2X/d/daead0e468e4fe1afc3afed5cb209d39dd52c89f.png 2x\" data-dominant-color=\"FCFCFC\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">2025-01-13_17-24</span><span class=\"informations\">912×272 13.8 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>In Typst the only thing I could come up with is using stacks (or grids) to manually align curryst prooftrees (which is a bit overkill for these diagrams I think):</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#align(center, stack(dir: ttb, spacing: 2em, stack(dir: ltr, spacing: 15%,\n  proof-tree(\n    rule(\n      name: smallcaps(\"Var\"),\n      $Gamma tack x : tau$,\n      $x : tau in Gamma$\n    )\n  ),\n\n  proof-tree(\n    rule(\n      name: smallcaps(\"Abs\"),\n      $Gamma tack lambda x : tau_1.e : tau_1 arrow tau_2$,\n      $Gamma, x : tau_1 tack e : tau_2$\n    )\n  )\n),\n  proof-tree(\n    rule(\n      name: smallcaps(\"App\"),\n      $Gamma tack e_1 \" \" e_2 : tau_2$,\n      $Gamma tack e_1 : tau_1 arrow tau_2$,\n      $Gamma tack e_2 : tau_1$\n    )\n  )\n))\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/e/e3ac829c40689b4c7f36fd483b70dd08cdf2b180.png\" data-download-href=\"https://forum.typst.app/uploads/default/e3ac829c40689b4c7f36fd483b70dd08cdf2b180\" title=\"2025-01-13_17-26\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/e/e3ac829c40689b4c7f36fd483b70dd08cdf2b180_2_690x151.png\" alt=\"2025-01-13_17-26\" data-base62-sha1=\"wu5ZcJxzikr7hY3ZseDiYMjSY0g\" width=\"690\" height=\"151\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/e/e3ac829c40689b4c7f36fd483b70dd08cdf2b180_2_690x151.png, https://forum.typst.app/uploads/default/original/2X/e/e3ac829c40689b4c7f36fd483b70dd08cdf2b180.png 1.5x, https://forum.typst.app/uploads/default/original/2X/e/e3ac829c40689b4c7f36fd483b70dd08cdf2b180.png 2x\" data-dominant-color=\"FBFBFB\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">2025-01-13_17-26</span><span class=\"informations\">963×211 12.8 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>I particularly don’t like how I have to manually adjust the spacing (compared to mathpar), especially if I had a lot more than three diagrams.</p>\n<p>Is there any better way to do this? Is there something similar “magical” to <code>mathpar</code> in Typst?</p>",
      "raw": "Hi! I started learning Typst yesterday and I'm currently in the process of translating some LaTeX code to Typst and was wondering how I can elegantly (and typographically beautiful) write type inference (i.e. natural deduction, gentzen, sequent calculus) diagrams.\n\nIn LaTeX I use\n\n```latex\n\\begin{mathpar}\n    \\inferrule*[right=Var]\n    {x : \\tau \\in \\Gamma}\n    {\\Gamma \\vdash x : \\tau}\n\n    \\inferrule*[right=Abs]\n    {\\Gamma, x : \\tau_1 \\vdash e : \\tau_2}\n    {\\Gamma \\vdash \\lambda x : \\tau_1.\\ e : \\tau_1 \\to \\tau_2}\n\n    \\inferrule*[right=App]\n    {\\Gamma \\vdash e_1 : \\tau_1 \\to \\tau_2 \\\\\n     \\Gamma \\vdash e_2 : \\tau_1}\n    {\\Gamma \\vdash e_1\\ e_2 : \\tau_2}\n\\end{mathpar}\n```\n\nWhich results in the following:\n\n![2025-01-13_17-24|690x205](upload://veDb7WyxwyJTf1HeqmrhJE8gXVB.png)\n\nIn Typst the only thing I could come up with is using stacks (or grids) to manually align curryst prooftrees (which is a bit overkill for these diagrams I think):\n\n```typst\n#align(center, stack(dir: ttb, spacing: 2em, stack(dir: ltr, spacing: 15%,\n  proof-tree(\n    rule(\n      name: smallcaps(\"Var\"),\n      $Gamma tack x : tau$,\n      $x : tau in Gamma$\n    )\n  ),\n\n  proof-tree(\n    rule(\n      name: smallcaps(\"Abs\"),\n      $Gamma tack lambda x : tau_1.e : tau_1 arrow tau_2$,\n      $Gamma, x : tau_1 tack e : tau_2$\n    )\n  )\n),\n  proof-tree(\n    rule(\n      name: smallcaps(\"App\"),\n      $Gamma tack e_1 \" \" e_2 : tau_2$,\n      $Gamma tack e_1 : tau_1 arrow tau_2$,\n      $Gamma tack e_2 : tau_1$\n    )\n  )\n))\n```\n\n![2025-01-13_17-26|690x151](upload://wu5ZcJxzikr7hY3ZseDiYMjSY0g.png)\n\nI particularly don't like how I have to manually adjust the spacing (compared to mathpar), especially if I had a lot more than three diagrams.\n\nIs there any better way to do this? Is there something similar \"magical\" to `mathpar` in Typst?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 37,
      "score": 827.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1039
    },
    {
      "id": 7437,
      "post_number": 2,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-01-13T19:54:25.183Z",
      "updated_at": "2025-01-13T19:57:39.251Z",
      "cooked": "<p>There is no inbuilt <code>mathpar</code> alternative, but it is possible to write something similar yourself, as I have done with the following code:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let mathpar(\n  numbering: auto,\n  row-gutter: 1.2em, // can be set to 'auto'\n  column-gutter: 2.5em,\n  ..children\n) = layout(bounds =&gt; {\n  // Resolve parameters\n  let numbering = if numbering == auto { math.equation.numbering } else { numbering }\n  let row-gutter = if row-gutter == auto { par.leading } else { row-gutter.to-absolute() }\n  let column-gutter = column-gutter.to-absolute()\n  let children = children.pos().map(child =&gt; [#child])\n\n  // Spread children into lines\n  let widths = children.map(child =&gt; measure(child).width)\n  let lines = ((children: (), remaining: bounds.width),)\n  for (child, width) in children.zip(widths) {\n    if (\n      child.func() == linebreak or\n      (lines.last().remaining - width) / (lines.last().children.len() + 2) &lt; column-gutter\n    ){\n      lines.push((children: (), remaining: bounds.width))\n    }\n\n    if child.func() != linebreak {\n      lines.last().children.push(child)\n      lines.last().remaining -= width\n    }\n  }\n\n  // Layout children in math mode for baseline alignment\n  par(leading: row-gutter, math.equation(numbering: numbering, block: true,\n    for (i, line) in lines.enumerate() {\n      let space = h(line.remaining / (line.children.len() + 1))\n      par(leading: par.leading, space + line.children.join(space) + space)\n      if i != lines.len() - 1 { linebreak() }\n    }\n  ))\n})\n</code></pre>\n<p>It is by no means perfect, but when used with your example, it certainly does the job. You can use it like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// This is necessary, because the default math font does not\n// support small capitals, so we have to explicitly switch\n// back to the text font here.\n#show smallcaps: set text(font: \"Libertinus Serif\")\n\n#mathpar(\n  proof-tree(\n    rule(\n      name: smallcaps(\"Var\"),\n      $Gamma tack x : tau$,\n      $x : tau in Gamma$\n    )\n  ),\n  proof-tree(\n    rule(\n      name: smallcaps(\"Abs\"),\n      $Gamma tack lambda x : tau_1.e : tau_1 arrow tau_2$,\n      $Gamma, x : tau_1 tack e : tau_2$\n    )\n  ),\n  proof-tree(\n    rule(\n      name: smallcaps(\"App\"),\n      $Gamma tack e_1 \" \" e_2 : tau_2$,\n      $Gamma tack e_1 : tau_1 arrow tau_2$,\n      $Gamma tack e_2 : tau_1$\n    )\n  ),\n)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/6/63630b4dc9b8530108818979b207a383a72d4504.png\" alt=\"Output of above Code\" data-base62-sha1=\"ebdtbmQeCIrZDkMLbzz3mfMT5iI\" width=\"595\" height=\"144\"></p>\n<p>You can of course play around with the parameters to improve the spacing. When <code>row-gutter</code> is set to <code>auto</code>, it will use whatever value is used in <code>par.spacing</code>, which defaults to <code>0.65em</code>. A larger value looks better here though, as there are fractions involved, which like to get close to each other.</p>\n<p><em>(I might have overcomplicated this a bit, so if someone has a simpler solution, please share!)</em></p>",
      "raw": "There is no inbuilt `mathpar` alternative, but it is possible to write something similar yourself, as I have done with the following code:\n```typ\n#let mathpar(\n  numbering: auto,\n  row-gutter: 1.2em, // can be set to 'auto'\n  column-gutter: 2.5em,\n  ..children\n) = layout(bounds => {\n  // Resolve parameters\n  let numbering = if numbering == auto { math.equation.numbering } else { numbering }\n  let row-gutter = if row-gutter == auto { par.leading } else { row-gutter.to-absolute() }\n  let column-gutter = column-gutter.to-absolute()\n  let children = children.pos().map(child => [#child])\n\n  // Spread children into lines\n  let widths = children.map(child => measure(child).width)\n  let lines = ((children: (), remaining: bounds.width),)\n  for (child, width) in children.zip(widths) {\n    if (\n      child.func() == linebreak or\n      (lines.last().remaining - width) / (lines.last().children.len() + 2) < column-gutter\n    ){\n      lines.push((children: (), remaining: bounds.width))\n    }\n\n    if child.func() != linebreak {\n      lines.last().children.push(child)\n      lines.last().remaining -= width\n    }\n  }\n\n  // Layout children in math mode for baseline alignment\n  par(leading: row-gutter, math.equation(numbering: numbering, block: true,\n    for (i, line) in lines.enumerate() {\n      let space = h(line.remaining / (line.children.len() + 1))\n      par(leading: par.leading, space + line.children.join(space) + space)\n      if i != lines.len() - 1 { linebreak() }\n    }\n  ))\n})\n```\n\nIt is by no means perfect, but when used with your example, it certainly does the job. You can use it like this:\n```typ\n// This is necessary, because the default math font does not\n// support small capitals, so we have to explicitly switch\n// back to the text font here.\n#show smallcaps: set text(font: \"Libertinus Serif\")\n\n#mathpar(\n  proof-tree(\n    rule(\n      name: smallcaps(\"Var\"),\n      $Gamma tack x : tau$,\n      $x : tau in Gamma$\n    )\n  ),\n  proof-tree(\n    rule(\n      name: smallcaps(\"Abs\"),\n      $Gamma tack lambda x : tau_1.e : tau_1 arrow tau_2$,\n      $Gamma, x : tau_1 tack e : tau_2$\n    )\n  ),\n  proof-tree(\n    rule(\n      name: smallcaps(\"App\"),\n      $Gamma tack e_1 \" \" e_2 : tau_2$,\n      $Gamma tack e_1 : tau_1 arrow tau_2$,\n      $Gamma tack e_2 : tau_1$\n    )\n  ),\n)\n```\n\n![Output of above Code|595x144](upload://ebdtbmQeCIrZDkMLbzz3mfMT5iI.png)\n\nYou can of course play around with the parameters to improve the spacing. When `row-gutter` is set to `auto`, it will use whatever value is used in `par.spacing`, which defaults to `0.65em`. A larger value looks better here though, as there are fractions involved, which like to get close to each other.\n\n_(I might have overcomplicated this a bit, so if someone has a simpler solution, please share!)_",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 29,
      "score": 40.8,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 7438,
      "post_number": 3,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-01-13T20:05:39.427Z",
      "updated_at": "2025-01-13T20:05:39.427Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/marvin\">@Marvin</a>, could you maybe try to revise your post’s title to be a complete question as per the <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\">question guidelines</a>:</p>\n<blockquote>\n<p><strong>Good titles are questions you would ask your friend about Typst.</strong></p>\n</blockquote>\n<p>We hope by adhering to this, we make the information in this forum easy to find in the future. Thanks!</p>",
      "raw": "Hi @Marvin, could you maybe try to revise your post’s title to be a complete question as per the [question guidelines](https://forum.typst.app/t/how-to-post-in-the-questions-category/11):\n\n> **Good titles are questions you would ask your friend about Typst.**\n\nWe hope by adhering to this, we make the information in this forum easy to find in the future. Thanks!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 28,
      "score": 75.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:52:52.379871"
}