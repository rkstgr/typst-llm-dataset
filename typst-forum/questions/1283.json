{
  "topic_metadata": {
    "id": 1283,
    "title": "Displaying specific data from CSV file",
    "slug": "displaying-specific-data-from-csv-file",
    "posts_count": 5,
    "created_at": "2024-10-22T11:07:06.989Z",
    "last_posted_at": "2024-10-22T15:30:17.928Z",
    "views": 762,
    "like_count": 5,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "quachpas",
    "tags": [
      "tables",
      "data-loading"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 740
  },
  "posts": [
    {
      "id": 4466,
      "post_number": 1,
      "username": "YellowSeas",
      "name": "John Joy",
      "created_at": "2024-10-22T11:07:07.133Z",
      "updated_at": "2024-10-22T11:07:07.133Z",
      "cooked": "<p>Good day Typst Community!</p>\n<p>I’ve been trying out Typst for a couple days now before our company purchases the Pro version for our report creation.</p>\n<p>Some of our use cases involve importing data from a CSV file and then displaying it as a table. I have some questions on the same:</p>\n<ol>\n<li>How do we include the european notation (using commas instead of dots) for floating numbers? In general a double quotes around the value should suffice (or using curly brackets in the case of LaTex). However, this doesn’t seem to translate in Typst? Any leads on this?</li>\n<li>Once I import the csv as a dictionary (where each column is tied to the header key), I’d like to only display certain columns. May I know how I can parse the csv output to be able to extract and display only specific columns?</li>\n</ol>\n<p>I would appreciate your help and thank you in advance for your inputs!</p>",
      "raw": "Good day Typst Community!\n\nI’ve been trying out Typst for a couple days now before our company purchases the Pro version for our report creation.\n\nSome of our use cases involve importing data from a CSV file and then displaying it as a table. I have some questions on the same:\n\n1. How do we include the european notation (using commas instead of dots) for floating numbers? In general a double quotes around the value should suffice (or using curly brackets in the case of LaTex). However, this doesn’t seem to translate in Typst? Any leads on this?\n2. Once I import the csv as a dictionary (where each column is tied to the header key), I’d like to only display certain columns. May I know how I can parse the csv output to be able to extract and display only specific columns?\n\nI would appreciate your help and thank you in advance for your inputs!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 53,
      "score": 4005.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 645
    },
    {
      "id": 4467,
      "post_number": 2,
      "username": "YellowSeas",
      "name": "John Joy",
      "created_at": "2024-10-22T11:29:10.547Z",
      "updated_at": "2024-10-23T14:51:01.135Z",
      "cooked": "<p>Looks like I figured out the second part of my question (importing the CSV as an array). Posting example code below:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let results = csv(\"sampleCSV.csv\",\n          row-type: array)\n#figure(\n  table(\n    // columns: 4,\n    table.header([Node], [Voltage Level $ k V^2 $]),\n    columns : 2,\n        fill: (_, y) =&gt; if y == 0 {\n      gray.lighten(75%)\n    }, \n    // ..results.flatten(),\n    ..for(node,_,pFaults,..) in results.slice(1){(node, pFaults)}) //this is where I am selective in picking the 1st column and 3rd column for view\n  )\n  ,\n    caption: [Dummy results from a CSV file ],\n) &lt;results_A01&gt;  \n</code></pre>",
      "raw": "Looks like I figured out the second part of my question (importing the CSV as an array). Posting example code below:\n```typ\n#let results = csv(\"sampleCSV.csv\",\n          row-type: array)\n#figure(\n  table(\n    // columns: 4,\n    table.header([Node], [Voltage Level $ k V^2 $]),\n    columns : 2,\n        fill: (_, y) => if y == 0 {\n      gray.lighten(75%)\n    }, \n    // ..results.flatten(),\n    ..for(node,_,pFaults,..) in results.slice(1){(node, pFaults)}) //this is where I am selective in picking the 1st column and 3rd column for view\n  )\n  ,\n    caption: [Dummy results from a CSV file ],\n) <results_A01>  \n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 53,
      "score": 40.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 645
    },
    {
      "id": 4469,
      "post_number": 3,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-10-22T11:54:26.028Z",
      "updated_at": "2024-10-22T11:54:26.028Z",
      "cooked": "<p>Hello!</p>\n<p>For number localization, you can take a look at this <a href=\"https://github.com/typst/typst/issues/1093\" rel=\"noopener nofollow ugc\">GitHub issue</a>. Quoting <a class=\"mention\" href=\"/u/laurmaedje\">@laurmaedje</a></p>\n<blockquote>\n<p>Automatic locale-aware number formatting will happen</p>\n</blockquote>\n<p>In the mean time <a class=\"mention\" href=\"/u/andrew\">@Andrew</a> provides a simple solution for “1.1” to “1,1”.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show regex(\"\\d+\\.\\d+\"): num =&gt; num.text.replace(\".\", \",\")\n</code></pre>\n<p>You can restrict this to tables by only wrapping it in a table show rule.</p>\n<p>For filtering columns in a csv, you can map-slice if the columns are contingous, or map-at</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let filtered = t.map(\n  it =&gt; {\n    // it.slice(0, 2)\n    (it.at(0), it.at(1))\n  }\n)\n</code></pre>\n<p>The object given by <code>csv</code> is an array of rows, hence you apply <code>map</code> which operates on each row, selecting only the columns you want by index, starting from 0. Your solution also works! <img src=\"https://forum.typst.app/images/emoji/apple/smiley.png?v=12\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hello! \n\nFor number localization, you can take a look at this [GitHub issue](https://github.com/typst/typst/issues/1093). Quoting @laurmaedje \n> Automatic locale-aware number formatting will happen\n\nIn the mean time @Andrew provides a simple solution for \"1.1\" to \"1,1\".\n\n```typ\n#show regex(\"\\d+\\.\\d+\"): num => num.text.replace(\".\", \",\")\n```\nYou can restrict this to tables by only wrapping it in a table show rule.\n\nFor filtering columns in a csv, you can map-slice if the columns are contingous, or map-at\n```typ\n#let filtered = t.map(\n  it => {\n    // it.slice(0, 2)\n    (it.at(0), it.at(1))\n  }\n)\n```\n\nThe object given by `csv` is an array of rows, hence you apply `map` which operates on each row, selecting only the columns you want by index, starting from 0. Your solution also works! :smiley:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 51,
      "score": 95.2,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 4470,
      "post_number": 4,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-22T12:04:18.107Z",
      "updated_at": "2024-10-22T12:04:18.107Z",
      "cooked": "<p>I guess your questions have been answered already but here’s an alternative way to do it using <code>row-type: dictionary</code> and parsing the numbers to actual floating point numbers (instead of changing how typst shows them):</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Content of CSV file\n#let csv-data = ```\ncol1,col2,col3\n\"1,1\",\"2,1\",\"3,1\"\n\"1,2\",\"2,2\",\"3,2\"\n```.text\n\n// To load a file, replace csv.decode(string) with csv(filename)\n#let data = csv.decode(csv-data, row-type: dictionary)\n\n// Parse a float encoded as string with comma decimal separator\n#let eu-float(s) = float(s.replace(\",\", \".\"))\n\n#let parse-values(data) = {\n  // Get desired values from each row\n  data.map(row =&gt; (row.col1, row.col3))\n      // Flatten to a simple array of values\n      .flatten()\n      // Parse strings to floats\n      .map(eu-float)\n}\n\n#parse-values(data)\n</code></pre>",
      "raw": "I guess your questions have been answered already but here's an alternative way to do it using `row-type: dictionary` and parsing the numbers to actual floating point numbers (instead of changing how typst shows them):\n\n```typ\n// Content of CSV file\n#let csv-data = ```\ncol1,col2,col3\n\"1,1\",\"2,1\",\"3,1\"\n\"1,2\",\"2,2\",\"3,2\"\n```.text\n\n// To load a file, replace csv.decode(string) with csv(filename)\n#let data = csv.decode(csv-data, row-type: dictionary)\n\n// Parse a float encoded as string with comma decimal separator\n#let eu-float(s) = float(s.replace(\",\", \".\"))\n\n#let parse-values(data) = {\n  // Get desired values from each row\n  data.map(row => (row.col1, row.col3))\n      // Flatten to a simple array of values\n      .flatten()\n      // Parse strings to floats\n      .map(eu-float)\n}\n\n#parse-values(data)\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 49,
      "score": 174.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 4488,
      "post_number": 5,
      "username": "raimann",
      "name": "Felipe Raimann",
      "created_at": "2024-10-22T15:30:17.928Z",
      "updated_at": "2024-10-22T15:45:42.221Z",
      "cooked": "<p>I recommend you to take a look at the excellent (and not very well known) package <a href=\"https://typst.app/universe/package/tabut\">tabut</a>.</p>\n<p>Here is my code to handle <code>csv</code> files selecting columns:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let table-tabut-csv(csvinput, colnames, align: auto, ..args) = {\n  let data-columns = {\n    let aux = ()\n\n    for colname in colnames {\n        aux.push((header: [], func: r =&gt; r.at(colname)))\n    }\n\n    (aux)\n  }\n\n  let datacsv = records-from-csv(csvinput)\n  let celdas-tabut = tabut-cells(\n    datacsv,\n    data-columns,\n    headers: false,\n    align: align\n  )\n\n  table(\n    stroke: none,\n    table.hline(),\n    ..args,\n    ..celdas-tabut,\n    table.hline()\n  )\n}\n</code></pre>\n<p>Then, you use it only with:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">table-tabut-csv(csv(\"input.csv\"), (\"col1\", \"col3\"))\n</code></pre>\n<p>And you get a <code>table</code> formatted as you defined it in the function. Obviously, you can also get the <code>tabut-cells</code> and do the formatting thing in another code. Perhaps there is a fancier way to do this, even you can work with <code>tabut</code> to do more tricks with your data. Take a look at <a>their documentation</a> (and more specifically, <a href=\"https://github.com/Amelia-Mowers/typst-tabut?tab=readme-ov-file#csv-data\" rel=\"noopener nofollow ugc\">documentation of csv files</a>).</p>\n<p>As an example showing only columns <code>col1</code> and <code>col3</code> from an <code>input.csv</code> file.</p>\n<p>If your company or you are profiting from table generation, please also consider donating to <a href=\"https://github.com/sponsors/PgBiel\" rel=\"noopener nofollow ugc\">PgBiel</a>.</p>",
      "raw": "I recommend you to take a look at the excellent (and not very well known) package [tabut](https://typst.app/universe/package/tabut).\n\nHere is my code to handle `csv` files selecting columns:\n\n```typst\n#let table-tabut-csv(csvinput, colnames, align: auto, ..args) = {\n  let data-columns = {\n    let aux = ()\n\n    for colname in colnames {\n        aux.push((header: [], func: r => r.at(colname)))\n    }\n\n    (aux)\n  }\n\n  let datacsv = records-from-csv(csvinput)\n  let celdas-tabut = tabut-cells(\n    datacsv,\n    data-columns,\n    headers: false,\n    align: align\n  )\n\n  table(\n    stroke: none,\n    table.hline(),\n    ..args,\n    ..celdas-tabut,\n    table.hline()\n  )\n}\n```\n\nThen, you use it only with:\n\n```typst\ntable-tabut-csv(csv(\"input.csv\"), (\"col1\", \"col3\"))\n```\n\nAnd you get a `table` formatted as you defined it in the function. Obviously, you can also get the `tabut-cells` and do the formatting thing in another code. Perhaps there is a fancier way to do this, even you can work with `tabut` to do more tricks with your data. Take a look at [their documentation](?tab=readme-ov-file#csv-data) (and more specifically, [documentation of csv files](https://github.com/Amelia-Mowers/typst-tabut?tab=readme-ov-file#csv-data)).\n\nAs an example showing only columns `col1` and `col3` from an `input.csv` file.\n\nIf your company or you are profiting from table generation, please also consider donating to [PgBiel](https://github.com/sponsors/PgBiel).",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 44,
      "score": 113.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 10
    }
  ],
  "scraped_at": "2025-06-10T09:56:13.232815"
}