{
  "topic_metadata": {
    "id": 718,
    "title": "Any elegant way to sum up inside map function?",
    "slug": "any-elegant-way-to-sum-up-inside-map-function",
    "posts_count": 5,
    "created_at": "2024-09-26T23:41:33.457Z",
    "last_posted_at": "2024-09-27T15:23:56.162Z",
    "views": 419,
    "like_count": 3,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "eike",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 891
  },
  "posts": [
    {
      "id": 2693,
      "post_number": 1,
      "username": "Sacriface",
      "name": "",
      "created_at": "2024-09-26T23:41:33.715Z",
      "updated_at": "2024-09-26T23:41:33.715Z",
      "cooked": "<p>Hey! So i was trying to have a sum variable and then iterate over an array of lines and add the result of each line to the sum variable. I found out there are no global variables, but is there any way to do this elegantly without iterating twice over the lines object (which would also require e.g. the same if statement for line.type)?<br>\nSee the commented out lines for what I want to do:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let sum = 0\n\n#table(\n      columns: (auto, auto, 1fr, auto, auto),\n      align: (col, row) =&gt; (auto, auto, auto, auto, auto,).at(col),\n      inset: 7pt,\n      stroke: luma(180),\n      \n      table.header[Amount][Unit][Work Done][Unit Price][Total Price]\n      ..lines.map(line =&gt; {\n        if (line.type == lineTypes.timed) {\n          let start_time = line.details.time.at(0)\n          let end_time = line.details.time.at(1)\n          \n          let hours = (end_time.at(0) - start_time.at(0)) + (end_time.at(1) - start_time.at(1))/60\n          (\n          format(hours, 2),\n          \"hours\",\n          line.details.description, \n          eurStr(HOURLY_RATE),\n          eurStr(hours * HOURLY_RATE)\n          )\n          //sum += hours * HOURLY_RATE\n        } else if (line.type == lineTypes.special) {\n          (\n          str(line.details.amount),\n          str(line.details.unit),\n          line.details.description, \n          eurStr(line.details.pricePerUnit),\n          eurStr(line.details.amount * line.details.pricePerUnit)\n          //sum += line.details.amount * line.details.pricePerUnit\n          )\n        }\n      }).flatten(),\n      [], [], [], \"Total:\", text(size: 15pt)[#strong(eurStr(sum))]\n  )\n</code></pre>\n<p>This is what an example of the lines variable looks like:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let lineTypes = (timed: 0, special: 1)\n\n#let lines = (\n  (type: lineTypes.timed, details: (\n    date: \"20.09.2024\",\n    time: ((9, 30), (11, 23)),\n    description: \"Driving\"\n  )),\n  (type: lineTypes.special, details: (\n    amount: 1, unit: \"-\", pricePerUnit: 8.0, \n    date: \"24.06.2024\",\n    description: \"Using Car\"\n  )),\n)\n</code></pre>\n<p>Also p.s. if there’s anything ugly or bad about what I’m doing here, please tell me. I’m pretty new to typst.</p>",
      "raw": "Hey! So i was trying to have a sum variable and then iterate over an array of lines and add the result of each line to the sum variable. I found out there are no global variables, but is there any way to do this elegantly without iterating twice over the lines object (which would also require e.g. the same if statement for line.type)? \nSee the commented out lines for what I want to do:\n\n```typ\n#let sum = 0\n\n#table(\n      columns: (auto, auto, 1fr, auto, auto),\n      align: (col, row) => (auto, auto, auto, auto, auto,).at(col),\n      inset: 7pt,\n      stroke: luma(180),\n      \n      table.header[Amount][Unit][Work Done][Unit Price][Total Price]\n      ..lines.map(line => {\n        if (line.type == lineTypes.timed) {\n          let start_time = line.details.time.at(0)\n          let end_time = line.details.time.at(1)\n          \n          let hours = (end_time.at(0) - start_time.at(0)) + (end_time.at(1) - start_time.at(1))/60\n          (\n          format(hours, 2),\n          \"hours\",\n          line.details.description, \n          eurStr(HOURLY_RATE),\n          eurStr(hours * HOURLY_RATE)\n          )\n          //sum += hours * HOURLY_RATE\n        } else if (line.type == lineTypes.special) {\n          (\n          str(line.details.amount),\n          str(line.details.unit),\n          line.details.description, \n          eurStr(line.details.pricePerUnit),\n          eurStr(line.details.amount * line.details.pricePerUnit)\n          //sum += line.details.amount * line.details.pricePerUnit\n          )\n        }\n      }).flatten(),\n      [], [], [], \"Total:\", text(size: 15pt)[#strong(eurStr(sum))]\n  )\n```\nThis is what an example of the lines variable looks like:\n\n```typst\n#let lineTypes = (timed: 0, special: 1)\n\n#let lines = (\n  (type: lineTypes.timed, details: (\n    date: \"20.09.2024\",\n    time: ((9, 30), (11, 23)),\n    description: \"Driving\"\n  )),\n  (type: lineTypes.special, details: (\n    amount: 1, unit: \"-\", pricePerUnit: 8.0, \n    date: \"24.06.2024\",\n    description: \"Using Car\"\n  )),\n)\n```\n\nAlso p.s. if there's anything ugly or bad about what I'm doing here, please tell me. I'm pretty new to typst.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 53,
      "score": 1905.6,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 489
    },
    {
      "id": 2699,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-09-27T07:10:16.543Z",
      "updated_at": "2024-09-27T07:11:22.997Z",
      "cooked": "<p>Hello!<br>\nPlease make sure your code is reproducible before posting, it helps to reduce the code to a <em>minimal working example</em>. You can take a look at <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a> for other tips!</p>\n<p>For your problem, I wouldn’t actually have a “global variable” and add the total price of each line when constructing the rows. You can do it twice at nearly no cost, this would be more “elegant” than having a global variable.</p>\n<p>To actually answer your question, you can create a <a href=\"https://typst.app/docs/reference/introspection/state/\"><code>state</code></a> to keep track of the total price.</p>\n<p>Here are the relevant lines below. I showcase two ways of computing the total price: <code>sumtotalprice</code> or <code>totalprice-state.get()</code>.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let totalprice-state = state(\"totalprice\", 0.0)\n#let totalprice(line) = {\n  if line.type == lineTypes.special {\n    return line.details.amount * line.details.pricePerUnit \n  }\n  return 0\n}\n#let sumtotalprice(lines) = {\n  if type(lines) == \"array\" {\n    return lines.map(line =&gt; totalprice(line)).sum()\n  }\n}\n// ...\n          str(totalprice(line)) + totalprice-state.update(it =&gt; it + totalprice(line))\n// ...\n      [], [], [], \"Total:\", text(size: 15pt)[#sumtotalprice(lines) vs #context totalprice-state.get()]\n\n</code></pre>",
      "raw": "Hello!\nPlease make sure your code is reproducible before posting, it helps to reduce the code to a *minimal working example*. You can take a look at https://forum.typst.app/t/how-to-post-in-the-questions-category/11 for other tips!\n\nFor your problem, I wouldn't actually have a \"global variable\" and add the total price of each line when constructing the rows. You can do it twice at nearly no cost, this would be more \"elegant\" than having a global variable. \n\nTo actually answer your question, you can create a [`state`](https://typst.app/docs/reference/introspection/state/) to keep track of the total price.\n\nHere are the relevant lines below. I showcase two ways of computing the total price: `sumtotalprice` or `totalprice-state.get()`.\n\n```typ\n#let totalprice-state = state(\"totalprice\", 0.0)\n#let totalprice(line) = {\n  if line.type == lineTypes.special {\n    return line.details.amount * line.details.pricePerUnit \n  }\n  return 0\n}\n#let sumtotalprice(lines) = {\n  if type(lines) == \"array\" {\n    return lines.map(line => totalprice(line)).sum()\n  }\n}\n// ...\n          str(totalprice(line)) + totalprice-state.update(it => it + totalprice(line))\n// ...\n      [], [], [], \"Total:\", text(size: 15pt)[#sumtotalprice(lines) vs #context totalprice-state.get()]\n\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 50,
      "score": 45.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 2701,
      "post_number": 3,
      "username": "eike",
      "name": "Eike Schulte",
      "created_at": "2024-09-27T07:47:19.475Z",
      "updated_at": "2024-09-27T07:56:44.261Z",
      "cooked": "<p>I think there are two ways that are somewhat idiomatic. I simplified your example a bit, and will use this data:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let lines = (\n  (name: \"foo\", value: 5),\n  (name: \"bar\", value: 42),\n)\n</code></pre>\n<p>I will produce a table listing the name in upper case and the cumulative sum next to it, and a results line at the end, like so:<br>\n<img src=\"https://forum.typst.app/uploads/default/original/1X/cfe98e6c6d2b197d9b2a84e5d23cf9fd6c995454.png\" alt=\"grafik\" data-base62-sha1=\"tFheauXu9UN57VXLkS4SE5Uvjla\" width=\"144\" height=\"132\"></p>\n<h2><a name=\"p-2701-approach-with-for-loop-1\" class=\"anchor\" href=\"#p-2701-approach-with-for-loop-1\"></a>Approach with <code>for</code> loop</h2>\n<p><em>Global</em> variables are immutable in Typst, but <em>local</em> variables are not. So you can introduce a new scope, a variable within it, and then modify it using a <code>for</code> loop. When the body of a <code>for</code> loop returns joinable values, they will be joined automatically. Arrays are joinable, so just returning the cells for a single line at the end of the loop will work. (If you just want to return a single value in each iteration, this means that you will often have to write <code>(value,)</code> to turn it into a one-element array to get an array of results back. Here, we want to values each time, so we can just return the two-element array and skip the <code>flatten</code> at the end.)</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#table(columns: 2,\n  ..{\n    let cum-sum = 0\n    for line in lines {\n      cum-sum = cum-sum + line.value\n      ([#upper(line.name)], [#cum-sum])\n    }\n    ([Result], [#cum-sum])\n  }\n)\n</code></pre>\n<h2><a name=\"p-2701-approach-with-fold-2\" class=\"anchor\" href=\"#p-2701-approach-with-fold-2\"></a>Approach with <code>fold</code></h2>\n<p>If you want a more “functional” solution, you can use <code>fold</code> instead of <code>map</code>. <code>lines.fold</code> takes two arguments: The initial value for the <em>accumulator</em> and a <em>folding function</em>. For us, the initial value is a pair of an empty list (we will “fill” this with the cells) and <code>0</code> as the initial value of the cumulative sum. The folding function gets both the current value of the accumulator and the next element from the <code>lines</code> array. It must return the updated accumulator.</p>\n<p>I would usually recommend using the <code>for</code> loop approach, instead.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#table(columns: 2,\n  ..{\n    let (cells, sum) = lines.fold(((), 0), ((results, cum-sum), line) =&gt; {\n      let new-sum = cum-sum + line.value\n      (\n        results + ([#upper(line.name)], [#new-sum],),\n        new-sum,\n      )\n    })\n    cells\n    ([Result], [#sum])\n  }\n)\n</code></pre>",
      "raw": "I think there are two ways that are somewhat idiomatic. I simplified your example a bit, and will use this data:\n```typ\n#let lines = (\n  (name: \"foo\", value: 5),\n  (name: \"bar\", value: 42),\n)\n```\nI will produce a table listing the name in upper case and the cumulative sum next to it, and a results line at the end, like so:\n![grafik|144x132](upload://tFheauXu9UN57VXLkS4SE5Uvjla.png)\n\n## Approach with `for` loop\n\n*Global* variables are immutable in Typst, but *local* variables are not. So you can introduce a new scope, a variable within it, and then modify it using a `for` loop. When the body of a `for` loop returns joinable values, they will be joined automatically. Arrays are joinable, so just returning the cells for a single line at the end of the loop will work. (If you just want to return a single value in each iteration, this means that you will often have to write `(value,)` to turn it into a one-element array to get an array of results back. Here, we want to values each time, so we can just return the two-element array and skip the `flatten` at the end.)\n\n```typ\n#table(columns: 2,\n  ..{\n    let cum-sum = 0\n    for line in lines {\n      cum-sum = cum-sum + line.value\n      ([#upper(line.name)], [#cum-sum])\n    }\n    ([Result], [#cum-sum])\n  }\n)\n```\n\n## Approach with `fold`\n\nIf you want a more \"functional\" solution, you can use `fold` instead of `map`. `lines.fold` takes two arguments: The initial value for the *accumulator* and a *folding function*. For us, the initial value is a pair of an empty list (we will \"fill\" this with the cells) and `0` as the initial value of the cumulative sum. The folding function gets both the current value of the accumulator and the next element from the `lines` array. It must return the updated accumulator.\n\nI would usually recommend using the `for` loop approach, instead.\n\n```typ\n#table(columns: 2,\n  ..{\n    let (cells, sum) = lines.fold(((), 0), ((results, cum-sum), line) => {\n      let new-sum = cum-sum + line.value\n      (\n        results + ([#upper(line.name)], [#new-sum],),\n        new-sum,\n      )\n    })\n    cells\n    ([Result], [#sum])\n  }\n)\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 47,
      "score": 54.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 357
    },
    {
      "id": 2712,
      "post_number": 4,
      "username": "Sacriface",
      "name": "",
      "created_at": "2024-09-27T10:14:01.617Z",
      "updated_at": "2024-09-27T10:14:01.617Z",
      "cooked": "<p>Wow, thank you both for these great answers. I will keep in mind to do a minimal example next time, sorry about that!</p>",
      "raw": "Wow, thank you both for these great answers. I will keep in mind to do a minimal example next time, sorry about that!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 38,
      "score": 7.6,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 489
    },
    {
      "id": 2730,
      "post_number": 5,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-27T15:23:56.162Z",
      "updated_at": "2024-09-27T15:23:56.162Z",
      "cooked": "<p>One thing I noticed right away is that you can use <code>upper(line.name)</code> instead of <code>[#upper(line.name)]</code>. The <a href=\"https://typst.app/docs/reference/text/upper/\"><code>upper</code></a> function return <code>str</code> for <code>str</code> input and <code>content</code> for <code>content</code> input. Table cell can be either <code>str</code> or <code>content</code>.</p>",
      "raw": "One thing I noticed right away is that you can use `upper(line.name)` instead of `[#upper(line.name)]`. The [`upper`](https://typst.app/docs/reference/text/upper/) function return `str` for `str` input and `content` for `content` input. Table cell can be either `str` or `content`.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 35,
      "score": 7.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:57:57.674838"
}