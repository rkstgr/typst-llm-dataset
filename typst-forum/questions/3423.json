{
  "topic_metadata": {
    "id": 3423,
    "title": "How to include files inside template/package, but parsed from project path?",
    "slug": "how-to-include-files-inside-template-package-but-parsed-from-project-path",
    "posts_count": 3,
    "created_at": "2025-03-27T08:57:12.943Z",
    "last_posted_at": "2025-03-27T15:06:09.404Z",
    "views": 191,
    "like_count": 6,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "packages",
      "templates"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 598
  },
  "posts": [
    {
      "id": 10312,
      "post_number": 1,
      "username": "Birckk",
      "name": "Tobias Olrik Birck Kristensen",
      "created_at": "2025-03-27T08:57:13.203Z",
      "updated_at": "2025-03-27T08:58:39.507Z",
      "cooked": "<p>I’m working on a template and I have an <code>#include-files()</code> function that would take a list of files and then just <code>#input</code> them inside the template. Specifically to have correct custom footer and page numbering on these “preface” files before primary contents. And then followed by main body etc.</p>\n<p>Structure:</p>\n<ul>\n<li>Template\n<ul>\n<li>Frontpage</li>\n<li>Preface pages <em>(parsed as paths)</em></li>\n</ul>\n</li>\n<li>Paper</li>\n</ul>\n<p><strong>My problem is:</strong><br>\nI’m testing this on local and the root is always my package <code>src</code> folder instead of my personal project folder because it’s my <code>src/main.typ</code> that essentially call the <code>input</code> I presume. But I can’t seem to figure out despite some similar issues or posts touching on similar subjects, how to get the correct path to be parsed.</p>\n<p><a href=\"https://github.com/typst/typst/issues/2608\" rel=\"noopener nofollow ugc\">mark project root</a>, <a href=\"https://github.com/typst/typst/issues/971\" rel=\"noopener nofollow ugc\">path and string should be different types.</a></p>\n<p><em>And it works fine if not ran as part of a package but just ran as part of my project. Utilizing having prefixed “/” in paths to reference root of project</em></p>\n<p><strong>Error</strong></p>\n<pre><code class=\"lang-auto\">error: file not found()    \n@local/test-template:0.1.0\\src\\functions.typ:6:12\n\n//Actual Path: \nC:\\Users\\*MY-USER*\\AppData\\Local\\typst/packages\\local/test-template/0.1.0\\sections\\preface\\preface.typ\n\n//Expected path: \nC:\\myproject\\test-template\\sections\\preface\\preface.typ\n</code></pre>\n<p><strong>Code:</strong></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">//main.typ\n#show: template.with(\n  //... prior stuff\n  before: ( //my list of files to include\n    preface: \"/sections/preface/preface.typ\",\n    acknowledgement: \"/sections/preface/acknowledgement.typ\",\n    contents: \"/sections/preface/contents.typ\",\n    readers_guide: \"/sections/preface/readers_guide.typ\",\n  ),\n)\n</code></pre>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">//template.typ\n#let template() {\n    include-files(before)\n}\n</code></pre>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">//functions.typ\n#let include-files(file-list) = {\n  let files = file-list.values()\n\n  for file in files {\n    include file\n  }\n}\n</code></pre>",
      "raw": "I'm working on a template and I have an `#include-files()` function that would take a list of files and then just `#input` them inside the template. Specifically to have correct custom footer and page numbering on these \"preface\" files before primary contents. And then followed by main body etc. \n\nStructure: \n+ Template\n  + Frontpage\n  + Preface pages *(parsed as paths)*\n+ Paper\n\n**My problem is:**\nI'm testing this on local and the root is always my package `src` folder instead of my personal project folder because it's my `src/main.typ` that essentially call the `input` I presume. But I can't seem to figure out despite some similar issues or posts touching on similar subjects, how to get the correct path to be parsed.\n\n[mark project root](https://github.com/typst/typst/issues/2608), [path and string should be different types.](https://github.com/typst/typst/issues/971) \n\n*And it works fine if not ran as part of a package but just ran as part of my project. Utilizing having prefixed \"/\" in paths to reference root of project* \n\n**Error**\n```\nerror: file not found()    \n@local/test-template:0.1.0\\src\\functions.typ:6:12\n\n//Actual Path: \nC:\\Users\\*MY-USER*\\AppData\\Local\\typst/packages\\local/test-template/0.1.0\\sections\\preface\\preface.typ\n\n//Expected path: \nC:\\myproject\\test-template\\sections\\preface\\preface.typ\n```\n\n**Code:**\n```typ\n//main.typ\n#show: template.with(\n  //... prior stuff\n  before: ( //my list of files to include\n    preface: \"/sections/preface/preface.typ\",\n    acknowledgement: \"/sections/preface/acknowledgement.typ\",\n    contents: \"/sections/preface/contents.typ\",\n    readers_guide: \"/sections/preface/readers_guide.typ\",\n  ),\n)\n```\n```typ\n//template.typ\n#let template() {\n    include-files(before)\n}\n```\n```typ\n//functions.typ\n#let include-files(file-list) = {\n  let files = file-list.values()\n\n  for file in files {\n    include file\n  }\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 33,
      "score": 746.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1372
    },
    {
      "id": 10318,
      "post_number": 2,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-03-27T13:41:42.223Z",
      "updated_at": "2025-03-27T13:41:42.223Z",
      "cooked": "<p>You don’t need <code>include-files</code> function as it’s a simple oneliner:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let files = (\"a.typ\", \"b.typ\", \"c.typ\")\n#files.map(x =&gt; include x).join()\n</code></pre>\n<p>This is actually a pattern that works something like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#for item in items [#item content]\n// is\n#items.map(item =&gt; [#item content]).join()\n</code></pre>\n<p><code>for</code> loop joins the result of its block execution iterations.</p>\n<p>Also, I don’t see the point in making <code>before</code> a <code>dictionary</code> over <code>array</code>.</p>\n<hr>\n<p>I don’t understand the error as some context was stripped away. What is the root directory of the project during compilation?</p>\n<p>This works fine for me:</p>\n<pre><code class=\"lang-plaintext\">local/test-template/0.1.0/\n├── sections\n│   └── preface\n│       ├── acknowledgement.typ\n│       ├── contents.typ\n│       ├── preface.typ\n│       └── readers_guide.typ\n└── src\n    ├── main.typ\n    └── template.typ\n</code></pre>\n<br>\n<pre data-code-wrap=\"sh\"><code class=\"lang-sh\">typst c --root . src/main.typ\n</code></pre>\n<p><a href=\"https://mega.nz/file/KQAyFJBK#66saFVRmRAxSaDuWMPA8IP6_XjGWkIrX50JX6cLD2K0\" rel=\"noopener nofollow ugc\">test-template.zip</a></p>",
      "raw": "You don't need `include-files` function as it's a simple oneliner:\n\n```typ\n#let files = (\"a.typ\", \"b.typ\", \"c.typ\")\n#files.map(x => include x).join()\n```\n\nThis is actually a pattern that works something like this:\n\n```typ\n#for item in items [#item content]\n// is\n#items.map(item => [#item content]).join()\n```\n\n`for` loop joins the result of its block execution iterations.\n\nAlso, I don't see the point in making `before` a `dictionary` over `array`.\n\n---\n\nI don't understand the error as some context was stripped away. What is the root directory of the project during compilation?\n\nThis works fine for me:\n\n```text\nlocal/test-template/0.1.0/\n├── sections\n│   └── preface\n│       ├── acknowledgement.typ\n│       ├── contents.typ\n│       ├── preface.typ\n│       └── readers_guide.typ\n└── src\n    ├── main.typ\n    └── template.typ\n```\n\n<br>\n\n```sh\ntypst c --root . src/main.typ\n```\n\n[test-template.zip](https://mega.nz/file/KQAyFJBK#66saFVRmRAxSaDuWMPA8IP6_XjGWkIrX50JX6cLD2K0)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 30,
      "score": 46.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 10328,
      "post_number": 3,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-03-27T15:06:09.404Z",
      "updated_at": "2025-03-27T15:11:28.871Z",
      "cooked": "<p>File paths such as <code>/sections/preface/preface.typ\"</code> are always relative to where they are used:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// a.typ\n#let my-include(path) = include path\n\n// b.typ\n#import \"@local/test-template:0.1.0\": my-include\n\n#include \"foo.typ\"      // relative to b.typ\n#my-include(\"foo.typ\") // relative to a.typ\n</code></pre>\n<p>in your case, that means your (absolute) paths would be relative to (the package containing) <code>functions.typ</code>. The way around this is to not pass paths, but content to your template:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">  before: ( //my list of files to include\n    preface: include \"/sections/preface/preface.typ\",\n    acknowledgement: include \"/sections/preface/acknowledgement.typ\",\n    contents: include \"/sections/preface/contents.typ\",\n    readers_guide: include \"/sections/preface/readers_guide.typ\",\n  ),\n</code></pre>\n<p>Eventually, there should be a distinct path type that lets you pass paths to other places, while retaining what they’re relative to, but this doesn’t exist yet. You can read more on the topic here:</p>\n<aside class=\"quote quote-modified\" data-post=\"1\" data-topic=\"306\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/l/0A3649/48.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/why-are-paths-always-relative-to-the-current-file/306\">Why are paths always relative to the current file?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    Context: I was trying to implement a small function that reads and parses a file with some regex. The function just takes the path to the file and returns the parsed context as dictionary. I wanted to move this function into a package. \n/somewhere/else/lib.typ \n#let parse-xyz(path) = {\n    let data = read(path)\n    …\n}\n\nmain.typ \n#let values = import-xyz(\"my/path.xyz\");\n\nAfter that I found out that the read call resolves the path relative to the file that contains the function (lib.typ) and not …\n  </blockquote>\n</aside>\n",
      "raw": "File paths such as `/sections/preface/preface.typ\"` are always relative to where they are used:\n\n```typ\n// a.typ\n#let my-include(path) = include path\n\n// b.typ\n#import \"@local/test-template:0.1.0\": my-include\n\n#include \"foo.typ\"      // relative to b.typ\n#my-include(\"foo.typ\") // relative to a.typ\n```\n\nin your case, that means your (absolute) paths would be relative to (the package containing) `functions.typ`. The way around this is to not pass paths, but content to your template:\n```typc\n  before: ( //my list of files to include\n    preface: include \"/sections/preface/preface.typ\",\n    acknowledgement: include \"/sections/preface/acknowledgement.typ\",\n    contents: include \"/sections/preface/contents.typ\",\n    readers_guide: include \"/sections/preface/readers_guide.typ\",\n  ),\n```\n\nEventually, there should be a distinct path type that lets you pass paths to other places, while retaining what they're relative to, but this doesn't exist yet. You can read more on the topic here:\n\nhttps://forum.typst.app/t/why-are-paths-always-relative-to-the-current-file/306?u=sillyfreak",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 4,
      "reads": 30,
      "score": 126.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:49:54.997602"
}