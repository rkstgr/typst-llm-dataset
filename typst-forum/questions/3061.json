{
  "topic_metadata": {
    "id": 3061,
    "title": "How to justify long paragraphs only?",
    "slug": "how-to-justify-long-paragraphs-only",
    "posts_count": 4,
    "created_at": "2025-03-01T09:14:14.321Z",
    "last_posted_at": "2025-03-01T19:53:37.859Z",
    "views": 102,
    "like_count": 4,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Eric",
    "tags": [
      "layout",
      "text-formatting"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 301
  },
  "posts": [
    {
      "id": 9239,
      "post_number": 1,
      "username": "Jarko",
      "name": "Jarko",
      "created_at": "2025-03-01T09:14:14.386Z",
      "updated_at": "2025-03-09T10:42:56.058Z",
      "cooked": "<p>How can I create a <span class=\"hashtag-raw\">#set</span> or <span class=\"hashtag-raw\">#show</span> rule to only justify long paragraphs?</p>\n<p>This could be based on the number of words or characters or lines.</p>\n<p>I have tried something like this, but nothing gets justified:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show par: it =&gt; context if measure(it).width &gt; 5000pt {\nset par(justify: true)\n  it\n} else {\n  it\n} \n#lorem(50)\n#lorem(100)\n#lorem(200)\n#lorem(300)\n</code></pre>",
      "raw": "How can I create a #set or #show rule to only justify long paragraphs?\n\nThis could be based on the number of words or characters or lines.\n\nI have tried something like this, but nothing gets justified:\n\n```typ \n#show par: it => context if measure(it).width > 5000pt {\nset par(justify: true)\n  it\n} else {\n  it\n} \n#lorem(50)\n#lorem(100)\n#lorem(200)\n#lorem(300)\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 201.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1287
    },
    {
      "id": 9262,
      "post_number": 2,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-03-01T11:58:06.411Z",
      "updated_at": "2025-03-01T11:58:06.411Z",
      "cooked": "<p>Hmm, interesting. The code snippet you provided works for typst v.0.12, but v.0.13 changed how paragraphs work and for some reason this doesn’t work. I’m not 100% sure, but I think this is a bug (as e.g. changing <code>set par(justify: true)</code> → <code>set text(fill: blue)</code> produces the intended behavior)</p>\n<p>There is an unoptimal workaround, where you wrap the baragraph body in a <code>block</code> element:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show par: it =&gt; context if measure(it).width &gt; 5000pt {\n  set par(justify: true)\n  block[\n    #it.body\n  ]\n} else {\n  it\n}\n</code></pre>\n<p>Which works, but gets rid of paragraphs stylings for long paragraphs (e.g. <code>first-line-indent</code>s).</p>\n<p>Maybe somebody more knowledgeable can chime in with their thoughts</p>",
      "raw": "Hmm, interesting. The code snippet you provided works for typst v.0.12, but v.0.13 changed how paragraphs work and for some reason this doesn't work. I'm not 100% sure, but I think this is a bug (as e.g. changing `set par(justify: true)` -> `set text(fill: blue)` produces the intended behavior)\n\nThere is an unoptimal workaround, where you wrap the baragraph body in a `block` element:\n\n```typst\n#show par: it => context if measure(it).width > 5000pt {\n  set par(justify: true)\n  block[\n    #it.body\n  ]\n} else {\n  it\n}\n```\n\nWhich works, but gets rid of paragraphs stylings for long paragraphs (e.g. `first-line-indent`s).\n\nMaybe somebody more knowledgeable can chime in with their thoughts",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 30,
      "score": 31.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 501
    },
    {
      "id": 9266,
      "post_number": 3,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-03-01T13:43:36.018Z",
      "updated_at": "2025-03-01T13:45:07.370Z",
      "cooked": "<p>It doesn’t work because the element (<code>it</code>) in a show rule has already “materialized”, meaning that its styles and properties have already been set in stone. Any set rules <em>for the same element</em> then aren’t applied anymore (but rules for children are, thus <code>set text(..)</code> works inside). Instead, you need to create a new justified paragraph, which you can do like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show par: it =&gt; {\n  if it.justify {\n    // Already justified, so don't try to apply the show rule again.\n    return it\n  }\n  \n  context if measure(it).width &gt; 5000pt {\n    // Create a new paragraph with the same properties, but justified.\n    let fields = it.fields()\n    let body = fields.remove(\"body\")\n    par(..fields, justify: true, body)\n  } else {\n    it\n  }\n}\n</code></pre>",
      "raw": "It doesn't work because the element (`it`) in a show rule has already \"materialized\", meaning that its styles and properties have already been set in stone. Any set rules _for the same element_ then aren't applied anymore (but rules for children are, thus `set text(..)` works inside). Instead, you need to create a new justified paragraph, which you can do like this:\n\n```typ\n#show par: it => {\n  if it.justify {\n    // Already justified, so don't try to apply the show rule again.\n    return it\n  }\n  \n  context if measure(it).width > 5000pt {\n    // Create a new paragraph with the same properties, but justified.\n    let fields = it.fields()\n    let body = fields.remove(\"body\")\n    par(..fields, justify: true, body)\n  } else {\n    it\n  }\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 26,
      "score": 80.2,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 9277,
      "post_number": 4,
      "username": "Jarko",
      "name": "Jarko",
      "created_at": "2025-03-01T19:53:37.859Z",
      "updated_at": "2025-03-01T19:53:37.859Z",
      "cooked": "<p>Much appreciated. Thank you.</p>",
      "raw": "Much appreciated. Thank you.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 4.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1287
    }
  ],
  "scraped_at": "2025-06-10T09:50:53.943290"
}