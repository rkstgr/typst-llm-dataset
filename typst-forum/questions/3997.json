{
  "topic_metadata": {
    "id": 3997,
    "title": "Why do i get an empty cell in my table if the condition is false?",
    "slug": "why-do-i-get-an-empty-cell-in-my-table-if-the-condition-is-false",
    "posts_count": 5,
    "created_at": "2025-05-08T23:48:30.054Z",
    "last_posted_at": "2025-05-09T00:36:44.149Z",
    "views": 55,
    "like_count": 2,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "PgBiel",
    "tags": [
      "scripting",
      "tables"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 669
  },
  "posts": [
    {
      "id": 12145,
      "post_number": 1,
      "username": "redjonzaci",
      "name": "Redjon Zaci",
      "created_at": "2025-05-08T23:48:30.152Z",
      "updated_at": "2025-05-09T00:15:36.449Z",
      "cooked": "<p>the below conditions are inside a table:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">    ..#if data.carrierInfo.tableInfo.len() &gt; 4 {\n      (\n      table.cell(x: 6, colspan: 1, rowspan: 5, align: center + horizon)[\n        *SEE SUPPLEMENT TO THE BILL OF LADING*\n      ],\n        []\n      )\n    },\n    ..#if data.carrierInfo.tableInfo.len() &lt;= 4 {\n      data.carrierInfo.tableInfo.map(row =&gt; row.pairs().filter(pair =&gt; pair.at(0) != \"bolPreview\").map(pair =&gt; pair.at(1))).flatten().map(value =&gt; [#value])\n    },\n</code></pre>\n<p>i first had the first condition as follows:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">    ..#if data.carrierInfo.tableInfo.len() &gt; 4 {\n      table.cell(x: 6, colspan: 1, rowspan: 5, align: center + horizon)[\n        *SEE SUPPLEMENT TO THE BILL OF LADING*\n      ],\n    },\n</code></pre>\n<p>when it was like above, i would get an empty first cell in my table, even though the condition was false.</p>\n<p>when i changed the first condition to be like below, i didn’t get the empty first cell anymore:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">    ..#if data.carrierInfo.tableInfo.len() &gt; 4 {\n      (\n        table.cell(x: 6, colspan: 1, rowspan: 5, align: center + horizon)[\n          *SEE SUPPLEMENT TO THE BILL OF LADING*\n        ],\n        []\n      )\n    },\n</code></pre>\n<p>why do you think the way it was didn’t work and why it works when i return a sequence?</p>",
      "raw": "the below conditions are inside a table:\n\n```typ\n    ..#if data.carrierInfo.tableInfo.len() > 4 {\n      (\n      table.cell(x: 6, colspan: 1, rowspan: 5, align: center + horizon)[\n        *SEE SUPPLEMENT TO THE BILL OF LADING*\n      ],\n        []\n      )\n    },\n    ..#if data.carrierInfo.tableInfo.len() <= 4 {\n      data.carrierInfo.tableInfo.map(row => row.pairs().filter(pair => pair.at(0) != \"bolPreview\").map(pair => pair.at(1))).flatten().map(value => [#value])\n    },\n```\n\ni first had the first condition as follows:\n\n```typ\n    ..#if data.carrierInfo.tableInfo.len() > 4 {\n      table.cell(x: 6, colspan: 1, rowspan: 5, align: center + horizon)[\n        *SEE SUPPLEMENT TO THE BILL OF LADING*\n      ],\n    },\n```\n\nwhen it was like above, i would get an empty first cell in my table, even though the condition was false.\n\nwhen i changed the first condition to be like below, i didn't get the empty first cell anymore:\n\n```typ\n    ..#if data.carrierInfo.tableInfo.len() > 4 {\n      (\n        table.cell(x: 6, colspan: 1, rowspan: 5, align: center + horizon)[\n          *SEE SUPPLEMENT TO THE BILL OF LADING*\n        ],\n        []\n      )\n    },\n```\n\nwhy do you think the way it was didn't work and why it works when i return a sequence?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 13,
      "score": 187.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1570
    },
    {
      "id": 12147,
      "post_number": 2,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-05-09T00:15:21.108Z",
      "updated_at": "2025-05-09T00:15:21.108Z",
      "cooked": "<p>Your example doesn’t compile for me:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">Error: cannot spread content\n   ╭─[/main.typ:9:3]\n   │\n 9 │   ..if true { table.cell[Hello!] }\n───╯\n</code></pre>\n<p>Which leads me to suspect that you were typing <code>if condition { cell }</code> without the spread operator before <code>if</code> (the two dots <code>..</code>).</p>\n<p>Note that:</p>\n<ul>\n<li><code>if condition { body }</code>, without an <code>else</code>, is a shorthand for <code>if condition { body } else { none }</code>. This means that, when the condition failed, it’d insert <code>none</code> into the table, which is equivalent to an empty cell.</li>\n<li><code>..args</code>, where <code>args</code> is an array (positional) or dictionary (named arguments), is <strong>the only way to pass a variable amount of arguments</strong> to a function. That is, if you want to pass 0 or 1 arguments depending on a condition (your case), or any amount of arguments unknown until the code is run, you must use an array like you are doing.\n<ul>\n<li>This is because the spread operator <code>..</code> simply passes all values in the array as arguments. If the array is empty, nothing is passed:<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">func(..(1, 2, 3)) == func(1, 2, 3)\nfunc(..()) == func(..none) = func()\n</code></pre>\n</li>\n</ul>\n</li>\n<li>Remember that your <code>..if condition { body }</code> is a shorthand for <code>..if condition { body } else { none }</code>, so when your condition is successful, it will expand the array returned by <code>body</code> into table cell arguments, but when the condition fails, it will be <code>..none</code> which is itself a shorthand for <code>..()</code>, i.e. don’t pass any additional arguments. That’s why your new version works.</li>\n<li>So, the old version did not work as it did not use the spread operator, and would instead attempt to add a <code>none</code> cell.</li>\n</ul>\n<p>If you want to read more about this, this documentation page talks about it: <a href=\"https://typst.app/docs/reference/foundations/arguments/\" class=\"inline-onebox\">Arguments Type – Typst Documentation</a></p>",
      "raw": "Your example doesn't compile for me:\n\n```typ\nError: cannot spread content\n   ╭─[/main.typ:9:3]\n   │\n 9 │   ..if true { table.cell[Hello!] }\n───╯\n```\n\nWhich leads me to suspect that you were typing `if condition { cell }` without the spread operator before `if` (the two dots `..`).\n\nNote that:\n- `if condition { body }`, without an `else`, is a shorthand for `if condition { body } else { none }`. This means that, when the condition failed, it'd insert `none` into the table, which is equivalent to an empty cell.\n- `..args`, where `args` is an array (positional) or dictionary (named arguments), is **the only way to pass a variable amount of arguments** to a function. That is, if you want to pass 0 or 1 arguments depending on a condition (your case), or any amount of arguments unknown until the code is run, you must use an array like you are doing.\n   - This is because the spread operator `..` simply passes all values in the array as arguments. If the array is empty, nothing is passed:\n     ```typc\n     func(..(1, 2, 3)) == func(1, 2, 3)\n     func(..()) == func(..none) = func()\n     ```\n- Remember that your `..if condition { body }` is a shorthand for `..if condition { body } else { none }`, so when your condition is successful, it will expand the array returned by `body` into table cell arguments, but when the condition fails, it will be `..none` which is itself a shorthand for `..()`, i.e. don't pass any additional arguments. That's why your new version works.\n- So, the old version did not work as it did not use the spread operator, and would instead attempt to add a `none` cell.\n\nIf you want to read more about this, this documentation page talks about it: https://typst.app/docs/reference/foundations/arguments/",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 13,
      "score": 2.6,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 12148,
      "post_number": 3,
      "username": "redjonzaci",
      "name": "Redjon Zaci",
      "created_at": "2025-05-09T00:20:58.567Z",
      "updated_at": "2025-05-09T00:20:58.567Z",
      "cooked": "<p>you’re right in what you suspected, sorry about that!<br>\nand thanks a lot, i’ve got so much to learn about Typst!</p>",
      "raw": "you're right in what you suspected, sorry about that!\nand thanks a lot, i've got so much to learn about Typst!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 12,
      "score": 47.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1570
    },
    {
      "id": 12150,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-09T00:27:46.547Z",
      "updated_at": "2025-05-09T00:36:28.139Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"redjonzaci\" data-post=\"1\" data-topic=\"3997\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/r/F7602B/48.png\" class=\"avatar\"> redjonzaci:</div>\n<blockquote>\n<p>the below conditions are inside a table</p>\n</blockquote>\n</aside>\n<p>If <code>..</code> is a spread operator, then you can’t use raw <code>#</code> in code mode, it just won’t compile.</p>\n<p>The example indeed does not compile, for the above reason, and because the column number is not known. Default in 1 and <code>x: 6</code> is invalid for it. You also don’t show how <code>data</code> is defined. It just so happen that I recognize this data structure from <a href=\"https://forum.typst.app/t/how-do-i-make-a-cells-colspan-depend-on-the-column-title-in-my-data/3993\" class=\"inline-onebox\">How do i make a cell's colspan depend on the column title (in my data)?</a>. Otherwise, we can only pretend that it’s <code>#let data = (carrierInfo: (tableInfo: range(5)))</code>, which will still fail for the last complex function chaining.</p>",
      "raw": "[quote=\"redjonzaci, post:1, topic:3997\"]\nthe below conditions are inside a table\n[/quote]\n\nIf `..` is a spread operator, then you can't use raw `#` in code mode, it just won't compile.\n\nThe example indeed does not compile, for the above reason, and because the column number is not known. Default in 1 and `x: 6` is invalid for it. You also don't show how `data` is defined. It just so happen that I recognize this data structure from https://forum.typst.app/t/how-do-i-make-a-cells-colspan-depend-on-the-column-title-in-my-data/3993. Otherwise, we can only pretend that it's `#let data = (carrierInfo: (tableInfo: range(5)))`, which will still fail for the last complex function chaining.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 13,
      "score": 2.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12152,
      "post_number": 5,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-09T00:36:44.149Z",
      "updated_at": "2025-05-09T00:36:44.149Z",
      "cooked": "<p>For the chaining, you can make it more readable by destructuring the pair:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">    data\n      .carrierInfo\n      .tableInfo\n      .map(row =&gt; row\n        .pairs()\n        .filter(((key, _)) =&gt; key != \"bolPreview\")\n        .map(((_, value)) =&gt; value))\n      .flatten()\n      .map(value =&gt; [#value])\n</code></pre>\n<p>Or even shorter:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">    data\n      .carrierInfo\n      .tableInfo\n      .map(row =&gt; row\n        .pairs()\n        .filter(((key, _)) =&gt; key != \"bolPreview\")\n        .map(((_, value)) =&gt; [#value]))\n      .flatten()\n</code></pre>",
      "raw": "For the chaining, you can make it more readable by destructuring the pair:\n\n```typc\n    data\n      .carrierInfo\n      .tableInfo\n      .map(row => row\n        .pairs()\n        .filter(((key, _)) => key != \"bolPreview\")\n        .map(((_, value)) => value))\n      .flatten()\n      .map(value => [#value])\n```\n\nOr even shorter:\n\n```typc\n    data\n      .carrierInfo\n      .tableInfo\n      .map(row => row\n        .pairs()\n        .filter(((key, _)) => key != \"bolPreview\")\n        .map(((_, value)) => [#value]))\n      .flatten()\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 13,
      "score": 17.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:48:09.716914"
}