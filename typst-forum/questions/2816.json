{
  "topic_metadata": {
    "id": 2816,
    "title": "How to always have a multiple of four as the number of pages",
    "slug": "how-to-always-have-a-multiple-of-four-as-the-number-of-pages",
    "posts_count": 5,
    "created_at": "2025-02-13T23:05:22.248Z",
    "last_posted_at": "2025-02-15T14:14:41.557Z",
    "views": 109,
    "like_count": 4,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "Eric",
    "tags": [
      "scripting",
      "layout"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 704
  },
  "posts": [
    {
      "id": 8639,
      "post_number": 1,
      "username": "naeya",
      "name": "naeya",
      "created_at": "2025-02-13T23:05:22.420Z",
      "updated_at": "2025-02-13T23:05:22.420Z",
      "cooked": "<p>Hi,<br>\nI’m trying to add blank pages at the end of my document so that the final number of pages always is a multiple of four (I’m making a template to print booklets), and I have a weird issue.<br>\nI tried doing the following:</p>\n<pre><code class=\"lang-auto\">#let template(\n  doc,\n) = {\n  set page(numbering: \"1\")\n\n  doc\n\n  context {\n    let num = counter(page).get().first()\n    while calc.rem(num, 4) != 0 {\n      page()[]\n      num += 1\n    }\n  }\n}\n\n#show: template\n\n#lorem(1000)\n</code></pre>\n<p>It is not working and give weird results. But by trying different things in order to understand  the issue, I realized that adding some content in the context before the loop makes it behave as expected (but with unwanted content added). For example:</p>\n<pre><code class=\"lang-auto\"> #let template(\n  doc,\n) = {\n  set page(numbering: \"1\")\n\n  doc\n\n  context {\n    [some content]\n    let num = counter(page).get().first()\n    while calc.rem(num, 4) != 0 {\n      page()[]\n      num += 1\n    }\n  }\n}\n\n#show: template\n\n#lorem(1000)\n</code></pre>\n<p>I don’t understand the issue here, could someone try to explain it to me ? Am I doing this the wrong way ?<br>\nThanks !</p>",
      "raw": "Hi,\nI'm trying to add blank pages at the end of my document so that the final number of pages always is a multiple of four (I'm making a template to print booklets), and I have a weird issue.\nI tried doing the following:\n```\n#let template(\n  doc,\n) = {\n  set page(numbering: \"1\")\n\n  doc\n\n  context {\n    let num = counter(page).get().first()\n    while calc.rem(num, 4) != 0 {\n      page()[]\n      num += 1\n    }\n  }\n}\n\n#show: template\n\n#lorem(1000)\n```\nIt is not working and give weird results. But by trying different things in order to understand  the issue, I realized that adding some content in the context before the loop makes it behave as expected (but with unwanted content added). For example:\n```\n #let template(\n  doc,\n) = {\n  set page(numbering: \"1\")\n\n  doc\n\n  context {\n    [some content]\n    let num = counter(page).get().first()\n    while calc.rem(num, 4) != 0 {\n      page()[]\n      num += 1\n    }\n  }\n}\n\n#show: template\n\n#lorem(1000)\n```\nI don't understand the issue here, could someone try to explain it to me ? Am I doing this the wrong way ?\nThanks !",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 28,
      "score": 65.6,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1193
    },
    {
      "id": 8644,
      "post_number": 2,
      "username": "Electron_Wizard",
      "name": "Electron Wizard",
      "created_at": "2025-02-14T09:00:33.327Z",
      "updated_at": "2025-02-14T09:00:33.327Z",
      "cooked": "<p>Hello,</p>\n<p>Good question and I’m not sure why it wouldn’t work without the content. The web app sometimes paniced, sometimes it didn’t. What you can do is use states:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">\n#let multiple-of = 4\n#let rest-pages = state(\"rest-pages\", 0)\n\n#context {\n  let num = here().position().page\n  let rem = calc.rem(num, multiple-of)\n  if rem != 0 {\n    rest-pages.update(multiple-of - rem)\n  }\n}\n\n#context[\n  #for i in range(rest-pages.final()) [ // or .get() also works\n    #pagebreak()\n  ]\n]\n</code></pre>\n<p>The issue is, that your provided code seems to panic with a <em>could not converge after 5 attempts</em>, meaning the document couldn’t be completed or “reach a stable state”, since probably new pages were added continuously with no sign of stopping.</p>\n<p>I was able to solve it by separating the rest page calculations and the empty page insertion into their own <code>#context</code>. This way the amount of pages is calculated first, and then the pages are inserted.</p>\n<p>It doesn’t look very nice and there are probably cleaner ways, but this works. Hope this helps.</p>",
      "raw": "Hello,\n\nGood question and I'm not sure why it wouldn't work without the content. The web app sometimes paniced, sometimes it didn't. What you can do is use states:\n\n```typst\n\n#let multiple-of = 4\n#let rest-pages = state(\"rest-pages\", 0)\n\n#context {\n  let num = here().position().page\n  let rem = calc.rem(num, multiple-of)\n  if rem != 0 {\n    rest-pages.update(multiple-of - rem)\n  }\n}\n\n#context[\n  #for i in range(rest-pages.final()) [ // or .get() also works\n    #pagebreak()\n  ]\n]\n```\n\nThe issue is, that your provided code seems to panic with a _could not converge after 5 attempts_, meaning the document couldn't be completed or \"reach a stable state\", since probably new pages were added continuously with no sign of stopping.\n\nI was able to solve it by separating the rest page calculations and the empty page insertion into their own `#context`. This way the amount of pages is calculated first, and then the pages are inserted.\n\nIt doesn't look very nice and there are probably cleaner ways, but this works. Hope this helps.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 26,
      "score": 5.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 997
    },
    {
      "id": 8657,
      "post_number": 3,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-02-14T12:24:39.816Z",
      "updated_at": "2025-02-14T12:24:39.816Z",
      "cooked": "<p>I think the reason why this happens is because, for some reason, the <code>context</code> block gets placed at the top of the new page, if one gets created. The solution by <a class=\"mention\" href=\"/u/electron_wizard\">@Electron_Wizard</a> provides a good answer, but if you want a solution that avoids using states you can place some <code>metadata</code> in the document (which is not visible), and run your page number calculations relative to the location of said <code>metadata</code>, like so:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let template(\n  doc,\n) = {\n  set page(numbering: \"1\")\n\n  doc\n  \n  [#metadata(\"document end\")&lt;end&gt;]\n  \n  context {\n    let num = counter(page).at(label(\"end\")).first()\n    for _ in range(4 - num) {\n      page[]\n    }\n  }\n}\n</code></pre>",
      "raw": "I think the reason why this happens is because, for some reason, the `context` block gets placed at the top of the new page, if one gets created. The solution by @Electron_Wizard provides a good answer, but if you want a solution that avoids using states you can place some `metadata` in the document (which is not visible), and run your page number calculations relative to the location of said `metadata`, like so:\n```typst\n#let template(\n  doc,\n) = {\n  set page(numbering: \"1\")\n\n  doc\n  \n  [#metadata(\"document end\")<end>]\n  \n  context {\n    let num = counter(page).at(label(\"end\")).first()\n    for _ in range(4 - num) {\n      page[]\n    }\n  }\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 27,
      "score": 20.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 501
    },
    {
      "id": 8681,
      "post_number": 4,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-02-14T17:30:38.707Z",
      "updated_at": "2025-02-14T17:31:11.491Z",
      "cooked": "<p>The location in a context block is associated with the first element inside it. This usually makes sense, because when doing something like</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">Hello #context rect[#here().position()]\n</code></pre>\n<p>you don’t want the position to be the one right after “Hello”, but instead the position of the rectangle (which is a block and therefore not on the same line).</p>\n<p>In the case here, the first element of the context block is a new page, and the position of the new page is naturally on that page, thus the counter in the original post is off by one. You could probably solve this simply by subtracting one from <code>num</code> initially so that the off-by-one error is compensated, but the other solutions given should also do the trick.</p>\n<hr>\n<p>Two notes on the solution given by <a class=\"mention\" href=\"/u/aarnent\">@aarnent</a>:</p>\n<ul>\n<li>\n<p>The metadata isn’t actually necessary, as it’s enough to just label an empty content block like <code>[#[] &lt;end&gt;]</code></p>\n</li>\n<li>\n<p>The for loop only works like that for documents with up to 4 pages. To fix that, either use a while loop as in the original post, or do some modulus calculation as in</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">for _ in range(calc.rem-euclid(4 - num, 4)) { .. }\n</code></pre>\n</li>\n</ul>",
      "raw": "The location in a context block is associated with the first element inside it. This usually makes sense, because when doing something like\n```typ\nHello #context rect[#here().position()]\n```\nyou don't want the position to be the one right after \"Hello\", but instead the position of the rectangle (which is a block and therefore not on the same line).\n\nIn the case here, the first element of the context block is a new page, and the position of the new page is naturally on that page, thus the counter in the original post is off by one. You could probably solve this simply by subtracting one from `num` initially so that the off-by-one error is compensated, but the other solutions given should also do the trick.\n\n---\n\nTwo notes on the solution given by @aarnent:\n- The metadata isn't actually necessary, as it's enough to just label an empty content block like `[#[] <end>]`\n\n- The for loop only works like that for documents with up to 4 pages. To fix that, either use a while loop as in the original post, or do some modulus calculation as in\n  ```typc\n  for _ in range(calc.rem-euclid(4 - num, 4)) { .. }\n  ```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 23,
      "score": 49.6,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 8710,
      "post_number": 5,
      "username": "naeya",
      "name": "naeya",
      "created_at": "2025-02-15T14:14:41.557Z",
      "updated_at": "2025-02-15T14:14:41.557Z",
      "cooked": "<p>Thanks for all those replies ! I ended up with :</p>\n<pre><code class=\"lang-auto\">  [#[] &lt;end&gt;]\n  context {\n    let num = counter(page).at(label(\"end\")).first()\n    for _ in range(calc.rem-euclid(4 - num, 4)) {\n      page[]\n    }\n  }\n</code></pre>\n<p>Which seems to work. <img src=\"https://forum.typst.app/images/emoji/apple/blush.png?v=12\" title=\":blush:\" class=\"emoji\" alt=\":blush:\" loading=\"lazy\" width=\"20\" height=\"20\"><br>\nI don’t know which answer to mark as solution, so I’ll mark the last one.<br>\nThanks again to everyone !</p>",
      "raw": "Thanks for all those replies ! I ended up with :\n```\n  [#[] <end>]\n  context {\n    let num = counter(page).at(label(\"end\")).first()\n    for _ in range(calc.rem-euclid(4 - num, 4)) {\n      page[]\n    }\n  }\n```\nWhich seems to work. :blush:\nI don't know which answer to mark as solution, so I'll mark the last one.\nThanks again to everyone !",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 20,
      "score": 44.0,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1193
    }
  ],
  "scraped_at": "2025-06-10T09:51:40.008533"
}