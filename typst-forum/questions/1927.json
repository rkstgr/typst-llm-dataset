{
  "topic_metadata": {
    "id": 1927,
    "title": "How to detect local heading level in separate context blocks?",
    "slug": "how-to-detect-local-heading-level-in-separate-context-blocks",
    "posts_count": 4,
    "created_at": "2024-11-29T08:36:10.078Z",
    "last_posted_at": "2024-12-10T15:57:30.811Z",
    "views": 164,
    "like_count": 3,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "flokl",
    "tags": [
      "scripting",
      "context",
      "introspection"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 632
  },
  "posts": [
    {
      "id": 6199,
      "post_number": 1,
      "username": "Simon_Schneider",
      "name": "Simon  Schneider",
      "created_at": "2024-11-29T08:36:10.186Z",
      "updated_at": "2024-12-15T10:29:20.602Z",
      "cooked": "<p>I would like to create templates that add headings along with some other content to the document. It would be nice if I would not have to specify the heading level repeatedly and just have the template detect it itself.<br>\nFor this I have created a function that uses context to determine the heading level of the most recent heading level.</p>\n<pre><code class=\"lang-auto\">#let get_local_heading_level(increment: 0) = {\n  let headings = query(selector(heading).before(here()))\n  if headings.len() &gt; 0 {\n    let most_recent_heading = headings.last()\n    return headings.last().level + increment\n  }\n  return 1 + increment\n}\n</code></pre>\n<p>This works well, if all the calls are within one context block. Unfortunately, if the calls to the function are in separate context block it works for three headings and then suddenly starts applying wrong heading levels. E.g heading 2.5 and 2.6 are shown as heading 4.</p>\n<pre><code class=\"lang-auto\">#set heading(numbering: \"1.\")\n\n// this works\n#heading([Heading 1], level: 1)\n#heading([Heading 1.1], level: 2)\n#context [\n  #heading([Heading 1.2], level: get_local_heading_level())\n  #heading([Heading 1.3], level: get_local_heading_level())\n  #heading([Heading 1.4], level: get_local_heading_level())\n  #heading([Heading 1.5], level: get_local_heading_level())\n  #heading([Heading 1.6], level: get_local_heading_level())\n]\n\n// this doesn't work\n#heading([Heading 2], level: 1)\n#heading([Heading 2.1], level: 2)\n#context [ #heading([Heading 2.2], level: get_local_heading_level())]\n#context [ #heading([Heading 2.3], level: get_local_heading_level())]\n#context [ #heading([Heading 2.4], level: get_local_heading_level())]\n#context [ #heading([Heading 2.5], level: get_local_heading_level())] // generates: 4. Heading 2.5\n#context [ #heading([Heading 2.6], level: get_local_heading_level())] // generates: 4. Heading 2.6\n</code></pre>\n<p>Does anyone have an idea what the issue with the second example is?</p>\n<p>Using the single context example is a fallback option, but since I am trying to create templates for my coworkers, I’d like to keep them as simple to use as possible.</p>",
      "raw": "I would like to create templates that add headings along with some other content to the document. It would be nice if I would not have to specify the heading level repeatedly and just have the template detect it itself.\nFor this I have created a function that uses context to determine the heading level of the most recent heading level.\n```\n#let get_local_heading_level(increment: 0) = {\n  let headings = query(selector(heading).before(here()))\n  if headings.len() > 0 {\n    let most_recent_heading = headings.last()\n    return headings.last().level + increment\n  }\n  return 1 + increment\n}\n```\nThis works well, if all the calls are within one context block. Unfortunately, if the calls to the function are in separate context block it works for three headings and then suddenly starts applying wrong heading levels. E.g heading 2.5 and 2.6 are shown as heading 4.\n```\n#set heading(numbering: \"1.\")\n\n// this works\n#heading([Heading 1], level: 1)\n#heading([Heading 1.1], level: 2)\n#context [\n  #heading([Heading 1.2], level: get_local_heading_level())\n  #heading([Heading 1.3], level: get_local_heading_level())\n  #heading([Heading 1.4], level: get_local_heading_level())\n  #heading([Heading 1.5], level: get_local_heading_level())\n  #heading([Heading 1.6], level: get_local_heading_level())\n]\n\n// this doesn't work\n#heading([Heading 2], level: 1)\n#heading([Heading 2.1], level: 2)\n#context [ #heading([Heading 2.2], level: get_local_heading_level())]\n#context [ #heading([Heading 2.3], level: get_local_heading_level())]\n#context [ #heading([Heading 2.4], level: get_local_heading_level())]\n#context [ #heading([Heading 2.5], level: get_local_heading_level())] // generates: 4. Heading 2.5\n#context [ #heading([Heading 2.6], level: get_local_heading_level())] // generates: 4. Heading 2.6\n```\nDoes anyone have an idea what the issue with the second example is?\n\nUsing the single context example is a fallback option, but since I am trying to create templates for my coworkers, I'd like to keep them as simple to use as possible.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 40,
      "score": 438.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 871
    },
    {
      "id": 6205,
      "post_number": 2,
      "username": "flokl",
      "name": "",
      "created_at": "2024-11-29T18:23:06.026Z",
      "updated_at": "2024-11-29T18:26:42.509Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/simon_schneider\">@Simon_Schneider</a>,</p>\n<p>your attempt is a bit problematic. The heading levels are wrong because the compiler is not able to compile your document and show the warning “Layout did not converge”.<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/6/698407bcf80f63c155a353ec0ec5648f96eb2d5d.png\" alt=\"image\" data-base62-sha1=\"f3r0ubTO78vTQrhL29DG8uCypyJ\" width=\"288\" height=\"121\"></p>\n<p>This happens because your contextual <code>get_local_heading_level</code> calls depend on the previous ones. Essentially, your document compiles once, then a second time to resolve the big <code>context</code> block, then the second <code>context</code> call for <code>Heading 2.2</code> depends on the first, and so on.<br>\nYour example works up to <code>Heading 2.4</code> because Typst allows up to 5 iterations. I hope my explanation makes sense, for more information see the documentation about <a href=\"https://typst.app/docs/reference/context/\">context</a>, <a href=\"https://typst.app/docs/reference/context/#compiler-iterations\">context iterations</a> and feel free to ask follow up questions.</p>\n<p>Here is my attempt to implement a working version using <a href=\"https://typst.app/docs/reference/introspection/metadata/\">metadata</a>.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#set heading(numbering: \"1.a\")\n\n#let auto-heading(text) = [#metadata(text) &lt;auto-heading&gt;]\n#show &lt;auto-heading&gt;: meta =&gt; {\n  let prev-heading = query(selector(heading).before(meta.location())).last()\n  heading(level: prev-heading.level, meta.value) \n}\n\n= Heading 1\n\n#lorem(10)\n\n#auto-heading[Heading 2]\n\n#lorem(10)\n\n== Heading 2.1\n\n#lorem(10)\n\n#auto-heading[Heading 2.2]\n\n#lorem(10)\n\n= Heading 3\n#auto-heading[Heading 4]\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/b/b6396d4f9363cb830452a5e8981667058ba388c7.png\" alt=\"test\" data-base62-sha1=\"q01W3usl3bIgezcGzMeRpZT3Nav\" width=\"305\" height=\"232\"></p>\n</details>",
      "raw": "Hi @Simon_Schneider,\n\nyour attempt is a bit problematic. The heading levels are wrong because the compiler is not able to compile your document and show the warning \"Layout did not converge\". \n![image|288x121](upload://f3r0ubTO78vTQrhL29DG8uCypyJ.png)\n\nThis happens because your contextual `get_local_heading_level` calls depend on the previous ones. Essentially, your document compiles once, then a second time to resolve the big `context` block, then the second `context` call for `Heading 2.2` depends on the first, and so on.\nYour example works up to `Heading 2.4` because Typst allows up to 5 iterations. I hope my explanation makes sense, for more information see the documentation about [context](https://typst.app/docs/reference/context/), [context iterations](https://typst.app/docs/reference/context/#compiler-iterations) and feel free to ask follow up questions.\n\nHere is my attempt to implement a working version using [metadata](https://typst.app/docs/reference/introspection/metadata/).\n```typst\n#set heading(numbering: \"1.a\")\n\n#let auto-heading(text) = [#metadata(text) <auto-heading>]\n#show <auto-heading>: meta => {\n  let prev-heading = query(selector(heading).before(meta.location())).last()\n  heading(level: prev-heading.level, meta.value) \n}\n\n= Heading 1\n\n#lorem(10)\n\n#auto-heading[Heading 2]\n\n#lorem(10)\n\n== Heading 2.1\n\n#lorem(10)\n\n#auto-heading[Heading 2.2]\n\n#lorem(10)\n\n= Heading 3\n#auto-heading[Heading 4]\n```\n\n[details=\"Output\"]\n![test|305x232](upload://q01W3usl3bIgezcGzMeRpZT3Nav.png)\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 36,
      "score": 37.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 8
    },
    {
      "id": 6472,
      "post_number": 3,
      "username": "Simon_Schneider",
      "name": "Simon  Schneider",
      "created_at": "2024-12-10T14:53:43.642Z",
      "updated_at": "2024-12-10T14:53:43.642Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/flokl\">@flokl</a><br>\nThank you for your explanation, it makes perfect sense.<br>\nYour example works perfectly, although I don’t really understand, how the show rule avoids the context iteration issue.<br>\nWould you mind expanding on that?</p>",
      "raw": "Hi @flokl \nThank you for your explanation, it makes perfect sense.\nYour example works perfectly, although I don't really understand, how the show rule avoids the context iteration issue.\nWould you mind expanding on that?",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 25,
      "score": 19.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 871
    },
    {
      "id": 6473,
      "post_number": 4,
      "username": "flokl",
      "name": "",
      "created_at": "2024-12-10T15:57:30.811Z",
      "updated_at": "2024-12-10T17:34:09.606Z",
      "cooked": "<p>One of the last steps of an iteration is the evaluation of the show rule. This means in this example first <strong>all</strong> <code>auto-headings</code> are replaced top to bottom with <code>metadata</code> and then the show rule gets evaluated top to bottom. At the point the show rule runs, Typst already knows the location/number of all the headings and can easily query the one before the current location.</p>\n<p>That’s how I understand it, but I can’t guarantee that it’s 100% correct.</p>",
      "raw": "One of the last steps of an iteration is the evaluation of the show rule. This means in this example first **all** `auto-headings` are replaced top to bottom with `metadata` and then the show rule gets evaluated top to bottom. At the point the show rule runs, Typst already knows the location/number of all the headings and can easily query the one before the current location. \n\nThat's how I understand it, but I can't guarantee that it's 100% correct.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 22,
      "score": 34.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 8
    }
  ],
  "scraped_at": "2025-06-10T09:54:16.810842"
}