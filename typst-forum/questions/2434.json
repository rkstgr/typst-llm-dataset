{
  "topic_metadata": {
    "id": 2434,
    "title": "Why does layout diverge with automatic theorem numbering?",
    "slug": "why-does-layout-diverge-with-automatic-theorem-numbering",
    "posts_count": 3,
    "created_at": "2025-01-16T05:44:08.835Z",
    "last_posted_at": "2025-01-17T14:02:05.584Z",
    "views": 89,
    "like_count": 0,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "quachpas",
    "tags": [
      "scripting",
      "layout",
      "introspection"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 530
  },
  "posts": [
    {
      "id": 7564,
      "post_number": 1,
      "username": "Void",
      "name": "Void",
      "created_at": "2025-01-16T05:44:09.078Z",
      "updated_at": "2025-01-17T14:01:44.227Z",
      "cooked": "<p>I am working on a library for automatic theorem numbering when I encountered some “layout did not converge within 5 attempts” issue. The minimal reproducing example is this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let section(loc) = (counter(heading).at(loc).at(0, default: 0), )\n\n#let create-theorem(thm-name, heading-provider, thm-counter, last-heading-state) = body =&gt; block[\n  #context {\n    let curr-heading = heading-provider(here())\n    if (last-heading-state.get() != curr-heading) {\n      thm-counter.update(0)\n      last-heading-state.update(curr-heading)\n    }\n  }\n  #thm-counter.step()\n  #context strong[#thm-name #numbering(\"1.\", ..(heading-provider(here()) + thm-counter.get()))]\n  #body\n]\n\n#let theorem = create-theorem(\"Theorem\", section, counter(\"theorem\"), state(\"last-heading-thm\"))\n#let corollary = create-theorem(\"Corollary\", loc =&gt; section(loc) + counter(\"theorem\").at(loc), counter(\"corollary\"), state(\"last-heading-cor\"))\n\n#set heading(numbering: \"1.\")\n= \n#theorem[]\n#theorem[]\n#corollary[]\n#corollary[]\n</code></pre>\n<p>Here, each theorem-like environment uses a heading function, a counter to number the theorems, and a state to track whether we should reset this counter.<br>\nFor example, we would expect theorems to be numbered absolutely and reset at each section as ., and corollaries to be attached to theorems, numbered as ...<br>\nHowever, once I add 2 theorems and 2 corollaries, as in this example, the layout does not converge.<br>\nI have completely no idea why this example would diverge, but here’s a few observations:</p>\n<ul>\n<li>If we change the definition of <span class=\"hashtag-raw\">#theorem</span> and <span class=\"hashtag-raw\">#corollary</span> to:</li>\n</ul>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let theorem = create-theorem(\"Theorem\", loc =&gt; (), counter(\"theorem\"), state(\"last-heading-thm\"))\n#let corollary = create-theorem(\"Corollary\", loc =&gt; counter(\"theorem\").at(loc), counter(\"corollary\"), state(\"last-heading-cor\"))\n</code></pre>\n<p>The example will then converge, so the heading counter somehow plays a role here. (But it is constant throughout the layout. How?)</p>\n<ul>\n<li>If we change the definition of <span class=\"hashtag-raw\">#corollary</span> to:</li>\n</ul>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let corollary = create-theorem(\"Corollary\", section, counter(\"corollary\"), state(\"last-heading-cor\"))\n</code></pre>\n<p>to not depend on counter(“theorem”), then it would also converge. So counter(“theorem”) somehow also plays a role here.</p>\n<ul>\n<li>If you only have 1 theorem and 2 corollaries, or 2 theorems and 1 corollary, everything converges. Only when you increase to 2 theorems and 2 corollaries does the layout diverge.</li>\n</ul>\n<p>I’d like to know why this behavior happens and how to fix it.</p>",
      "raw": "I am working on a library for automatic theorem numbering when I encountered some \"layout did not converge within 5 attempts\" issue. The minimal reproducing example is this:\n\n```typ\n#let section(loc) = (counter(heading).at(loc).at(0, default: 0), )\n\n#let create-theorem(thm-name, heading-provider, thm-counter, last-heading-state) = body => block[\n  #context {\n    let curr-heading = heading-provider(here())\n    if (last-heading-state.get() != curr-heading) {\n      thm-counter.update(0)\n      last-heading-state.update(curr-heading)\n    }\n  }\n  #thm-counter.step()\n  #context strong[#thm-name #numbering(\"1.\", ..(heading-provider(here()) + thm-counter.get()))]\n  #body\n]\n\n#let theorem = create-theorem(\"Theorem\", section, counter(\"theorem\"), state(\"last-heading-thm\"))\n#let corollary = create-theorem(\"Corollary\", loc => section(loc) + counter(\"theorem\").at(loc), counter(\"corollary\"), state(\"last-heading-cor\"))\n\n#set heading(numbering: \"1.\")\n= \n#theorem[]\n#theorem[]\n#corollary[]\n#corollary[]\n```\n\nHere, each theorem-like environment uses a heading function, a counter to number the theorems, and a state to track whether we should reset this counter. \nFor example, we would expect theorems to be numbered absolutely and reset at each section as <section-index>.<thm-index>, and corollaries to be attached to theorems, numbered as <section-index>.<thm-index>.<cor-index>. \nHowever, once I add 2 theorems and 2 corollaries, as in this example, the layout does not converge. \nI have completely no idea why this example would diverge, but here's a few observations: \n- If we change the definition of #theorem and #corollary to: \n```typ\n#let theorem = create-theorem(\"Theorem\", loc => (), counter(\"theorem\"), state(\"last-heading-thm\"))\n#let corollary = create-theorem(\"Corollary\", loc => counter(\"theorem\").at(loc), counter(\"corollary\"), state(\"last-heading-cor\"))\n```\nThe example will then converge, so the heading counter somehow plays a role here. (But it is constant throughout the layout. How?)\n- If we change the definition of #corollary to: \n```typ\n#let corollary = create-theorem(\"Corollary\", section, counter(\"corollary\"), state(\"last-heading-cor\"))\n```\nto not depend on counter(\"theorem\"), then it would also converge. So counter(\"theorem\") somehow also plays a role here. \n- If you only have 1 theorem and 2 corollaries, or 2 theorems and 1 corollary, everything converges. Only when you increase to 2 theorems and 2 corollaries does the layout diverge. \n\nI'd like to know why this behavior happens and how to fix it.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 180.8,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1058
    },
    {
      "id": 7568,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-01-16T09:10:33.801Z",
      "updated_at": "2025-01-16T09:10:33.801Z",
      "cooked": "<p>Hello <a class=\"mention\" href=\"/u/void\">@Void</a>,</p>\n<p>There is a hint provided</p>\n<pre data-code-wrap=\"shell\"><code class=\"lang-shell\">= hint: check if any states or queries are updating themselves\n</code></pre>\n<p>In your code, you write a conditional that checks the value of a state, and updates it.</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">if (last-heading-state.get() != curr-heading) {\n  thm-counter.update(0)\n  last-heading-state.update(curr-heading)\n}\n</code></pre>\n<p>that should be the source of your issues.</p>\n<p>You can look up a great example of how to manage counter at <a href=\"https://github.com/jbirnick/typst-rich-counters/blob/main/lib.typ\"><code>rich-counters</code></a>. It is used jointly with <a href=\"https://github.com/jbirnick/typst-great-theorems\"><code>great-theorems</code></a> to provide theorems environments.</p>",
      "raw": "Hello @Void,\n\nThere is a hint provided\n\n```shell\n= hint: check if any states or queries are updating themselves\n```\n\nIn your code, you write a conditional that checks the value of a state, and updates it.\n\n```typc\nif (last-heading-state.get() != curr-heading) {\n  thm-counter.update(0)\n  last-heading-state.update(curr-heading)\n}\n```\n\nthat should be the source of your issues.\n\nYou can look up a great example of how to manage counter at [`rich-counters`](https://github.com/jbirnick/typst-rich-counters/blob/main/lib.typ). It is used jointly with [`great-theorems`](https://github.com/jbirnick/typst-great-theorems) to provide theorems environments.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 26,
      "score": 20.2,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 7607,
      "post_number": 3,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-01-17T14:02:05.584Z",
      "updated_at": "2025-01-17T14:02:05.584Z",
      "cooked": "<p>Hey <a class=\"mention\" href=\"/u/void\">@Void</a>, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a></p>\n<p>For future posts, make sure your title is a question you’d ask to a friend about Typst. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hey @Void, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: https://forum.typst.app/t/how-to-post-in-the-questions-category/11\n\nFor future posts, make sure your title is a question you’d ask to a friend about Typst. :wink:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 9.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    }
  ],
  "scraped_at": "2025-06-10T09:52:47.346528"
}