{
  "topic_metadata": {
    "id": 697,
    "title": "How to implement tab stops?",
    "slug": "how-to-implement-tab-stops",
    "posts_count": 4,
    "created_at": "2024-09-26T09:41:38.395Z",
    "last_posted_at": "2024-10-09T13:18:45.268Z",
    "views": 1443,
    "like_count": 7,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "aeberharter",
    "tags": [
      "layout"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 780
  },
  "posts": [
    {
      "id": 2637,
      "post_number": 1,
      "username": "aeberharter",
      "name": "Alex",
      "created_at": "2024-09-26T09:41:38.504Z",
      "updated_at": "2024-10-02T19:38:16.754Z",
      "cooked": "<p>Many word processors support this feature and I tried to implement it in typst. It works in principle but suffers from 2 issues:</p>\n<ol>\n<li>To create a certain horizontal space a box with absolute width is created, this however only works if the box has visible content</li>\n<li>More than 4 tab stops in one line cause the failure of document convergence</li>\n</ol>\n<p>My current implementation:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let tab = context {\n  let tab_left = 2.5cm // leftmost tab stop (i.e. page margin)\n  let tab_width = 2.0cm // width of a single tab stop\n\n  let pos = here().position() // caller position\n  let column = 1 + calc.trunc( (pos.x - tab_left) / tab_width )   // column where this tab is located\n  let advance_to = tab_left + column * tab_width   // position needed for the next tab stop\n\n  // create box with the required width\n  // the box requires visible content to actually occupy the correct width\n  // for debug purposes we choose the computed column as content\n  box(width: advance_to - pos.x)[#text(size: 8pt, fill: purple)[#column]]\n}\n</code></pre>\n<p>I applied this code to the following 3 lines for testing purposes:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">One very long text #tab which covers several tab columns #tab ?\\\nHello #tab#tab World #tab#tab#tab?\\\nA #tab B #tab C #tab D #tab E #tab F #tab G\n</code></pre>\n<p>which yields the result</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/5894add6bea00c7a3c047450d3805fedddef2338.png\" data-download-href=\"https://forum.typst.app/uploads/default/5894add6bea00c7a3c047450d3805fedddef2338\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/5894add6bea00c7a3c047450d3805fedddef2338_2_690x87.png\" alt=\"image\" data-base62-sha1=\"cDCyLLeUyxRteRZrtWu33d2SQXe\" width=\"690\" height=\"87\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/5894add6bea00c7a3c047450d3805fedddef2338_2_690x87.png, https://forum.typst.app/uploads/default/optimized/1X/5894add6bea00c7a3c047450d3805fedddef2338_2_1035x130.png 1.5x, https://forum.typst.app/uploads/default/original/1X/5894add6bea00c7a3c047450d3805fedddef2338.png 2x\" data-dominant-color=\"F5F4F5\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1042×132 14.4 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Line 1 is correct but the 2 other lines have too many tabs and show weird behavior after column 4.<br>\nIt produces the warning</p>\n<pre><code class=\"lang-auto\">warning: layout did not converge within 5 attempts\n = hint: check if any states or queries are updating themselves\n</code></pre>\n<p>How can I solve the issues 1. and 2. ?</p>",
      "raw": "Many word processors support this feature and I tried to implement it in typst. It works in principle but suffers from 2 issues:\n\n1. To create a certain horizontal space a box with absolute width is created, this however only works if the box has visible content\n2. More than 4 tab stops in one line cause the failure of document convergence\n\nMy current implementation:\n\n```typ\n#let tab = context {\n  let tab_left = 2.5cm // leftmost tab stop (i.e. page margin)\n  let tab_width = 2.0cm // width of a single tab stop\n\n  let pos = here().position() // caller position\n  let column = 1 + calc.trunc( (pos.x - tab_left) / tab_width )   // column where this tab is located\n  let advance_to = tab_left + column * tab_width   // position needed for the next tab stop\n\n  // create box with the required width\n  // the box requires visible content to actually occupy the correct width\n  // for debug purposes we choose the computed column as content\n  box(width: advance_to - pos.x)[#text(size: 8pt, fill: purple)[#column]]\n}\n```\n\nI applied this code to the following 3 lines for testing purposes:\n```typ\nOne very long text #tab which covers several tab columns #tab ?\\\nHello #tab#tab World #tab#tab#tab?\\\nA #tab B #tab C #tab D #tab E #tab F #tab G\n```\nwhich yields the result\n\n![image](upload://cDCyLLeUyxRteRZrtWu33d2SQXe.png)\n\nLine 1 is correct but the 2 other lines have too many tabs and show weird behavior after column 4.\nIt produces the warning\n\n```\nwarning: layout did not converge within 5 attempts\n = hint: check if any states or queries are updating themselves\n```\n\nHow can I solve the issues 1. and 2. ?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 72,
      "score": 8034.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 482
    },
    {
      "id": 2660,
      "post_number": 2,
      "username": "eike",
      "name": "Eike Schulte",
      "created_at": "2024-09-26T14:38:07.522Z",
      "updated_at": "2024-09-26T15:10:21.363Z",
      "cooked": "<p>It seems to me that there might be a bit of an <a href=\"https://en.wikipedia.org/wiki/XY_problem\" rel=\"noopener nofollow ugc\">XY problem</a> happening here. Generally, I don’t think that tab stops are a natural way of solving problems in Typst, so what are you trying to achieve?</p>\n<p>I would expect that usually, a <a href=\"https://typst.app/docs/reference/model/table/\"><code>table</code></a> or <a href=\"https://typst.app/docs/reference/layout/grid/\"><code>grid</code></a>, potentially using <code>cell</code>s with <code>colspan</code> and/or <code>rowspan</code> will be the way to go.</p>\n<p>(Still, I also find the behavior a bit puzzling and would like to understand what is going on.)</p>",
      "raw": "It seems to me that there might be a bit of an [XY problem](https://en.wikipedia.org/wiki/XY_problem) happening here. Generally, I don't think that tab stops are a natural way of solving problems in Typst, so what are you trying to achieve?\n\nI would expect that usually, a [`table`](https://typst.app/docs/reference/model/table/) or [`grid`](https://typst.app/docs/reference/layout/grid/), potentially using `cell`s with `colspan` and/or `rowspan` will be the way to go.\n\n(Still, I also find the behavior a bit puzzling and would like to understand what is going on.)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 67,
      "score": 73.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 357
    },
    {
      "id": 2661,
      "post_number": 3,
      "username": "ludwig",
      "name": "",
      "created_at": "2024-09-26T15:32:22.096Z",
      "updated_at": "2024-09-26T15:32:22.096Z",
      "cooked": "<p>I do not understand your first question, you could also use <code>box(width: advance_to - pos.x)</code>. I would however use <code>h(advance_to - pos.x)</code> instead.</p>\n<p>Regarding the second question, the problem is that each <code>#tab</code> moves the rest of the line, hence a fifth <code>#tab</code> would have already been recomputed and moved 4 times. Because of cases like <a href=\"https://typst.app/docs/reference/introspection/query/#caution\">this</a>, context queries have been set to converge within 5 attempts.</p>\n<p>I think a good implementation would be (currently) impossible to implement in typst. The following code provides only a <strong>broken</strong> solution:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let t = metadata(\"tab\")\n\n#let tabed(c) = {\n  let cs = c.children.split(metadata(\"tab\"))\n  context grid(\n    columns: (2cm,) * 8,\n    row-gutter: par.leading,\n    ..cs.fold((0, ()), ((col, arr), c) =&gt; {\n      let s = c.sum()\n      let w = int(calc.div-euclid(measure(s).width.pt(), 2cm.pt())) + 1\n      if col + w &gt; 8 {\n        let (b, t) = s.children.map(t =&gt; if t.has(\"text\") {t.text.split(\" \")} else {t}).flatten().fold(([],()), ((tmp, res), word) =&gt; {\n          if res == () {\n            let new = if tmp == [] {\n              if word == [ ] { tmp } else { word }\n            } else if word == [ ] {\n              tmp + sym.space\n            } else {\n              tmp + sym.space + word\n            }\n            if measure(new).width &gt; (8 - col) * 2cm {\n              (word, tmp)\n            } else {\n              (new, ())\n            }\n          } else {(tmp + sym.space + word, res)}\n        })\n        (calc.rem(col + w, 8), arr + (grid.cell(colspan: 8-col, t), grid.cell(colspan:  w - 8 + col, b)))\n      } else {\n        (calc.rem(col + w, 8), arr + (grid.cell(colspan: w, s),))\n      }\n    }).at(1)\n  )\n}\n</code></pre>\n<p>This code does the tabbing via a grid. One can then call</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#tabed[\n  #lorem(8)#t #lorem(7)#t A#t B#t C#t D #t E #t F #t G\n]\n</code></pre>\n<p>One apperent problem with this code are, e.g. linebreaks not working properly.</p>",
      "raw": "I do not understand your first question, you could also use `box(width: advance_to - pos.x)`. I would however use `h(advance_to - pos.x)` instead.\n\nRegarding the second question, the problem is that each `#tab` moves the rest of the line, hence a fifth `#tab` would have already been recomputed and moved 4 times. Because of cases like [this](https://typst.app/docs/reference/introspection/query/#caution), context queries have been set to converge within 5 attempts.\n\nI think a good implementation would be (currently) impossible to implement in typst. The following code provides only a **broken** solution:\n```typst\n#let t = metadata(\"tab\")\n\n#let tabed(c) = {\n  let cs = c.children.split(metadata(\"tab\"))\n  context grid(\n    columns: (2cm,) * 8,\n    row-gutter: par.leading,\n    ..cs.fold((0, ()), ((col, arr), c) => {\n      let s = c.sum()\n      let w = int(calc.div-euclid(measure(s).width.pt(), 2cm.pt())) + 1\n      if col + w > 8 {\n        let (b, t) = s.children.map(t => if t.has(\"text\") {t.text.split(\" \")} else {t}).flatten().fold(([],()), ((tmp, res), word) => {\n          if res == () {\n            let new = if tmp == [] {\n              if word == [ ] { tmp } else { word }\n            } else if word == [ ] {\n              tmp + sym.space\n            } else {\n              tmp + sym.space + word\n            }\n            if measure(new).width > (8 - col) * 2cm {\n              (word, tmp)\n            } else {\n              (new, ())\n            }\n          } else {(tmp + sym.space + word, res)}\n        })\n        (calc.rem(col + w, 8), arr + (grid.cell(colspan: 8-col, t), grid.cell(colspan:  w - 8 + col, b)))\n      } else {\n        (calc.rem(col + w, 8), arr + (grid.cell(colspan: w, s),))\n      }\n    }).at(1)\n  )\n}\n```\nThis code does the tabbing via a grid. One can then call\n```typst\n#tabed[\n  #lorem(8)#t #lorem(7)#t A#t B#t C#t D #t E #t F #t G\n]\n```\nOne apperent problem with this code are, e.g. linebreaks not working properly.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 63,
      "score": 152.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 300
    },
    {
      "id": 3614,
      "post_number": 4,
      "username": "aeberharter",
      "name": "Alex",
      "created_at": "2024-10-09T13:18:45.268Z",
      "updated_at": "2024-10-09T13:18:45.268Z",
      "cooked": "<p>Thanks for your answer. I used your nice idea with <code>metadata</code> and implemented a <code>tabed</code> environment myself. So far its working quite well.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let t = metadata(\"tab\")\n\n#let tabed(c, tab_width: 1.55cm) = context {\n  let rows = c.children.split(linebreak())\n  for (j, row) in rows.enumerate() {\n    let advance = 0.0pt\n    let num_tabs = 0\n    let cont = []\n    for child in row + (t,) { // add extra tab stop for loop logic\n      if child == t {\n        if (num_tabs == 0)  {\n          advance += measure(cont).width\n          cont // emit content\n          cont = []\n        }\n        num_tabs += 1\n      } else {\n        if (num_tabs &gt; 0) {\n          let column = calc.trunc( advance / tab_width )   // column where the first tab is located\n          let advance_by = tab_width * (column + num_tabs) - advance\n          h(advance_by) // emit space\n          advance += advance_by\n        }\n        cont += child\n        num_tabs = 0\n      }\n    }\n    if (j &lt; rows.len() - 1) {linebreak()} // emit line break\n  }\n}\n</code></pre>",
      "raw": "Thanks for your answer. I used your nice idea with `metadata` and implemented a `tabed` environment myself. So far its working quite well.\n\n```typ\n#let t = metadata(\"tab\")\n\n#let tabed(c, tab_width: 1.55cm) = context {\n  let rows = c.children.split(linebreak())\n  for (j, row) in rows.enumerate() {\n    let advance = 0.0pt\n    let num_tabs = 0\n    let cont = []\n    for child in row + (t,) { // add extra tab stop for loop logic\n      if child == t {\n        if (num_tabs == 0)  {\n          advance += measure(cont).width\n          cont // emit content\n          cont = []\n        }\n        num_tabs += 1\n      } else {\n        if (num_tabs > 0) {\n          let column = calc.trunc( advance / tab_width )   // column where the first tab is located\n          let advance_by = tab_width * (column + num_tabs) - advance\n          h(advance_by) // emit space\n          advance += advance_by\n        }\n        cont += child\n        num_tabs = 0\n      }\n    }\n    if (j < rows.len() - 1) {linebreak()} // emit line break\n  }\n}\n```",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 39,
      "score": 187.8,
      "accepted_answer": true,
      "trust_level": 1,
      "user_id": 482
    }
  ],
  "scraped_at": "2025-06-10T09:58:00.664545"
}