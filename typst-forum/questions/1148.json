{
  "topic_metadata": {
    "id": 1148,
    "title": "How do I read the API documentation in regards to named parameters that act positionally?",
    "slug": "how-do-i-read-the-api-documentation-in-regards-to-named-parameters-that-act-positionally",
    "posts_count": 5,
    "created_at": "2024-10-16T20:40:23.187Z",
    "last_posted_at": "2024-10-17T12:44:00.765Z",
    "views": 148,
    "like_count": 3,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "PgBiel",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 1331
  },
  "posts": [
    {
      "id": 4028,
      "post_number": 1,
      "username": "Reverend_Paco",
      "name": "",
      "created_at": "2024-10-16T20:40:23.302Z",
      "updated_at": "2024-10-16T20:40:23.302Z",
      "cooked": "<p>I’m relatively new to <code>typst</code> and am enjoying it so far, but am having a fundamental misunderstanding of something important.</p>\n<p>To motivate my question,  I propose that the following typst function calls are all the same and I would love to know why:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">  - #text(black)[my text]\n  - #text(11pt)[my text]\n  - #text(11pt,black)[my text]\n  - #text(black,11pt)[my text]\n  - #text(black,size:11pt)[my text]\n  - #text(size:11pt,black)[my text]\n  - #text(fill: black,size:11pt)[my text]\n  - #text(size:11pt,fill: black)[my text]\n  - #text(\"my text\",size:11pt,fill: black)\n  - #text(\"my text\",11pt,black)\n  - #text(\"my text\",black,11pt)\n  - #text(black,\"my text\",11pt) // why does this work?\n  - #text(black,11pt,\"my text\") // why does this work?\n  - #text(fill:black,11pt,\"my text\") // why does this work?\n  - #text(fill:black,size:11pt,\"my text\") // why does this work?\n</code></pre>\n<p>When I look at the API documentation for the <a href=\"https://typst.app/docs/reference/text/text/\">text</a> function,  I see a long list of <strong>named + non-required parameters</strong> followed by two <strong>positional + required parameters</strong><br>\n<img src=\"https://forum.typst.app/uploads/default/original/1X/c7c533fe95437a137435fba3267e230d9253bbcb.png\" alt=\"image\" data-base62-sha1=\"svfwnNqvIk9JUxf5rI3UhGTn9J9\" width=\"448\" height=\"122\"></p>\n<hr>\n<p>I observe and assert (<em>ready to be wrong</em>):</p>\n<ul>\n<li><code>#text(11pt)[my text]</code> is taking in a content block as its required positional parameter and <code>11pt</code> (of type <code>length</code>) as the named <code>size:</code> parameter <strong>though it seems like its being used a positional parameter</strong>.</li>\n<li><code>#text(black)[my text]</code> is taking in a content block as its required positional parameter and <code>black</code> (of type <code>color</code>) as the named <code>fill:</code> parameter <strong>though it seems like its being used a positional parameter</strong>.</li>\n<li><code>fill:</code> and <code>size:</code> seem to be the <em>only</em> named parameters for the <code>text</code> function that are <strong>psuedo-positional</strong>. (I do not mean this term to be disparaging – only a convenient neologism)</li>\n<li>Both these (<code>fill:</code> and <code>size:</code>) are optional parameters because I know I can do a <code>set text(10pt)</code> or a <code>set text(green)</code> and another documentation states quite clearly that  “<strong>Only optional parameters of that function can be provided to the set rule</strong>” (<a href=\"https://typst.app/docs/reference/styling/\">reference</a>).</li>\n</ul>\n<p>If the heart of these assertions is true, then my fundamental question is</p>\n<ul>\n<li>How can I know (via documentation or code) which parameters are psuedo-positional?</li>\n</ul>\n<p>Similar questions:</p>\n<ul>\n<li>Why can I do <code>#text(blue)[my text]</code> but not <code>#highlight(blue)[my text]</code>?  (both use <code>fill:</code> as optional parameters)</li>\n<li>Is there any way to see documentation (or access to code) that would allow me to find this out for myself?</li>\n</ul>\n<p>Thanks for sticking with me this far.</p>\n<p>daniel</p>",
      "raw": "I'm relatively new to `typst` and am enjoying it so far, but am having a fundamental misunderstanding of something important.\n\nTo motivate my question,  I propose that the following typst function calls are all the same and I would love to know why:\n\n```typst\n  - #text(black)[my text]\n  - #text(11pt)[my text]\n  - #text(11pt,black)[my text]\n  - #text(black,11pt)[my text]\n  - #text(black,size:11pt)[my text]\n  - #text(size:11pt,black)[my text]\n  - #text(fill: black,size:11pt)[my text]\n  - #text(size:11pt,fill: black)[my text]\n  - #text(\"my text\",size:11pt,fill: black)\n  - #text(\"my text\",11pt,black)\n  - #text(\"my text\",black,11pt)\n  - #text(black,\"my text\",11pt) // why does this work?\n  - #text(black,11pt,\"my text\") // why does this work?\n  - #text(fill:black,11pt,\"my text\") // why does this work?\n  - #text(fill:black,size:11pt,\"my text\") // why does this work?\n```\n\nWhen I look at the API documentation for the [text](https://typst.app/docs/reference/text/text/) function,  I see a long list of **named + non-required parameters** followed by two **positional + required parameters**\n![image|448x122](upload://svfwnNqvIk9JUxf5rI3UhGTn9J9.png)\n\n----\n\n\nI observe and assert (*ready to be wrong*):\n* `#text(11pt)[my text]` is taking in a content block as its required positional parameter and `11pt` (of type `length`) as the named `size:` parameter **though it seems like its being used a positional parameter**.\n* `#text(black)[my text]` is taking in a content block as its required positional parameter and `black` (of type `color`) as the named `fill:` parameter **though it seems like its being used a positional parameter**.\n* `fill:` and `size:` seem to be the *only* named parameters for the `text` function that are **psuedo-positional**. (I do not mean this term to be disparaging -- only a convenient neologism)\n* Both these (`fill:` and `size:`) are optional parameters because I know I can do a `set text(10pt)` or a `set text(green)` and another documentation states quite clearly that  \"**Only optional parameters of that function can be provided to the set rule**\" ([reference](https://typst.app/docs/reference/styling/)).\n\nIf the heart of these assertions is true, then my fundamental question is\n\n* How can I know (via documentation or code) which parameters are psuedo-positional?\n\nSimilar questions:\n\n* Why can I do `#text(blue)[my text]` but not `#highlight(blue)[my text]`?  (both use `fill:` as optional parameters)\n* Is there any way to see documentation (or access to code) that would allow me to find this out for myself?\n\nThanks for sticking with me this far.\n\n\ndaniel",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 38,
      "score": 202.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 604
    },
    {
      "id": 4032,
      "post_number": 2,
      "username": "alimgyeniyt",
      "name": "Alimgyehr Uuhniyt",
      "created_at": "2024-10-16T22:00:16.920Z",
      "updated_at": "2024-10-16T22:00:16.920Z",
      "cooked": "<p>As someone who is <em>not</em> knowledgeable about typst :</p>\n<p>Without looking at the code and if I had to make a <strong>guess</strong>, it’ll be that the <code>text</code> function is popular enough to get some added (and undocumented) special behavior for the sake of convenience. Ultimately the only way to know exactly how it works is to take a look at the source code on GitHub.</p>\n<p>i also found this on the changelog for 0.12.0-rc2, i dont know what conclusions to draw.</p>\n<p>\" Font family must be a named argument now: <code>#set text(font: \"..\")</code>\"</p>\n<p>i repeat that I’m not knowledgeable about typst, so take my answer with a spoonful of salt</p>",
      "raw": "As someone who is *not* knowledgeable about typst :\n\nWithout looking at the code and if I had to make a **guess**, it'll be that the `text` function is popular enough to get some added (and undocumented) special behavior for the sake of convenience. Ultimately the only way to know exactly how it works is to take a look at the source code on GitHub.\n\ni also found this on the changelog for 0.12.0-rc2, i dont know what conclusions to draw.\n\n\" Font family must be a named argument now: `#set text(font: \"..\")`\"\n\ni repeat that I'm not knowledgeable about typst, so take my answer with a spoonful of salt",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 35,
      "score": 17.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 605
    },
    {
      "id": 4040,
      "post_number": 3,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-10-17T05:39:47.745Z",
      "updated_at": "2024-10-17T05:42:09.281Z",
      "cooked": "<p>The documentation for <code>text</code> indeed isn’t very clear about this, but here’s what’s going on:</p>\n<ol>\n<li>The most common named arguments for <code>text</code> - mostly unambiguous ones such as <code>fill:</code> and <code>size:</code> - can also be used positionally <strong>as an exception</strong>, just for convenience. These parameters <strong>are not separately listed as positional</strong> in the documentation at the moment. Note that you can implement this same behavior in your functions by taking and parsing arbitrary amounts of arguments (see <a href=\"https://typst.app/docs/reference/foundations/arguments/\" class=\"inline-onebox\">Arguments Type – Typst Documentation</a>).</li>\n<li>The two positional arguments you see (<code>content</code> and <code>str</code>) are <strong>currently misleading</strong> and need improvement. Basically, what’s going on here is that <code>text</code> is a special element, in that its element constructor (the <code>#text(...)[stuff]</code> function), instead of constructing a new <code>text</code>, <strong>applies the given parameters as local styles</strong>, as if you were applying a set rule on the given content. That is:<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#text(red, font: \"Arial\")[Hello world!]\n// is equivalent to\n#[\n    #set text(red, font: \"Arial\")\n    Hello world!\n]\n</code></pre>\nThis means that the whole <code>#text()</code> function (not the element itself, but its constructor) only exists as a convenience to apply <code>text</code> element set rules to the given content parameter, <strong>which is strictly positional</strong>. Therefore, that <code>content</code> you see is the content to apply the set rules to. (This is similar, for instance, to <code>#align</code>: <code>#align(center)[abc]</code> is more or less equivalent to <code>#[ #set align(center); #block[abc]]</code>.)<br>\nBut then what is the <code>str</code> parameter? That’s where the <code>text</code> element part comes in: the <strong>real</strong> <code>text</code> elements are simple wrappers around strings. They contain <strong>no formatting at all</strong> - they are <strong>the most basic element of all text</strong>, so it is natural that any formatting would be done by elements (such as <code>strong</code> or <code>emph</code>) containing those more fundamental units, and not the other way around. So, this <code>str</code> “parameter” is actually the <code>.text</code> field of text elements (the contained text) “leaking” into the docs, <strong>but you can’t actually pass that parameter</strong> because <strong>you cannot construct text elements</strong> by yourself: they are automatically generated for you as you type text in a markup block. This means that <code>#text(\"ABC\")</code> is actually the exact same as <code>#text[ABC]</code> which is also the exact same as <code>#[ABC]</code>, since <code>text</code>, when used as a function, only applies styles to the text elements in <code>ABC</code>, but no styles are being configured so nothing happens.  It’d certainly be much nicer if this could be displayed properly!</li>\n</ol>\n<p>Hope this clears it up. Feel free to open an issue in <a href=\"https://github.com/typst/typst\" class=\"inline-onebox\">GitHub - typst/typst: A new markup-based typesetting system that is powerful and easy to learn.</a> to suggest an improvement to this doc page, if there isn’t already one!</p>\n<p>Now, just to address your individual questions:</p>\n<aside class=\"quote no-group\" data-username=\"Reverend_Paco\" data-post=\"1\" data-topic=\"1148\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/r/007AFF/48.png\" class=\"avatar\"> Reverend_Paco:</div>\n<blockquote>\n<p>How can I know (via documentation or code) which parameters are psuedo-positional?</p>\n</blockquote>\n</aside>\n<p>You’d have to look for arguments marked with <code>#[parse]</code> in the internal code, since those basically take the whole argument list into account (basically the same idea as using <code>..args</code> in a function and manually extracting arguments however you want, as I hinted at above). Then, they might be pseudo-positional, or might accept more than one name (as seen in <code>#pad(x: 5pt)</code> being equivalent to <code>#pad(left: 5pt, right: 5pt)</code>), and so on.</p>\n<aside class=\"quote no-group\" data-username=\"Reverend_Paco\" data-post=\"1\" data-topic=\"1148\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/r/007AFF/48.png\" class=\"avatar\"> Reverend_Paco:</div>\n<blockquote>\n<p>Why can I do <code>#text(blue)[my text]</code> but not <code>#highlight(blue)[my text]</code>? (both use <code>fill:</code> as optional parameters)</p>\n</blockquote>\n</aside>\n<p><code>text</code> is simply an exception as it’s such a basic element. The same exception was not applied to <code>highlight</code>.</p>\n<aside class=\"quote no-group\" data-username=\"Reverend_Paco\" data-post=\"1\" data-topic=\"1148\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/r/007AFF/48.png\" class=\"avatar\"> Reverend_Paco:</div>\n<blockquote>\n<p>Is there any way to see documentation (or access to code) that would allow me to find this out for myself?</p>\n</blockquote>\n</aside>\n<p>The relevant line is here: <a href=\"https://github.com/typst/typst/blob/e0d809680aed778443a4797bc044376dbe15347e/crates/typst/src/text/mod.rs#L233\" class=\"inline-onebox\">typst/crates/typst/src/text/mod.rs at e0d809680aed778443a4797bc044376dbe15347e · typst/typst · GitHub</a></p>\n<p>Note the usage of <code>named_or_find</code> onto the argument list instead of just <code>named</code>.</p>",
      "raw": "The documentation for `text` indeed isn't very clear about this, but here's what's going on:\n\n1. The most common named arguments for `text` - mostly unambiguous ones such as `fill:` and `size:` - can also be used positionally **as an exception**, just for convenience. These parameters **are not separately listed as positional** in the documentation at the moment. Note that you can implement this same behavior in your functions by taking and parsing arbitrary amounts of arguments (see https://typst.app/docs/reference/foundations/arguments/).\n2. The two positional arguments you see (`content` and `str`) are **currently misleading** and need improvement. Basically, what's going on here is that `text` is a special element, in that its element constructor (the `#text(...)[stuff]` function), instead of constructing a new `text`, **applies the given parameters as local styles**, as if you were applying a set rule on the given content. That is:\n    ```typ\n    #text(red, font: \"Arial\")[Hello world!]\n    // is equivalent to\n    #[\n        #set text(red, font: \"Arial\")\n        Hello world!\n    ]\n    ```\n    This means that the whole `#text()` function (not the element itself, but its constructor) only exists as a convenience to apply `text` element set rules to the given content parameter, **which is strictly positional**. Therefore, that `content` you see is the content to apply the set rules to. (This is similar, for instance, to `#align`: `#align(center)[abc]` is more or less equivalent to `#[ #set align(center); #block[abc]]`.)\n     But then what is the `str` parameter? That's where the `text` element part comes in: the **real** `text` elements are simple wrappers around strings. They contain **no formatting at all** - they are **the most basic element of all text**, so it is natural that any formatting would be done by elements (such as `strong` or `emph`) containing those more fundamental units, and not the other way around. So, this `str` \"parameter\" is actually the `.text` field of text elements (the contained text) \"leaking\" into the docs, **but you can't actually pass that parameter** because **you cannot construct text elements** by yourself: they are automatically generated for you as you type text in a markup block. This means that `#text(\"ABC\")` is actually the exact same as `#text[ABC]` which is also the exact same as `#[ABC]`, since `text`, when used as a function, only applies styles to the text elements in `ABC`, but no styles are being configured so nothing happens.  It'd certainly be much nicer if this could be displayed properly!\n\nHope this clears it up. Feel free to open an issue in https://github.com/typst/typst to suggest an improvement to this doc page, if there isn't already one!\n\nNow, just to address your individual questions:\n\n[quote=\"Reverend_Paco, post:1, topic:1148\"]\nHow can I know (via documentation or code) which parameters are psuedo-positional?\n[/quote]\n\nYou'd have to look for arguments marked with `#[parse]` in the internal code, since those basically take the whole argument list into account (basically the same idea as using `..args` in a function and manually extracting arguments however you want, as I hinted at above). Then, they might be pseudo-positional, or might accept more than one name (as seen in `#pad(x: 5pt)` being equivalent to `#pad(left: 5pt, right: 5pt)`), and so on.\n\n[quote=\"Reverend_Paco, post:1, topic:1148\"]\nWhy can I do `#text(blue)[my text]` but not `#highlight(blue)[my text]`? (both use `fill:` as optional parameters)\n[/quote]\n\n`text` is simply an exception as it's such a basic element. The same exception was not applied to `highlight`.\n\n[quote=\"Reverend_Paco, post:1, topic:1148\"]\nIs there any way to see documentation (or access to code) that would allow me to find this out for myself?\n[/quote]\n\nThe relevant line is here: https://github.com/typst/typst/blob/e0d809680aed778443a4797bc044376dbe15347e/crates/typst/src/text/mod.rs#L233\n\nNote the usage of `named_or_find` onto the argument list instead of just `named`.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 1,
      "reads": 32,
      "score": 91.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 4041,
      "post_number": 4,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-10-17T05:45:01.907Z",
      "updated_at": "2024-10-17T05:45:01.907Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"alimgyeniyt\" data-post=\"2\" data-topic=\"1148\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/alimgyeniyt/48/901_2.png\" class=\"avatar\"> alimgyeniyt:</div>\n<blockquote>\n<p>i also found this on the changelog for 0.12.0-rc2, i dont know what conclusions to draw.</p>\n<p>\" Font family must be a named argument now: <code>#set text(font: \"..\")</code>\"</p>\n</blockquote>\n</aside>\n<p>Actually, that’s in the changelog for what I believe to be the first Typst version released to the public, over a year and a half ago. <img src=\"https://forum.typst.app/images/emoji/apple/sweat_smile.png?v=12\" title=\":sweat_smile:\" class=\"emoji\" alt=\":sweat_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>The only conclusion to draw here is that font likely could also be specified positionally before, but that was deemed confusing and reverted.</p>\n<aside class=\"quote no-group\" data-username=\"alimgyeniyt\" data-post=\"2\" data-topic=\"1148\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/alimgyeniyt/48/901_2.png\" class=\"avatar\"> alimgyeniyt:</div>\n<blockquote>\n<p>i repeat that I’m not knowledgeable about typst, so take my answer with a spoonful of salt</p>\n</blockquote>\n</aside>\n<p>It seems to me that your answer was generally accurate. <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "[quote=\"alimgyeniyt, post:2, topic:1148\"]\ni also found this on the changelog for 0.12.0-rc2, i dont know what conclusions to draw.\n\n\" Font family must be a named argument now: `#set text(font: \"..\")`\"\n[/quote]\n\nActually, that's in the changelog for what I believe to be the first Typst version released to the public, over a year and a half ago. :sweat_smile:\n\nThe only conclusion to draw here is that font likely could also be specified positionally before, but that was deemed confusing and reverted.\n\n[quote=\"alimgyeniyt, post:2, topic:1148\"]\ni repeat that I’m not knowledgeable about typst, so take my answer with a spoonful of salt\n[/quote]\n\nIt seems to me that your answer was generally accurate. :slight_smile:",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 31,
      "score": 51.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 4099,
      "post_number": 5,
      "username": "Reverend_Paco",
      "name": "",
      "created_at": "2024-10-17T12:44:00.765Z",
      "updated_at": "2024-10-17T12:44:00.765Z",
      "cooked": "<p>Thank you <a class=\"mention\" href=\"/u/pgbiel\">@PgBiel</a>  for that in-depth explanation.  I will open up a documentation-clarity ticket in github, as you suggested.</p>",
      "raw": "Thank you @PgBiel  for that in-depth explanation.  I will open up a documentation-clarity ticket in github, as you suggested.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 26,
      "score": 50.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 604
    }
  ],
  "scraped_at": "2025-06-10T09:56:41.743404"
}