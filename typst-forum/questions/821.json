{
  "topic_metadata": {
    "id": 821,
    "title": "How can I access shadowed functions?",
    "slug": "how-can-i-access-shadowed-functions",
    "posts_count": 4,
    "created_at": "2024-09-30T20:01:56.520Z",
    "last_posted_at": "2024-10-01T17:58:33.015Z",
    "views": 103,
    "like_count": 5,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Eric",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 193
  },
  "posts": [
    {
      "id": 3045,
      "post_number": 1,
      "username": "gabe",
      "name": "",
      "created_at": "2024-09-30T20:01:56.633Z",
      "updated_at": "2024-09-30T20:01:56.633Z",
      "cooked": "<p>For example,</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let query(target) = {\n  let quarry = // assume something interesting is done\n  query(quarry) // I want to run super.query\n}\n</code></pre>\n<p>I tried super.query but that wasnâ€™t it.</p>",
      "raw": "For example,\n\n```typ\n#let query(target) = {\n  let quarry = // assume something interesting is done\n  query(quarry) // I want to run super.query\n}\n```\n\nI tried super.query but that wasn't it.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 215.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 433
    },
    {
      "id": 3046,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-30T20:11:03.852Z",
      "updated_at": "2024-09-30T20:11:03.852Z",
      "cooked": "<p>you can assign the original function to a different name before shadowing it. I prefer an underscore as a prefix, as it is otherwise discouraged by Typst naming conventions:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let _query = query\n#let query(target) = {\n  let quarry = // assume something interesting is done\n  _query(quarry)\n}\n</code></pre>",
      "raw": "you can assign the original function to a different name before shadowing it. I prefer an underscore as a prefix, as it is otherwise discouraged by Typst naming conventions:\n```typ\n#let _query = query\n#let query(target) = {\n  let quarry = // assume something interesting is done\n  _query(quarry)\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 29,
      "score": 25.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 3047,
      "post_number": 3,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-09-30T20:24:53.040Z",
      "updated_at": "2024-09-30T20:25:33.685Z",
      "cooked": "<p>There actually is another way, though I would prefer the solution of <a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a>. If you define your function in a variable as an <a href=\"https://typst.app/docs/reference/foundations/function/#unnamed\">unnamed function</a>, you can still access the original function inside:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let query = target =&gt; {\n  let quarry = // assume something interesting is done\n  query(quarry)\n}\n</code></pre>\n<p>Also, for completeness, starting with (the soon to be released) version 0.12, you will no longer need to store the original function yourself, as it will be available under the <code>std</code> namespace as <code>std.query</code>.</p>",
      "raw": "There actually is another way, though I would prefer the solution of @SillyFreak. If you define your function in a variable as an [unnamed function](https://typst.app/docs/reference/foundations/function/#unnamed), you can still access the original function inside:\n```typ\n#let query = target => {\n  let quarry = // assume something interesting is done\n  query(quarry)\n}\n```\n\nAlso, for completeness, starting with (the soon to be released) version 0.12, you will no longer need to store the original function yourself, as it will be available under the `std` namespace as `std.query`.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 28,
      "score": 90.6,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 3117,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-10-01T17:58:33.015Z",
      "updated_at": "2024-10-01T17:58:59.825Z",
      "cooked": "<p>I can offer another naming scheme I use that is more descriptive: <code>query-old</code> (this also follows the kebab case convention). But yeah, soon this will be irrelevant.</p>",
      "raw": "I can offer another naming scheme I use that is more descriptive: `query-old` (this also follows the kebab case convention). But yeah, soon this will be irrelevant.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 4.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:57:44.604139"
}