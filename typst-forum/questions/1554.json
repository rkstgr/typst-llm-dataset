{
  "topic_metadata": {
    "id": 1554,
    "title": "How should i do, can change lib's component func by lib's input?",
    "slug": "how-should-i-do-can-change-libs-component-func-by-libs-input",
    "posts_count": 2,
    "created_at": "2024-11-05T13:02:00.418Z",
    "last_posted_at": "2024-11-05T13:41:18.661Z",
    "views": 53,
    "like_count": 2,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "sjfhsjfh",
    "tags": [
      "packages"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 334
  },
  "posts": [
    {
      "id": 5161,
      "post_number": 1,
      "username": "Jihan",
      "name": "Jihan",
      "created_at": "2024-11-05T13:02:00.557Z",
      "updated_at": "2024-11-05T13:02:00.557Z",
      "cooked": "<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">/*****************\n*      lib       *\n*****************/\n#let mylib(fill: none, body) = {\n  body\n}\n\n#let lib-component-func(content) = {\n  // this box's fill will changed by mylib input\n  box()[#content]\n}\n\n/*****************\n*      User      *\n*****************/\n// case1: draw a red box\n#show: mylib.with(fill: red)\n#lib-component-func(\"hello\")\n\n// case2: draw a green box\n#show: mylib.with(fill: green)\n#lib-component-func(\"world\")\n</code></pre>",
      "raw": "```typst\n/*****************\n*      lib       *\n*****************/\n#let mylib(fill: none, body) = {\n  body\n}\n\n#let lib-component-func(content) = {\n  // this box's fill will changed by mylib input\n  box()[#content]\n}\n\n/*****************\n*      User      *\n*****************/\n// case1: draw a red box\n#show: mylib.with(fill: red)\n#lib-component-func(\"hello\")\n\n// case2: draw a green box\n#show: mylib.with(fill: green)\n#lib-component-func(\"world\")\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 21,
      "score": 119.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 316
    },
    {
      "id": 5162,
      "post_number": 2,
      "username": "sjfhsjfh",
      "name": "sjfhsjfh",
      "created_at": "2024-11-05T13:41:18.661Z",
      "updated_at": "2024-11-05T13:41:18.661Z",
      "cooked": "<p>The basic idea here is that everything in the function is definite (for the same input the function should generate the same result). So there are 2 ways to achieve this:</p>\n<ul>\n<li>Use a context block (The function generates the same context content, the color is determined after it is inserted into the document according to the “context”)</li>\n<li><strong>(Recommended)</strong> Let users customize the function by themselves (The function accepts a <code>color</code> parameter and the user can set it easily)</li>\n</ul>\n<h3><a name=\"p-5162-context-solution-1\" class=\"anchor\" href=\"#p-5162-context-solution-1\"></a>Context solution</h3>\n<p>If you wrap it with a context block:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let global-color = state(\"my-box-color\", blue.lighten(40%))\n#let set-color(c) = global-color.update(c)\n#let smart-box(cont) = context {\n  box(cont, fill: global-color.get())\n}\n</code></pre>\n<p>And make sure to add the <code>global-color.update</code> content into the document in your main <code>show</code> function to make sure the state updates correctly.</p>\n<h2><a name=\"p-5162-with-solution-2\" class=\"anchor\" href=\"#p-5162-with-solution-2\"></a><code>.with</code> solution</h2>\n<p>Using context immoderately would cause disasters, for example, if you would like to modify the <code>smart-box</code> above, you may find that the type of its return value has been <code>content</code>, which is hard to customize further.</p>\n<p>I would like to define a function like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let stupid-box(cont, fill: blue.lighten(40%)) = box(cont, fill: fill)\n</code></pre>\n<p>And in the main file add the following code:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"somewhere/lib.typ\": stupid-box\n#let my-box = stupid-box.with(fill: red)\n</code></pre>\n<p>which is much more simple and steerable.</p>\n<h2><a name=\"p-5162-conclusion-3\" class=\"anchor\" href=\"#p-5162-conclusion-3\"></a>Conclusion</h2>\n<p><code>state</code> and <code>context</code> allow you to make it work like a “global variable”, but this usually get into a mess when the global context become more and more complicated. Using the recommended way would make sure users know what they are getting from the function.</p>",
      "raw": "The basic idea here is that everything in the function is definite (for the same input the function should generate the same result). So there are 2 ways to achieve this:\n\n- Use a context block (The function generates the same context content, the color is determined after it is inserted into the document according to the \"context\")\n- **(Recommended)** Let users customize the function by themselves (The function accepts a `color` parameter and the user can set it easily)\n\n### Context solution\n\nIf you wrap it with a context block:\n\n```typ\n#let global-color = state(\"my-box-color\", blue.lighten(40%))\n#let set-color(c) = global-color.update(c)\n#let smart-box(cont) = context {\n  box(cont, fill: global-color.get())\n}\n```\n\nAnd make sure to add the `global-color.update` content into the document in your main `show` function to make sure the state updates correctly.\n\n\n## `.with` solution\n\nUsing context immoderately would cause disasters, for example, if you would like to modify the `smart-box` above, you may find that the type of its return value has been `content`, which is hard to customize further.\n\nI would like to define a function like this:\n\n```typ\n#let stupid-box(cont, fill: blue.lighten(40%)) = box(cont, fill: fill)\n```\n\nAnd in the main file add the following code:\n\n```typ\n#import \"somewhere/lib.typ\": stupid-box\n#let my-box = stupid-box.with(fill: red)\n```\n\nwhich is much more simple and steerable.\n\n## Conclusion\n\n`state` and `context` allow you to make it work like a \"global variable\", but this usually get into a mess when the global context become more and more complicated. Using the recommended way would make sure users know what they are getting from the function.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 18,
      "score": 108.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 120
    }
  ],
  "scraped_at": "2025-06-10T09:55:28.471827"
}