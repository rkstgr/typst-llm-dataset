{
  "topic_metadata": {
    "id": 2540,
    "title": "How does the `lang` property of a raw block affects ligatures?",
    "slug": "how-does-the-lang-property-of-a-raw-block-affects-ligatures",
    "posts_count": 6,
    "created_at": "2025-01-26T11:44:36.373Z",
    "last_posted_at": "2025-01-26T14:04:57.959Z",
    "views": 48,
    "like_count": 6,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Eric",
    "tags": [
      "layout"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 496
  },
  "posts": [
    {
      "id": 7862,
      "post_number": 1,
      "username": "jakob",
      "name": "",
      "created_at": "2025-01-26T11:44:36.512Z",
      "updated_at": "2025-01-26T11:44:36.512Z",
      "cooked": "<p>I don’t understand how the <code>language</code> property affects which ligatures are rendered? I created a small <a href=\"https://typst.app/project/w1Uq0X7KxcFs5fKkIcPGp0\">MRE</a>:</p>\n<ul>\n<li>why is the pipe (<code>|&gt;</code>) ligature not rendered when using <code>r</code> as language</li>\n<li>why is there no ligature for <code>=&gt;</code> with the language <code>r</code> but there is one with the language <code>js</code>?</li>\n</ul>\n<p>As long as I don’t define a language the ligatures work es expected. Could it be related to the theme as well?</p>",
      "raw": "I don't understand how the `language` property affects which ligatures are rendered? I created a small [MRE](https://typst.app/project/w1Uq0X7KxcFs5fKkIcPGp0):\n- why is the pipe (`|>`) ligature not rendered when using `r` as language\n- why is there no ligature for `=>` with the language `r` but there is one with the language `js`?\n\nAs long as I don't define a language the ligatures work es expected. Could it be related to the theme as well?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 64.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 498
    },
    {
      "id": 7865,
      "post_number": 2,
      "username": "Florian",
      "name": "Florian",
      "created_at": "2025-01-26T12:11:08.424Z",
      "updated_at": "2025-01-26T12:11:08.424Z",
      "cooked": "<p>It’s definitely strange behaviour. Could it be that the ligatures are syntax dependent?</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#raw(\"\n  foo |&gt; bar(buz)\n  buz &gt;= foo\n  buz -&gt; test('=&gt;')\n\", lang: \"r\")\n</code></pre>\n<p>I had to reformat the syntax snippet to make it highlighted here. But this gives me the rendering of:</p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/9/91867b0203491a9e95c516c77bc59ef3a2f93636.png\" alt=\"grafik\" data-base62-sha1=\"kLnm5PHX0Hkc8MGLRp0E0m3Q95c\" width=\"156\" height=\"68\"></p>\n<p>It seems like the ligatures are applied in a syntax sensitive manner since R - as far as i know -  has no “=&gt;” as formal operator.</p>",
      "raw": "It's definitely strange behaviour. Could it be that the ligatures are syntax dependent?\n\n```typ\n#raw(\"\n  foo |> bar(buz)\n  buz >= foo\n  buz -> test('=>')\n\", lang: \"r\")\n```\n\nI had to reformat the syntax snippet to make it highlighted here. But this gives me the rendering of:\n\n![grafik|156x68](upload://kLnm5PHX0Hkc8MGLRp0E0m3Q95c.png)\n\nIt seems like the ligatures are applied in a syntax sensitive manner since R - as far as i know -  has no \"=>\" as formal operator.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 5.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 251
    },
    {
      "id": 7867,
      "post_number": 3,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-01-26T12:28:11.171Z",
      "updated_at": "2025-01-26T12:29:26.236Z",
      "cooked": "<p>The characters <code>|</code> and <code>&gt;</code> both are their own operator, which are probably defined with a higher priority in the syntax. Thus, when applying the syntax highlighting, The <code>|</code> and <code>&gt;</code> characters are styled separately, leading to two separate text nodes, which makes ligatures impossible. You can see this when using a show rule like</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show raw: it =&gt; repr(it.lines)\n</code></pre>\n<p>where the code</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">```r\nfoo |&gt; bar\nbuz -&gt; test('|&gt;')\n```\n</code></pre>\n<p>is then converted to the lines</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">line(\n  body: sequence(\n    [foo ],\n    styled(child: [|], ..),    // These characters are\n    styled(child: [&gt;], ..),    // styled separately.\n    styled(child: [ bar], ..),\n  ),\n  ..\n),\nline(\n  body: sequence(\n    [buz ],\n    styled(child: [-&gt;], ..),   // These are styled together.\n    styled(child: [ ], ..),\n    styled(child: [test], ..),\n    styled(child: [(], ..),\n    styled(child: ['], ..),\n    styled(child: [|&gt;], ..),   // These are styled together.\n    styled(child: ['], ..),\n    styled(child: [)], ..),\n  ),\n  ..\n)\n</code></pre>\n<p>Different languages then differ in this behaviour as they may define their operators with different priorities, such that e.g. <code>|&gt;</code> comes before <code>|</code> and <code>&gt;</code>. This also explains, why the ligature works inside a string, as the whole string is styled in a single text node.</p>",
      "raw": "The characters `|` and `>` both are their own operator, which are probably defined with a higher priority in the syntax. Thus, when applying the syntax highlighting, The `|` and `>` characters are styled separately, leading to two separate text nodes, which makes ligatures impossible. You can see this when using a show rule like\n```typ\n#show raw: it => repr(it.lines)\n```\nwhere the code\n````typ\n```r\nfoo |> bar\nbuz -> test('|>')\n```\n````\nis then converted to the lines\n```typc\nline(\n  body: sequence(\n    [foo ],\n    styled(child: [|], ..),    // These characters are\n    styled(child: [>], ..),    // styled separately.\n    styled(child: [ bar], ..),\n  ),\n  ..\n),\nline(\n  body: sequence(\n    [buz ],\n    styled(child: [->], ..),   // These are styled together.\n    styled(child: [ ], ..),\n    styled(child: [test], ..),\n    styled(child: [(], ..),\n    styled(child: ['], ..),\n    styled(child: [|>], ..),   // These are styled together.\n    styled(child: ['], ..),\n    styled(child: [)], ..),\n  ),\n  ..\n)\n```\nDifferent languages then differ in this behaviour as they may define their operators with different priorities, such that e.g. `|>` comes before `|` and `>`. This also explains, why the ligature works inside a string, as the whole string is styled in a single text node.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 23,
      "score": 59.6,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 7869,
      "post_number": 4,
      "username": "Florian",
      "name": "Florian",
      "created_at": "2025-01-26T12:36:35.070Z",
      "updated_at": "2025-01-26T12:36:35.070Z",
      "cooked": "<p>Uhh - thanks <a class=\"mention\" href=\"/u/eric\">@Eric</a> - that’s a really interesting finding.</p>",
      "raw": "Uhh - thanks @Eric - that's a really interesting finding.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 4.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 251
    },
    {
      "id": 7872,
      "post_number": 5,
      "username": "jakob",
      "name": "",
      "created_at": "2025-01-26T13:33:56.823Z",
      "updated_at": "2025-01-26T13:33:56.823Z",
      "cooked": "<p>Thanks a lot for the explanation! One follow-up question: <a class=\"mention\" href=\"/u/eric\">@Eric</a> the only way to make the ligature show up would be to adjust how the <code>r</code> language syntax highlighter works?</p>",
      "raw": "Thanks a lot for the explanation! One follow-up question: @Eric the only way to make the ligature show up would be to adjust how the `r` language syntax highlighter works?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 9.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 498
    },
    {
      "id": 7873,
      "post_number": 6,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-01-26T14:04:57.959Z",
      "updated_at": "2025-01-26T14:19:08.045Z",
      "cooked": "<p>Yes, you can actually just get the <a href=\"https://github.com/sublimehq/Packages/blob/master/R/R.sublime-syntax\" rel=\"noopener nofollow ugc\"><code>R</code> language syntax</a> from GitHub as it seems that the one Typst uses by default is outdated. The updated one already includes the pipe operator with the correct ordering, so the ligatures work with that.</p>\n<p>However, as apparently you can’t override the syntax of an already included language <em>(Edit: Fixed in the latest development version)</em>, you need to edit the <code>name</code> or the <code>file_extensions</code> list at the top of the syntax file to something new (e.g. <code>R_new</code>), and then load that syntax file and use the new value as the <code>lang</code> of your code block.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show raw: set text(font: \"Fira Code\") // any font supporting ligatures\n#set raw(syntaxes: \"R.sublime-syntax\")\n\n```r_new\nfoo |&gt; bar\n```\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/1/158ef5fd7f51af8b87ce49cc3b35ec98c4c86be2.png\" alt=\"image\" data-base62-sha1=\"34IjMYLUzOAhoAXmlKsOxQMr8fU\" width=\"111\" height=\"36\"></p>",
      "raw": "Yes, you can actually just get the [`R` language syntax](https://github.com/sublimehq/Packages/blob/master/R/R.sublime-syntax) from GitHub as it seems that the one Typst uses by default is outdated. The updated one already includes the pipe operator with the correct ordering, so the ligatures work with that.\n\nHowever, as apparently you can't override the syntax of an already included language _(Edit: Fixed in the latest development version)_, you need to edit the `name` or the `file_extensions` list at the top of the syntax file to something new (e.g. `R_new`), and then load that syntax file and use the new value as the `lang` of your code block.\n\n````typ\n#show raw: set text(font: \"Fira Code\") // any font supporting ligatures\n#set raw(syntaxes: \"R.sublime-syntax\")\n\n```r_new\nfoo |> bar\n```\n````\n![image|124x41, 90%](upload://34IjMYLUzOAhoAXmlKsOxQMr8fU.png)",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 22,
      "score": 79.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    }
  ],
  "scraped_at": "2025-06-10T09:52:30.200003"
}