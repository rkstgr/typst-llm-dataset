{
  "topic_metadata": {
    "id": 4202,
    "title": "How to correctly use state for an ordered outline?",
    "slug": "how-to-correctly-use-state-for-an-ordered-outline",
    "posts_count": 6,
    "created_at": "2025-05-21T09:42:56.133Z",
    "last_posted_at": "2025-05-22T18:12:36.150Z",
    "views": 58,
    "like_count": 4,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 5,
    "accepted_answer_username": "undr",
    "tags": [
      "scripting",
      "layout",
      "templates"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1097
  },
  "posts": [
    {
      "id": 12850,
      "post_number": 1,
      "username": "Alex",
      "name": "Alex",
      "created_at": "2025-05-21T09:42:56.361Z",
      "updated_at": "2025-05-22T09:16:54.304Z",
      "cooked": "<p>Hello everyone,</p>\n<p>For a personal project where i’m trying to create a sorted outline by alphabetical order i found myself blocked due to my understanding of state that i consider has a global variable.</p>\n<p>The current implementation of this ordered outline is :</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let alphabet-displayed = state(\"alphabet-displayed\", ())\n#let ordered-outline() = context {\n  let current-page = here().page()\n  let headings = query(selector(heading.where(level : 2)))\n  let sorted-headings = headings.sorted(\n    key: heading =&gt; {if heading.body.has(\"text\") {heading.body.text} else {\"\"}}\n  )\n  sorted-headings.map(entry =&gt; {\n      let first-letter = entry.body.text.first() \n      // reimplement default outline.entry\n      if entry.numbering != none {\n        numbering(entry.numbering, ..counter(heading).at(entry.location()))\n      }\n      [ ]\n      /*    Focus Here    */\n      if (first-letter not in alphabet-displayed.get()){\n        text(first-letter) + linebreak()\n        alphabet-displayed.update(current =&gt; current + (first-letter,))\n      }\n      h(4pt) + entry.body\n      box(width: 1fr, repeat[.])\n      [#entry.location().page()]\n    }).join([ \\ ])\n}\n\n\n== Aaaa\nsome song\n== Abaaa\nsome song\n== B\nsome song\n== C\nsome song\n== D\nsome song\n\n#pagebreak()\n= Index\n#ordered-outline()\n</code></pre>\n<p>With result :</p>\n<details>\n<summary>\nResult Image</summary>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/4/46dbe58a8c94bd7b15cefde9dac66920cda58018.png\" data-download-href=\"https://forum.typst.app/uploads/default/46dbe58a8c94bd7b15cefde9dac66920cda58018\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/4/46dbe58a8c94bd7b15cefde9dac66920cda58018_2_690x359.png\" alt=\"image\" data-base62-sha1=\"a6Qy3ADCFmdNprBBedJswJkdyXe\" width=\"690\" height=\"359\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/4/46dbe58a8c94bd7b15cefde9dac66920cda58018_2_690x359.png, https://forum.typst.app/uploads/default/original/2X/4/46dbe58a8c94bd7b15cefde9dac66920cda58018.png 1.5x, https://forum.typst.app/uploads/default/original/2X/4/46dbe58a8c94bd7b15cefde9dac66920cda58018.png 2x\" data-dominant-color=\"FDFDFD\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">710×370 22.4 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>\n<p>I want the letter of each “sub section” of the outline to be shown only one. How can i achieve this result ? In the example give, “A” should only be noted once even thought multiple song begin with A</p>\n<p>Thanks in advance for your help.</p>\n<details>\n<summary>\nEdits</summary>\n<p>EDIT 1 : Reformat code &amp; image for following <a class=\"mention\" href=\"/u/andrew\">@Andrew</a> comment.</p>\n</details>",
      "raw": "Hello everyone, \n\nFor a personal project where i'm trying to create a sorted outline by alphabetical order i found myself blocked due to my understanding of state that i consider has a global variable.\n\nThe current implementation of this ordered outline is : \n```typst\n#let alphabet-displayed = state(\"alphabet-displayed\", ())\n#let ordered-outline() = context {\n  let current-page = here().page()\n  let headings = query(selector(heading.where(level : 2)))\n  let sorted-headings = headings.sorted(\n    key: heading => {if heading.body.has(\"text\") {heading.body.text} else {\"\"}}\n  )\n  sorted-headings.map(entry => {\n      let first-letter = entry.body.text.first() \n      // reimplement default outline.entry\n      if entry.numbering != none {\n        numbering(entry.numbering, ..counter(heading).at(entry.location()))\n      }\n      [ ]\n      /*    Focus Here    */\n      if (first-letter not in alphabet-displayed.get()){\n        text(first-letter) + linebreak()\n        alphabet-displayed.update(current => current + (first-letter,))\n      }\n      h(4pt) + entry.body\n      box(width: 1fr, repeat[.])\n      [#entry.location().page()]\n    }).join([ \\ ])\n}\n\n\n== Aaaa\nsome song\n== Abaaa\nsome song\n== B\nsome song\n== C\nsome song\n== D\nsome song\n\n#pagebreak()\n= Index\n#ordered-outline()\n```\nWith result : \n[details=\"Result Image\"]\n![image|690x359](upload://a6Qy3ADCFmdNprBBedJswJkdyXe.png)\n[/details]\n\n\nI want the letter of each \"sub section\" of the outline to be shown only one. How can i achieve this result ? In the example give, \"A\" should only be noted once even thought multiple song begin with A \n\nThanks in advance for your help.\n[details=\"Edits\"]\nEDIT 1 : Reformat code & image for following @Andrew comment.\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 18,
      "score": 53.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 987
    },
    {
      "id": 12852,
      "post_number": 2,
      "username": "vmartel08",
      "name": "Vincent Martel",
      "created_at": "2025-05-21T10:08:34.564Z",
      "updated_at": "2025-05-21T10:11:22.981Z",
      "cooked": "<p>Hi there,</p>\n<p>Are you creating an index?</p>\n<p>This may be of some help <a href=\"https://typst.app/universe/package/in-dexter/\" class=\"inline-onebox\">in-dexter – Typst Universe</a> or at least some code they are using. Or perhaps <a href=\"https://typst.app/universe/package/glossarium\" class=\"inline-onebox\">glossarium – Typst Universe</a>.</p>",
      "raw": "Hi there,\n\nAre you creating an index? \n\nThis may be of some help https://typst.app/universe/package/in-dexter/ or at least some code they are using. Or perhaps https://typst.app/universe/package/glossarium.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 17,
      "score": 28.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 936
    },
    {
      "id": 12868,
      "post_number": 3,
      "username": "Alex",
      "name": "Alex",
      "created_at": "2025-05-21T13:26:09.934Z",
      "updated_at": "2025-05-21T13:26:09.934Z",
      "cooked": "<p>Hello,</p>\n<p>I’m actually trying to make an index from scratch.</p>\n<p>While those libraries are great, they don’t quite fit what I’m trying to achieve, especially after looking through the source code.</p>\n<p>I’d like to stick with the <code>state</code> approach, as I think it’ll help me deepen my understanding of how it all works.</p>",
      "raw": "Hello, \n\nI'm actually trying to make an index from scratch. \n\nWhile those libraries are great, they don't quite fit what I'm trying to achieve, especially after looking through the source code.\n\nI'd like to stick with the `state` approach, as I think it'll help me deepen my understanding of how it all works.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 16,
      "score": 8.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 987
    },
    {
      "id": 12900,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-21T17:52:24.032Z",
      "updated_at": "2025-05-21T17:52:24.032Z",
      "cooked": "<p>Hello. I can’t compile a document that uses your function. See <a href=\"https://sscce.org\">https://sscce.org</a>.</p>\n<aside class=\"quote no-group\" data-username=\"reknih\" data-post=\"1\" data-topic=\"11\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/reknih/48/3_2.png\" class=\"avatar\"><a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11/1\">How to post in the Questions category</a></div>\n<blockquote>\n<p>It would be great if you could post the <strong>smallest possible code samples</strong> that allow people to see what your problem is.</p>\n</blockquote>\n</aside>",
      "raw": "Hello. I can't compile a document that uses your function. See https://sscce.org.\n\n[quote=\"reknih, post:1, topic:11\"]\nIt would be great if you could post the **smallest possible code samples** that allow people to see what your problem is.\n[/quote]",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 15,
      "score": 18.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12972,
      "post_number": 5,
      "username": "undr",
      "name": "undr",
      "created_at": "2025-05-22T17:47:30.251Z",
      "updated_at": "2025-05-22T17:54:00.288Z",
      "cooked": "<p>The answer may be wrapping another <code>context</code> :</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">/*    Focus Here    */\n#context if (first-letter not in alphabet-displayed.get()){\n  text(first-letter) + linebreak()\n  alphabet-displayed.update(current =&gt; current + (first-letter,))\n}\n</code></pre>\n<details>\n<summary>\nResult</summary>\n<p> <img src=\"https://forum.typst.app/uploads/default/original/2X/d/dde51d49e64f1e94a9f47096748d5985398c1535.png\" alt=\"result\" data-base62-sha1=\"vEYoztFji7LqUECsOwsCar3cR5X\" width=\"283\" height=\"407\"> </p>\n</details>\n<details>\n<summary>\nWhole code</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(\n  width:5cm,\n  height:auto,\n  margin:10pt,\n)\n#let alphabet-displayed = state(\"alphabet-displayed\", ())\n#let writing = state(\"writing\", true)\n#let ordered-outline() = context {\n  let current-page = here().page()\n  let headings = query(selector(heading.where(level : 2)))\n  let sorted-headings = headings.sorted(\n    key: heading =&gt; {if heading.body.has(\"text\") {heading.body.text} else {\"\"}}\n  )\n  sorted-headings.map(entry =&gt; {\n      let first-letter = entry.body.text.first() \n      // reimplement default outline.entry\n      if entry.numbering != none {\n        numbering(entry.numbering, ..counter(heading).at(entry.location()))\n      }\n      [ ]\n      /*    Focus Here    */\n      context if (first-letter not in alphabet-displayed.get()){\n        text(first-letter) + linebreak()\n        alphabet-displayed.update(current =&gt; current + (first-letter,))\n      }\n      h(4pt) + entry.body\n      box(width: 1fr, repeat[.])\n      [#entry.location().page()]\n    }).join([ \\ ])\n}\n\n== Aaaa\nsome song\n== Abaaa\nsome song\n== B\nsome song\n== C\nsome song\n== D\n== Diary life\n== #sym.suit.heart\nsome song\n\n#pagebreak()\n= Index\n#ordered-outline()\n</code></pre>\n</details>\n<p>In a context environment, if you want to use an updated <code>state.value</code> , you have to insert another context by nested or parallel context.</p>\n<p>This is explained in the <a href=\"https://typst.app/docs/reference/context/#nested-contexts\">context reference</a>, which provides a very good overview. However, in this case, the fix actually uses a <strong>parallel context</strong> rather than a <strong>nested one</strong>, so the official explanation might not be entirely sufficient on its own. That’s why I wanted to add my own example to illustrate both patterns.</p>\n<details>\n<summary>\nAnother example</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let mycounter = counter(\"mycounter\")\n\n#context[\n  #mycounter.step()\n  Got #mycounter.display() after calling step().\n  // step() inside a context does not take effect immediately.\n\n  #context[\n    // Previous step() took effect here due to nesting.\n    Got #mycounter.display() by nesting a context.\n\n    // Now insert a counter (i.e., state) update.\n    #mycounter.step()\n\n    Got #mycounter.display(), which has not changed.\n    // Note: step() does not update the display number in the same context.\n\n    #context[\n      // 1. Nesting context\n      // Second step() took effect here due to nesting.\n      Got #mycounter.display() by nesting again.\n    ]\n  ]\n\n  #context[\n    // 2. Parallelizing context\n     // Second step() took effect here due to parallelizing.\n    Got #mycounter.display() by using a parallel context.\n  ]\n]\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/e/e5a7014abd0061133ec13249482d28ad468fabc5.png\" alt=\"zyvb\" data-base62-sha1=\"wLB98AnVV39myllNk9LvJYvnnJb\" width=\"336\" height=\"218\"></p>\n</details>",
      "raw": "The answer may be wrapping another `context` :\n\n```\n/*    Focus Here    */\n#context if (first-letter not in alphabet-displayed.get()){\n  text(first-letter) + linebreak()\n  alphabet-displayed.update(current => current + (first-letter,))\n}\n```\n\n[details=\"Result\"] ![result|283x407](upload://vEYoztFji7LqUECsOwsCar3cR5X.png) [/details] \n[details=\"Whole code\"]\n```\n#set page(\n  width:5cm,\n  height:auto,\n  margin:10pt,\n)\n#let alphabet-displayed = state(\"alphabet-displayed\", ())\n#let writing = state(\"writing\", true)\n#let ordered-outline() = context {\n  let current-page = here().page()\n  let headings = query(selector(heading.where(level : 2)))\n  let sorted-headings = headings.sorted(\n    key: heading => {if heading.body.has(\"text\") {heading.body.text} else {\"\"}}\n  )\n  sorted-headings.map(entry => {\n      let first-letter = entry.body.text.first() \n      // reimplement default outline.entry\n      if entry.numbering != none {\n        numbering(entry.numbering, ..counter(heading).at(entry.location()))\n      }\n      [ ]\n      /*    Focus Here    */\n      context if (first-letter not in alphabet-displayed.get()){\n        text(first-letter) + linebreak()\n        alphabet-displayed.update(current => current + (first-letter,))\n      }\n      h(4pt) + entry.body\n      box(width: 1fr, repeat[.])\n      [#entry.location().page()]\n    }).join([ \\ ])\n}\n\n== Aaaa\nsome song\n== Abaaa\nsome song\n== B\nsome song\n== C\nsome song\n== D\n== Diary life\n== #sym.suit.heart\nsome song\n\n#pagebreak()\n= Index\n#ordered-outline()\n```\n[/details] \nIn a context environment, if you want to use an updated `state.value` , you have to insert another context by nested or parallel context. \n\nThis is explained in the [context reference](https://typst.app/docs/reference/context/#nested-contexts), which provides a very good overview. However, in this case, the fix actually uses a **parallel context** rather than a **nested one**, so the official explanation might not be entirely sufficient on its own. That's why I wanted to add my own example to illustrate both patterns.\n[details=\"Another example\"]\n\n```\n#let mycounter = counter(\"mycounter\")\n\n#context[\n  #mycounter.step()\n  Got #mycounter.display() after calling step().\n  // step() inside a context does not take effect immediately.\n\n  #context[\n    // Previous step() took effect here due to nesting.\n    Got #mycounter.display() by nesting a context.\n\n    // Now insert a counter (i.e., state) update.\n    #mycounter.step()\n\n    Got #mycounter.display(), which has not changed.\n    // Note: step() does not update the display number in the same context.\n\n    #context[\n      // 1. Nesting context\n      // Second step() took effect here due to nesting.\n      Got #mycounter.display() by nesting again.\n    ]\n  ]\n\n  #context[\n    // 2. Parallelizing context\n     // Second step() took effect here due to parallelizing.\n    Got #mycounter.display() by using a parallel context.\n  ]\n]\n```\n\n![zyvb|336x218](upload://wLB98AnVV39myllNk9LvJYvnnJb.png) \n[/details]",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 13,
      "score": 17.6,
      "accepted_answer": true,
      "trust_level": 1,
      "user_id": 982
    },
    {
      "id": 12973,
      "post_number": 6,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-22T18:12:36.150Z",
      "updated_at": "2025-05-22T18:12:36.150Z",
      "cooked": "<p>If you want to do an outline properly, that mimics the default one, then you need to</p>\n<ul>\n<li>use blocks,</li>\n<li>the outline heading should not be included in the PDF Document Outline, nor have numbering,</li>\n<li>the heading level is 2 for no reason, unless there is a context missing,</li>\n<li>and the is link missing to each heading.</li>\n</ul>\n<p>Though, the indent thingy kind of goes away, since you make a custom one-time indent (I’m not sure if grid is used in the new outline). I feel the most natural way is to group headings by the first letter and then work on the dictionary and then on individual headings. You also have some stuff that is never used.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/t4t:0.4.3\": get\n\n#let ordered-outline(title: \"Index\") = context {\n  let alphabet-displayed = state(\"alphabet-displayed\", ())\n  let headings = query(heading.where(level: 1))\n  let index = headings.position(it =&gt; get.text(it) == get.text(title))\n  if index != none { _ = headings.remove(index) }\n  let sorted-headings = headings.sorted(key: get.text)\n\n  let buckets = (:)\n  for heading in sorted-headings {\n    let letter = get.text(heading).clusters().first()\n    buckets.insert(letter, buckets.at(letter, default: ()) + (heading,))\n  }\n\n  heading(outlined: false, numbering: none, title)\n  buckets\n    .pairs()\n    .map(((letter, headings)) =&gt; {\n      let fill = box(width: 1fr, repeat[.])\n      let headings = for entry in headings {\n        let numbering = if entry.numbering != none {\n          numbering(entry.numbering, ..counter(heading).at(entry.location()))\n          h(0.3em)\n        }\n        let page = entry.location().page()\n        let body = pad(left: 0.7em, block[#numbering#entry.body #fill #page])\n        link(entry.location(), body)\n      }\n      block(letter, spacing: 0.65em)\n      block(spacing: 0pt, layout(size =&gt; {\n        let extend = 0.4em\n        place(dx: 0.3em, dy: -extend, line(\n          length: measure(headings).height + extend,\n          angle: 90deg,\n          stroke: purple,\n        ))\n      }))\n      headings\n    })\n    .join()\n}\n\n#set heading(numbering: \"1.\")\n\n#ordered-outline()\n\n= #text(red)[Aaaa]\n= Aaaa\nsome song\n= Cheading\nsome song\n= Bheading\n#pagebreak()\nsome song\n= Dheading\nsome song\n= Aaaaa\nsome song\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/0/002bf789e4559f781289bc495d01c53a2a3aff06.png\" alt=\"image\" data-base62-sha1=\"1wcjZZgI7Gx9VkYoIsj8AeP4b4\" width=\"586\" height=\"418\"></p>\n<p>You can of course remove the fancy part:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">      block(spacing: 0pt, layout(size =&gt; {\n        let extend = 0.4em\n        place(dx: 0.3em, dy: -extend, line(\n          length: measure(headings).height + extend,\n          angle: 90deg,\n          stroke: purple,\n        ))\n      }))\n</code></pre>",
      "raw": "If you want to do an outline properly, that mimics the default one, then you need to\n- use blocks,\n- the outline heading should not be included in the PDF Document Outline, nor have numbering,\n- the heading level is 2 for no reason, unless there is a context missing,\n- and the is link missing to each heading.\n\nThough, the indent thingy kind of goes away, since you make a custom one-time indent (I'm not sure if grid is used in the new outline). I feel the most natural way is to group headings by the first letter and then work on the dictionary and then on individual headings. You also have some stuff that is never used.\n\n```typ\n#import \"@preview/t4t:0.4.3\": get\n\n#let ordered-outline(title: \"Index\") = context {\n  let alphabet-displayed = state(\"alphabet-displayed\", ())\n  let headings = query(heading.where(level: 1))\n  let index = headings.position(it => get.text(it) == get.text(title))\n  if index != none { _ = headings.remove(index) }\n  let sorted-headings = headings.sorted(key: get.text)\n\n  let buckets = (:)\n  for heading in sorted-headings {\n    let letter = get.text(heading).clusters().first()\n    buckets.insert(letter, buckets.at(letter, default: ()) + (heading,))\n  }\n\n  heading(outlined: false, numbering: none, title)\n  buckets\n    .pairs()\n    .map(((letter, headings)) => {\n      let fill = box(width: 1fr, repeat[.])\n      let headings = for entry in headings {\n        let numbering = if entry.numbering != none {\n          numbering(entry.numbering, ..counter(heading).at(entry.location()))\n          h(0.3em)\n        }\n        let page = entry.location().page()\n        let body = pad(left: 0.7em, block[#numbering#entry.body #fill #page])\n        link(entry.location(), body)\n      }\n      block(letter, spacing: 0.65em)\n      block(spacing: 0pt, layout(size => {\n        let extend = 0.4em\n        place(dx: 0.3em, dy: -extend, line(\n          length: measure(headings).height + extend,\n          angle: 90deg,\n          stroke: purple,\n        ))\n      }))\n      headings\n    })\n    .join()\n}\n\n#set heading(numbering: \"1.\")\n\n#ordered-outline()\n\n= #text(red)[Aaaa]\n= Aaaa\nsome song\n= Cheading\nsome song\n= Bheading\n#pagebreak()\nsome song\n= Dheading\nsome song\n= Aaaaa\nsome song\n```\n\n![image|586x418](upload://1wcjZZgI7Gx9VkYoIsj8AeP4b4.png)\n\nYou can of course remove the fancy part:\n\n```typc\n      block(spacing: 0pt, layout(size => {\n        let extend = 0.4em\n        place(dx: 0.3em, dy: -extend, line(\n          length: measure(headings).height + extend,\n          angle: 90deg,\n          stroke: purple,\n        ))\n      }))\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 13,
      "score": 17.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:47:31.445636"
}