{
  "topic_metadata": {
    "id": 3596,
    "title": "How to compare func type of content?",
    "slug": "how-to-compare-func-type-of-content",
    "posts_count": 9,
    "created_at": "2025-04-10T11:39:14.025Z",
    "last_posted_at": "2025-04-18T21:29:26.058Z",
    "views": 133,
    "like_count": 5,
    "reply_count": 6,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "Ants_Aare_Alamaa",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1050
  },
  "posts": [
    {
      "id": 10873,
      "post_number": 1,
      "username": "Ants_Aare_Alamaa",
      "name": "Ants Aare Alamaa",
      "created_at": "2025-04-10T11:39:14.235Z",
      "updated_at": "2025-04-19T00:02:21.876Z",
      "cooked": "<p>I’m iterating over the children of a sequence, each one can be any type, be it text, math or context. I want to switch depending on the func type like this:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">if child.func() == text {\n  ...\n} else if child.func() == context {\n  ...\n} else if child.func() == space {\n  ...\n} else if child.func() in (footnote, box, block, strike) {\n   ...\n}\n</code></pre>\n<p>this works totally fine for text, but it doesn’t seem to be working for the rest. probably because these funcs aren’t imported by default(?) or that it’s trying to invoke the function instead of comparing the functions. comparing with string doesn’t work… how do I get these funcs?</p>\n<p>when I do <code>repr(child.func)</code> I get this:<br>\ntext<br>\nspace<br>\ntext<br>\nfrac<br>\ncontext<br>\ntext</p>",
      "raw": "I'm iterating over the children of a sequence, each one can be any type, be it text, math or context. I want to switch depending on the func type like this:\n```typc\nif child.func() == text {\n  ...\n} else if child.func() == context {\n  ...\n} else if child.func() == space {\n  ...\n} else if child.func() in (footnote, box, block, strike) {\n   ...\n}\n```\nthis works totally fine for text, but it doesn't seem to be working for the rest. probably because these funcs aren't imported by default(?) or that it's trying to invoke the function instead of comparing the functions. comparing with string doesn't work... how do I get these funcs?\n\nwhen I do `repr(child.func)` I get this:\ntext\nspace\ntext\nfrac\ncontext\ntext",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 131.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 1028
    },
    {
      "id": 10875,
      "post_number": 2,
      "username": "Mathemensch",
      "name": "Alexander Schulz",
      "created_at": "2025-04-10T11:54:17.657Z",
      "updated_at": "2025-04-10T11:54:17.657Z",
      "cooked": "<p>You should use the <code>type</code> function for this kind of comparison:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#if type(child) == text {\n  ...\n} else if type(child) == context {\n  ...\n} else if type(child) == space{\n  ...\n} else if type(child) in (footnote, box, block, strike){\n   ...\n}\n</code></pre>\n<p>See the documentation:</p><aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://typst.app/docs/reference/foundations/type/\">\n  <header class=\"source\">\n      <img src=\"https://forum.typst.app/uploads/default/original/1X/098187a593d51c4db99324614e2baeeb1bb355cc.png\" class=\"site-icon\" data-dominant-color=\"3CA8B6\" width=\"32\" height=\"32\">\n\n      <a href=\"https://typst.app/docs/reference/foundations/type/\" target=\"_blank\" rel=\"noopener\">Typst</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/361;\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/db1c18ed802fe6841bee62606931f352da10ed09_2_690x362.png\" class=\"thumbnail\" data-dominant-color=\"7CC2C5\" width=\"690\" height=\"362\"></div>\n\n<h3><a href=\"https://typst.app/docs/reference/foundations/type/\" target=\"_blank\" rel=\"noopener\">Type Type – Typst Documentation</a></h3>\n\n  <p>Documentation for the Type type.</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
      "raw": "You should use the `type` function for this kind of comparison:\n\n```typ\n#if type(child) == text {\n  ...\n} else if type(child) == context {\n  ...\n} else if type(child) == space{\n  ...\n} else if type(child) in (footnote, box, block, strike){\n   ...\n}\n```\n\nSee the documentation:\nhttps://typst.app/docs/reference/foundations/type/",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 28,
      "score": 40.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 307
    },
    {
      "id": 10879,
      "post_number": 3,
      "username": "Ants_Aare_Alamaa",
      "name": "Ants Aare Alamaa",
      "created_at": "2025-04-10T12:19:42.973Z",
      "updated_at": "2025-04-10T12:19:42.973Z",
      "cooked": "<p>the type of all of the above is <code>content</code> so this doesn’t work. Also the code you provided doesn’t compile, it’s giving the same errors for using context, space, etc I need to get the funcs for these types of content somehow else or compare the repr, which I think may be slow</p>",
      "raw": "the type of all of the above is ```content``` so this doesn't work. Also the code you provided doesn't compile, it's giving the same errors for using context, space, etc I need to get the funcs for these types of content somehow else or compare the repr, which I think may be slow",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 27,
      "score": 55.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 1028
    },
    {
      "id": 10880,
      "post_number": 4,
      "username": "Ants_Aare_Alamaa",
      "name": "Ants Aare Alamaa",
      "created_at": "2025-04-10T12:56:41.777Z",
      "updated_at": "2025-04-10T12:56:41.777Z",
      "cooked": "<p>I found a temporary solution:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let styled-func = [#set text(fill: red)].func()\n#let context-func = [#context{}].func()\n</code></pre>\n<p>and then just compare with the respective variables. Don’t know how performant it’s going to be in a bigger project though</p>",
      "raw": "I found a temporary solution:\n```typst\n#let styled-func = [#set text(fill: red)].func()\n#let context-func = [#context{}].func()\n```\nand then just compare with the respective variables. Don't know how performant it's going to be in a bigger project though",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 26,
      "score": 5.2,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 1028
    },
    {
      "id": 11156,
      "post_number": 5,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-16T13:34:26.184Z",
      "updated_at": "2025-04-16T13:37:47.720Z",
      "cooked": "<p>Usually when you want to do this, you are overcomplicating something. It is rare when you need this, only if you are parsing some user document for your package that work on raw content. So you shouldn’t work with all this unless you are sure that there is no other choice, which depending on your experience, can require another person to know for sure.</p>\n<p>There are <code>content</code> functions and basic types, for types you would use <code>type()</code> and for <code>content</code> you would use <code>.func()</code>. Some content functions are not public because you are not supposed to use them. These are <code>styled</code>, <code>context</code> and <code>sequence</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let styled = text(red)[].func()\n#let context-func = (context { }).func()\n#let sequence = [].func()\n</code></pre>\n<hr>\n<p>Also, please use an appropriate language identifier for the code block. If you want to write in code mode, use <code>typc</code>, in math — use <code>typm</code>.</p>",
      "raw": "Usually when you want to do this, you are overcomplicating something. It is rare when you need this, only if you are parsing some user document for your package that work on raw content. So you shouldn't work with all this unless you are sure that there is no other choice, which depending on your experience, can require another person to know for sure.\n\nThere are `content` functions and basic types, for types you would use `type()` and for `content` you would use `.func()`. Some content functions are not public because you are not supposed to use them. These are `styled`, `context` and `sequence`:\n\n```typ\n#let styled = text(red)[].func()\n#let context-func = (context { }).func()\n#let sequence = [].func()\n```\n\n---\n\nAlso, please use an appropriate language identifier for the code block. If you want to write in code mode, use `typc`, in math --- use `typm`.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 21,
      "score": 29.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 11219,
      "post_number": 6,
      "username": "Ants_Aare_Alamaa",
      "name": "Ants Aare Alamaa",
      "created_at": "2025-04-17T09:48:16.227Z",
      "updated_at": "2025-04-18T21:15:38.135Z",
      "cooked": "<p>yes, I’m making a package that parses raw content. I managed to do it exactly the way you suggested and have these three as utility variables, and it works well so far.</p>\n<p>I’ve ran into a new issue though, apparently it’s not possible to change the body of content manually, and you can’t simply reconstruct it (for example like this: my-content.with(body:my-body)) So what I’m doing right now is so incredibly hacky that it feels like I shouldn’t be doing it. basically I have a method that’s called reconstruct-content where you pass in a template and the new body, and depending on the func type it will call the func and pass in the fields like this:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">if content.func() == highlight {\n    return template.func()(\n      body,\n      extent: template.at(\"extent\", default: 0pt),\n      fill: template.at(\"fill\", default: rgb(\"#fffd11a1\")),\n      radius: template.at(\"radius\", default: (:)),\n      stroke: template.at(\"stroke\", default: (:)),\n    )\n  } else if content.func() == ...{\n        ...\n } else if content.func() == ...{\n        ...\n }\n</code></pre>\n<p>this works reasonably well, but if I want to replace a nested content (for example <code>highlight(fill:blue)[#text(red)[test]]</code> here I’d like to replace “test”) I will need to do this recursively. show and set rules won’t easily work in my use case, I’ve tried it.</p>\n<p>All in all it feels like Typst doesn’t want to be used in the way I’m using it here</p>",
      "raw": "yes, I'm making a package that parses raw content. I managed to do it exactly the way you suggested and have these three as utility variables, and it works well so far.\n\nI've ran into a new issue though, apparently it's not possible to change the body of content manually, and you can't simply reconstruct it (for example like this: my-content.with(body:my-body)) So what I'm doing right now is so incredibly hacky that it feels like I shouldn't be doing it. basically I have a method that's called reconstruct-content where you pass in a template and the new body, and depending on the func type it will call the func and pass in the fields like this:\n```typc\nif content.func() == highlight {\n    return template.func()(\n      body,\n      extent: template.at(\"extent\", default: 0pt),\n      fill: template.at(\"fill\", default: rgb(\"#fffd11a1\")),\n      radius: template.at(\"radius\", default: (:)),\n      stroke: template.at(\"stroke\", default: (:)),\n    )\n  } else if content.func() == ...{\n        ...\n } else if content.func() == ...{\n        ...\n }\n```\nthis works reasonably well, but if I want to replace a nested content (for example `highlight(fill:blue)[#text(red)[test]]` here I'd like to replace \"test\") I will need to do this recursively. show and set rules won't easily work in my use case, I've tried it.\n\nAll in all it feels like Typst doesn't want to be used in the way I'm using it here",
      "reply_to_post_number": 5,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 19.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 1028
    },
    {
      "id": 11250,
      "post_number": 7,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-17T16:48:15.015Z",
      "updated_at": "2025-04-17T16:48:15.015Z",
      "cooked": "<p>For this code block, you need to use <code>typc</code> language identifier, not <code>typ</code> (same with <a href=\"https://forum.typst.app/t/compare-func-type-of-content/3596\">this one</a>, as <a href=\"https://forum.typst.app/t/compare-func-type-of-content/3596/5\">I’ve already said</a>). Also, when you use code in text, you should use single backticks, otherwise it’s hard to read it. Furthermore, <code>highlight(fill:blue)[text(red)[test]]</code> will output <code>text(red)[test]</code> in blue. See <a href=\"https://typst.app/docs/tutorial/formatting/#set-rules:~:text=Wait%2C%20shouldn't%20all%20arguments%20of,normal%20arguments%2C%20saving%20on%20punctuation%2e\">this</a>.</p>\n<p>What you are doing is parsing the whole Typst document inside Typst. This won’t work because styles and context do not have a public API to easily work with them and reconstruct them. You can’t do anything with <code>context</code>.</p>\n<p>You should create a new <a class=\"hashtag-cooked\" href=\"/c/questions/5\" data-type=\"category\" data-slug=\"questions\" data-id=\"5\"><span class=\"hashtag-icon-placeholder\"><svg class=\"fa d-icon d-icon-square-full svg-icon svg-node\"><use href=\"#square-full\"></use></svg></span><span>Questions</span></a> topic about what package you want to make. To painlessly (maybe) work with Typst AST, you better just make a Rust Wasm plugin, if you know Rust.</p>",
      "raw": "For this code block, you need to use `typc` language identifier, not `typ` (same with [this one](https://forum.typst.app/t/compare-func-type-of-content/3596?u=andrew), as [I've already said](https://forum.typst.app/t/compare-func-type-of-content/3596/5?u=andrew)). Also, when you use code in text, you should use single backticks, otherwise it's hard to read it. Furthermore, `highlight(fill:blue)[text(red)[test]]` will output `text(red)[test]` in blue. See [this](https://typst.app/docs/tutorial/formatting/#set-rules:~:text=Wait%2C%20shouldn't%20all%20arguments%20of,normal%20arguments%2C%20saving%20on%20punctuation%2e).\n\nWhat you are doing is parsing the whole Typst document inside Typst. This won't work because styles and context do not have a public API to easily work with them and reconstruct them. You can't do anything with `context`.\n\nYou should create a new #questions topic about what package you want to make. To painlessly (maybe) work with Typst AST, you better just make a Rust Wasm plugin, if you know Rust.",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 9.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 11311,
      "post_number": 8,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-04-18T21:01:12.718Z",
      "updated_at": "2025-04-18T21:01:12.718Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/ants_aare_alamaa\">@Ants_Aare_Alamaa</a>, I’ve formatted your code blocks as Andrew has described. I’d ask you to take make sure you format them correctly. I saw that you attempted it; note the difference between <code>typ</code> and <code>typc</code> for a code block’s language.</p>\n<hr>\n<aside class=\"quote no-group\" data-username=\"Ants_Aare_Alamaa\" data-post=\"6\" data-topic=\"3596\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/ants_aare_alamaa/48/2077_2.png\" class=\"avatar\"> Ants_Aare_Alamaa:</div>\n<blockquote>\n<p>apparently it’s not possible to change the body of content manually, and you can’t simply reconstruct it</p>\n</blockquote>\n</aside>\n<p>you may also be interested in this post:</p>\n<aside class=\"quote quote-modified\" data-post=\"2\" data-topic=\"1099\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/how-can-i-manipulate-content-values/1099/2\">How can I manipulate content values?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    Content is not really meant to be manipulated, usually the better way is to only create content from data that has already been processed in any way necessary. This is often the right advice for e.g. <a href=\"https://forum.typst.app/t/how-to-sum-column-values-in-a-table/937/2\">tables</a> – however, it is not really applicable to your use case because the data you have is fundamentally already formatted text. \nThe next best way, though, is not manipulating the full hierarchy of the content value you’re dealing with, but applying a rule. Your specific case can be handled by thi…\n  </blockquote>\n</aside>\n\n<p>Basically, you need the <a href=\"https://typst.app/docs/reference/foundations/content/#definitions-func\">function</a> and the <a href=\"https://typst.app/docs/reference/foundations/content/#definitions-fields\">fields</a> to reconstruct some content, but <code>fields()</code> gives you a dictionary, while the functions take some parameters positionally. That post demonstrates how to do it relatively conveniently.</p>",
      "raw": "Hi @Ants_Aare_Alamaa, I've formatted your code blocks as Andrew has described. I'd ask you to take make sure you format them correctly. I saw that you attempted it; note the difference between `typ` and `typc` for a code block's language.\n\n---\n\n[quote=\"Ants_Aare_Alamaa, post:6, topic:3596\"]\napparently it’s not possible to change the body of content manually, and you can’t simply reconstruct it\n[/quote]\n\nyou may also be interested in this post:\n\nhttps://forum.typst.app/t/how-can-i-manipulate-content-values/1099/2?u=sillyfreak\n\nBasically, you need the [function](https://typst.app/docs/reference/foundations/content/#definitions-func) and the [fields](https://typst.app/docs/reference/foundations/content/#definitions-fields) to reconstruct some content, but `fields()` gives you a dictionary, while the functions take some parameters positionally. That post demonstrates how to do it relatively conveniently.",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 21,
      "score": 29.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 11316,
      "post_number": 9,
      "username": "Ants_Aare_Alamaa",
      "name": "Ants Aare Alamaa",
      "created_at": "2025-04-18T21:29:26.058Z",
      "updated_at": "2025-04-18T21:29:26.058Z",
      "cooked": "<p>ah, sorry about the formatting issue, and I meant to add a “#” before the <code>text(red)</code>. I was trying to show that I had issues with nested content. And yeah I’m kind of trying to work with the AST inside the package, however smart that may be. I barely got it to work which made me hopeful that there’s an actual way to achieve this. I’ll rethink the current approach though.</p>",
      "raw": "ah, sorry about the formatting issue, and I meant to add a \"#\" before the `text(red)`. I was trying to show that I had issues with nested content. And yeah I'm kind of trying to work with the AST inside the package, however smart that may be. I barely got it to work which made me hopeful that there's an actual way to achieve this. I'll rethink the current approach though.",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 20,
      "score": 4.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 1028
    }
  ],
  "scraped_at": "2025-06-10T09:49:25.327381"
}