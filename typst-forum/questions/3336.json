{
  "topic_metadata": {
    "id": 3336,
    "title": "How to write a multi-line set builder?",
    "slug": "how-to-write-a-multi-line-set-builder",
    "posts_count": 5,
    "created_at": "2025-03-19T17:39:06.884Z",
    "last_posted_at": "2025-03-19T18:31:52.430Z",
    "views": 75,
    "like_count": 8,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "janekfleper",
    "tags": [
      "math"
    ],
    "category_id": 5,
    "participant_count": 5,
    "word_count": 412
  },
  "posts": [
    {
      "id": 10004,
      "post_number": 1,
      "username": "Jace",
      "name": "Jace",
      "created_at": "2025-03-19T17:39:07.015Z",
      "updated_at": "2025-03-19T17:44:10.768Z",
      "cooked": "<p>A set builder notation with multiple lines can be wrote in latex with array:<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/d/dd13e1104f6df628e62073f6d6d3b3d8142ebc80.png\" alt=\"https://i.sstatic.net/TJ9lj.png\" data-base62-sha1=\"vxK6W00nE0sPOcJyIhlJl1yHpUA\" width=\"360\" height=\"50\">.<br>\nHow can this be done in typst?</p>",
      "raw": "A set builder notation with multiple lines can be wrote in latex with array:\n![https://i.sstatic.net/TJ9lj.png](upload://vxK6W00nE0sPOcJyIhlJl1yHpUA.png).\nHow can this be done in typst?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 194.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1368
    },
    {
      "id": 10005,
      "post_number": 2,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-03-19T17:58:01.004Z",
      "updated_at": "2025-03-19T17:58:01.004Z",
      "cooked": "<p>Hi and welcome to the forum!</p>\n<p>The technique i’ve been using is to use <code>cases</code>, although admittedly it’s a bit hacky:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">$\ncal(Z) = {\n  z\n  cases(\n    delim: \"|\",\n    1 &lt;= z_((k, m))^l &lt;= ...,\n    forall k in cal(K)\\, ...\n  )\n}\n$\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/d/dc8dbebe7773111a9285cff42d78e837849a5482.png\" alt=\"image\" data-base62-sha1=\"vt6JjOCRp447tZFpyzA5eVaUOci\" width=\"325\" height=\"103\"></p>",
      "raw": "Hi and welcome to the forum!\n\nThe technique i've been using is to use `cases`, although admittedly it's a bit hacky:\n\n```typst\n$\ncal(Z) = {\n  z\n  cases(\n    delim: \"|\",\n    1 <= z_((k, m))^l <= ...,\n    forall k in cal(K)\\, ...\n  )\n}\n$\n```\n![image|325x103](upload://vt6JjOCRp447tZFpyzA5eVaUOci.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 22,
      "score": 54.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 501
    },
    {
      "id": 10006,
      "post_number": 3,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-03-19T17:59:13.990Z",
      "updated_at": "2025-03-19T20:04:18.621Z",
      "cooked": "<p>My first approach would be like this, with stack and nested equations.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">$ cal(Z) = lr({z mid(|) #align(left)[#stack(spacing: 0.4em, dir: ttb, $A, B, C$, $a, b, c$)]}) $\n</code></pre>\n<p>This doesn’t feel so elegant, maybe because of the need to ensure left alignment or the nested equations in equation.</p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/1/1e8fa32d6e4ef4de5704fb2e09bae4e5409e4273.png\" alt=\"bild\" data-base62-sha1=\"4mm457JNOT5iWLnNFTTiZpGzS3V\" width=\"330\" height=\"105\"></p>\n<p>Now that I compare, I think using <code>cases</code> is better!</p>\n<p>Edit: We can define a “math version of stack” and salvage the syntax. I think this is a win for typst!</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let mstack(..args) = $#align(left)[#stack(spacing: 0.4em, dir: ttb, ..args)]$\n\n$ cal(Z) = lr(\\{z mid(|) mstack(A#sym.comma B \"and\" C, a#sym.comma b \"and\" c) \\}) $\n</code></pre>",
      "raw": "My first approach would be like this, with stack and nested equations.\n\n```typst\n$ cal(Z) = lr({z mid(|) #align(left)[#stack(spacing: 0.4em, dir: ttb, $A, B, C$, $a, b, c$)]}) $\n```\n\nThis doesn't feel so elegant, maybe because of the need to ensure left alignment or the nested equations in equation.\n\n![bild|440x141, 75%](upload://4mm457JNOT5iWLnNFTTiZpGzS3V.png)\n\n\nNow that I compare, I think using `cases` is better!\n\n\nEdit: We can define a \"math version of stack\" and salvage the syntax. I think this is a win for typst!\n\n```typst\n#let mstack(..args) = $#align(left)[#stack(spacing: 0.4em, dir: ttb, ..args)]$\n\n$ cal(Z) = lr(\\{z mid(|) mstack(A#sym.comma B \"and\" C, a#sym.comma b \"and\" c) \\}) $\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 21,
      "score": 19.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 10007,
      "post_number": 4,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-03-19T17:59:28.556Z",
      "updated_at": "2025-03-19T18:03:33.953Z",
      "cooked": "<p>Disclaimer: This solution is equivalent to the one by <a class=\"mention\" href=\"/u/aarnent\">@aarnent</a>. He was just ~1 minute faster <img src=\"https://forum.typst.app/images/emoji/apple/cry.png?v=12\" title=\":cry:\" class=\"emoji\" alt=\":cry:\" loading=\"lazy\" width=\"20\" height=\"20\"><br>\nYou can use <a href=\"https://typst.app/docs/reference/math/cases/\"><code>math.cases()</code></a> to get the multiple lines. And then you just wrap everything in curly brackets. Note that you have to use <code>sym.comma</code> (or <code>\\,</code>) since the regular comma will be interpreted as a new case.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.cases(delim: \"|\")\n\n$\n  cal(Z) = {\n    z cases(\n      #h(0.5em) 1 &lt;= z_((k,m))^l &lt;= ... ,\n      #h(0.5em) forall k in cal(K) #sym.comma forall m in cal(M)_k #sym.comma ...\n    )\n  }\n$\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/b/b08bce2eba4dfc9a3d2a91d83b6419b1a1091d2f.png\" data-download-href=\"https://forum.typst.app/uploads/default/b08bce2eba4dfc9a3d2a91d83b6419b1a1091d2f\" title=\"forum_3336_mulitline-set\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/b/b08bce2eba4dfc9a3d2a91d83b6419b1a1091d2f_2_517x129.png\" alt=\"forum_3336_mulitline-set\" data-base62-sha1=\"pbNz7zZXr2rUEdoFnXVaGiCegYT\" width=\"517\" height=\"129\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/b/b08bce2eba4dfc9a3d2a91d83b6419b1a1091d2f_2_517x129.png, https://forum.typst.app/uploads/default/optimized/2X/b/b08bce2eba4dfc9a3d2a91d83b6419b1a1091d2f_2_775x193.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/b/b08bce2eba4dfc9a3d2a91d83b6419b1a1091d2f_2_1034x258.png 2x\" data-dominant-color=\"F4F4F4\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">forum_3336_mulitline-set</span><span class=\"informations\">1472×367 79.6 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "Disclaimer: This solution is equivalent to the one by @aarnent. He was just ~1 minute faster :cry:\nYou can use [`math.cases()`](https://typst.app/docs/reference/math/cases/) to get the multiple lines. And then you just wrap everything in curly brackets. Note that you have to use `sym.comma` (or `\\,`) since the regular comma will be interpreted as a new case.\n\n```typ\n#set math.cases(delim: \"|\")\n\n$\n  cal(Z) = {\n    z cases(\n      #h(0.5em) 1 <= z_((k,m))^l <= ... ,\n      #h(0.5em) forall k in cal(K) #sym.comma forall m in cal(M)_k #sym.comma ...\n    )\n  }\n$\n```\n\n![forum_3336_mulitline-set|690x172, 75%](upload://pbNz7zZXr2rUEdoFnXVaGiCegYT.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 4,
      "reads": 21,
      "score": 89.2,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 69
    },
    {
      "id": 10008,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-03-19T18:31:52.430Z",
      "updated_at": "2025-03-19T18:31:52.430Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"janekfleper\" data-post=\"4\" data-topic=\"3336\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/j/8F38B1/48.png\" class=\"avatar\"> janekfleper:</div>\n<blockquote>\n<p>Note that you have to use <code>sym.comma</code> (or <code>\\,</code>) since the regular comma will be interpreted as a new case</p>\n</blockquote>\n</aside>\n<p>you can get around this by using a new equation for each case, like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">$\n  cal(Z) = {\n    z #math.cases(\n      $#h(0.5em) 1 &lt;= z_((k,m))^l &lt;= ...$,\n      $#h(0.5em) forall k in cal(K), forall m in cal(M)_k, ...$,\n    )\n  }\n$\n</code></pre>\n<p>&nbsp;</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">instead of $       cases(a,   b  ) $\nuse        $ #math.cases($a$, $b$) $\n</code></pre>\n<p>this means the the <code>cases</code> call is in code mode, so each parameter needs to be wrapped in <code>$...$</code> – in return, each equation is isolated from math mode’s comma parsing.</p>",
      "raw": "[quote=\"janekfleper, post:4, topic:3336\"]\nNote that you have to use `sym.comma` (or `\\,`) since the regular comma will be interpreted as a new case\n[/quote]\n\nyou can get around this by using a new equation for each case, like this:\n\n```typ\n$\n  cal(Z) = {\n    z #math.cases(\n      $#h(0.5em) 1 <= z_((k,m))^l <= ...$,\n      $#h(0.5em) forall k in cal(K), forall m in cal(M)_k, ...$,\n    )\n  }\n$\n```\n\n&nbsp;\n\n```typ\ninstead of $       cases(a,   b  ) $\nuse        $ #math.cases($a$, $b$) $\n```\nthis means the the `cases` call is in code mode, so each parameter needs to be wrapped in `$...$` -- in return, each equation is isolated from math mode's comma parsing.",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 20,
      "score": 4.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:50:12.534038"
}