{
  "topic_metadata": {
    "id": 2963,
    "title": "How can I insert unbreakable space automatically after some characters?",
    "slug": "how-can-i-insert-unbreakable-space-automatically-after-some-characters",
    "posts_count": 5,
    "created_at": "2025-02-24T16:01:50.422Z",
    "last_posted_at": "2025-02-25T15:02:05.581Z",
    "views": 101,
    "like_count": 5,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Astra3",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 454
  },
  "posts": [
    {
      "id": 8983,
      "post_number": 1,
      "username": "Astra3",
      "name": "",
      "created_at": "2025-02-24T16:01:50.521Z",
      "updated_at": "2025-03-07T21:24:07.162Z",
      "cooked": "<p>In Czech, when writing some more <em>advanced</em> documents, there is a rule, where conjunctions cannot line wrap, in another words, it cannot be the last character on a line. If the rendered output looked like this:</p>\n<blockquote>\n<p>Dnes jsme přijeli domů a<br>\nrozbalili nákup.</p>\n</blockquote>\n<p>it’d be incorrect as the first line ends with <code>a</code>. A correct example would have <code>a</code> on the start of the second line. This also applies if the characters are the first word in a sentence. This example:</p>\n<blockquote>\n<p>Mánička dnes dojela domů. K<br>\ntomu všemu nestihla ani rozbalit nákup.</p>\n</blockquote>\n<p>is also incorrect.</p>\n<p>The conjunctions (not only conjunctions, but it’s the closest word) are these: <code>[\"a\",\"A\",\"k\",\"K\",\"i\", \"I\", \"u\", \"U\", \"s\", \"S\", \"o\", \"O\", \"v\", \"V\"]</code>.</p>\n<p>The most manual solution is to insert unbreakable space after each conjunction, like so:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">Máma dnes dojela domů a~rozbalila nákup.\n</code></pre>\n<p>It gets very tedious and I was wondering, is there a way to do it automatically for every paragraph?</p>\n<p>I tried using regex to match and replace, however typst’s regex cannot use lookahead and cannot replace only specific capture groups. Another solution is to use individual show rules, like so:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show \" a \": [ a~]\n#show \" i \": [ i~]\n</code></pre>\n<p>However, as you can see, it can get very tedious.</p>",
      "raw": "In Czech, when writing some more *advanced* documents, there is a rule, where conjunctions cannot line wrap, in another words, it cannot be the last character on a line. If the rendered output looked like this:\n> Dnes jsme přijeli domů a\n> rozbalili nákup.\n\nit'd be incorrect as the first line ends with `a`. A correct example would have `a` on the start of the second line. This also applies if the characters are the first word in a sentence. This example:\n> Mánička dnes dojela domů. K\n> tomu všemu nestihla ani rozbalit nákup.\n\nis also incorrect.\n\nThe conjunctions (not only conjunctions, but it's the closest word) are these: `[\"a\",\"A\",\"k\",\"K\",\"i\", \"I\", \"u\", \"U\", \"s\", \"S\", \"o\", \"O\", \"v\", \"V\"]`.\n\nThe most manual solution is to insert unbreakable space after each conjunction, like so:\n```typst\nMáma dnes dojela domů a~rozbalila nákup.\n```\nIt gets very tedious and I was wondering, is there a way to do it automatically for every paragraph?\n\nI tried using regex to match and replace, however typst's regex cannot use lookahead and cannot replace only specific capture groups. Another solution is to use individual show rules, like so:\n```typst\n#show \" a \": [ a~]\n#show \" i \": [ i~]\n```\nHowever, as you can see, it can get very tedious.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 230.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1240
    },
    {
      "id": 9014,
      "post_number": 2,
      "username": "Tiggax",
      "name": "",
      "created_at": "2025-02-24T19:29:53.178Z",
      "updated_at": "2025-02-24T19:31:43.919Z",
      "cooked": "<p>If i understood correctly you need the conjucations (ish) to auto break with the next word?</p>\n<p>Would something like this be helpfull?</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let const = (\"a\",\"A\",\"k\",\"K\",\"i\", \"I\", \"u\", \"U\", \"s\", \"S\", \"o\", \"O\", \"v\", \"V\")\n#show regex(\" [\" + const.join(\",\") + \"] \" ): it =&gt; [ #it.text.trim()~]\n</code></pre>\n<p>Since there are spaces, you can just trim them, and don’t need to capture them. unless you have more complex stuff like having dots before it with no space and so on.</p>",
      "raw": "If i understood correctly you need the conjucations (ish) to auto break with the next word?\n\nWould something like this be helpfull?\n```typ\n#let const = (\"a\",\"A\",\"k\",\"K\",\"i\", \"I\", \"u\", \"U\", \"s\", \"S\", \"o\", \"O\", \"v\", \"V\")\n#show regex(\" [\" + const.join(\",\") + \"] \" ): it => [ #it.text.trim()~]\n```\nSince there are spaces, you can just trim them, and don't need to capture them. unless you have more complex stuff like having dots before it with no space and so on.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 26,
      "score": 40.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 71
    },
    {
      "id": 9030,
      "post_number": 3,
      "username": "Astra3",
      "name": "",
      "created_at": "2025-02-25T11:58:07.013Z",
      "updated_at": "2025-02-25T11:58:07.013Z",
      "cooked": "<p>Your solution works great, however I don’t think the regex should contain commas, so I updated it to the following:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let const = (\"a\",\"A\",\"k\",\"K\",\"i\", \"I\", \"u\", \"U\", \"s\", \"S\", \"o\", \"O\", \"v\", \"V\")\n#show regex(\" [\" + const.join() + \"] \" ): it =&gt; [ #it.text.trim()~]\n</code></pre>\n<p>…and that does the job very well. There are no edge cases that I know of that need to be handled, so I will go with that. Thank you very much</p>",
      "raw": "Your solution works great, however I don't think the regex should contain commas, so I updated it to the following:\n```typst\n#let const = (\"a\",\"A\",\"k\",\"K\",\"i\", \"I\", \"u\", \"U\", \"s\", \"S\", \"o\", \"O\", \"v\", \"V\")\n#show regex(\" [\" + const.join() + \"] \" ): it => [ #it.text.trim()~]\n```\n...and that does the job very well. There are no edge cases that I know of that need to be handled, so I will go with that. Thank you very much",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 20,
      "score": 24.0,
      "accepted_answer": true,
      "trust_level": 1,
      "user_id": 1240
    },
    {
      "id": 9032,
      "post_number": 4,
      "username": "sijo",
      "name": "",
      "created_at": "2025-02-25T13:02:59.082Z",
      "updated_at": "2025-02-25T13:02:59.082Z",
      "cooked": "<p>I think you can simplify your code to the following:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show regex(\" [aAkKiIuUsSoOvV] \"): it =&gt; [ #it~]\n</code></pre>",
      "raw": "I think you can simplify your code to the following:\n\n```typ\n#show regex(\" [aAkKiIuUsSoOvV] \"): it => [ #it~]\n```",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 9.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 9051,
      "post_number": 5,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-02-25T15:02:05.581Z",
      "updated_at": "2025-02-25T15:02:05.581Z",
      "cooked": "<p>Trimming the spaces off of <code>it</code> is necessary here because otherwise they start adding up.  But putting all the “conjunction” characters together is more readable than joining a list.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">Dnes jsme přijeli domů a rozbalili nákup.\\\n#show regex(\" [aAkKiIuUsSoOvV] \"): it =&gt; [ #it~]\nDnes jsme přijeli domů a rozbalili nákup.\n#show regex(\" [aAkKiIuUsSoOvV] \" ): it =&gt; [ #it.text.trim()~]\nDnes jsme přijeli domů a rozbalili nákup.\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/e/efd8bdc695f01fc6c6a1d215e7ef1a11c1b548eb.png\" alt=\"image\" data-base62-sha1=\"ydMtR68JndDp3tQMP4rjiJxFhTJ\" width=\"427\" height=\"99\"></p>",
      "raw": "Trimming the spaces off of `it` is necessary here because otherwise they start adding up.  But putting all the \"conjunction\" characters together is more readable than joining a list.\n```typ\nDnes jsme přijeli domů a rozbalili nákup.\\\n#show regex(\" [aAkKiIuUsSoOvV] \"): it => [ #it~]\nDnes jsme přijeli domů a rozbalili nákup.\n#show regex(\" [aAkKiIuUsSoOvV] \" ): it => [ #it.text.trim()~]\nDnes jsme přijeli domů a rozbalili nákup.\n```\n![image|427x99](upload://ydMtR68JndDp3tQMP4rjiJxFhTJ.png)",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 18,
      "score": 38.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    }
  ],
  "scraped_at": "2025-06-10T09:51:14.558566"
}