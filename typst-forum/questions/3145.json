{
  "topic_metadata": {
    "id": 3145,
    "title": "Why a set-if rule requires `context`, but only outside a show-rule function?",
    "slug": "why-a-set-if-rule-requires-context-but-only-outside-a-show-rule-function",
    "posts_count": 4,
    "created_at": "2025-03-07T15:32:05.344Z",
    "last_posted_at": "2025-03-08T06:46:33.202Z",
    "views": 102,
    "like_count": 2,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "aarnent",
    "tags": [
      "styling",
      "syntax",
      "context"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 325
  },
  "posts": [
    {
      "id": 9473,
      "post_number": 1,
      "username": "Y.D.X",
      "name": "Y.D.X.",
      "created_at": "2025-03-07T15:32:05.737Z",
      "updated_at": "2025-03-07T15:42:27.144Z",
      "cooked": "<p>Accessing <code>text.lang</code>  requires <code>context</code>. The following three <a href=\"https://typst.app/docs/reference/styling/#set-rules\">set-if rules</a> have conditions depending on it.</p>\n<ol>\n<li>The first one is a bare set-if rule.</li>\n<li>The second one is composed into a show-set rule.</li>\n<li>The third one is wrapped into the function of a show rule.</li>\n</ol>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">// ❌: Can only be used when context is known\n#set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n\n// ❌: Can only be used when context is known\n#show \"Why\": set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n\n// ✅\n#show \"Why\": it =&gt; {\n  set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n  it\n}\n</code></pre>\n<p>Surprisingly, the third one compiles but the first two do not. Why?</p>",
      "raw": "Accessing `text.lang`  requires `context`. The following three [set-if rules](https://typst.app/docs/reference/styling/#set-rules) have conditions depending on it.\n\n1. The first one is a bare set-if rule.\n2. The second one is composed into a show-set rule.\n3. The third one is wrapped into the function of a show rule.\n\n```typst\n// ❌: Can only be used when context is known\n#set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n\n// ❌: Can only be used when context is known\n#show \"Why\": set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n\n// ✅\n#show \"Why\": it => {\n  set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n  it\n}\n```\n\nSurprisingly, the third one compiles but the first two do not. Why?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 30,
      "score": 161.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 292
    },
    {
      "id": 9483,
      "post_number": 2,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-03-07T22:22:27.890Z",
      "updated_at": "2025-03-07T22:22:27.890Z",
      "cooked": "<p>It’s kind of hidden, but the <a href=\"https://typst.app/docs/reference/context/\">docs state</a>:</p>\n<blockquote>\n<p>Aside from explicit context expressions, context is also established implicitly in some places that are also aware of their location in the document: <a href=\"https://typst.app/docs/reference/styling/#show-rules\">Show rules</a> provide context<a href=\"https://typst.app/docs/reference/context/#1a%3C\">1</a> and numberings in the outline, for instance, also provide the proper context to resolve counters.<br>\n1: Currently, all show rules provide styling context, but only show rules on <a href=\"https://typst.app/docs/reference/introspection/location/#locatable\">locatable</a> elements provide a location context</p>\n</blockquote>",
      "raw": "It's kind of hidden, but the [docs state](https://typst.app/docs/reference/context/):\n\n> Aside from explicit context expressions, context is also established implicitly in some places that are also aware of their location in the document: [Show rules](https://typst.app/docs/reference/styling/#show-rules) provide context[1](https://typst.app/docs/reference/context/#1a<) and numberings in the outline, for instance, also provide the proper context to resolve counters.\n1: Currently, all show rules provide styling context, but only show rules on [locatable](https://typst.app/docs/reference/introspection/location/#locatable) elements provide a location context",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 28,
      "score": 70.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 501
    },
    {
      "id": 9489,
      "post_number": 3,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-03-08T04:57:26.513Z",
      "updated_at": "2025-03-08T04:58:00.283Z",
      "cooked": "<p>Here’s one way to provide the context, by wrapping the rest of the document in a context block:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show: doc =&gt; context {\n  set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n  show \"Why\": set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n  doc\n}\n</code></pre>\n<p>This could also be used inside a template function, for example.</p>",
      "raw": "Here's one way to provide the context, by wrapping the rest of the document in a context block:\n\n```typ\n#show: doc => context {\n  set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n  show \"Why\": set text(font: \"Libertinus Sans\") if text.lang == \"en\"\n  doc\n}\n```\n\nThis could also be used inside a template function, for example.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 9.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 9490,
      "post_number": 4,
      "username": "Y.D.X",
      "name": "Y.D.X.",
      "created_at": "2025-03-08T06:46:33.202Z",
      "updated_at": "2025-03-08T06:50:10.780Z",
      "cooked": "<p>Thanks for providing a workaround. Actually, I ended up with a new function.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let en = text.with(lang: \"en\", font: \"Libertinus Serif\")\n\n#set text(lang: \"zh\", font: \"Noto Serif CJK SC\")\n\n国“Why quote”国\n\n国#en[“Why ‘quote’”]国\n\n国“Why ‘quote’”国\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/7/7dbc85179f32a57d4693e1f0d29d5e70742d1dd5.png\" alt=\"图片\" data-base62-sha1=\"hWjAjReEFcYfT9efKnBRL5E8a7r\" width=\"611\" height=\"289\"></p>",
      "raw": "Thanks for providing a workaround. Actually, I ended up with a new function.\n\n```typst\n#let en = text.with(lang: \"en\", font: \"Libertinus Serif\")\n\n#set text(lang: \"zh\", font: \"Noto Serif CJK SC\")\n\n国“Why quote”国\n\n国#en[“Why ‘quote’”]国\n\n国“Why ‘quote’”国\n```\n\n![图片|611x289](upload://hWjAjReEFcYfT9efKnBRL5E8a7r.png)",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 4.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 292
    }
  ],
  "scraped_at": "2025-06-10T09:50:34.915941"
}