{
  "topic_metadata": {
    "id": 3382,
    "title": "How can I include user privilege indicators in shell prompts while keeping syntax highlighting enabled in codeblocks?",
    "slug": "how-can-i-include-user-privilege-indicators-in-shell-prompts-while-keeping-syntax-highlighting-enabled-in-codeblocks",
    "posts_count": 4,
    "created_at": "2025-03-24T14:59:13.768Z",
    "last_posted_at": "2025-03-24T19:53:48.744Z",
    "views": 63,
    "like_count": 1,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Andrew",
    "tags": [
      "syntax"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 1110
  },
  "posts": [
    {
      "id": 10185,
      "post_number": 1,
      "username": "maxigaz",
      "name": "maxigaz",
      "created_at": "2025-03-24T14:59:13.920Z",
      "updated_at": "2025-03-24T15:02:46.677Z",
      "cooked": "<p>Using the CLI compiler <code>typt</code> (0.13.1), I’ve been writing notes about using shell commands on Linux, with syntax highlighting enabled.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">Example snippet, to be run by a regular user:\n\n#raw(\"chmod test.sh\", lang: \"sh\")\n\nExample snippet, to be run by with root privileges:\n\n#raw(\"chown user test.sh\", lang: \"sh\")\n</code></pre>\n<details>\n<summary>\nOutput screenshot</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/f/f57036fa8921dfeaa5e1463d2384280eb2b9eb11.png\" alt=\"typst-raw-sh\" data-base62-sha1=\"z1foKOuavA8fu3RR7mZSSS5jw4x\" width=\"529\" height=\"169\"></p>\n</details>\n<p>I would like to include the symbol <code>$</code> for commands that can be run by regular users and <code>#</code> for commands that require root privileges at the beginning of each line. (This is a convention used by the Arch Wiki. See <a href=\"https://wiki.archlinux.org/title/File_permissions_and_attributes#Changing_ownership\" rel=\"noopener nofollow ugc\">this page</a> as an example.)</p>\n<p>Now, I’m wondering if it’s possible to do this with correct syntax highlighting. By ‘correct’, I’m thinking of how the Markdown renderer handles it here on Typst forums when a codeblock has the filetype set to <code>shell</code> or <code>console</code> instead of <code>sh</code>:</p>\n<pre data-code-wrap=\"console\"><code class=\"lang-console\">$ chmod test.sh\n# chown user test.sh\n</code></pre>\n<p>I’ve tried changing the <code>lang</code> option to <code>shell</code> or <code>console</code> in Typst, but doing so in disables syntax highlighting for the current <code>raw</code> block altogether.</p>\n<p>Currently, if I want to keep syntax highlighting on, I have to use <code>sh</code>, where <code>$</code> is marked as a command and everything after it as arguments:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">Example snippet, to be run by a regular user:\n\n#raw(\"$ chmod test.sh\", lang: \"sh\")\n</code></pre>\n<details>\n<summary>\nOutput screenshot</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/6/6aff9ceea89a1ace83ba0a11d3fa2b2248f5a54e.png\" alt=\"typst-raw-sh-p\" data-base62-sha1=\"fgyg8k6j10ZnpZCyWKyLN237sCO\" width=\"547\" height=\"83\"></p>\n</details>\n<p>And <code>#</code>, together with everything after it, is marked as a comment:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">Example snippet, to be run with root privileges:\n\n#raw(\"# chown user test.sh\", lang: \"sh\")\n</code></pre>\n<details>\n<summary>\nOutput screenshot</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/9/92703d8797784fc5228f250514c4eeaaaf6aacae.png\" alt=\"typst-raw-sh-pr\" data-base62-sha1=\"kTsbrjUDLkft26kJRuve8QJKmLk\" width=\"515\" height=\"92\"></p>\n</details>",
      "raw": "Using the CLI compiler `typt` (0.13.1), I've been writing notes about using shell commands on Linux, with syntax highlighting enabled.\n\n```typ\nExample snippet, to be run by a regular user:\n\n#raw(\"chmod test.sh\", lang: \"sh\")\n\nExample snippet, to be run by with root privileges:\n\n#raw(\"chown user test.sh\", lang: \"sh\")\n```\n\n[details=\"Output screenshot\"]\n![typst-raw-sh|529x169](upload://z1foKOuavA8fu3RR7mZSSS5jw4x.png)\n[/details]\n\nI would like to include the symbol `$` for commands that can be run by regular users and `#` for commands that require root privileges at the beginning of each line. (This is a convention used by the Arch Wiki. See [this page](https://wiki.archlinux.org/title/File_permissions_and_attributes#Changing_ownership) as an example.)\n\nNow, I'm wondering if it's possible to do this with correct syntax highlighting. By 'correct', I'm thinking of how the Markdown renderer handles it here on Typst forums when a codeblock has the filetype set to `shell` or `console` instead of `sh`:\n\n```console\n$ chmod test.sh\n# chown user test.sh\n```\n\nI've tried changing the `lang` option to `shell` or `console` in Typst, but doing so in disables syntax highlighting for the current `raw` block altogether.\n\nCurrently, if I want to keep syntax highlighting on, I have to use `sh`, where `$` is marked as a command and everything after it as arguments:\n\n```typ\nExample snippet, to be run by a regular user:\n\n#raw(\"$ chmod test.sh\", lang: \"sh\")\n```\n\n[details=\"Output screenshot\"]\n![typst-raw-sh-p|547x83](upload://fgyg8k6j10ZnpZCyWKyLN237sCO.png)\n[/details]\n\n\nAnd `#`, together with everything after it, is marked as a comment:\n\n```typ\nExample snippet, to be run with root privileges:\n\n#raw(\"# chown user test.sh\", lang: \"sh\")\n```\n\n[details=\"Output screenshot\"]\n![typst-raw-sh-pr|515x92](upload://kTsbrjUDLkft26kJRuve8QJKmLk.png)\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 76.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 738
    },
    {
      "id": 10186,
      "post_number": 2,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-03-24T15:38:24.057Z",
      "updated_at": "2025-03-24T15:39:26.579Z",
      "cooked": "<p>If you want to use it for only oneliners:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show raw: set text(font: \"Fira Mono\")\n\n#let user(command) = emph(raw(\"$ \")) + raw(command, lang: \"sh\")\n#let root(command) = emph(raw(\"# \")) + raw(command, lang: \"sh\")\n\nExample snippet, to be run by a regular user:\n\n`$ ````sh chmod test.sh```\n\n#user(\"chmod test.sh\")\n\nExample snippet, to be run by with root privileges:\n\n`# ````sh chown user test.sh```\n\n#root(\"chown user test.sh\")\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/9/94ef61ca03c521e630fc530d0354ed4b8907a758.png\" alt=\"image\" data-base62-sha1=\"lfxxqzMM0xBG1Tm3xKLaKSY1F9e\" width=\"415\" height=\"228\"></p>\n<p>For multi-line stuff you can do something like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show raw: set text(font: \"Fira Mono\")\n\n#let user(command) = {\n  show raw.line: it =&gt; emph(text(font: \"Fira Mono\", \"$ \")) + it\n  command\n}\n#let root(command) = {\n  show raw.line: it =&gt; emph(text(font: \"Fira Mono\", \"# \")) + it\n  command\n}\n\nExample snippet, to be run by a regular user:\n\n#user(```sh\nchmod this\nchmod that\n```)\n\nExample snippet, to be run by with root privileges:\n\n#root(```sh\nchown user this\nchown user that\n```)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/7/7a4ebfd25dafd574db59636d9442bd19d640f2fe.png\" alt=\"image\" data-base62-sha1=\"hrYYcwrbq0JgUsapydX5tsvvXk2\" width=\"420\" height=\"180\"></p>\n<p>Or if you want to write the appropriate prefix yourself, here is a little trick (note that you need to specify an absolute font size):</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show raw: set text(font: \"Fira Mono\", size: 10pt)\n\n#show raw.where(lang: \"console\"): it =&gt; {\n  let user = emph(raw(\"$ \"))\n  let root = emph(raw(\"# \"))\n  it\n    .text\n    .split(\"\\n\")\n    .map(line =&gt; {\n      let starts(pattern) = line.starts-with(pattern)\n      let prefix = if starts(\"$ \") { user } else if starts(\"# \") { root }\n      let text = line.replace(regex(\"^[$#] \"), \"\")\n      prefix + raw(text, lang: \"sh\")\n    })\n    .join(\"\\n\")\n}\n\n```console\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/3/3b2438fff3d3701faa1c196d3fb78620539d3278.png\" alt=\"image\" data-base62-sha1=\"8rbMctfEs9MKW2arfQSHwFCnKnC\" width=\"196\" height=\"108\"></p>\n<p>I tried using <code>show raw.line</code> inside <code>show raw.where(lang: \"console\")</code>, but I hit infinite show rule recursion and I don’t know if it is fixable. So this approach is the second one, and it actually works. But multi-line commands probably will not be highlighted properly. Maybe with enough dedication a more resilient solution can be found.</p>",
      "raw": "If you want to use it for only oneliners:\n\n````typ\n#show raw: set text(font: \"Fira Mono\")\n\n#let user(command) = emph(raw(\"$ \")) + raw(command, lang: \"sh\")\n#let root(command) = emph(raw(\"# \")) + raw(command, lang: \"sh\")\n\nExample snippet, to be run by a regular user:\n\n`$ ````sh chmod test.sh```\n\n#user(\"chmod test.sh\")\n\nExample snippet, to be run by with root privileges:\n\n`# ````sh chown user test.sh```\n\n#root(\"chown user test.sh\")\n````\n\n![image|554x305, 75%](upload://lfxxqzMM0xBG1Tm3xKLaKSY1F9e.png)\n\nFor multi-line stuff you can do something like this:\n\n````typ\n#show raw: set text(font: \"Fira Mono\")\n\n#let user(command) = {\n  show raw.line: it => emph(text(font: \"Fira Mono\", \"$ \")) + it\n  command\n}\n#let root(command) = {\n  show raw.line: it => emph(text(font: \"Fira Mono\", \"# \")) + it\n  command\n}\n\nExample snippet, to be run by a regular user:\n\n#user(```sh\nchmod this\nchmod that\n```)\n\nExample snippet, to be run by with root privileges:\n\n#root(```sh\nchown user this\nchown user that\n```)\n````\n\n![image|561x241, 75%](upload://hrYYcwrbq0JgUsapydX5tsvvXk2.png)\n\nOr if you want to write the appropriate prefix yourself, here is a little trick (note that you need to specify an absolute font size):\n\n````typ\n#show raw: set text(font: \"Fira Mono\", size: 10pt)\n\n#show raw.where(lang: \"console\"): it => {\n  let user = emph(raw(\"$ \"))\n  let root = emph(raw(\"# \"))\n  it\n    .text\n    .split(\"\\n\")\n    .map(line => {\n      let starts(pattern) = line.starts-with(pattern)\n      let prefix = if starts(\"$ \") { user } else if starts(\"# \") { root }\n      let text = line.replace(regex(\"^[$#] \"), \"\")\n      prefix + raw(text, lang: \"sh\")\n    })\n    .join(\"\\n\")\n}\n\n```console\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n````\n\n![image|262x145, 75%](upload://8rbMctfEs9MKW2arfQSHwFCnKnC.png)\n\nI tried using `show raw.line` inside `show raw.where(lang: \"console\")`, but I hit infinite show rule recursion and I don't know if it is fixable. So this approach is the second one, and it actually works. But multi-line commands probably will not be highlighted properly. Maybe with enough dedication a more resilient solution can be found.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 27,
      "score": 25.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 10190,
      "post_number": 3,
      "username": "maxigaz",
      "name": "maxigaz",
      "created_at": "2025-03-24T19:10:08.685Z",
      "updated_at": "2025-03-24T19:15:16.537Z",
      "cooked": "<p>Thank you for your reply! Out of these solutions, the third one seems the most appealing (where I provide <code>$</code> or <code>#</code> on each line myself).</p>\n<p>The only (minor) inconvenient part about it is this part you mentioned:</p>\n<blockquote>\n<p>note that you need to specify an absolute font size</p>\n</blockquote>\n<p>By that, did you mean that it has to be specified manually in <code>pt</code> or <code>em</code>, or that it can’t depend on whatever font size is set globally throughout the document?</p>\n<p>I’ve tried replicating the default size by giving the <code>console</code> block <code>1.11em</code> and compared it with a regular code block, like so:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set text(size: 10pt)\n\nRegular fence:\n\n```\n# chown user test.sh\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n\n#show raw: set text(font: \"DejaVu Sans Mono\", size: 1.11em)\n\n#show raw.where(lang: \"console\"): it =&gt; {\n  let user = emph(raw(\"$ \"))\n  let root = emph(raw(\"# \"))\n  it\n    .text\n    .split(\"\\n\")\n    .map(line =&gt; {\n      let starts(pattern) = line.starts-with(pattern)\n      let prefix = if starts(\"$ \") { user } else if starts(\"# \") { root }\n      let text = line.replace(regex(\"^[$#] \"), \"\")\n      prefix + raw(text, lang: \"sh\")\n    })\n    .join(\"\\n\")\n}\n\nConsole fence:\n\n```console\n# chown user test.sh\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n</code></pre>\n<p>I don’t know how accurate this setting is (can it be even more accurate?), but it seems to work fine. So, if I change the font size in the first line to something else, like <code>14pt</code>, the <code>console</code> block scales to it.</p>\n<details>\n<summary>\nOutput screenshot</summary>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/4/407bcfa6b4edf17ca583eedb96ee2140ceb8ca98.png\" data-download-href=\"https://forum.typst.app/uploads/default/407bcfa6b4edf17ca583eedb96ee2140ceb8ca98\" title=\"typst-raw-comparison\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/4/407bcfa6b4edf17ca583eedb96ee2140ceb8ca98_2_384x500.png\" alt=\"typst-raw-comparison\" data-base62-sha1=\"9crOYIAlSRpAkQFQ8lpV6mHd3cs\" width=\"384\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/4/407bcfa6b4edf17ca583eedb96ee2140ceb8ca98_2_384x500.png, https://forum.typst.app/uploads/default/original/2X/4/407bcfa6b4edf17ca583eedb96ee2140ceb8ca98.png 1.5x, https://forum.typst.app/uploads/default/original/2X/4/407bcfa6b4edf17ca583eedb96ee2140ceb8ca98.png 2x\" data-dominant-color=\"F1F1F2\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">typst-raw-comparison</span><span class=\"informations\">394×513 39.7 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>\n<p>This is just my observation, so if you happen to know of any pitfalls about this that I’m not aware of, feel free to let me know.</p>",
      "raw": "Thank you for your reply! Out of these solutions, the third one seems the most appealing (where I provide `$` or `#` on each line myself).\n\nThe only (minor) inconvenient part about it is this part you mentioned:\n\n> note that you need to specify an absolute font size\n\nBy that, did you mean that it has to be specified manually in `pt` or `em`, or that it can't depend on whatever font size is set globally throughout the document?\n\nI've tried replicating the default size by giving the `console` block `1.11em` and compared it with a regular code block, like so:\n\n~~~typ\n#set text(size: 10pt)\n\nRegular fence:\n\n```\n# chown user test.sh\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n\n#show raw: set text(font: \"DejaVu Sans Mono\", size: 1.11em)\n\n#show raw.where(lang: \"console\"): it => {\n  let user = emph(raw(\"$ \"))\n  let root = emph(raw(\"# \"))\n  it\n    .text\n    .split(\"\\n\")\n    .map(line => {\n      let starts(pattern) = line.starts-with(pattern)\n      let prefix = if starts(\"$ \") { user } else if starts(\"# \") { root }\n      let text = line.replace(regex(\"^[$#] \"), \"\")\n      prefix + raw(text, lang: \"sh\")\n    })\n    .join(\"\\n\")\n}\n\nConsole fence:\n\n```console\n# chown user test.sh\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n~~~\n\nI don't know how accurate this setting is (can it be even more accurate?), but it seems to work fine. So, if I change the font size in the first line to something else, like `14pt`, the `console` block scales to it.\n\n[details=\"Output screenshot\"]\n![typst-raw-comparison|384x500](upload://9crOYIAlSRpAkQFQ8lpV6mHd3cs.png)\n[/details]\n\nThis is just my observation, so if you happen to know of any pitfalls about this that I'm not aware of, feel free to let me know.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 17,
      "score": 8.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 738
    },
    {
      "id": 10191,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-03-24T19:53:48.744Z",
      "updated_at": "2025-03-24T19:53:48.744Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"maxigaz\" data-post=\"3\" data-topic=\"3382\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F7602B/48.png\" class=\"avatar\"> maxigaz:</div>\n<blockquote>\n<p>By that, did you mean that it has to be specified manually in <code>pt</code> or <code>em</code>, or that it can’t depend on whatever font size is set globally throughout the document?</p>\n</blockquote>\n</aside>\n<p>See <a href=\"https://typst.app/docs/reference/layout/length/#fields\" class=\"inline-onebox\">Length Type – Typst Documentation</a> and here is an example without the absolute font size set:</p>\n<details><summary>code</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show raw: set text(font: \"Fira Mono\")\n\n#show raw.where(lang: \"console\"): it =&gt; {\n  let user = emph(raw(\"$ \"))\n  let root = emph(raw(\"# \"))\n  it\n    .text\n    .split(\"\\n\")\n    .map(line =&gt; {\n      let starts(pattern) = line.starts-with(pattern)\n      let prefix = if starts(\"$ \") { user } else if starts(\"# \") { root }\n      let text = line.replace(regex(\"^[$#] \"), \"\")\n      prefix + raw(text, lang: \"sh\")\n    })\n    .join(\"\\n\")\n}\n\n```\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n\n```console\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n</code></pre>\n</details>\n<details><summary>output</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/8/839e90388a2de3d9bffb759b9048f6bfccb5b92a.png\" alt=\"image\" data-base62-sha1=\"iMmgGi7VzfQhbargG8F9sqwIyUO\" width=\"161\" height=\"161\"></p>\n</details>\n<p>After a quick search I didn’t find a place where this issue was discussed, but I think by default the raw font size is like <code>0.9em</code>, which means nested raw elements will have different font sizes due to 0.9 ⋅ 0.9 which doesn’t happen with absolute length value. You might be able to change the solution so that this issue doesn’t affect it.</p>",
      "raw": "[quote=\"maxigaz, post:3, topic:3382\"]\nBy that, did you mean that it has to be specified manually in `pt` or `em`, or that it can’t depend on whatever font size is set globally throughout the document?\n[/quote]\n\nSee https://typst.app/docs/reference/layout/length/#fields and here is an example without the absolute font size set:\n\n<details><summary>code</summary>\n\n````typ\n#show raw: set text(font: \"Fira Mono\")\n\n#show raw.where(lang: \"console\"): it => {\n  let user = emph(raw(\"$ \"))\n  let root = emph(raw(\"# \"))\n  it\n    .text\n    .split(\"\\n\")\n    .map(line => {\n      let starts(pattern) = line.starts-with(pattern)\n      let prefix = if starts(\"$ \") { user } else if starts(\"# \") { root }\n      let text = line.replace(regex(\"^[$#] \"), \"\")\n      prefix + raw(text, lang: \"sh\")\n    })\n    .join(\"\\n\")\n}\n\n```\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n\n```console\n$ chmod this\n$ chmod that\n# chown user this\n# chown user that\n```\n````\n\n</details>\n\n<details><summary>output</summary>\n\n![image|161x161](upload://iMmgGi7VzfQhbargG8F9sqwIyUO.png)\n\n</details>\n\nAfter a quick search I didn't find a place where this issue was discussed, but I think by default the raw font size is like `0.9em`, which means nested raw elements will have different font sizes due to 0.9 ⋅ 0.9 which doesn't happen with absolute length value. You might be able to change the solution so that this issue doesn't affect it.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 15,
      "score": 8.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:50:06.118005"
}