{
  "topic_metadata": {
    "id": 685,
    "title": "How to add an invisible Heading to an outline?",
    "slug": "how-to-add-an-invisible-heading-to-an-outline",
    "posts_count": 10,
    "created_at": "2024-09-25T17:05:53.547Z",
    "last_posted_at": "2024-09-26T18:43:39.962Z",
    "views": 757,
    "like_count": 8,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 9,
    "accepted_answer_username": "Andrew",
    "tags": [
      "scripting",
      "outline"
    ],
    "category_id": 5,
    "participant_count": 5,
    "word_count": 1136
  },
  "posts": [
    {
      "id": 2600,
      "post_number": 1,
      "username": "Jacobdabozze",
      "name": "",
      "created_at": "2024-09-25T17:05:53.663Z",
      "updated_at": "2024-09-25T17:06:42.230Z",
      "cooked": "<p>Basically I want to insert an invisible “heading” into the outline. The heading should not not effect the rest of the document. I am looking for some sort of heading-label that is only shown in the outline to mark a new section: the appendix.</p>\n<p>The outline should look like this:</p>\n<pre><code class=\"lang-auto\">...\nAppendix                             \n&lt;appendix 1&gt;\n...\n</code></pre>\n<p>Appendix should show the same page as &lt;appendix 1&gt;.</p>\n<p>Do you have an idea how to do this?</p>",
      "raw": "Basically I want to insert an invisible \"heading\" into the outline. The heading should not not effect the rest of the document. I am looking for some sort of heading-label that is only shown in the outline to mark a new section: the appendix.\n\nThe outline should look like this:\n```\n...\nAppendix                             \n<appendix 1>\n...\n```\nAppendix should show the same page as <appendix 1>. \n\nDo you have an idea how to do this?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 80,
      "score": 2861.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 424
    },
    {
      "id": 2601,
      "post_number": 2,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-09-25T17:16:55.290Z",
      "updated_at": "2024-09-25T21:21:40.901Z",
      "cooked": "<p>You can use a scoped show rule</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">...\n\n#{\n  show heading: none\n  heading(numbering: none)[Appendix]\n}\n\n== &lt;appendix 1&gt;\n</code></pre>\n<p>so that the heading is added to the document tree but not actually shown. As the outline queries for all headings that exist in the document tree, the fact that it’s not actually visible doesn’t matter for the outline entry.</p>\n<p>Note that (if a numbering is set) the heading counter will still be stepped, though you probably want to reset the counter value and update the numbering anyway for the appendix.</p>",
      "raw": "You can use a scoped show rule\n```typ\n...\n\n#{\n  show heading: none\n  heading(numbering: none)[Appendix]\n}\n\n== <appendix 1>\n```\nso that the heading is added to the document tree but not actually shown. As the outline queries for all headings that exist in the document tree, the fact that it's not actually visible doesn't matter for the outline entry.\n\nNote that (if a numbering is set) the heading counter will still be stepped, though you probably want to reset the counter value and update the numbering anyway for the appendix.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 79,
      "score": 85.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 2610,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-25T19:24:19.672Z",
      "updated_at": "2024-09-25T19:24:19.672Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Jacobdabozze\" data-post=\"1\" data-topic=\"685\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/j/E95420/48.png\" class=\"avatar\"> Jacobdabozze:</div>\n<blockquote>\n<p>I want to insert an invisible “heading” into the outline.</p>\n</blockquote>\n</aside>\n<p>Why do you want something invisible to be inserted in the outline, which also shouldn’t affect the rest of the document? Do you still need the heading to be seen in the document? Otherwise, just don’t add the heading in the first place.</p>\n<p>As a real example, when I had the same problem, it was because of a complex document structure (nested/bundled documents). Basically I need to insert the headings to then <strong>use them</strong> in a <strong>global-scope outline</strong> (and in the <strong>PDF outline</strong>), but the <strong>headings themselves shouldn’t be visible in the document</strong> (outside the outline), because they serve a semantic purpose instead of a literal one. I fixed it like illustrated <a href=\"https://forum.typst.app/t/how-to-add-an-invisible-heading-to-an-outline/685/2\">here</a>.</p>",
      "raw": "[quote=\"Jacobdabozze, post:1, topic:685\"]\nI want to insert an invisible “heading” into the outline.\n[/quote]\n\nWhy do you want something invisible to be inserted in the outline, which also shouldn't affect the rest of the document? Do you still need the heading to be seen in the document? Otherwise, just don't add the heading in the first place.\n\nAs a real example, when I had the same problem, it was because of a complex document structure (nested/bundled documents). Basically I need to insert the headings to then **use them** in a **global-scope outline** (and in the **PDF outline**), but the **headings themselves shouldn't be visible in the document** (outside the outline), because they serve a semantic purpose instead of a literal one. I fixed it like illustrated [here](https://forum.typst.app/t/how-to-add-an-invisible-heading-to-an-outline/685/2).",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 70,
      "score": 39.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 2614,
      "post_number": 4,
      "username": "Blaz",
      "name": "Blaz",
      "created_at": "2024-09-25T19:57:37.932Z",
      "updated_at": "2024-09-25T20:01:53.085Z",
      "cooked": "<p>You can use show rules to customise the outline. In this case I inserted a block with the text “Appendix” right before “Heading 2”:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show outline.entry.where(body: [Heading 2]): it =&gt; {\n  block(spacing: 0pt)[\n    #link(it.element.location())[Appendix]\n  ]\n  it\n}\n\n#outline(indent: 1em)\n\n= Heading 1\n== Subheading 1\n== Subheading 2\n= Heading 2\n== Subheading 3\n= Heading 3\n== Subheading 4\n</code></pre>\n<p>If the heading name is not unique, you can use labels instead. I’m not sure how to write this one in a cleaner way:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show outline.entry: it =&gt; context {\n  if it.element.location() == locate(&lt;appendix-heading&gt;) {\n    block(spacing: 0pt)[\n      #link(&lt;appendix-heading&gt;)[Appendix]\n    ]\n    it\n  }\n  else {\n    it\n  }\n}\n\n#outline(indent: 1em)\n\n= Heading 1\n== Subheading 1\n== Subheading 2\n= Heading 2 &lt;appendix-heading&gt;\n== Subheading 3\n= Heading 3\n== Subheading 4\n</code></pre>\n<p>It’s a bit verbose of a solution (and it’s not really a heading shown in the outline but an inserted block of text before an entry) but gives you more freedom to customise the appearance of your section marker.</p>",
      "raw": "You can use show rules to customise the outline. In this case I inserted a block with the text \"Appendix\" right before \"Heading 2\":\n\n```typ\n#show outline.entry.where(body: [Heading 2]): it => {\n  block(spacing: 0pt)[\n    #link(it.element.location())[Appendix]\n  ]\n  it\n}\n\n#outline(indent: 1em)\n\n= Heading 1\n== Subheading 1\n== Subheading 2\n= Heading 2\n== Subheading 3\n= Heading 3\n== Subheading 4\n```\n\nIf the heading name is not unique, you can use labels instead. I'm not sure how to write this one in a cleaner way:\n```typ\n#show outline.entry: it => context {\n  if it.element.location() == locate(<appendix-heading>) {\n    block(spacing: 0pt)[\n      #link(<appendix-heading>)[Appendix]\n    ]\n    it\n  }\n  else {\n    it\n  }\n}\n\n#outline(indent: 1em)\n\n= Heading 1\n== Subheading 1\n== Subheading 2\n= Heading 2 <appendix-heading>\n== Subheading 3\n= Heading 3\n== Subheading 4\n```\n\nIt's a bit verbose of a solution (and it's not really a heading shown in the outline but an inserted block of text before an entry) but gives you more freedom to customise the appearance of your section marker.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 62,
      "score": 67.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 98
    },
    {
      "id": 2615,
      "post_number": 5,
      "username": "Blaz",
      "name": "Blaz",
      "created_at": "2024-09-25T20:00:17.781Z",
      "updated_at": "2024-09-25T20:00:17.781Z",
      "cooked": "<p>I think they mean that the heading should be visible in the outline but invisible in the rest of the document, as they mention it should be visible in the outline.</p>",
      "raw": "I think they mean that the heading should be visible in the outline but invisible in the rest of the document, as they mention it should be visible in the outline.",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 49,
      "score": 19.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 98
    },
    {
      "id": 2617,
      "post_number": 6,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-25T20:20:03.017Z",
      "updated_at": "2024-09-25T20:20:03.017Z",
      "cooked": "<p>Oh, this would make much more sense.</p>",
      "raw": "Oh, this would make much more sense.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 47,
      "score": 9.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 2623,
      "post_number": 7,
      "username": "huz",
      "name": "huz",
      "created_at": "2024-09-25T20:57:18.395Z",
      "updated_at": "2024-09-25T22:11:25.995Z",
      "cooked": "<p>A generic function would be nice to add random content to the outline … for example it would be easy if I could find out how to check <code>it.body</code> for strings (<code>starts-with</code>) (if it is a <code>sequence</code>)?</p>",
      "raw": "A generic function would be nice to add random content to the outline ... for example it would be easy if I could find out how to check `it.body` for strings (`starts-with`) (if it is a `sequence`)?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 48,
      "score": 14.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 281
    },
    {
      "id": 2633,
      "post_number": 8,
      "username": "Jacobdabozze",
      "name": "",
      "created_at": "2024-09-26T08:58:14.211Z",
      "updated_at": "2024-09-26T09:05:29.575Z",
      "cooked": "<p>First of all, thanks for helping!</p>\n<p>As <a class=\"mention\" href=\"/u/blaz\">@Blaz</a> clarified I was looking for a “Heading” that is visible in the outline but invisible in the rest of the document. Also I didn’t want it to be effected by styling-rules. So basically a label I place somewhere in the document.</p>\n<p><a class=\"mention\" href=\"/u/eric\">@Eric</a> Unfortunately your solution wasn’t what I was looking for because it actually creates a heading.</p>\n<p><a class=\"mention\" href=\"/u/blaz\">@Blaz</a> You lead me into the right direction. My solution is heavily inspired by your examples :)</p>\n<p><br>\nThis is what I came up with. It is kind of hacky but works pretty well:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let APPENDIX = [\n  = A1 (Appendix starts here)\n  #lorem(25)\n  = A2 \n]\n\n#let is_set = counter(\"is_set\") \n#is_set.update(0)\n\n#show outline.entry: it =&gt; context {\n  if is_set.get().at(0) == 0 {\n    let pos_it = it.element.location().position()\n    let pos_appendix = locate(&lt;appendix&gt;).position()\n    let page_diff = pos_it.page - pos_appendix.page\n    \n    if page_diff &gt; 0 or (page_diff == 0 and pos_it.y &gt; pos_appendix.y) {\n      block(link(&lt;appendix&gt;, strong({\n        [Appendix ]\n        box(width: 1fr, repeat[.])\n        counter(page).display()\n      })))\n      is_set.update(1) \n    }\n  }\n  it\n}\n\n#outline()\\\n\n= H1\n#lorem(25)\n= H2\n#lorem(25)\n\n&lt;appendix&gt;\n#APPENDIX\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/652f4194cc057483906f4f7d32e483d4f404c27d.png\" alt=\"image\" data-base62-sha1=\"er7tafa96EjEWwsFHDlZTop5XRj\" width=\"663\" height=\"485\"></p>\n</details>\n<p><br>\nIf you have any ideas on how to improve this, please let me know!</p>",
      "raw": "First of all, thanks for helping!\n\nAs @Blaz clarified I was looking for a \"Heading\" that is visible in the outline but invisible in the rest of the document. Also I didn't want it to be effected by styling-rules. So basically a label I place somewhere in the document.\n\n@Eric Unfortunately your solution wasn't what I was looking for because it actually creates a heading.\n\n@Blaz You lead me into the right direction. My solution is heavily inspired by your examples :) \n\n\\\nThis is what I came up with. It is kind of hacky but works pretty well:\n```typ\n#let APPENDIX = [\n  = A1 (Appendix starts here)\n  #lorem(25)\n  = A2 \n]\n\n#let is_set = counter(\"is_set\") \n#is_set.update(0)\n\n#show outline.entry: it => context {\n  if is_set.get().at(0) == 0 {\n    let pos_it = it.element.location().position()\n    let pos_appendix = locate(<appendix>).position()\n    let page_diff = pos_it.page - pos_appendix.page\n    \n    if page_diff > 0 or (page_diff == 0 and pos_it.y > pos_appendix.y) {\n      block(link(<appendix>, strong({\n        [Appendix ]\n        box(width: 1fr, repeat[.])\n        counter(page).display()\n      })))\n      is_set.update(1) \n    }\n  }\n  it\n}\n\n#outline()\\\n\n= H1\n#lorem(25)\n= H2\n#lorem(25)\n\n<appendix>\n#APPENDIX\n```\n\n[details=\"Output\"]\n![image|663x485](upload://er7tafa96EjEWwsFHDlZTop5XRj.png)\n[/details]\n\n\\\nIf you have any ideas on how to improve this, please let me know!",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 45,
      "score": 69.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 424
    },
    {
      "id": 2665,
      "post_number": 9,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-26T16:39:57.048Z",
      "updated_at": "2024-09-26T19:44:35.245Z",
      "cooked": "<p>By using some of the same optimizations from <a href=\"https://forum.typst.app/t/how-to-mutate-variables-in-a-show-rule/672/2\" class=\"inline-onebox\">How to mutate variables in a show rule? - #2 by Andrew</a>, here is my slightly improved version:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let make-outline-entry(label, body) = {\n  let filler = box(width: 1fr, repeat[.])\n  let content = body + \" \" + filler + counter(page).display()\n  block(link(label, strong(content)))\n}\n\n#show outline.entry: it =&gt; {\n  let label = &lt;appendix&gt;\n  let is-set = state(\"is-set\", false)\n  context if not is-set.get() {\n    let found = query(selector(label).before(it.element.location()))\n    let is-after-appendix = found.len() &gt; 0\n    if is-after-appendix {\n      make-outline-entry(&lt;appendix&gt;)[Appendix]\n      is-set.update(true)\n    }\n  }\n  it\n}\n</code></pre>\n<details>\n<summary>\nThe rest</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#outline()\n\n= H1\n#lorem(25)\n= H2\n#lorem(25)\n\n&lt;appendix&gt;\n= A1 (Appendix starts here)\n#lorem(25)\n= A2\n</code></pre>\n</details>\n<p>I made it more readable/maintainable. Or you can slap everything together to make the code smaller:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show outline.entry: it =&gt; {\n  let label = &lt;appendix&gt;\n  let is-set = state(\"is-set\", false)\n  context if not is-set.get() {\n    let found = query(selector(label).before(it.element.location()))\n    if found.len() &gt; 0 {\n      block(link(label, strong({\n        \"Appendix \"\n        // box(width: 1fr, repeat[.])\n        box(width: 1fr, it.fill)\n        counter(page).display()\n      })))\n      is-set.update(true)\n    }\n  }\n  it\n}\n</code></pre>\n<p>Some things (e.g., using <code>\"\"</code> instead of <code>[]</code> for the name) are pure preference, but most things are the recommended way of writing Typst code (or code in general):</p>\n<ul>\n<li>using descriptive variable/function names;</li>\n<li>using <code>state()</code> over <code>counter()</code> if you don’t need to count natural numbers;</li>\n<li>btw, <code>counter()</code> is initially set to <code>0</code>, so you don’t have to explicitly set it initially unless you need to reset it at some point;</li>\n<li>using <code>query(selector(pivot).before(location)).len() &gt; 0</code> over manually comparing pages/y position;\n<ul>\n<li>there is also <code>.after()</code>;</li>\n<li>sometimes you need to use things like <code>&lt;element&gt;.where()</code> which is already a <code>selector</code>;</li>\n</ul>\n</li>\n<li>the recommended variable/function naming convention is to use kebab case (which is typically easier to type).</li>\n</ul>\n<p>A <em>little bit</em> less “you should do it” things:</p>\n<ul>\n<li>adding aliases for things that need to be used multiple times (i.e., <code>label</code>) to reduce chance of a “desync value” bug (and similar stuff);</li>\n<li>making <code>context</code> scope as small as possible.</li>\n</ul>",
      "raw": "By using some of the same optimizations from https://forum.typst.app/t/how-to-mutate-variables-in-a-show-rule/672/2, here is my slightly improved version:\n\n```typ\n#let make-outline-entry(label, body) = {\n  let filler = box(width: 1fr, repeat[.])\n  let content = body + \" \" + filler + counter(page).display()\n  block(link(label, strong(content)))\n}\n\n#show outline.entry: it => {\n  let label = <appendix>\n  let is-set = state(\"is-set\", false)\n  context if not is-set.get() {\n    let found = query(selector(label).before(it.element.location()))\n    let is-after-appendix = found.len() > 0\n    if is-after-appendix {\n      make-outline-entry(<appendix>)[Appendix]\n      is-set.update(true)\n    }\n  }\n  it\n}\n```\n\n\n[details=\"The rest\"]\n```typ\n#outline()\n\n= H1\n#lorem(25)\n= H2\n#lorem(25)\n\n<appendix>\n= A1 (Appendix starts here)\n#lorem(25)\n= A2\n```\n[/details]\n\n\nI made it more readable/maintainable. Or you can slap everything together to make the code smaller:\n\n```typ\n#show outline.entry: it => {\n  let label = <appendix>\n  let is-set = state(\"is-set\", false)\n  context if not is-set.get() {\n    let found = query(selector(label).before(it.element.location()))\n    if found.len() > 0 {\n      block(link(label, strong({\n        \"Appendix \"\n        // box(width: 1fr, repeat[.])\n        box(width: 1fr, it.fill)\n        counter(page).display()\n      })))\n      is-set.update(true)\n    }\n  }\n  it\n}\n```\n\nSome things (e.g., using `\"\"` instead of `[]` for the name) are pure preference, but most things are the recommended way of writing Typst code (or code in general):\n- using descriptive variable/function names;\n- using `state()` over `counter()` if you don't need to count natural numbers;\n- btw, `counter()` is initially set to `0`, so you don't have to explicitly set it initially unless you need to reset it at some point;\n- using `query(selector(pivot).before(location)).len() > 0` over manually comparing pages/y position;\n  - there is also `.after()`;\n  - sometimes you need to use things like `<element>.where()` which is already a `selector`;\n- the recommended variable/function naming convention is to use kebab case (which is typically easier to type).\n\nA _little bit_ less \"you should do it\" things:\n- adding aliases for things that need to be used multiple times (i.e., `label`) to reduce chance of a \"desync value\" bug (and similar stuff);\n- making `context` scope as small as possible.",
      "reply_to_post_number": 8,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 39,
      "score": 127.8,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 2672,
      "post_number": 10,
      "username": "Jacobdabozze",
      "name": "",
      "created_at": "2024-09-26T18:43:39.962Z",
      "updated_at": "2024-09-26T18:43:39.962Z",
      "cooked": "<p>This is a wonderful addition! Thanks a lot!</p>\n<p>I didn’t know about <code>state</code> - this is very helpful :)</p>",
      "raw": "This is a wonderful addition! Thanks a lot!\n\nI didn't know about ```state``` - this is very helpful :)",
      "reply_to_post_number": 9,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 35,
      "score": 22.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 424
    }
  ],
  "scraped_at": "2025-06-10T09:58:03.825388"
}