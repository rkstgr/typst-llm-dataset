{
  "topic_metadata": {
    "id": 1290,
    "title": "How to auto-size text and images",
    "slug": "how-to-auto-size-text-and-images",
    "posts_count": 5,
    "created_at": "2024-10-22T14:11:33.462Z",
    "last_posted_at": "2024-10-22T15:21:32.654Z",
    "views": 538,
    "like_count": 3,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "sijo",
    "tags": [],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 513
  },
  "posts": [
    {
      "id": 4477,
      "post_number": 1,
      "username": "willis",
      "name": "",
      "created_at": "2024-10-22T14:11:33.559Z",
      "updated_at": "2024-10-22T14:11:33.559Z",
      "cooked": "<p>I use typst heavily to write lecture slides, one thing that would be very handy would be if when adding text or images to a slide they didn’t wrap to the next page. Write now it’s a process of back and forth setting text size manual and re-rendering, or the equivalent with images. I should say images work better but when you’re combining images and text you have to play around with the image size to make sure that the subsequent text doesn’t page-wrap.</p>\n<p>I’ve used both polylux and touying, and both have tried with the <span class=\"hashtag-raw\">#fit-to-height</span> function, but it’s quite buggy and results in strange layouts.</p>\n<p>How much is this an internal typst layout issue, versus possible within the existing scripting environment?</p>\n<p>To be clear what I’m looking for is a flag for the page that would prevent content from wrapping, and auto-size it to fit within the page if the flag is set to True. From previous attempts at this I gather it’s somewhat complicated because you have to layout out the content first before you decide where it wraps and at what size to set the text.</p>\n<p>There are additional issue when using multiple columns… and ideally you could tell the content to auto-size within a column (i.e. a 2-column slide with text on one side and an image on the other).</p>",
      "raw": "I use typst heavily to write lecture slides, one thing that would be very handy would be if when adding text or images to a slide they didn't wrap to the next page. Write now it's a process of back and forth setting text size manual and re-rendering, or the equivalent with images. I should say images work better but when you're combining images and text you have to play around with the image size to make sure that the subsequent text doesn't page-wrap.\n\nI've used both polylux and touying, and both have tried with the #fit-to-height function, but it's quite buggy and results in strange layouts.\n\nHow much is this an internal typst layout issue, versus possible within the existing scripting environment?\n\nTo be clear what I'm looking for is a flag for the page that would prevent content from wrapping, and auto-size it to fit within the page if the flag is set to True. From previous attempts at this I gather it's somewhat complicated because you have to layout out the content first before you decide where it wraps and at what size to set the text. \n\nThere are additional issue when using multiple columns... and ideally you could tell the content to auto-size within a column (i.e. a 2-column slide with text on one side and an image on the other).",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 57,
      "score": 2091.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 654
    },
    {
      "id": 4479,
      "post_number": 2,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-22T14:29:44.669Z",
      "updated_at": "2024-10-22T14:29:44.669Z",
      "cooked": "<p>Typst 0.12 has improved things a bit on this theme. The <a href=\"https://typst.app/docs/reference/layout/scale/\"><code>scale</code> function</a> now accepts absolute dimensions as the target size, and <a href=\"https://typst.app/docs/reference/layout/measure/\"><code>measure</code></a> accepts arguments for the target container size. As I understand, these make the polylux/touying <code>fit-to-height</code> obsolete.</p>\n<p>The <code>measure</code> thing could also help for the specific goal of scaling the text size to fill some available space. But I can only think of a rather inefficient approach: a bisection algorithm to find the largest text size that still fits.</p>",
      "raw": "Typst 0.12 has improved things a bit on this theme. The [`scale` function](https://typst.app/docs/reference/layout/scale/) now accepts absolute dimensions as the target size, and [`measure`](https://typst.app/docs/reference/layout/measure/) accepts arguments for the target container size. As I understand, these make the polylux/touying `fit-to-height` obsolete.\n\nThe `measure` thing could also help for the specific goal of scaling the text size to fill some available space. But I can only think of a rather inefficient approach: a bisection algorithm to find the largest text size that still fits.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 55,
      "score": 81.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 4483,
      "post_number": 3,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-22T14:52:29.359Z",
      "updated_at": "2024-10-22T15:21:07.043Z",
      "cooked": "<p>Here’s an implementation of the bisection algorithm I was referring to:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let fill-height-with-text(min: 0.3em, max: 5em, eps: 0.1em, it) = layout(size =&gt; {\n  let fits(text-size, it) = {\n    measure(width: size.width, { set text(text-size); it }).height &lt;= size.height\n  }\n\n  if not fits(min, it) { panic(\"Content doesn't fit even at minimum text size\") }\n  if fits(max, it) { set text(max); it }\n\n  let (a, b) = (min, max)\n  while b - a &gt; eps {\n    let new = 0.5 * (a + b)\n    if fits(new, it) {\n      a = new\n    } else {\n      b = new\n    }\n  }\n\n  set text(a)\n  it\n})\n\n#block(height: 5cm, fill: luma(80%), fill-height-with-text(lorem(10)))\n\n#block(height: 5cm, fill: luma(80%), columns(2)[\n  #fill-height-with-text(lorem(10))\n\n  #fill-height-with-text(lorem(7))\n])\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/b/bbf864fe5462349c43ec1eb7308c3c3c3cf5038e.png\" data-download-href=\"https://forum.typst.app/uploads/default/bbf864fe5462349c43ec1eb7308c3c3c3cf5038e\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/b/bbf864fe5462349c43ec1eb7308c3c3c3cf5038e_2_345x239.png\" alt=\"image\" data-base62-sha1=\"qORt7I8L2l5lNc6OTt0c2yVlGbk\" width=\"345\" height=\"239\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/b/bbf864fe5462349c43ec1eb7308c3c3c3cf5038e_2_345x239.png, https://forum.typst.app/uploads/default/optimized/2X/b/bbf864fe5462349c43ec1eb7308c3c3c3cf5038e_2_517x358.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/b/bbf864fe5462349c43ec1eb7308c3c3c3cf5038e_2_690x478.png 2x\" data-dominant-color=\"C3C3C3\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">709×492 63.8 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "Here's an implementation of the bisection algorithm I was referring to:\n\n```typ\n#let fill-height-with-text(min: 0.3em, max: 5em, eps: 0.1em, it) = layout(size => {\n  let fits(text-size, it) = {\n    measure(width: size.width, { set text(text-size); it }).height <= size.height\n  }\n\n  if not fits(min, it) { panic(\"Content doesn't fit even at minimum text size\") }\n  if fits(max, it) { set text(max); it }\n\n  let (a, b) = (min, max)\n  while b - a > eps {\n    let new = 0.5 * (a + b)\n    if fits(new, it) {\n      a = new\n    } else {\n      b = new\n    }\n  }\n\n  set text(a)\n  it\n})\n\n#block(height: 5cm, fill: luma(80%), fill-height-with-text(lorem(10)))\n\n#block(height: 5cm, fill: luma(80%), columns(2)[\n  #fill-height-with-text(lorem(10))\n\n  #fill-height-with-text(lorem(7))\n])\n```\n\n![image|690x478, 50%](upload://qORt7I8L2l5lNc6OTt0c2yVlGbk.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 54,
      "score": 85.8,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 4484,
      "post_number": 4,
      "username": "willis",
      "name": "",
      "created_at": "2024-10-22T14:55:17.839Z",
      "updated_at": "2024-10-22T14:55:17.839Z",
      "cooked": "<p>Wow that’s amazing! I was working on my own crude solution, but that seems to hit the nail on the head. Thanks!</p>",
      "raw": "Wow that's amazing! I was working on my own crude solution, but that seems to hit the nail on the head. Thanks!",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 48,
      "score": 29.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 654
    },
    {
      "id": 4487,
      "post_number": 5,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-22T15:21:32.654Z",
      "updated_at": "2024-10-22T15:21:32.654Z",
      "cooked": "<p>(I’ve edited the code to avoid producing an error when the max size fits)</p>",
      "raw": "(I've edited the code to avoid producing an error when the max size fits)",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 47,
      "score": 39.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    }
  ],
  "scraped_at": "2025-06-10T09:56:11.763360"
}