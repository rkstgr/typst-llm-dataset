{
  "topic_metadata": {
    "id": 400,
    "title": "How do I automatically label my headings, figures, equations?",
    "slug": "how-do-i-automatically-label-my-headings-figures-equations",
    "posts_count": 6,
    "created_at": "2024-09-17T08:36:16.840Z",
    "last_posted_at": "2025-02-17T17:25:09.527Z",
    "views": 738,
    "like_count": 4,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "quachpas",
    "tags": [
      "scripting",
      "referencing"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1158
  },
  "posts": [
    {
      "id": 1523,
      "post_number": 1,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-09-17T08:36:16.941Z",
      "updated_at": "2025-02-22T08:45:57.262Z",
      "cooked": "<p>With a large number of referenceable content, it may become bothersome to label and references elements manually. Automatically generating labels for content based on their body (headings), caption (figures) is an interesting approach but can also pollute your autocompletion field quickly.</p>\n<p>Depending on your preferences, you may prefer manually labelling, having all content addressable, or some in-between solution.</p>",
      "raw": "With a large number of referenceable content, it may become bothersome to label and references elements manually. Automatically generating labels for content based on their body (headings), caption (figures) is an interesting approach but can also pollute your autocompletion field quickly. \n\nDepending on your preferences, you may prefer manually labelling, having all content addressable, or some in-between solution.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 100,
      "score": 2900.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 1524,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-09-17T08:37:52.270Z",
      "updated_at": "2024-09-17T08:44:07.526Z",
      "cooked": "<p>The methods below are implemented for headings, but remain valid for figures. The only difference are the fields accessed. In the case of a figure, one may want to use the caption to generate the label text.</p>\n<h2><a name=\"p-1524-approach-1-naive-show-rule-error-1\" class=\"anchor\" href=\"#p-1524-approach-1-naive-show-rule-error-1\"></a>Approach 1: naive show rule (error)</h2>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show heading: it =&gt; {\n  let key = lower(it.body.text.replace(\" \", \"-\"))\n  [#it #label(key)]\n}\n\n= Long Heading with long title\nSee @long-heading-with-long-title.,\n</code></pre>\n<p>cf. <a href=\"https://github.com/typst/typst/issues/2926\" rel=\"noopener nofollow ugc\">Programmatically attaching labels to locatable elements #2926</a></p>\n<p>As mentionned in the issue above, this simple approach results in an error: <code>label &lt;...&gt; does not exist in the document</code>.</p>\n<p>As of <span class=\"discourse-local-date\" data-date=\"2024-09-17\" data-email-preview=\"2024-09-17T00:00:00Z UTC\">2024-09-17T00:00:00Z</span>, it is still the case.</p>\n<h2><a name=\"p-1524-approach-2-invisible-figure-workaround-2\" class=\"anchor\" href=\"#p-1524-approach-2-invisible-figure-workaround-2\"></a>Approach 2: invisible figure workaround</h2>\n<p>Starting from the final result, you may obtain the following, where content is addressable even though no label is explictly defined.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">= Test\n@test\n\n== Test 2 ah $x y z$ #rect(fill: black) test\n\n@test-2-ah-x-y-z--test\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/76fabc2aafc5d2961184391f194fdeacfbe829be.png\" alt=\"image\" data-base62-sha1=\"gYxxpg8mIPb3qLQbvTHMnlLlGDY\" width=\"193\" height=\"270\"></p>\n</details>\n<h3><a name=\"p-1524-complete-code-3\" class=\"anchor\" href=\"#p-1524-complete-code-3\"></a>Complete code</h3>\n<p>You may simply copy the entire code below for your purposes.</p>\n<details>\n<summary>\nCode</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let heading-numbering = \"1.1\"\n#set heading(numbering: heading-numbering)\n#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n#show heading: it =&gt; {\n  let key = lower(to-string(it).replace(\" \", \"-\"))\n  return [\n    #it\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) =&gt; numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n  ]\n}\n</code></pre>\n</details>\n<h3><a name=\"p-1524-technical-details-4\" class=\"anchor\" href=\"#p-1524-technical-details-4\"></a>Technical details</h3>\n<p>This approach relies on:</p>\n<ol>\n<li><code>show heading</code>  rule adding an invisible, referenceable figure</li>\n<li>a <code>to-string</code> conversion function for the <code>heading.body</code></li>\n</ol>\n<h4><a name=\"p-1524-numbering-5\" class=\"anchor\" href=\"#p-1524-numbering-5\"></a>numbering</h4>\n<p>In order to reference heading, you need to define the numbering<sup class=\"footnote-ref\"><a href=\"#footnote-1524-1\" id=\"footnote-ref-1524-1\">[1]</a></sup> scheme first. As an example, <code>\"1.1\"</code> is enough.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let heading-numbering = \"1.1\"\n#set heading(numbering: heading-numbering)\n</code></pre>\n<h4><a name=\"p-1524-to-string-6\" class=\"anchor\" href=\"#p-1524-to-string-6\"></a><code>to-string</code></h4>\n<p>The content to string function comes from GitHub issue <span class=\"hashtag-raw\">#3876</span><sup class=\"footnote-ref\"><a href=\"#footnote-1524-2\" id=\"footnote-ref-1524-2\">[2]</a></sup>.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n</code></pre>\n<h4><a name=\"p-1524-show-heading-rule-7\" class=\"anchor\" href=\"#p-1524-show-heading-rule-7\"></a><code>show heading</code> rule</h4>\n<p>In order:</p>\n<ol>\n<li>We generate the label key, replacing spaces by <code>-</code></li>\n<li>Return the heading content by juxtaposing<br>\na. the original heading<br>\nb. negative vertical space to remove the linebreak<br>\nc. the figure used for labelling</li>\n</ol>\n<p>Notice that the figure must folllow the <code>heading-numbering</code> scheme and the <code>counter(heading)</code>.<sup class=\"footnote-ref\"><a href=\"#footnote-1524-3\" id=\"footnote-ref-1524-3\">[3]</a></sup></p>\n<p>From this point, it is fairly simple to customize the generation rule for your own purposes, e.g.,  only generate level 1 heading labels, determine the heading supplement according to the level, etc.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show heading: it =&gt; {\n  let key = lower(to-string(it).replace(\" \", \"-\"))\n  return [\n    #it\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) =&gt; numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n  ]\n}\n</code></pre>\n<hr class=\"footnotes-sep\">\n\n<ol class=\"footnotes-list\">\n<li id=\"footnote-1524-1\" class=\"footnote-item\"><p><a href=\"https://typst.app/docs/reference/model/heading/#parameters-numbering\">Heading numbering</a> <a href=\"#footnote-ref-1524-1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"footnote-1524-2\" class=\"footnote-item\"><p><a href=\"https://github.com/typst/typst/discussions/3876#discussioncomment-9016808\" rel=\"noopener nofollow ugc\">Turning content into string #3876</a><br>\n <a href=\"#footnote-ref-1524-2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"footnote-1524-3\" class=\"footnote-item\"><p><a href=\"https://typst.app/docs/reference/introspection/counter/\">Introspection: counter</a> <a href=\"#footnote-ref-1524-3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>",
      "raw": "The methods below are implemented for headings, but remain valid for figures. The only difference are the fields accessed. In the case of a figure, one may want to use the caption to generate the label text.\n\n## Approach 1: naive show rule (error)\n\n```typ\n#show heading: it => {\n  let key = lower(it.body.text.replace(\" \", \"-\"))\n  [#it #label(key)]\n}\n\n= Long Heading with long title\nSee @long-heading-with-long-title.,\n```\ncf. [Programmatically attaching labels to locatable elements #2926](https://github.com/typst/typst/issues/2926)\n\nAs mentionned in the issue above, this simple approach results in an error: `label <...> does not exist in the document`. \n\nAs of [date=2024-09-17], it is still the case.\n\n## Approach 2: invisible figure workaround\n\nStarting from the final result, you may obtain the following, where content is addressable even though no label is explictly defined.\n\n```typ\n= Test\n@test\n\n== Test 2 ah $x y z$ #rect(fill: black) test\n\n@test-2-ah-x-y-z--test\n```\n[details=\"Output\"]\n![image|193x270](upload://gYxxpg8mIPb3qLQbvTHMnlLlGDY.png)\n[/details]\n\n### Complete code\n\nYou may simply copy the entire code below for your purposes. \n\n[details=\"Code\"]\n```typ\n#let heading-numbering = \"1.1\"\n#set heading(numbering: heading-numbering)\n#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n#show heading: it => {\n  let key = lower(to-string(it).replace(\" \", \"-\"))\n  return [\n    #it\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) => numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n  ]\n}\n```\n[/details]\n\n### Technical details\nThis approach relies on:\n1. `show heading`  rule adding an invisible, referenceable figure\n2. a `to-string` conversion function for the `heading.body`\n\n#### numbering\n\nIn order to reference heading, you need to define the numbering^[[Heading numbering](https://typst.app/docs/reference/model/heading/#parameters-numbering)] scheme first. As an example, `\"1.1\"` is enough.\n\n```typ\n#let heading-numbering = \"1.1\"\n#set heading(numbering: heading-numbering)\n```\n\n#### `to-string`\n\nThe content to string function comes from GitHub issue #3876^[[Turning content into string #3876](https://github.com/typst/typst/discussions/3876#discussioncomment-9016808)\n].\n\n```typ\n#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n```\n\n#### `show heading` rule\n\nIn order:\n1. We generate the label key, replacing spaces by `-`\n2. Return the heading content by juxtaposing\na. the original heading\nb. negative vertical space to remove the linebreak\nc. the figure used for labelling\n\nNotice that the figure must folllow the `heading-numbering` scheme and the `counter(heading)`.^[[Introspection: counter](https://typst.app/docs/reference/introspection/counter/)]\n\nFrom this point, it is fairly simple to customize the generation rule for your own purposes, e.g.,  only generate level 1 heading labels, determine the heading supplement according to the level, etc.\n\n```typ\n#show heading: it => {\n  let key = lower(to-string(it).replace(\" \", \"-\"))\n  return [\n    #it\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) => numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n  ]\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 102,
      "score": 240.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 1643,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-17T14:36:14.078Z",
      "updated_at": "2024-09-17T14:36:14.078Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"quachpas\" data-post=\"2\" data-topic=\"400\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/q/662200/48.png\" class=\"avatar\"> quachpas:</div>\n<blockquote>\n<p>As of <span class=\"discourse-local-date\" data-date=\"2024-09-17\" data-email-preview=\"2024-09-17T00:00:00Z UTC\">2024-09-17T00:00:00Z</span>, it is still the case.</p>\n</blockquote>\n</aside>\n<p>Oh, neat feature. Here is a link about how date/time can be inserted: <a href=\"https://meta.discourse.org/t/insert-date-time-question/140792/8\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Insert Date / Time Question - #8 by david - Support - Discourse Meta</a>. Now I can make my posts even better.</p>",
      "raw": "[quote=\"quachpas, post:2, topic:400\"]\nAs of [date=2024-09-17], it is still the case.\n[/quote]\n\nOh, neat feature. Here is a link about how date/time can be inserted: https://meta.discourse.org/t/insert-date-time-question/140792/8. Now I can make my posts even better.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 75,
      "score": 50.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 1671,
      "post_number": 4,
      "username": "Enivex",
      "name": "Enivex",
      "created_at": "2024-09-17T16:00:11.006Z",
      "updated_at": "2024-09-17T16:00:11.006Z",
      "cooked": "<p>I can’t imagine wanting this over manually picking labels, but it’s interesting that it’s possible.</p>",
      "raw": "I can't imagine wanting this over manually picking labels, but it's interesting that it's possible.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 71,
      "score": 19.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 5
    },
    {
      "id": 1716,
      "post_number": 5,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-09-18T06:50:53.241Z",
      "updated_at": "2024-09-18T06:50:53.241Z",
      "cooked": "<p>To be fair, I may or may not have too many headings … Also, most of the time, I end up writing the heading title, or the figure caption exactly as I did above, but manually. I just too the obvious next step, which was to automate it!</p>",
      "raw": "To be fair, I may or may not have too many headings ... Also, most of the time, I end up writing the heading title, or the figure caption exactly as I did above, but manually. I just too the obvious next step, which was to automate it!",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 68,
      "score": 33.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 8753,
      "post_number": 6,
      "username": "Simon_Schneider",
      "name": "Simon  Schneider",
      "created_at": "2025-02-17T17:25:09.527Z",
      "updated_at": "2025-02-17T17:25:09.527Z",
      "cooked": "<p><a class=\"mention\" href=\"/u/quachpas\">@quachpas</a> Thank you so much!<br>\nI ran into the issue described in your first approach and your post was a god send.</p>\n<p>To avoid duplicate labels (since I often have multiple headings with the same name in different chapters) I’ve expanded your approach 2 to generate hierarchical labels. As this tends to generate very long label keys, I’ve added the option to override the default key generation using the headings supplement field.</p>\n<pre><code class=\"lang-auto\">#heading(supplement: [h1])[Section 1]\n@h1\n\n== Section 1.1\n@h1-section-1.1\n\n#heading(supplement: [-], level: 2)[Section 1.2]\nAuto labeling has been disabled for this heading using the supplement field value `[-]`.\n\n== Section 1.3\n@h1-section-1.3\n\n=== Section 1.3.1\n@h1-section-1.3-section-1.3.1\n\n=== Section 1.3.2\n@h1-section-1.3-section-1.3.2\n\n== Section 1.4\n@h1-section-1.4\n\n= Section 2\n@section-2\n</code></pre>\n<details>\n<summary>\nFull Code</summary>\n<pre><code class=\"lang-auto\">#let heading-numbering = \"1.\"\n#set heading(numbering: heading-numbering)\n\n#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n\n#show heading: it =&gt; context {\n  // give users the option to disable auto labeling\n  if it.supplement == [-] {\n    return it\n  }\n  let get_label_key = it =&gt; {\n    if it.supplement == [] {\n      // if no supplement is provided, use the heading text to generate the label\n      return lower(to-string(it).trim().replace(\" \", \"-\"))\n    } else {\n      // if a supplement is provided, use the supplement to generate the label\n      return lower(to-string(it.supplement).trim().replace(\" \", \"-\"))\n    }\n  }\n\n  // recursively construct hierarchical label key\n  let prev = query(selector(heading).before(here())).rev()\n  let key = \"\"\n  let level = it.level\n  for heading in prev {\n    if level == 1 {\n      break\n    }\n    if heading.level &gt;= level {\n      continue\n    }\n    level -= 1\n    key = get_label_key(heading) + \"-\" + key\n  }\n  key = key + get_label_key(it)\n\n  // return the heading with the auto-generated label\n  return [\n    #it\n    // unfortunately there is an issue with attaching programmatically attaching labels to headings (see https://github.com/typst/typst/issues/2926)\n    // therefore we have to use a fake figure to attach the label to the heading\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) =&gt; numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n    //#key // print the label key for debugging\n  ]\n}\n#set heading(numbering: (..numbers) =&gt; numbering((..nums) =&gt; nums.pos().map(str).join(\".\"), ..numbers), supplement: [])\n\n\n\n#heading(supplement: [h1])[Section 1]\n@h1\n\n== Section 1.1\n@h1-section-1.1\n\n#heading(supplement: [-], level: 2)[Section 1.2]\nAuto labeling has been disabled for this heading using the supplement field value `[-]`.\n\n== Section 1.3\n@h1-section-1.3\n\n=== Section 1.3.1\n@h1-section-1.3-section-1.3.1\n\n=== Section 1.3.2\n@h1-section-1.3-section-1.3.2\n\n== Section 1.4\n@h1-section-1.4\n\n= Section 2\n@section-2\n</code></pre>\n</details>",
      "raw": "@quachpas Thank you so much!\nI ran into the issue described in your first approach and your post was a god send.\n\nTo avoid duplicate labels (since I often have multiple headings with the same name in different chapters) I've expanded your approach 2 to generate hierarchical labels. As this tends to generate very long label keys, I've added the option to override the default key generation using the headings supplement field.\n\n```\n#heading(supplement: [h1])[Section 1]\n@h1\n\n== Section 1.1\n@h1-section-1.1\n\n#heading(supplement: [-], level: 2)[Section 1.2]\nAuto labeling has been disabled for this heading using the supplement field value `[-]`.\n\n== Section 1.3\n@h1-section-1.3\n\n=== Section 1.3.1\n@h1-section-1.3-section-1.3.1\n\n=== Section 1.3.2\n@h1-section-1.3-section-1.3.2\n\n== Section 1.4\n@h1-section-1.4\n\n= Section 2\n@section-2\n```\n\n\n[details=\"Full Code\"]\n\n```\n#let heading-numbering = \"1.\"\n#set heading(numbering: heading-numbering)\n\n#let to-string(content) = {\n  if content.has(\"text\") and type(content.text) == \"string\" {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n\n#show heading: it => context {\n  // give users the option to disable auto labeling\n  if it.supplement == [-] {\n    return it\n  }\n  let get_label_key = it => {\n    if it.supplement == [] {\n      // if no supplement is provided, use the heading text to generate the label\n      return lower(to-string(it).trim().replace(\" \", \"-\"))\n    } else {\n      // if a supplement is provided, use the supplement to generate the label\n      return lower(to-string(it.supplement).trim().replace(\" \", \"-\"))\n    }\n  }\n\n  // recursively construct hierarchical label key\n  let prev = query(selector(heading).before(here())).rev()\n  let key = \"\"\n  let level = it.level\n  for heading in prev {\n    if level == 1 {\n      break\n    }\n    if heading.level >= level {\n      continue\n    }\n    level -= 1\n    key = get_label_key(heading) + \"-\" + key\n  }\n  key = key + get_label_key(it)\n\n  // return the heading with the auto-generated label\n  return [\n    #it\n    // unfortunately there is an issue with attaching programmatically attaching labels to headings (see https://github.com/typst/typst/issues/2926)\n    // therefore we have to use a fake figure to attach the label to the heading\n    #v(-1em)\n    #figure(\n      kind: \"heading\",\n      numbering: (..numbers) => numbering(heading-numbering, ..(counter(heading).get())),\n      supplement: \"Section\",\n    )[]\n    #label(key)\n    //#key // print the label key for debugging\n  ]\n}\n#set heading(numbering: (..numbers) => numbering((..nums) => nums.pos().map(str).join(\".\"), ..numbers), supplement: [])\n\n\n\n#heading(supplement: [h1])[Section 1]\n@h1\n\n== Section 1.1\n@h1-section-1.1\n\n#heading(supplement: [-], level: 2)[Section 1.2]\nAuto labeling has been disabled for this heading using the supplement field value `[-]`.\n\n== Section 1.3\n@h1-section-1.3\n\n=== Section 1.3.1\n@h1-section-1.3-section-1.3.1\n\n=== Section 1.3.2\n@h1-section-1.3-section-1.3.2\n\n== Section 1.4\n@h1-section-1.4\n\n= Section 2\n@section-2\n```\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 31,
      "score": 31.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 871
    }
  ],
  "scraped_at": "2025-06-10T09:58:49.725719"
}