{
  "topic_metadata": {
    "id": 324,
    "title": "Could commas be optional at end of line, like semicolons?",
    "slug": "could-commas-be-optional-at-end-of-line-like-semicolons",
    "posts_count": 13,
    "created_at": "2024-09-16T10:12:40.229Z",
    "last_posted_at": "2024-09-18T10:08:14.336Z",
    "views": 263,
    "like_count": 3,
    "reply_count": 9,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 12,
    "accepted_answer_username": "maven",
    "tags": [
      "syntax"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1498
  },
  "posts": [
    {
      "id": 1205,
      "post_number": 1,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-16T10:12:40.322Z",
      "updated_at": "2024-09-16T10:32:47.170Z",
      "cooked": "<p>The syntax of the Typst scripting language is very enjoyable. One thing that keeps coming up for me personally though is the necessity for putting commas even in <strong>multi-line</strong> arrays, dictionaries, and function calls.</p>\n<p>So the question is this: Would it be possible (and desirable) to change the syntax such that the following snippet:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#rect(\n  height: 100%,\n  width: 100%,\n  fill: aqua\n)\n</code></pre>\n<p>Could be written as:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#rect(\n  height: 100%\n  width: 100%\n  fill: aqua\n)\n</code></pre>\n<p>This would mean that commas need to be used only where multiple values occur per line, meaning linebreaks would also act as value separator, as with semicolons and “statements”. If this is possible, it would make the syntax even more lightweight and enjoyable to use, in my opinion.</p>\n<p>What do others think of this? <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "The syntax of the Typst scripting language is very enjoyable. One thing that keeps coming up for me personally though is the necessity for putting commas even in **multi-line** arrays, dictionaries, and function calls.\n\nSo the question is this: Would it be possible (and desirable) to change the syntax such that the following snippet:\n\n```typ\n#rect(\n  height: 100%,\n  width: 100%,\n  fill: aqua\n)\n```\n\nCould be written as:\n\n```typ\n#rect(\n  height: 100%\n  width: 100%\n  fill: aqua\n)\n```\n\nThis would mean that commas need to be used only where multiple values occur per line, meaning linebreaks would also act as value separator, as with semicolons and \"statements\". If this is possible, it would make the syntax even more lightweight and enjoyable to use, in my opinion.\n\nWhat do others think of this? :slight_smile:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 62,
      "score": 367.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1208,
      "post_number": 2,
      "username": "Aegon",
      "name": "Aegon Huke",
      "created_at": "2024-09-16T10:27:53.991Z",
      "updated_at": "2024-09-16T10:27:53.991Z",
      "cooked": "<p>To be honest, I don’t think so. Because once when you’d like to refractor your code from something like</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#rect(\n  height: 100%\n  width: 100%\n  fill: aqua\n)\n</code></pre>\n<p>To</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#rect(height: 100%, width: 100%, fill: aqua)\n</code></pre>\n<p>You would retype all the commas. It would be annoying, trust me.</p>",
      "raw": "To be honest, I don't think so. Because once when you'd like to refractor your code from something like\n\n```typst\n#rect(\n  height: 100%\n  width: 100%\n  fill: aqua\n)\n```\n\nTo\n\n```typst\n#rect(height: 100%, width: 100%, fill: aqua)\n```\n\nYou would retype all the commas. It would be annoying, trust me.",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 59,
      "score": 36.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 269
    },
    {
      "id": 1214,
      "post_number": 3,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-16T10:54:23.504Z",
      "updated_at": "2024-09-16T10:54:23.504Z",
      "cooked": "<p>What is problematic about this, is that <code>(...)</code> is also used for grouping multi-line expressions (code blocks <em>cannot</em> be used for this precisely because the semicolons can be omitted in favor of line breaks). This means something like this works:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">let val = (\n  \"one\"\n    + \"two\"\n)\n\nassert.eq(val, \"onetwo\")\n</code></pre>\n<p>With your proposal, however, this would become an array and then there would be no way at all to have a multiline expression.</p>",
      "raw": "What is problematic about this, is that `(...)` is also used for grouping multi-line expressions (code blocks _cannot_ be used for this precisely because the semicolons can be omitted in favor of line breaks). This means something like this works:\n```typc\nlet val = (\n  \"one\"\n    + \"two\"\n)\n\nassert.eq(val, \"onetwo\")\n```\nWith your proposal, however, this would become an array and then there would be no way at all to have a multiline expression.",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 56,
      "score": 36.2,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 1244,
      "post_number": 4,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-16T11:31:20.272Z",
      "updated_at": "2024-09-16T11:31:20.272Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Aegon\" data-post=\"2\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/aegon/48/232_2.png\" class=\"avatar\"> Aegon:</div>\n<blockquote>\n<p>You would retype all the commas.</p>\n</blockquote>\n</aside>\n<p>That’s true.</p>\n<p>Which of these is better (always commas vs sometimes commas) is of course a matter of opinion. I’d happily reintroduce commas if I could omit them most of the time.</p>\n<p>Thanks for making that valid point though!</p>",
      "raw": "[quote=\"Aegon, post:2, topic:324\"]\nYou would retype all the commas.\n[/quote]\n\nThat's true.\n\nWhich of these is better (always commas vs sometimes commas) is of course a matter of opinion. I'd happily reintroduce commas if I could omit them most of the time.\n\nThanks for making that valid point though!",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 52,
      "score": 10.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1250,
      "post_number": 5,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-16T11:57:17.007Z",
      "updated_at": "2024-09-16T11:57:17.007Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"laurmaedje\" data-post=\"3\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/laurmaedje/48/14_2.png\" class=\"avatar\"> laurmaedje:</div>\n<blockquote>\n<p>With your proposal, however, this would become an array and then there would be no way at all to have a multiline expression.</p>\n</blockquote>\n</aside>\n<p>Ah, that’s a good point. I understand that this issue alone means that we are unlikely to see a change here, as it might cause some disruption wherever multiline expressions are in use currently. I was unaware of the issue probably because I never felt the need (in my very limited experience with Typst) to use them.</p>\n<p>I’d like to entertain the thought just a little more, to better understand whether this would really not be possible at all, or why even I would not want this after all:</p>\n<p>The case above and similar ones could be handled by only interpreting linebreaks as commas where that is syntactically valid, right? – Admittedly, that’d be a weird feature. (Isn’t there some programming language having this though?!)</p>\n<p>In any case, this problem could be handled by explicit line continuation, e.g. like a slash at the end of the line as in Python, correct? Whether that’s preferrable though is of course another question entirely.</p>\n<p>Thanks for replying!</p>",
      "raw": "[quote=\"laurmaedje, post:3, topic:324\"]\nWith your proposal, however, this would become an array and then there would be no way at all to have a multiline expression.\n[/quote]\n\nAh, that's a good point. I understand that this issue alone means that we are unlikely to see a change here, as it might cause some disruption wherever multiline expressions are in use currently. I was unaware of the issue probably because I never felt the need (in my very limited experience with Typst) to use them.\n\nI'd like to entertain the thought just a little more, to better understand whether this would really not be possible at all, or why even I would not want this after all:\n\nThe case above and similar ones could be handled by only interpreting linebreaks as commas where that is syntactically valid, right? -- Admittedly, that'd be a weird feature. (Isn't there some programming language having this though?!)\n\nIn any case, this problem could be handled by explicit line continuation, e.g. like a slash at the end of the line as in Python, correct? Whether that's preferrable though is of course another question entirely.\n\nThanks for replying!",
      "reply_to_post_number": 3,
      "reply_count": 2,
      "quote_count": 1,
      "like_count": 0,
      "reads": 50,
      "score": 20.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1251,
      "post_number": 6,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-16T12:06:30.228Z",
      "updated_at": "2024-09-16T12:06:30.228Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Aegon\" data-post=\"2\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/aegon/48/232_2.png\" class=\"avatar\"> Aegon:</div>\n<blockquote>\n<p>You would retype all the commas. It would be annoying, trust me.</p>\n</blockquote>\n</aside>\n<p>Oh and, I forgot to say: I already have a similar annoyance now, because I follow the general style of putting commas in each line, including the last line, in multiline situations (especially arrays). That means adding or removing that last comma whenever changing to multiline or singleline respectively.</p>\n<p>And just not putting that last comma also has cons, namely that reordering the arguments or values then requires adding <em>and</em> removing commas, also annoying.</p>\n<p>I wonder whether there is a good solution to this in general…</p>",
      "raw": "[quote=\"Aegon, post:2, topic:324\"]\nYou would retype all the commas. It would be annoying, trust me.\n[/quote]\n\nOh and, I forgot to say: I already have a similar annoyance now, because I follow the general style of putting commas in each line, including the last line, in multiline situations (especially arrays). That means adding or removing that last comma whenever changing to multiline or singleline respectively.\n\nAnd just not putting that last comma also has cons, namely that reordering the arguments or values then requires adding _and_ removing commas, also annoying.\n\nI wonder whether there is a good solution to this in general...",
      "reply_to_post_number": 2,
      "reply_count": 2,
      "quote_count": 1,
      "like_count": 0,
      "reads": 47,
      "score": 19.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1266,
      "post_number": 7,
      "username": "Aegon",
      "name": "Aegon Huke",
      "created_at": "2024-09-16T13:02:26.656Z",
      "updated_at": "2024-09-16T13:02:26.656Z",
      "cooked": "<p>A better solution is to support putting a comma after each line no matter whether it is the last argument or not, like Python.</p>",
      "raw": "A better solution is to support putting a comma after each line no matter whether it is the last argument or not, like Python.",
      "reply_to_post_number": 6,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 44,
      "score": 18.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 269
    },
    {
      "id": 1271,
      "post_number": 8,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-16T13:18:01.978Z",
      "updated_at": "2024-09-16T13:18:01.978Z",
      "cooked": "<p>That’s already supported.</p>",
      "raw": "That's already supported.",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 42,
      "score": 13.4,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 1525,
      "post_number": 9,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-17T08:46:03.980Z",
      "updated_at": "2024-09-17T08:46:03.980Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"5\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>The case above and similar ones could be handled by only interpreting linebreaks as commas where that is syntactically valid, right? – Admittedly, that’d be a weird feature.</p>\n</blockquote>\n</aside>\n<p>No, that would not be enough. unary plus and unary minus are supported operators, so even the exact example Laurenz made would still be interpreted as an array. (<code>+ \"two\"</code> is a type error, but syntactically no problem)</p>\n<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"5\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>(Isn’t there some programming language having this though?!)</p>\n</blockquote>\n</aside>\n<p>For semicolons, there are; the book <em>Crafting Interpreters</em> lists some <a href=\"http://www.craftinginterpreters.com/scanning.html#design-note\" rel=\"noopener nofollow ugc\">in a design note</a>:</p>\n<blockquote>\n<p><a href=\"https://docs.python.org/3.5/reference/lexical_analysis.html#implicit-line-joining\" rel=\"noopener nofollow ugc\">Python</a> treats all newlines as significant unless an explicit backslash is used at the end of a line to continue it to the next line. […] This rule works well for Python because it is a highly statement-oriented language.</p>\n</blockquote>\n<p>(Typst is very expression-oriented)</p>\n<blockquote>\n<p>JavaScript’s “<a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-7.9\" rel=\"noopener nofollow ugc\">automatic semicolon insertion</a>” rule is the real odd one. Where other languages assume most newlines <em>are</em> meaningful and only a few should be ignored in multi-line statements, JS assumes the opposite. […]</p>\n<p>This design note would turn into a design diatribe if I went into complete detail about how that even <em>works</em>, much less all the various ways that JavaScript’s “solution” is a bad idea. It’s a mess. […]</p>\n</blockquote>\n<p>The design note also says “If you’re designing a new language, you almost surely <em>should</em> avoid an explicit statement terminator” – but that advice can’t very easily be applied to commas, and Typst <em>did</em> avoid mandatory semicolons.</p>",
      "raw": "[quote=\"maven, post:5, topic:324\"]\nThe case above and similar ones could be handled by only interpreting linebreaks as commas where that is syntactically valid, right? – Admittedly, that’d be a weird feature.\n[/quote]\n\nNo, that would not be enough. unary plus and unary minus are supported operators, so even the exact example Laurenz made would still be interpreted as an array. (`+ \"two\"` is a type error, but syntactically no problem)\n\n[quote=\"maven, post:5, topic:324\"]\n(Isn’t there some programming language having this though?!)\n[/quote]\n\nFor semicolons, there are; the book _Crafting Interpreters_ lists some [in a design note](http://www.craftinginterpreters.com/scanning.html#design-note):\n\n> [Python](https://docs.python.org/3.5/reference/lexical_analysis.html#implicit-line-joining) treats all newlines as significant unless an explicit backslash is used at the end of a line to continue it to the next line. [...] This rule works well for Python because it is a highly statement-oriented language.\n\n(Typst is very expression-oriented)\n\n> JavaScript’s “[automatic semicolon insertion](https://www.ecma-international.org/ecma-262/5.1/#sec-7.9)” rule is the real odd one. Where other languages assume most newlines *are* meaningful and only a few should be ignored in multi-line statements, JS assumes the opposite. [...]\n>\n> This design note would turn into a design diatribe if I went into complete detail about how that even *works*, much less all the various ways that JavaScript’s “solution” is a bad idea. It’s a mess. [...]\n\nThe design note also says \"If you’re designing a new language, you almost surely *should* avoid an explicit statement terminator\" -- but that advice can't very easily be applied to commas, and Typst _did_ avoid mandatory semicolons.",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 1,
      "reads": 36,
      "score": 27.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 1618,
      "post_number": 10,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-17T12:44:14.291Z",
      "updated_at": "2024-09-17T12:44:14.291Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Aegon\" data-post=\"7\" data-topic=\"324\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/aegon/48/232_2.png\" class=\"avatar\"> Aegon:</div>\n<blockquote>\n<p>A better solution is to support putting a comma after each line no matter whether it is the last argument or not, like Python.</p>\n</blockquote>\n</aside>\n<aside class=\"quote no-group\" data-username=\"laurmaedje\" data-post=\"8\" data-topic=\"324\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/laurmaedje/48/14_2.png\" class=\"avatar\"> laurmaedje:</div>\n<blockquote>\n<p>That’s already supported.</p>\n</blockquote>\n</aside>\n<p><a class=\"mention\" href=\"/u/aegon\">@Aegon</a> You probably meant “support putting a comma after the last argument”. That’s indeed supported, and I use it almost always, as mentioned above:</p>\n<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"6\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>because I follow the general style of putting commas in each line, including the last line, in multiline situations (especially arrays).</p>\n</blockquote>\n</aside>",
      "raw": "[quote=\"Aegon, post:7, topic:324, full:true\"]\nA better solution is to support putting a comma after each line no matter whether it is the last argument or not, like Python.\n[/quote]\n\n[quote=\"laurmaedje, post:8, topic:324, full:true\"]\nThat’s already supported.\n[/quote]\n\n@Aegon You probably meant \"support putting a comma after the last argument\". That's indeed supported, and I use it almost always, as mentioned above:\n\n[quote=\"maven, post:6, topic:324\"]\nbecause I follow the general style of putting commas in each line, including the last line, in multiline situations (especially arrays).\n[/quote]",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 3,
      "like_count": 0,
      "reads": 32,
      "score": 11.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1621,
      "post_number": 11,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-17T12:56:23.267Z",
      "updated_at": "2024-09-17T12:56:23.267Z",
      "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"SillyFreak\" data-post=\"9\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\"> SillyFreak:</div>\n<blockquote>\n<aside class=\"quote no-group\" data-username=\"maven\" data-post=\"5\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/m/F88938/48.png\" class=\"avatar\"> maven:</div>\n<blockquote>\n<p>The case above and similar ones could be handled by only interpreting linebreaks as commas where that is syntactically valid, right? – Admittedly, that’d be a weird feature.</p>\n</blockquote>\n</aside>\n<p>No, that would not be enough. unary plus and unary minus are supported operators, so even the exact example Laurenz made would still be interpreted as an array. (<code>+ \"two\"</code> is a type error, but syntactically no problem)</p>\n</blockquote>\n</aside>\n<p>You are correct. It would require somehow detecting errors other than syntax errors, and that would definitely be way too weird. I would not want that either. (And it would still not solve the problem of having arrays of numbers, including negative numbers, vs subtraction.)</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"SillyFreak\" data-post=\"9\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/sillyfreak/48/1483_2.png\" class=\"avatar\"> SillyFreak:</div>\n<blockquote>\n<blockquote>\n<p>JavaScript’s “<a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-7.9\" rel=\"noopener nofollow ugc\">automatic semicolon insertion</a>” rule is the real odd one. Where other languages assume most newlines <em>are</em> meaningful and only a few should be ignored in multi-line statements, JS assumes the opposite. […]</p>\n<p>This design note would turn into a design diatribe if I went into complete detail about how that even <em>works</em>, much less all the various ways that JavaScript’s “solution” is a bad idea. It’s a mess. […]</p>\n</blockquote>\n<p>The design note also says “If you’re designing a new language, you almost surely <em>should</em> avoid an explicit statement terminator” – but that advice can’t very easily be applied to commas, and Typst <em>did</em> avoid mandatory semicolons.</p>\n</blockquote>\n</aside>\n<p>Thanks a lot for that link! I see that such “magic” as in JS is probably a bad idea (“weird”), as I have stated above. Though I don’t see why it shouldn’t be in principle possible to do something similar with commas. But it might require significant changes in grammar… See next post.</p>",
      "raw": "[quote=\"SillyFreak, post:9, topic:324\"]\n[quote=\"maven, post:5, topic:324\"]\nThe case above and similar ones could be handled by only interpreting linebreaks as commas where that is syntactically valid, right? – Admittedly, that’d be a weird feature.\n[/quote]\n\nNo, that would not be enough. unary plus and unary minus are supported operators, so even the exact example Laurenz made would still be interpreted as an array. (`+ \"two\"` is a type error, but syntactically no problem)\n[/quote]\n\nYou are correct. It would require somehow detecting errors other than syntax errors, and that would definitely be way too weird. I would not want that either. (And it would still not solve the problem of having arrays of numbers, including negative numbers, vs subtraction.)\n\n[quote=\"SillyFreak, post:9, topic:324\"]\n> JavaScript’s “[automatic semicolon insertion](https://www.ecma-international.org/ecma-262/5.1/#sec-7.9)” rule is the real odd one. Where other languages assume most newlines *are* meaningful and only a few should be ignored in multi-line statements, JS assumes the opposite. […]\n>\n>\n>\n> This design note would turn into a design diatribe if I went into complete detail about how that even *works*, much less all the various ways that JavaScript’s “solution” is a bad idea. It’s a mess. […]\n\nThe design note also says “If you’re designing a new language, you almost surely *should* avoid an explicit statement terminator” – but that advice can’t very easily be applied to commas, and Typst *did* avoid mandatory semicolons.\n[/quote]\n\nThanks a lot for that link! I see that such \"magic\" as in JS is probably a bad idea (\"weird\"), as I have stated above. Though I don't see why it shouldn't be in principle possible to do something similar with commas. But it might require significant changes in grammar... See next post.",
      "reply_to_post_number": 9,
      "reply_count": 0,
      "quote_count": 2,
      "like_count": 0,
      "reads": 33,
      "score": 6.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1622,
      "post_number": 12,
      "username": "maven",
      "name": "",
      "created_at": "2024-09-17T13:12:43.764Z",
      "updated_at": "2024-09-17T13:12:43.764Z",
      "cooked": "<p>The main reason “optional commas” would not work cleanly:</p>\n<aside class=\"quote no-group\" data-username=\"laurmaedje\" data-post=\"3\" data-topic=\"324\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/laurmaedje/48/14_2.png\" class=\"avatar\"> laurmaedje:</div>\n<blockquote>\n<p>What is problematic about this, is that <code>(...)</code> is also used for grouping multi-line expressions</p>\n</blockquote>\n</aside>\n<p>I think the main problem isn’t multiline expressions though (which could be solved by explicit line continuation via backslash at EOL for example), but that array construction in the current grammar really needs commas:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">// a is a string\nlet a = \"foo\"\n\n// b should also be a string\nlet b = (\"foo\")\n\n// c would be an array of two strings if EOL commas were optional\nlet c = (\n  \"foo\"\n  \"bar\"\n)\n\n// What should this be however? string or single-element array?\nlet d = (\n  \"foo\"\n)\n</code></pre>\n<p>So the overload of <code>()</code> as array constructor, and/or some other far-reaching changes to grammar would have to be implemented, and I see that this is out of scope for Typst. This then answers my original question <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>Thanks to <a class=\"mention\" href=\"/u/laurmaedje\">@laurmaedje</a>, <a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a> and <a class=\"mention\" href=\"/u/aegon\">@Aegon</a> for replying.</p>",
      "raw": "The main reason \"optional commas\" would not work cleanly:\n\n[quote=\"laurmaedje, post:3, topic:324\"]\nWhat is problematic about this, is that `(...)` is also used for grouping multi-line expressions\n[/quote]\n\nI think the main problem isn't multiline expressions though (which could be solved by explicit line continuation via backslash at EOL for example), but that array construction in the current grammar really needs commas:\n\n```typc\n// a is a string\nlet a = \"foo\"\n\n// b should also be a string\nlet b = (\"foo\")\n\n// c would be an array of two strings if EOL commas were optional\nlet c = (\n  \"foo\"\n  \"bar\"\n)\n\n// What should this be however? string or single-element array?\nlet d = (\n  \"foo\"\n)\n```\n\nSo the overload of `()` as array constructor, and/or some other far-reaching changes to grammar would have to be implemented, and I see that this is out of scope for Typst. This then answers my original question :slight_smile: \n\nThanks to @laurmaedje, @SillyFreak and @Aegon for replying.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 33,
      "score": 11.6,
      "accepted_answer": true,
      "trust_level": 1,
      "user_id": 256
    },
    {
      "id": 1755,
      "post_number": 13,
      "username": "Aegon",
      "name": "Aegon Huke",
      "created_at": "2024-09-18T10:08:14.336Z",
      "updated_at": "2024-09-18T10:08:14.336Z",
      "cooked": "<p>Thanks for telling me this.</p>",
      "raw": "Thanks for telling me this.",
      "reply_to_post_number": 10,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 6.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 269
    }
  ],
  "scraped_at": "2025-06-10T09:58:52.676000"
}