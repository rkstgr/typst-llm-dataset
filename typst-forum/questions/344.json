{
  "topic_metadata": {
    "id": 344,
    "title": "Can I access the dimensions of a page?",
    "slug": "can-i-access-the-dimensions-of-a-page",
    "posts_count": 6,
    "created_at": "2024-09-16T13:47:28.441Z",
    "last_posted_at": "2024-10-03T20:16:28.341Z",
    "views": 741,
    "like_count": 8,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "laurmaedje",
    "tags": [
      "scripting",
      "page"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 384
  },
  "posts": [
    {
      "id": 1275,
      "post_number": 1,
      "username": "Brenden_Harrell",
      "name": "Brenden Harrell",
      "created_at": "2024-09-16T13:47:28.600Z",
      "updated_at": "2024-09-23T07:19:18.903Z",
      "cooked": "<p>Hi Everyone,</p>\n<p>I have made the bookletic package that splits the page into two smaller ones for ordering as a booklet. And right now I have the overall page size hardcoded so that I can divide it and set the size for the smaller pages but am trying to find a way to use the built in page sizes. Is there a way to ask the user of a function for a page size and use that within a function to get the actual dimensions of a type of paper?</p>",
      "raw": "Hi Everyone, \n\nI have made the bookletic package that splits the page into two smaller ones for ordering as a booklet. And right now I have the overall page size hardcoded so that I can divide it and set the size for the smaller pages but am trying to find a way to use the built in page sizes. Is there a way to ask the user of a function for a page size and use that within a function to get the actual dimensions of a type of paper?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 86,
      "score": 2987.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 285
    },
    {
      "id": 1283,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-09-16T14:13:31.637Z",
      "updated_at": "2024-09-16T14:13:31.637Z",
      "cooked": "<p>Hello!<br>\nYou can access page size using the <a href=\"https://typst.app/docs/reference/layout/layout/\"><code>layout</code></a> function.<br>\nFrom the official documentation:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#layout(size =&gt; {\n  let half = 50% * size.width\n  [Half a page is #half wide.]\n})\n</code></pre>",
      "raw": "Hello!\nYou can access page size using the [`layout`](https://typst.app/docs/reference/layout/layout/) function.\nFrom the official documentation:\n```typ\n#layout(size => {\n  let half = 50% * size.width\n  [Half a page is #half wide.]\n})\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 87,
      "score": 67.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 1311,
      "post_number": 3,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-16T14:49:50.067Z",
      "updated_at": "2024-09-16T14:49:50.067Z",
      "cooked": "<p>To supplement the previous answer: While <code>layout</code> generally gives the dimensions of the currently surrounding container, <code>page.width</code> and <code>page.height</code> give the page height/width specifically. They are only available within <code>context</code>.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(width: 500pt)\n#context page.width\n</code></pre>\n<p>However, <code>page.width</code> will always have the value of <code>width</code>, not of <code>height</code> when <code>flipped: true</code>. Moreover, as of Typst 0.11.1 the retrieval does not work when using an explicit <code>#page(width: ..)[..]</code>. This will be fixed in Typst 0.12.</p>\n<p>If it’s for a smaller piece of layout, the <code>layout</code> approach would be more robust in this regard. However, it comes at the cost of all the content within it being wrapped in a block-level container, so you can’t e.g. have pagebreaks within it and it can negatively affect layout of things like footnotes.</p>",
      "raw": "To supplement the previous answer: While `layout` generally gives the dimensions of the currently surrounding container, `page.width` and `page.height` give the page height/width specifically. They are only available within `context`.\n\n```typ\n#set page(width: 500pt)\n#context page.width\n````\n\nHowever, `page.width` will always have the value of `width`, not of `height` when `flipped: true`. Moreover, as of Typst 0.11.1 the retrieval does not work when using an explicit `#page(width: ..)[..]`. This will be fixed in Typst 0.12. \n\nIf it's for a smaller piece of layout, the `layout` approach would be more robust in this regard. However, it comes at the cost of all the content within it being wrapped in a block-level container, so you can't e.g. have pagebreaks within it and it can negatively affect layout of things like footnotes.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 83,
      "score": 61.6,
      "accepted_answer": true,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 3246,
      "post_number": 4,
      "username": "Brenden_Harrell",
      "name": "Brenden Harrell",
      "created_at": "2024-10-02T17:56:53.732Z",
      "updated_at": "2024-10-02T17:56:53.732Z",
      "cooked": "<p>I have tried the context approach but have not been able to assign the value to a variable for use throughout the rest of the code. When I assign it like this:<br>\n<code> let variable = context page.width</code></p>\n<p>The variable ends up having the context function itself assigned rather than the actual value. Am I missing something or is this a bug?</p>",
      "raw": "I have tried the context approach but have not been able to assign the value to a variable for use throughout the rest of the code. When I assign it like this:\n``` let variable = context page.width```\n\nThe variable ends up having the context function itself assigned rather than the actual value. Am I missing something or is this a bug?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 50,
      "score": 40.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 285
    },
    {
      "id": 3249,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-02T18:39:50.858Z",
      "updated_at": "2024-10-02T18:39:50.858Z",
      "cooked": "<p>See here:</p>\n<aside class=\"quote quote-modified\" data-post=\"2\" data-topic=\"164\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/laurmaedje/48/14_2.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2\">Why is the value I receive from context always content?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    When working with context, you need to put everything that depends on the contextual information into the context block/expression itself. The explicit context expression is a trade-off: You get to know where in the document you are (accessible via <a href=\"https://typst.app/docs/reference/introspection/here/\">here()</a>) and which set rules are active there (accessible via things like text.lang). In return, the context value itself becomes opaque. You cannot peek into it, so everything that depends on the contextual information must happen within it. \nLet’s lo…\n  </blockquote>\n</aside>\n",
      "raw": "See here:\n\nhttps://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 49,
      "score": 54.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 3365,
      "post_number": 6,
      "username": "Brenden_Harrell",
      "name": "Brenden Harrell",
      "created_at": "2024-10-03T20:16:28.341Z",
      "updated_at": "2024-10-03T20:16:28.341Z",
      "cooked": "<p>Thank you! That works! This is the structure that ended up working for others who might need it:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let sig (/*arguments*/) =&gt; {\n//Initialize stuff\n  context {\n    let signature-paper-height = page.height\n    //Rest of package that uses value here\n  }\n}\n</code></pre>",
      "raw": "Thank you! That works! This is the structure that ended up working for others who might need it:\n```typst\n#let sig (/*arguments*/) => {\n//Initialize stuff\n  context {\n    let signature-paper-height = page.height\n    //Rest of package that uses value here\n  }\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 40,
      "score": 38.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 285
    }
  ],
  "scraped_at": "2025-06-10T09:58:51.955716"
}