{
  "topic_metadata": {
    "id": 3321,
    "title": "How can I separate formatting and functionality in own templates?",
    "slug": "how-can-i-separate-formatting-and-functionality-in-own-templates",
    "posts_count": 9,
    "created_at": "2025-03-18T17:04:50.675Z",
    "last_posted_at": "2025-03-26T15:51:51.965Z",
    "views": 175,
    "like_count": 10,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 5,
    "accepted_answer_username": "quachpas",
    "tags": [
      "scripting",
      "templates"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1520
  },
  "posts": [
    {
      "id": 9967,
      "post_number": 1,
      "username": "joscha_krug",
      "name": "Joscha Krug",
      "created_at": "2025-03-18T17:04:50.794Z",
      "updated_at": "2025-03-18T17:25:44.265Z",
      "cooked": "<p>Hi all,</p>\n<p>For a template I am developing, I need to both define formatting rules for built-in Typst element functions and write custom (pseudo-element) functions, like an extension of Typst’s <code>figure</code> that allows me to add a note between figure content and caption. My goal is to set this up such that I can define formatting rules in one central place where they are easy to track, and keep additional function definitions separate from that in a modular way. But I am unsure how I can achieve this in Typst.</p>\n<ul>\n<li>The first best would be to define my own pseudo-element functions as proper element functions and make some of their arguments settable. But Typst does not seem to allow that, or does it?</li>\n<li>The second best would be to define options for my own pseudo-element functions as ‘global constants’ within my main <code>template</code> function. But I don’t think there is a way to access variable definitions inside the <code>template</code> function from outside functions?</li>\n</ul>\n<p>This is a more generic question, so I appreciate any kind of insights, opinions or pointers to other resources or debates elsewhere. To make my issue a bit clearer, I have added a simple working example below.</p>\n<p>Cheers,</p>\n<p>Joscha</p>\n<p><strong>Example:</strong></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let template(body) = {\n  // this is where I would ideally like to keep all my style definitions\n  // in one place\n  show figure: set text(fill: red)\n  \n  body\n}\n\n// this is the function definition, which I would like to keep as generic\n// as possible for it to work well with many different potential templates\n// without needing to be re-written\n#let my-figure(content, note: [], ..args) = {\n  figure(..args)[\n    #content\n\n    #if note != [] {\n      block()[\n        // here is where I have to define the style of my figure note\n        // -&gt; ideally, I would define this in my central template function\n        // and only specify defaults here\n        #set text(fill: green)\n        Note: #note\n      ]\n    }\n  ]\n}\n\n#show: template\n\n#lorem(80)\n\n#my-figure(\n  rect(width: 80%, height: 20%),\n  note: [#lorem(30)],\n  caption: [#lorem(10)]\n)\n\n#lorem(80)\n</code></pre>",
      "raw": "Hi all,\n\nFor a template I am developing, I need to both define formatting rules for built-in Typst element functions and write custom (pseudo-element) functions, like an extension of Typst's `figure` that allows me to add a note between figure content and caption. My goal is to set this up such that I can define formatting rules in one central place where they are easy to track, and keep additional function definitions separate from that in a modular way. But I am unsure how I can achieve this in Typst.\n\n* The first best would be to define my own pseudo-element functions as proper element functions and make some of their arguments settable. But Typst does not seem to allow that, or does it?\n* The second best would be to define options for my own pseudo-element functions as 'global constants' within my main `template` function. But I don't think there is a way to access variable definitions inside the `template` function from outside functions?\n\nThis is a more generic question, so I appreciate any kind of insights, opinions or pointers to other resources or debates elsewhere. To make my issue a bit clearer, I have added a simple working example below.\n\nCheers,\n\nJoscha\n\n**Example:**\n\n```typ\n#let template(body) = {\n  // this is where I would ideally like to keep all my style definitions\n  // in one place\n  show figure: set text(fill: red)\n  \n  body\n}\n\n// this is the function definition, which I would like to keep as generic\n// as possible for it to work well with many different potential templates\n// without needing to be re-written\n#let my-figure(content, note: [], ..args) = {\n  figure(..args)[\n    #content\n\n    #if note != [] {\n      block()[\n        // here is where I have to define the style of my figure note\n        // -> ideally, I would define this in my central template function\n        // and only specify defaults here\n        #set text(fill: green)\n        Note: #note\n      ]\n    }\n  ]\n}\n\n#show: template\n\n#lorem(80)\n\n#my-figure(\n  rect(width: 80%, height: 20%),\n  note: [#lorem(30)],\n  caption: [#lorem(10)]\n)\n\n#lorem(80)\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 43,
      "score": 158.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1135
    },
    {
      "id": 9980,
      "post_number": 2,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-03-18T23:03:20.800Z",
      "updated_at": "2025-03-18T23:03:20.800Z",
      "cooked": "<p>For your specific case of a figure with an optional and configurable note I would do the following:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let template(body) = {\n  // you can set up your default/recommended rules here\n  show figure.caption: set text(fill: red)\n\n  body\n}\n\n// you can set up the default style for your notes here\n#let my-note(fill: green, supplement: \"Note\", body) = block[\n  #set text(fill: fill)\n  #supplement: #body\n]\n\n// this function is kept very general, \"note\" can either be none or content\n#let my-figure(content, note: none, ..args) = {\n  figure(..args)[\n    #content\n    #if note != none { note }\n  ]\n}\n\n#show: template\n\n// you can override the rules from the template here if you don't like the default style\n// (this might not work for complex show rules that completely modify an element)\n#show figure.caption: set text(fill: purple)\n\n// you can override the style of the figure notes by redefining the default values\n#let my-note = my-note.with(fill: blue)\n\n#my-figure(\n  rect(width: 80%, height: 20%),\n  note: my-note(lorem(30)),\n  caption: [#lorem(10)]\n)\n</code></pre>\n<p>While this requires you to pass the note content through the function <code>figure-note()</code>, I wouldn’t mind the additional “verbosity” for the gain in the flexibility.</p>\n<p>If you haven’t seen it yet, this <a href=\"https://forum.typst.app/t/overriding-template-parameters-missing-social-convention-or-typst-design-flaw/2792\">post</a> is definitely worth reading if you want some more insights into writing and using templates. Don’t get too excited though, you won’t be able to directly apply everything you see there to your template. Some of the answers already look ahead what templates can/would look like when custom types are available.</p>",
      "raw": "For your specific case of a figure with an optional and configurable note I would do the following:\n\n```typ\n#let template(body) = {\n  // you can set up your default/recommended rules here\n  show figure.caption: set text(fill: red)\n\n  body\n}\n\n// you can set up the default style for your notes here\n#let my-note(fill: green, supplement: \"Note\", body) = block[\n  #set text(fill: fill)\n  #supplement: #body\n]\n\n// this function is kept very general, \"note\" can either be none or content\n#let my-figure(content, note: none, ..args) = {\n  figure(..args)[\n    #content\n    #if note != none { note }\n  ]\n}\n\n#show: template\n\n// you can override the rules from the template here if you don't like the default style\n// (this might not work for complex show rules that completely modify an element)\n#show figure.caption: set text(fill: purple)\n\n// you can override the style of the figure notes by redefining the default values\n#let my-note = my-note.with(fill: blue)\n\n#my-figure(\n  rect(width: 80%, height: 20%),\n  note: my-note(lorem(30)),\n  caption: [#lorem(10)]\n)\n```\n\nWhile this requires you to pass the note content through the function `figure-note()`, I wouldn't mind the additional \"verbosity\" for the gain in the flexibility.\n\nIf you haven't seen it yet, this [post](https://forum.typst.app/t/overriding-template-parameters-missing-social-convention-or-typst-design-flaw/2792) is definitely worth reading if you want some more insights into writing and using templates. Don't get too excited though, you won't be able to directly apply everything you see there to your template. Some of the answers already look ahead what templates can/would look like when custom types are available.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 35,
      "score": 27.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 69
    },
    {
      "id": 9984,
      "post_number": 3,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-03-19T09:21:58.615Z",
      "updated_at": "2025-03-19T09:22:32.672Z",
      "cooked": "<p>As a rule, I think it’s best to stick to native elements functions and extend them with additional functions. Unless you <em>really</em> need it (eg for theorems, etc.), I don’t see the benefit of defining a custom figure function. Not only will it confuse the users of your template, but also just add unnecessary complexity to your template. I believe most styling can be achieved with show rules.</p>\n<p>As an example, here is how I defined figure notes for an INFORMS journal template.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let figure-note(body) = (\n  context {\n    let kind = {\n      query(selector(figure).before(here())).last().kind\n    }\n    set par(first-line-indent: 0pt)\n    set text(scriptsize)\n    if kind == table {\n      align(\n        center,\n        {\n          [Table Notes.]\n          h(.5em)\n          body\n        },\n      )\n    } else {\n      {\n        [_Note._]\n        h(.5em)\n        body\n      }\n    }\n  }\n)\n</code></pre>",
      "raw": "As a rule, I think it's best to stick to native elements functions and extend them with additional functions. Unless you _really_ need it (eg for theorems, etc.), I don't see the benefit of defining a custom figure function. Not only will it confuse the users of your template, but also just add unnecessary complexity to your template. I believe most styling can be achieved with show rules.\n\nAs an example, here is how I defined figure notes for an INFORMS journal template.\n```typ\n#let figure-note(body) = (\n  context {\n    let kind = {\n      query(selector(figure).before(here())).last().kind\n    }\n    set par(first-line-indent: 0pt)\n    set text(scriptsize)\n    if kind == table {\n      align(\n        center,\n        {\n          [Table Notes.]\n          h(.5em)\n          body\n        },\n      )\n    } else {\n      {\n        [_Note._]\n        h(.5em)\n        body\n      }\n    }\n  }\n)\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 32,
      "score": 51.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 9990,
      "post_number": 4,
      "username": "joscha_krug",
      "name": "Joscha Krug",
      "created_at": "2025-03-19T13:22:12.942Z",
      "updated_at": "2025-03-19T13:22:12.942Z",
      "cooked": "<p><a class=\"mention\" href=\"/u/janekfleper\">@janekfleper</a> Thanks for the inspiration and the link - really interesting discussion, makes me hope that custom types will be implemented sooner rather than later.</p>\n<p><a class=\"mention\" href=\"/u/quachpas\">@quachpas</a> I totally agree with you with respect to using native elements wherever possible, and thanks for sharing your approach. In this particular case, I do not see a straightforward way to implement my desired behaviour without a custom function, though. After all, I want the figure note to appear ‘within’ the figure; or at least to float with it in case I choose floating placement. Happy to be proven wrong though!</p>",
      "raw": "@janekfleper Thanks for the inspiration and the link - really interesting discussion, makes me hope that custom types will be implemented sooner rather than later.\n\n@quachpas I totally agree with you with respect to using native elements wherever possible, and thanks for sharing your approach. In this particular case, I do not see a straightforward way to implement my desired behaviour without a custom function, though. After all, I want the figure note to appear 'within' the figure; or at least to float with it in case I choose floating placement. Happy to be proven wrong though!",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 11.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1135
    },
    {
      "id": 10042,
      "post_number": 5,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-03-20T15:42:20.695Z",
      "updated_at": "2025-03-20T15:45:28.719Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"joscha_krug\" data-post=\"4\" data-topic=\"3321\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/joscha_krug/48/1842_2.png\" class=\"avatar\"> joscha_krug:</div>\n<blockquote>\n<p>Happy to be proven wrong though!</p>\n</blockquote>\n</aside>\n<p><a href=\"https://xkcd.com/386/\">Duty calls</a>.</p>\n<p>A few comments:</p>\n<ul>\n<li>I prefer to define show/set rules as functions, and pass them at the templating stage to make things less of a clutter</li>\n<li>In a template, you control everything, so as long as you embed enough metadata you can entirely control the layout without affecting the user functions such as figures, etc. What you were missing was the usage of queries.</li>\n<li>Note styling is in the <code>note</code> function (green text)</li>\n<li>Figure styling is in the style-figure function (red text)</li>\n<li>An additional prefix is added for the metadata in order to differentiate it from other metadata which could be embedded in the document.</li>\n</ul>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// All styling show/set rules\n#let note(note) = { // Formatting of the note\n  set text(fill: green)\n  note\n}\n#let style-figure = it =&gt; context { // show figure rule\n  // Styling\n  set text(red)\n\n  // Retrieve figure note\n  let q = query(\n    selector(metadata) // Find the note between \n    .after(here()) // current figure and\n    .before(selector(figure).after(here())) // next figure, if it exists\n  )\n  q = q.filter(x =&gt; x.value.starts-with(\"fignote:\"))\n  let note-text = if q.len() &gt; 0 {\n    q.first().value.slice(8)\n  } else {\n    \"\"\n  }\n\n  // Layout Figure\n  it.body\n  if note-text != \"\" { note(note-text) }\n  it.caption\n}\n\n#let figure-note(note) = { // User interface to note a figure\n  metadata(\"fignote:\" + note)\n}\n\n#let template(body) = { // Template function for the _layout_\n  // Styling\n  show figure: style-figure  \n\n  // Layout\n  body\n}\n\n#show: template\n\n#lorem(80)\n\n#figure(\n  rect(width: 80%, height: 20%),\n  caption: [#lorem(6)]\n)\n#figure-note(lorem(6))\n\n#figure(\n  rect(width: 80%, height: 20%),\n  caption: [#lorem(7)]\n)\n\n#figure(\n  rect(width: 80%, height: 20%),\n  caption: [#lorem(8)]\n)\n#figure-note(lorem(8))\n\n// Incorrect usage of a figure note, nothing should happen\n#figure-note(lorem(1))\n\n#figure(\n  rect(width: 80%, height: 20%),\n  caption: [#lorem(9)]\n)\n#metadata(\"random metadata which should not appear\")\n#figure-note(lorem(9))\n\n#lorem(80)\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/9/9e4d823d2a218d726b674bb71705511b3231822c.png\" data-download-href=\"https://forum.typst.app/uploads/default/9e4d823d2a218d726b674bb71705511b3231822c\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/9/9e4d823d2a218d726b674bb71705511b3231822c_2_690x388.png\" alt=\"image\" data-base62-sha1=\"mApv7Th7nzl82UBKubvbI1wF1RW\" width=\"690\" height=\"388\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/9/9e4d823d2a218d726b674bb71705511b3231822c_2_690x388.png, https://forum.typst.app/uploads/default/optimized/2X/9/9e4d823d2a218d726b674bb71705511b3231822c_2_1035x582.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/9/9e4d823d2a218d726b674bb71705511b3231822c_2_1380x776.png 2x\" data-dominant-color=\"FAFAFA\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">2559×1440 165 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "[quote=\"joscha_krug, post:4, topic:3321\"]\nHappy to be proven wrong though!\n[/quote]\n\n[Duty calls](https://xkcd.com/386/).\n\nA few comments:\n- I prefer to define show/set rules as functions, and pass them at the templating stage to make things less of a clutter\n- In a template, you control everything, so as long as you embed enough metadata you can entirely control the layout without affecting the user functions such as figures, etc. What you were missing was the usage of queries.\n- Note styling is in the `note` function (green text)\n- Figure styling is in the style-figure function (red text)\n- An additional prefix is added for the metadata in order to differentiate it from other metadata which could be embedded in the document.\n\n```typ\n// All styling show/set rules\n#let note(note) = { // Formatting of the note\n  set text(fill: green)\n  note\n}\n#let style-figure = it => context { // show figure rule\n  // Styling\n  set text(red)\n\n  // Retrieve figure note\n  let q = query(\n    selector(metadata) // Find the note between \n    .after(here()) // current figure and\n    .before(selector(figure).after(here())) // next figure, if it exists\n  )\n  q = q.filter(x => x.value.starts-with(\"fignote:\"))\n  let note-text = if q.len() > 0 {\n    q.first().value.slice(8)\n  } else {\n    \"\"\n  }\n\n  // Layout Figure\n  it.body\n  if note-text != \"\" { note(note-text) }\n  it.caption\n}\n\n#let figure-note(note) = { // User interface to note a figure\n  metadata(\"fignote:\" + note)\n}\n\n#let template(body) = { // Template function for the _layout_\n  // Styling\n  show figure: style-figure  \n\n  // Layout\n  body\n}\n\n#show: template\n\n#lorem(80)\n\n#figure(\n  rect(width: 80%, height: 20%),\n  caption: [#lorem(6)]\n)\n#figure-note(lorem(6))\n\n#figure(\n  rect(width: 80%, height: 20%),\n  caption: [#lorem(7)]\n)\n\n#figure(\n  rect(width: 80%, height: 20%),\n  caption: [#lorem(8)]\n)\n#figure-note(lorem(8))\n\n// Incorrect usage of a figure note, nothing should happen\n#figure-note(lorem(1))\n\n#figure(\n  rect(width: 80%, height: 20%),\n  caption: [#lorem(9)]\n)\n#metadata(\"random metadata which should not appear\")\n#figure-note(lorem(9))\n\n#lorem(80)\n```\n![image|690x388](upload://mApv7Th7nzl82UBKubvbI1wF1RW.png)",
      "reply_to_post_number": 4,
      "reply_count": 2,
      "quote_count": 1,
      "like_count": 4,
      "reads": 28,
      "score": 80.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 10273,
      "post_number": 6,
      "username": "joscha_krug",
      "name": "Joscha Krug",
      "created_at": "2025-03-26T13:03:03.625Z",
      "updated_at": "2025-03-26T13:03:03.625Z",
      "cooked": "<p><a class=\"mention\" href=\"/u/quachpas\">@quachpas</a> Thanks a lot for this detailed example! I had gotten to the point where I suspected querying might be the way to go but had failed to make it work because I did not know I could use <code>#metadata</code> in this way.</p>\n<p>I’ve marked this as a solution since it solves my immediate issue and may be a blueprint for similar cases. But will stay tuned for the discussion about custom types and ways to make templates more generic and easier to ‘tweak’.</p>",
      "raw": "@quachpas Thanks a lot for this detailed example! I had gotten to the point where I suspected querying might be the way to go but had failed to make it work because I did not know I could use `#metadata` in this way.\n\nI've marked this as a solution since it solves my immediate issue and may be a blueprint for similar cases. But will stay tuned for the discussion about custom types and ways to make templates more generic and easier to 'tweak'.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 21,
      "score": 24.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1135
    },
    {
      "id": 10274,
      "post_number": 7,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-03-26T13:05:56.396Z",
      "updated_at": "2025-03-26T13:05:56.396Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"joscha_krug\" data-post=\"6\" data-topic=\"3321\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/joscha_krug/48/1842_2.png\" class=\"avatar\"> joscha_krug:</div>\n<blockquote>\n<p>I did not know I could use <code>#metadata</code> in this way.</p>\n</blockquote>\n</aside>\n<p>Just consider <code>metadata</code> as addressable invisible content, similar to <code>counter/state.update</code>. They need to be output somewhere.</p>",
      "raw": "[quote=\"joscha_krug, post:6, topic:3321\"]\nI did not know I could use `#metadata` in this way.\n[/quote]\n\nJust consider `metadata` as addressable invisible content, similar to `counter/state.update`. They need to be output somewhere.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 21,
      "score": 4.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 10290,
      "post_number": 8,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-03-26T15:42:07.671Z",
      "updated_at": "2025-03-26T15:42:07.671Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"quachpas\" data-post=\"5\" data-topic=\"3321\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/q/662200/48.png\" class=\"avatar\"> quachpas:</div>\n<blockquote>\n<pre><code class=\"lang-auto\">  // Layout Figure\n  it.body\n  if note-text != \"\" { note(note-text) }\n  it.caption\n}\n</code></pre>\n</blockquote>\n</aside>\n<p>This is maybe a meta question, how do I as a typst user know that <code>{it.body; it.caption}</code> is an acceptable figure show function (that it does the default thing?) and how does it interact with other templates, it could possibly conflict with other styling, right?</p>",
      "raw": "[quote=\"quachpas, post:5, topic:3321\"]\n```\n  // Layout Figure\n  it.body\n  if note-text != \"\" { note(note-text) }\n  it.caption\n}\n```\n[/quote]\n\nThis is maybe a meta question, how do I as a typst user know that `{it.body; it.caption}` is an acceptable figure show function (that it does the default thing?) and how does it interact with other templates, it could possibly conflict with other styling, right?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 21,
      "score": 9.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 10291,
      "post_number": 9,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-03-26T15:51:51.965Z",
      "updated_at": "2025-03-26T15:51:51.965Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"bluss\" data-post=\"8\" data-topic=\"3321\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/b/441A5E/48.png\" class=\"avatar\"> bluss:</div>\n<blockquote>\n<p>how do I as a typst user know that <code>{it.body; it.caption}</code> is an acceptable figure show function (that it does the default thing?)</p>\n</blockquote>\n</aside>\n<p>Typst does not prevent users from overwriting default layout behaviours of any elements, so there is no “acceptability criteria”. You can write <code>show figure: it =&gt; {}</code>, and typst couldn’t care less.</p>\n<p>As for the default layout, you don’t know that it is the default. I would actually argue that since you have overwritten, it’s already not the “default” behaviour. It just looks like it.</p>\n<aside class=\"quote no-group\" data-username=\"bluss\" data-post=\"8\" data-topic=\"3321\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/b/441A5E/48.png\" class=\"avatar\"> bluss:</div>\n<blockquote>\n<p>how does it interact with other templates, it could possibly conflict with other styling, right?</p>\n</blockquote>\n</aside>\n<p>It interacts very badly! At the moment, there is no way to know whether existing rules are registered for an element.</p>\n<p>There is a limited way to combine styling if you return the element itself (<code>it</code>), eg</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">show figure: it =&gt; {\n  if it.kind == table {\n    // stuff\n  } else {\n    it\n  }\n}\n</code></pre>\n<p>is potentially compatible with additional styling because it would end up in the else clause.</p>",
      "raw": "[quote=\"bluss, post:8, topic:3321\"]\nhow do I as a typst user know that `{it.body; it.caption}` is an acceptable figure show function (that it does the default thing?)\n[/quote]\n\nTypst does not prevent users from overwriting default layout behaviours of any elements, so there is no \"acceptability criteria\". You can write `show figure: it => {}`, and typst couldn't care less.\n\nAs for the default layout, you don't know that it is the default. I would actually argue that since you have overwritten, it's already not the \"default\" behaviour. It just looks like it.\n\n[quote=\"bluss, post:8, topic:3321\"]\nhow does it interact with other templates, it could possibly conflict with other styling, right?\n[/quote]\n\nIt interacts very badly! At the moment, there is no way to know whether existing rules are registered for an element. \n\nThere is a limited way to combine styling if you return the element itself (`it`), eg\n\n```typc\nshow figure: it => {\n  if it.kind == table {\n    // stuff\n  } else {\n    it\n  }\n}\n```\nis potentially compatible with additional styling because it would end up in the else clause.",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 22,
      "score": 19.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    }
  ],
  "scraped_at": "2025-06-10T09:50:14.807516"
}