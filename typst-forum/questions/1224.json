{
  "topic_metadata": {
    "id": 1224,
    "title": "How to wrap long \"unbreakable\" text in a table cell?",
    "slug": "how-to-wrap-long-unbreakable-text-in-a-table-cell",
    "posts_count": 4,
    "created_at": "2024-10-20T07:39:38.937Z",
    "last_posted_at": "2024-10-20T13:20:44.205Z",
    "views": 943,
    "like_count": 1,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Eric",
    "tags": [
      "layout",
      "tables"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 969
  },
  "posts": [
    {
      "id": 4286,
      "post_number": 1,
      "username": "raj2569",
      "name": "Raj",
      "created_at": "2024-10-20T07:39:39.116Z",
      "updated_at": "2024-10-20T13:16:59.611Z",
      "cooked": "<p>Hello,<br>\nI am formatting a table from the following input json:</p>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">[   \n    [   \n        \"Date\",\n        \"Tran Type\",\n        \"Tran ID\",\n        \"Withdrawals\",\n        \"Deposits\",\n        \"Another Head\",\n        \"One more head\",\n        \"Last one\"\n    ],\n    [   \n        \"01/05/2024\",\n        \"TFR\",\n        \"S81420904S81420\",\n        \"S81420904\",\n        \"S81420904\",\n        \"S81420904\",\n        \"700.00\",\n        \"\"\n    ],\n    [\n        \"01/05/2024\",\n        \"TFR\",\n        \"S84554541\",\n        \"S84554541\",\n        \"S84554541\",\n        \"S84554541\",\n        \"\",\n        \"1.01\"\n    ]\n]\n</code></pre>\n<p>Using the following typst script:</p>\n<pre><code class=\"lang-auto\">#let txn = json(\"data2.json\")\n#table(\n  columns: 8,\n  ..txn.flatten()\n)\n</code></pre>\n<p>And getting the following output:<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/cb055670e3b69d4770502e148c702339e102781b.png\" data-download-href=\"https://forum.typst.app/uploads/default/cb055670e3b69d4770502e148c702339e102781b\" title=\"table-example\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/cb055670e3b69d4770502e148c702339e102781b_2_690x129.png\" alt=\"table-example\" data-base62-sha1=\"sY0mt0vPlrqilwsria1BQqWhjyX\" width=\"690\" height=\"129\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/cb055670e3b69d4770502e148c702339e102781b_2_690x129.png, https://forum.typst.app/uploads/default/original/1X/cb055670e3b69d4770502e148c702339e102781b.png 1.5x, https://forum.typst.app/uploads/default/original/1X/cb055670e3b69d4770502e148c702339e102781b.png 2x\" data-dominant-color=\"E3E3E3\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">table-example</span><span class=\"informations\">920×172 90.7 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>As it can be seen, the <code>Tran ID</code> spills over in to the next cell. I understand that there is no place to break that text in the cell, but if it’s possible to just wrap along the cell boundary and put the remaining text inthe next line, it will look much better.</p>",
      "raw": "Hello,\nI am formatting a table from the following input json:\n```json\n[   \n    [   \n        \"Date\",\n        \"Tran Type\",\n        \"Tran ID\",\n        \"Withdrawals\",\n        \"Deposits\",\n        \"Another Head\",\n        \"One more head\",\n        \"Last one\"\n    ],\n    [   \n        \"01/05/2024\",\n        \"TFR\",\n        \"S81420904S81420\",\n        \"S81420904\",\n        \"S81420904\",\n        \"S81420904\",\n        \"700.00\",\n        \"\"\n    ],\n    [\n        \"01/05/2024\",\n        \"TFR\",\n        \"S84554541\",\n        \"S84554541\",\n        \"S84554541\",\n        \"S84554541\",\n        \"\",\n        \"1.01\"\n    ]\n]\n```\nUsing the following typst script:\n```\n#let txn = json(\"data2.json\")\n#table(\n  columns: 8,\n  ..txn.flatten()\n)\n```\nAnd getting the following output:\n![table-example|690x129](upload://sY0mt0vPlrqilwsria1BQqWhjyX.png)\n\nAs it can be seen, the `Tran ID` spills over in to the next cell. I understand that there is no place to break that text in the cell, but if it's possible to just wrap along the cell boundary and put the remaining text inthe next line, it will look much better.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 65,
      "score": 4838.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 619
    },
    {
      "id": 4293,
      "post_number": 2,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-10-20T09:24:22.341Z",
      "updated_at": "2024-10-20T09:24:41.507Z",
      "cooked": "<p>You can use a regex that matches the data in the “Tran ID” column, and use it to put a soft hyphen (if you want a hyphen) or a zero-width space (if you don’t want a hyphen) between each character. You also want to enable hyphenation in general (or scoped to the table), so that “Withdrawals” doesn’t overflow:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set text(hyphenate: true)\n#show regex(\"(S[0-9]+)+\"): it =&gt; {\n  it.text.codepoints().join(sym.zws) // or .join[-?]\n}\n\n#table(\n  columns: 8,\n  ..txn.flatten()\n)\n</code></pre>\n<p>If you can’t use a regex, you could also use a show rule limited to the third column, though you then probably want to scope it to that one table:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#{\n  show table.cell.where(x: 2): cell =&gt; {\n    show regex(\"\\b.+?\\b\"): it =&gt; it.text.codepoints().join(sym.zws)\n    cell\n  }\n\n  table(\n    columns: 8,\n    ..txn.flatten()\n  )\n}\n</code></pre>",
      "raw": "You can use a regex that matches the data in the \"Tran ID\" column, and use it to put a soft hyphen (if you want a hyphen) or a zero-width space (if you don't want a hyphen) between each character. You also want to enable hyphenation in general (or scoped to the table), so that \"Withdrawals\" doesn't overflow:\n```typ\n#set text(hyphenate: true)\n#show regex(\"(S[0-9]+)+\"): it => {\n  it.text.codepoints().join(sym.zws) // or .join[-?]\n}\n\n#table(\n  columns: 8,\n  ..txn.flatten()\n)\n```\n\nIf you can't use a regex, you could also use a show rule limited to the third column, though you then probably want to scope it to that one table:\n```typ\n#{\n  show table.cell.where(x: 2): cell => {\n    show regex(\"\\b.+?\\b\"): it => it.text.codepoints().join(sym.zws)\n    cell\n  }\n\n  table(\n    columns: 8,\n    ..txn.flatten()\n  )\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 62,
      "score": 547.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 4301,
      "post_number": 3,
      "username": "raj2569",
      "name": "Raj",
      "created_at": "2024-10-20T13:04:19.605Z",
      "updated_at": "2024-10-20T13:04:19.605Z",
      "cooked": "<p>Thanks, I went with the second suggestion and it worked perfectly. I used chatgpt to understand exactly how this snippet works and here is the answer for any one stumbling  upon this later:</p>\n<h3><a name=\"p-4301-overview-1\" class=\"anchor\" href=\"#p-4301-overview-1\"></a><strong>Overview</strong></h3>\n<p>This snippet utilizes Typst’s capabilities to process and transform text using regular expressions. Specifically, it:</p>\n<ol>\n<li><strong>Finds all words in a given text</strong> using a regular expression.</li>\n<li><strong>Transforms each word</strong> by inserting zero-width spaces between its characters.</li>\n<li><strong>Displays the transformed text</strong> with these modifications.</li>\n</ol>\n<h3><a name=\"p-4301-detailed-breakdown-2\" class=\"anchor\" href=\"#p-4301-detailed-breakdown-2\"></a><strong>Detailed Breakdown</strong></h3>\n<p>Let’s dissect each component of the snippet to understand how it works:</p>\n<h4><a name=\"p-4301-h-1-regexbb-3\" class=\"anchor\" href=\"#p-4301-h-1-regexbb-3\"></a><strong>1. <code>regex(\"\\b.+?\\b\")</code></strong></h4>\n<ul>\n<li>\n<p><strong>Purpose</strong>: Defines a <strong>regular expression</strong> pattern to identify parts of the text to be transformed.</p>\n</li>\n<li>\n<p><strong>Pattern Explanation</strong>:</p>\n<ul>\n<li>\n<p><code>\\b</code>: <strong>Word Boundary</strong></p>\n<ul>\n<li>Matches the position between a word character (typically letters, digits, or underscores) and a non-word character. It ensures that the regex matches whole words rather than substrings within words.</li>\n</ul>\n</li>\n<li>\n<p><code>.+?</code>: <strong>Non-Greedy Match of One or More Characters</strong></p>\n<ul>\n<li><code>.</code>: Matches any character except newline characters.</li>\n<li><code>+</code>: Quantifier that matches <strong>one or more</strong> of the preceding element (<code>.</code> in this case).</li>\n<li><code>?</code>: Makes the preceding quantifier <strong>non-greedy</strong>, meaning it matches the smallest possible string that satisfies the pattern.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Combined Pattern (<code>\\b.+?\\b</code>)</strong>:</p>\n<ul>\n<li>This regex matches <strong>whole words</strong> in the text by finding sequences of characters that start and end at word boundaries. The non-greedy <code>.+?</code> ensures that it matches the smallest possible sequence between word boundaries, effectively capturing individual words.</li>\n</ul>\n</li>\n</ul>\n<h4><a name=\"p-4301-h-2-it-ittextcodepointsjoinsymzws-4\" class=\"anchor\" href=\"#p-4301-h-2-it-ittextcodepointsjoinsymzws-4\"></a><strong>2. <code>it =&gt; it.text.codepoints().join(sym.zws)</code></strong></h4>\n<ul>\n<li>\n<p><strong>Purpose</strong>: Defines a <strong>transformation function</strong> (a lambda) that is applied to each regex match (<code>it</code>).</p>\n</li>\n<li>\n<p><strong>Components</strong>:</p>\n<ul>\n<li>\n<p><code>it</code>: Represents the <strong>current match object</strong> found by the regex.</p>\n</li>\n<li>\n<p><code>it.text</code>: Extracts the <strong>text content</strong> of the current match (i.e., the word matched by the regex).</p>\n</li>\n<li>\n<p><code>codepoints()</code>:</p>\n<ul>\n<li><strong>Function</strong>: Converts the string into a <strong>list of Unicode code points</strong> (essentially, individual characters).</li>\n<li><strong>Example</strong>:\n<ul>\n<li><code>\"Hello\"</code> → <code>[\"H\", \"e\", \"l\", \"l\", \"o\"]</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>join(sym.zws)</code>:</p>\n<ul>\n<li><strong>Function</strong>: Joins the list of characters into a single string, inserting a <strong>zero-width space</strong> (<code>sym.zws</code>) between each character.</li>\n<li><strong><code>sym.zws</code></strong>: Represents a <strong>zero-width space</strong> character in Typst, which is invisible but allows for potential line breaks or other text processing.</li>\n<li><strong>Example</strong>:\n<ul>\n<li><code>[\"H\", \"e\", \"l\", \"l\", \"o\"]</code> joined with <code>sym.zws</code> → <code>\"H​e​l​l​o\"</code> (with zero-width spaces between letters)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Overall Transformation</strong>:</p>\n<ul>\n<li>Takes each word matched by the regex and inserts zero-width spaces between its characters. This can influence how the text is rendered, allowing for flexible line breaking or other text manipulations without altering the visible content.</li>\n</ul>\n</li>\n</ul>\n<h4><a name=\"p-4301-h-3-show-5\" class=\"anchor\" href=\"#p-4301-h-3-show-5\"></a><strong>3. <code>show</code></strong></h4>\n<ul>\n<li>\n<p><strong>Purpose</strong>: Renders or <strong>displays</strong> the transformed text within the Typst document.</p>\n</li>\n<li>\n<p><strong>Functionality</strong>:</p>\n<ul>\n<li>Applies the defined regex and transformation to the input text.</li>\n<li>Outputs the result, which includes the zero-width spaces inserted between characters of each word.</li>\n</ul>\n</li>\n</ul>\n<h3><a name=\"p-4301-putting-it-all-together-6\" class=\"anchor\" href=\"#p-4301-putting-it-all-together-6\"></a><strong>Putting It All Together</strong></h3>\n<p>Here’s a step-by-step execution of the snippet:</p>\n<ol>\n<li>\n<p><strong>Input Text</strong>: Suppose you have the following text in your Typst document:</p>\n<pre><code class=\"lang-auto\">Hello World\n</code></pre>\n</li>\n<li>\n<p><strong>Regex Application</strong>:</p>\n<ul>\n<li>The regex <code>\\b.+?\\b</code> scans the text and identifies two matches:\n<ul>\n<li><code>\"Hello\"</code></li>\n<li><code>\"World\"</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Transformation Function</strong>:</p>\n<ul>\n<li>\n<p>For each matched word, the lambda function <code>it =&gt; it.text.codepoints().join(sym.zws)</code> is applied:</p>\n<ul>\n<li>\n<p><strong>“Hello”</strong>:</p>\n<ul>\n<li><code>codepoints()</code>: <code>[\"H\", \"e\", \"l\", \"l\", \"o\"]</code></li>\n<li><code>join(sym.zws)</code>: <code>\"H​e​l​l​o\"</code> (with zero-width spaces)</li>\n</ul>\n</li>\n<li>\n<p><strong>“World”</strong>:</p>\n<ul>\n<li><code>codepoints()</code>: <code>[\"W\", \"o\", \"r\", \"l\", \"d\"]</code></li>\n<li><code>join(sym.zws)</code>: <code>\"W​o​r​l​d\"</code> (with zero-width spaces)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Rendering with <code>show</code></strong>:</p>\n<ul>\n<li>\n<p>The transformed text is displayed as:</p>\n<pre><code class=\"lang-auto\">H​e​l​l​o W​o​r​l​d\n</code></pre>\n<ul>\n<li><strong>Note</strong>: The zero-width spaces are invisible, so the text appears the same as the original. However, they enable more flexible text processing, such as allowing line breaks between characters if the layout requires it.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3><a name=\"p-4301-practical-use-cases-7\" class=\"anchor\" href=\"#p-4301-practical-use-cases-7\"></a><strong>Practical Use Cases</strong></h3>\n<ol>\n<li>\n<p><strong>Flexible Line Breaking</strong>:</p>\n<ul>\n<li>By inserting zero-width spaces between characters, you allow the text renderer to break lines between any two characters if necessary. This can be useful in narrow columns or responsive designs where words might need to wrap more flexibly.</li>\n</ul>\n</li>\n</ol>",
      "raw": "Thanks, I went with the second suggestion and it worked perfectly. I used chatgpt to understand exactly how this snippet works and here is the answer for any one stumbling  upon this later:\n\n\n### **Overview**\n\nThis snippet utilizes Typst's capabilities to process and transform text using regular expressions. Specifically, it:\n\n1. **Finds all words in a given text** using a regular expression.\n2. **Transforms each word** by inserting zero-width spaces between its characters.\n3. **Displays the transformed text** with these modifications.\n\n### **Detailed Breakdown**\n\nLet's dissect each component of the snippet to understand how it works:\n\n#### **1. `regex(\"\\b.+?\\b\")`**\n\n- **Purpose**: Defines a **regular expression** pattern to identify parts of the text to be transformed.\n  \n- **Pattern Explanation**:\n  \n  - `\\b`: **Word Boundary**  \n    - Matches the position between a word character (typically letters, digits, or underscores) and a non-word character. It ensures that the regex matches whole words rather than substrings within words.\n  \n  - `.+?`: **Non-Greedy Match of One or More Characters**  \n    - `.`: Matches any character except newline characters.\n    - `+`: Quantifier that matches **one or more** of the preceding element (`.` in this case).\n    - `?`: Makes the preceding quantifier **non-greedy**, meaning it matches the smallest possible string that satisfies the pattern.\n  \n- **Combined Pattern (`\\b.+?\\b`)**:  \n  - This regex matches **whole words** in the text by finding sequences of characters that start and end at word boundaries. The non-greedy `.+?` ensures that it matches the smallest possible sequence between word boundaries, effectively capturing individual words.\n\n#### **2. `it => it.text.codepoints().join(sym.zws)`**\n\n- **Purpose**: Defines a **transformation function** (a lambda) that is applied to each regex match (`it`).\n\n- **Components**:\n  \n  - `it`: Represents the **current match object** found by the regex.\n  \n  - `it.text`: Extracts the **text content** of the current match (i.e., the word matched by the regex).\n  \n  - `codepoints()`:  \n    - **Function**: Converts the string into a **list of Unicode code points** (essentially, individual characters).\n    - **Example**:  \n      - `\"Hello\"` → `[\"H\", \"e\", \"l\", \"l\", \"o\"]`\n  \n  - `join(sym.zws)`:  \n    - **Function**: Joins the list of characters into a single string, inserting a **zero-width space** (`sym.zws`) between each character.\n    - **`sym.zws`**: Represents a **zero-width space** character in Typst, which is invisible but allows for potential line breaks or other text processing.\n    - **Example**:  \n      - `[\"H\", \"e\", \"l\", \"l\", \"o\"]` joined with `sym.zws` → `\"H​e​l​l​o\"` (with zero-width spaces between letters)\n\n- **Overall Transformation**:  \n  - Takes each word matched by the regex and inserts zero-width spaces between its characters. This can influence how the text is rendered, allowing for flexible line breaking or other text manipulations without altering the visible content.\n\n#### **3. `show`**\n\n- **Purpose**: Renders or **displays** the transformed text within the Typst document.\n  \n- **Functionality**:\n  - Applies the defined regex and transformation to the input text.\n  - Outputs the result, which includes the zero-width spaces inserted between characters of each word.\n\n### **Putting It All Together**\n\nHere's a step-by-step execution of the snippet:\n\n1. **Input Text**: Suppose you have the following text in your Typst document:\n   \n   ```\n   Hello World\n   ```\n   \n2. **Regex Application**:\n   \n   - The regex `\\b.+?\\b` scans the text and identifies two matches:\n     - `\"Hello\"`\n     - `\"World\"`\n   \n3. **Transformation Function**:\n   \n   - For each matched word, the lambda function `it => it.text.codepoints().join(sym.zws)` is applied:\n     \n     - **\"Hello\"**:\n       - `codepoints()`: `[\"H\", \"e\", \"l\", \"l\", \"o\"]`\n       - `join(sym.zws)`: `\"H​e​l​l​o\"` (with zero-width spaces)\n     \n     - **\"World\"**:\n       - `codepoints()`: `[\"W\", \"o\", \"r\", \"l\", \"d\"]`\n       - `join(sym.zws)`: `\"W​o​r​l​d\"` (with zero-width spaces)\n   \n4. **Rendering with `show`**:\n   \n   - The transformed text is displayed as:\n     \n     ```\n     H​e​l​l​o W​o​r​l​d\n     ```\n     \n     - **Note**: The zero-width spaces are invisible, so the text appears the same as the original. However, they enable more flexible text processing, such as allowing line breaks between characters if the layout requires it.\n\n### **Practical Use Cases**\n\n1. **Flexible Line Breaking**:\n   \n   - By inserting zero-width spaces between characters, you allow the text renderer to break lines between any two characters if necessary. This can be useful in narrow columns or responsive designs where words might need to wrap more flexibly.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 51,
      "score": 90.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 619
    },
    {
      "id": 4302,
      "post_number": 4,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-10-20T13:20:44.205Z",
      "updated_at": "2024-10-20T13:20:44.205Z",
      "cooked": "<p>Hey <a class=\"mention\" href=\"/u/raj2569\">@raj2569</a>! I’ve updated your post title to conform to our question guidelines: <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a></p>\n<p>Make sure your title is a question you’d ask to a friend about Typst. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hey @raj2569! I've updated your post title to conform to our question guidelines: https://forum.typst.app/t/how-to-post-in-the-questions-category/11\n\nMake sure your title is a question you'd ask to a friend about Typst. :wink:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 39,
      "score": 82.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    }
  ],
  "scraped_at": "2025-06-10T09:56:21.532735"
}