{
  "topic_metadata": {
    "id": 3126,
    "title": "Why does Typst allow minus signs in identifiers?",
    "slug": "why-does-typst-allow-minus-signs-in-identifiers",
    "posts_count": 10,
    "created_at": "2025-03-06T10:46:24.777Z",
    "last_posted_at": "2025-03-12T15:13:53.603Z",
    "views": 223,
    "like_count": 9,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "xkevio",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 6,
    "word_count": 956
  },
  "posts": [
    {
      "id": 9437,
      "post_number": 1,
      "username": "AprilGrimoire",
      "name": "AprilGrimoire",
      "created_at": "2025-03-06T10:46:24.966Z",
      "updated_at": "2025-03-06T10:46:24.966Z",
      "cooked": "<p>Hi. It seems Typst allows minus signs in variable names.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@local/commute:0.2.0\": node, arr, commutative-diagram\n</code></pre>\n<p>How is this differentiated from regular minus operations? Is it true that I need to add spaces around operators? I think that’s not true since I use <code>/</code> without spaces often. What’s the exact rules controlling this bizarre behavior?</p>",
      "raw": "Hi. It seems Typst allows minus signs in variable names.\n\n```typ\n#import \"@local/commute:0.2.0\": node, arr, commutative-diagram\n```\n\nHow is this differentiated from regular minus operations? Is it true that I need to add spaces around operators? I think that's not true since I use `/` without spaces often. What's the exact rules controlling this bizarre behavior?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 61,
      "score": 212.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1309
    },
    {
      "id": 9439,
      "post_number": 2,
      "username": "xkevio",
      "name": "Kevio",
      "created_at": "2025-03-06T12:14:10.887Z",
      "updated_at": "2025-03-06T12:14:10.887Z",
      "cooked": "<p>It’s not bizarre, it’s just the naming convention Typst embraces called “kebab-case” because it seemed a little nicer for a typesetting system than the usual “snake_case”.</p>\n<p>It is differentiated the same way as most operations are: To refer to a variable with a hyphen in its name, you need to be in code mode and spaces around the hyphen aren’t needed, the parser can take care of this.</p>",
      "raw": "It's not bizarre, it's just the naming convention Typst embraces called \"kebab-case\" because it seemed a little nicer for a typesetting system than the usual \"snake_case\". \n\nIt is differentiated the same way as most operations are: To refer to a variable with a hyphen in its name, you need to be in code mode and spaces around the hyphen aren't needed, the parser can take care of this.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 4,
      "reads": 60,
      "score": 77.0,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 21
    },
    {
      "id": 9492,
      "post_number": 3,
      "username": "AprilGrimoire",
      "name": "AprilGrimoire",
      "created_at": "2025-03-08T09:43:50.746Z",
      "updated_at": "2025-03-08T09:43:50.746Z",
      "cooked": "<p>Interesting to know that only <code>-</code> isn’t treated the same as other infix operators.</p>",
      "raw": "Interesting to know that only `-` isn't treated the same as other infix operators.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 41,
      "score": 13.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1309
    },
    {
      "id": 9545,
      "post_number": 4,
      "username": "rudy",
      "name": "Michael Newman Fortunato",
      "created_at": "2025-03-10T04:31:22.115Z",
      "updated_at": "2025-03-10T04:31:30.528Z",
      "cooked": "<p>Was rationale given for adopting this convention? All my typst functions<br>\nare still in snake case. It feels bizzare to have an identifier with - in it, so was wondering why Typst made this the convention.</p>",
      "raw": "Was rationale given for adopting this convention? All my typst functions \nare still in snake case. It feels bizzare to have an identifier with - in it, so was wondering why Typst made this the convention.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 34,
      "score": 26.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 1242
    },
    {
      "id": 9657,
      "post_number": 5,
      "username": "DNF",
      "name": "",
      "created_at": "2025-03-11T20:18:45.796Z",
      "updated_at": "2025-03-11T20:22:22.106Z",
      "cooked": "<p>It is less bizarre if you remember that ‘<code>-</code>’ is actually a <em>hyphen</em>, which is very commonly used in many languages to combine words.</p>\n<p>There is also precedent in languages like lisp and css for hyphenated identifiers. Personally, I like it, it looks better than underscore, and it’s imo probably the <em>most</em> natural way to create compound words, since that’s how you do it in human language.</p>",
      "raw": "It is less bizarre if you remember that '`-`' is actually a *hyphen*, which is very commonly used in many languages to combine words.\n\nThere is also precedent in languages like lisp and css for hyphenated identifiers. Personally, I like it, it looks better than underscore, and it's imo probably the *most* natural way to create compound words, since that's how you do it in human language.",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 11.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 711
    },
    {
      "id": 9658,
      "post_number": 6,
      "username": "DNF",
      "name": "",
      "created_at": "2025-03-11T20:20:37.406Z",
      "updated_at": "2025-03-11T20:20:37.406Z",
      "cooked": "<p>Come to think of it, my own name contains a hyphen, so <em>I</em> would say it’s  an <em>extremely</em> natural part of an identifier!</p>",
      "raw": "Come to think of it, my own name contains a hyphen, so *I* would say it's  an *extremely* natural part of an identifier!",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 6.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 711
    },
    {
      "id": 9698,
      "post_number": 7,
      "username": "rudy",
      "name": "Michael Newman Fortunato",
      "created_at": "2025-03-12T13:03:04.676Z",
      "updated_at": "2025-03-12T13:03:14.361Z",
      "cooked": "<p>If we set aside the long-established convention of programming languages prohibiting hyphens in identifiers, I’d concede that hyphens might be the better choice over underscores for readability and alignment with natural language. However, coding languages have historically rejected this trend, and I think Typst made a misstep by breaking from it—even if, in theory, it’s a defensible move. Hyphenated identifiers in Typst code, like my-variable, don’t <em>feel</em> like traditional ‘code’ to me; they add a subtle layer of friction for programmers accustomed to underscores, making the transition less intuitive. It’s not a dealbreaker—hardly the end of the world—but I’m sticking with underscores in silent protest, hoping the Typst community might eventually lean back toward convention. I’ll keep it up until a colleague I’m collaborating with on a Typst document calls me out and forces the issue.</p>",
      "raw": "If we set aside the long-established convention of programming languages prohibiting hyphens in identifiers, I’d concede that hyphens might be the better choice over underscores for readability and alignment with natural language. However, coding languages have historically rejected this trend, and I think Typst made a misstep by breaking from it—even if, in theory, it’s a defensible move. Hyphenated identifiers in Typst code, like my-variable, don’t *feel* like traditional 'code' to me; they add a subtle layer of friction for programmers accustomed to underscores, making the transition less intuitive. It’s not a dealbreaker—hardly the end of the world—but I’m sticking with underscores in silent protest, hoping the Typst community might eventually lean back toward convention. I’ll keep it up until a colleague I’m collaborating with on a Typst document calls me out and forces the issue.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 27,
      "score": 30.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 1242
    },
    {
      "id": 9699,
      "post_number": 8,
      "username": "rudy",
      "name": "Michael Newman Fortunato",
      "created_at": "2025-03-12T13:06:37.293Z",
      "updated_at": "2025-03-12T13:07:06.166Z",
      "cooked": "<p>I’ll also add that as a marketing ploy, that is it easier for a newcomer to Typst with coding background to have that “a-ha!” moment of the power of combining markup with a programming language, if that programming language looks like other languages they have seen.</p>",
      "raw": "I'll also add that as a marketing ploy, that is it easier for a newcomer to Typst with coding background to have that \"a-ha!\" moment of the power of combining markup with a programming language, if that programming language looks like other languages they have seen.",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 26,
      "score": 20.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 1242
    },
    {
      "id": 9700,
      "post_number": 9,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-03-12T13:52:58.207Z",
      "updated_at": "2025-03-12T14:08:20.356Z",
      "cooked": "<p>This seems to me to be clearly a personal preference.  When I think about identifiers I think about:</p>\n<ul>\n<li>Naming things whatever I want without following any kind of convention</li>\n<li>Camelcase</li>\n<li>Snake case</li>\n<li>Kebab case</li>\n<li>Are emojis supported?  What about UTF-8?</li>\n</ul>\n<p>I don’t see why using underscores is <em>more correct</em> than dashes.  Yes, there is a historical preference for them, but that was born from a time when it wasn’t even clear that ASCII would be the character encoding of choice going forward.  We aren’t restricted in the same way anymore.</p>\n<p>Also, as I understand it, Typst isn’t aiming to reduce the learning curve for programmers.  Some cherry-picked quotes from <a href=\"http://typst.app/home:\">typst.app/home:</a></p>\n<blockquote>\n<p>A more productive workflow for science.</p>\n</blockquote>\n<blockquote>\n<p>For Rocket Scientists.<br>\nAnd the rest of us, too.</p>\n</blockquote>\n<p>There is also this:</p>\n<blockquote>\n<p>uses familiar programming constructs instead of hard-to-understand macros.</p>\n</blockquote>\n<p>But that is directly contrasting Latex which I don’t think is written for programmers either.</p>\n<p>I’d also like to point out that the character we are talking about has many uses.  In the title of this post it is called a minus sign.  I have also heard people call it a hyphen, a stroke, or a dash.  The single character fulfills multiple roles.  Yes, it’s a bit annoying that you can end up with something like <code>#let x = num-a - 1</code>.  The same character has two completely different uses.  But that’s not the fault of Typst but of how (English) language uses that character (plus, how many characters do you want on your keyboard?).</p>\n<p>Anyways, that’s my opinion on this non-critical aspect of a typesetting system that I enjoy using.</p>\n<p><strong>Edit</strong>: For completeness, the standard used by Typst is <a href=\"http://www.unicode.org/reports/tr31/\" rel=\"noopener nofollow ugc\">uax31</a> (<a href=\"https://forum.typst.app/t/what-are-the-rules-for-identifiers-in-typst/665/2\">source forum post by kevio</a>).</p>",
      "raw": "This seems to me to be clearly a personal preference.  When I think about identifiers I think about:\n- Naming things whatever I want without following any kind of convention\n- Camelcase\n- Snake case\n- Kebab case\n- Are emojis supported?  What about UTF-8?\n\nI don't see why using underscores is _more correct_ than dashes.  Yes, there is a historical preference for them, but that was born from a time when it wasn't even clear that ASCII would be the character encoding of choice going forward.  We aren't restricted in the same way anymore.\n\nAlso, as I understand it, Typst isn't aiming to reduce the learning curve for programmers.  Some cherry-picked quotes from typst.app/home:\n>A more productive workflow for science.\n\n> For Rocket Scientists.\n> And the rest of us, too.\n\nThere is also this:\n> uses familiar programming constructs instead of hard-to-understand macros.\n\nBut that is directly contrasting Latex which I don't think is written for programmers either.\n\nI'd also like to point out that the character we are talking about has many uses.  In the title of this post it is called a minus sign.  I have also heard people call it a hyphen, a stroke, or a dash.  The single character fulfills multiple roles.  Yes, it's a bit annoying that you can end up with something like `#let x = num-a - 1`.  The same character has two completely different uses.  But that's not the fault of Typst but of how (English) language uses that character (plus, how many characters do you want on your keyboard?).\n\nAnyways, that's my opinion on this non-critical aspect of a typesetting system that I enjoy using.\n\n**Edit**: For completeness, the standard used by Typst is [uax31](http://www.unicode.org/reports/tr31/) ([source forum post by kevio](https://forum.typst.app/t/what-are-the-rules-for-identifiers-in-typst/665/2?u=gezepi)).",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 23,
      "score": 59.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 9704,
      "post_number": 10,
      "username": "sijo",
      "name": "",
      "created_at": "2025-03-12T15:13:53.603Z",
      "updated_at": "2025-03-12T15:13:53.603Z",
      "cooked": "<p>Kebab case may be a bit niche but still, apart form the already mentioned CSS and Lisp it’s used at least in COBOL (hum), Forth and Raku (Perl 6), and also modern Lisp variants like Clojure. It has two great advantages:</p>\n<ul>\n<li>Easier to read than all the other options</li>\n<li>Easier to type than snake case (in most keyboard layouts you need shift for <code>_</code> but not for <code>-</code>)</li>\n</ul>\n<p>and one great downside:</p>\n<ul>\n<li>It’s ambiguous with subtraction in languages that have infix operators</li>\n</ul>\n<p>I personnally love the Typst solution, which is to require spaces around the minus operator in code. Because this makes code even <em>more</em> readable. I think the biggest issue with kebab case in Typst is the inconsistency in math mode where <code>#a-b</code> and <code>func(a-b: xxx)</code> are parsed as one word but <code>a-b</code> alone is parsed as <code>a - b</code>. But it’s not a big deal either. I think the two benefits mentioned above make it well worth it.</p>",
      "raw": "Kebab case may be a bit niche but still, apart form the already mentioned CSS and Lisp it's used at least in COBOL (hum), Forth and Raku (Perl 6), and also modern Lisp variants like Clojure. It has two great advantages:\n\n* Easier to read than all the other options\n* Easier to type than snake case (in most keyboard layouts you need shift for `_` but not for `-`)\n\nand one great downside:\n\n* It's ambiguous with subtraction in languages that have infix operators\n\nI personnally love the Typst solution, which is to require spaces around the minus operator in code. Because this makes code even *more* readable. I think the biggest issue with kebab case in Typst is the inconsistency in math mode where `#a-b` and `func(a-b: xxx)` are parsed as one word but `a-b` alone is parsed as `a - b`. But it's not a big deal either. I think the two benefits mentioned above make it well worth it.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 20,
      "score": 4.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    }
  ],
  "scraped_at": "2025-06-10T09:50:39.342070"
}