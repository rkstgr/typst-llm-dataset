{
  "topic_metadata": {
    "id": 2129,
    "title": "In math mode, does the space character between tokens have a meaning?",
    "slug": "in-math-mode-does-the-space-character-between-tokens-have-a-meaning",
    "posts_count": 5,
    "created_at": "2024-12-17T21:55:56.664Z",
    "last_posted_at": "2024-12-18T20:06:28.682Z",
    "views": 258,
    "like_count": 7,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "ParaN3xus",
    "tags": [
      "math"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 533
  },
  "posts": [
    {
      "id": 6728,
      "post_number": 1,
      "username": "Gilles",
      "name": "Gilles",
      "created_at": "2024-12-17T21:55:56.829Z",
      "updated_at": "2024-12-17T21:55:56.829Z",
      "cooked": "<p>Like many around here, I am a long-time LaTeX user delighted to see a nice and consistent alternative to it!</p>\n<p>I was under the impression that, in math mode, the space character has no meaning, except of course to separate tokens. I nevertheless encountered a case where it seems to impact spacing. To define Galois Fields, I’d write</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">define $\"GF\" ( p^n )$ as the field with $p^n$ elements\n</code></pre>\n<p>But Typst renders the expression with a fairly large extra space between the F and the opening bracket that I would like to avoid. The solution is to write <code>$\"GF\"( p^n )$</code> instead, i.e., no space character between the second quote and the opening bracket, and the extra space disappears in the rendering.</p>\n<p>On the other hand, if I write</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">$cos(theta)$ vs $cos ( theta )$\n</code></pre>\n<p>there does not seem to be any difference in the rendering.</p>\n<p>So, are there some rules related to the space character in math mode that I am missing here? And, alternatively, is there a better way to write the GF in the expression above?</p>\n<p>Many thanks already!</p>",
      "raw": "Like many around here, I am a long-time LaTeX user delighted to see a nice and consistent alternative to it!\n\nI was under the impression that, in math mode, the space character has no meaning, except of course to separate tokens. I nevertheless encountered a case where it seems to impact spacing. To define Galois Fields, I'd write\n```typ\ndefine $\"GF\" ( p^n )$ as the field with $p^n$ elements\n```\nBut Typst renders the expression with a fairly large extra space between the F and the opening bracket that I would like to avoid. The solution is to write `$\"GF\"( p^n )$` instead, i.e., no space character between the second quote and the opening bracket, and the extra space disappears in the rendering.\n\nOn the other hand, if I write\n```typ\n$cos(theta)$ vs $cos ( theta )$\n```\nthere does not seem to be any difference in the rendering.\n\nSo, are there some rules related to the space character in math mode that I am missing here? And, alternatively, is there a better way to write the GF in the expression above?\n\nMany thanks already!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 36,
      "score": 952.2,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 948
    },
    {
      "id": 6729,
      "post_number": 2,
      "username": "ParaN3xus",
      "name": "ParaN3xus",
      "created_at": "2024-12-18T05:28:12.044Z",
      "updated_at": "2024-12-18T05:44:20.706Z",
      "cooked": "<p>This is related to the symbol’s <a href=\"https://typst.app/docs/reference/math/class/\">math class</a>. You can try and observe it’s behavior with code below.</p>\n<details>\n<summary>\nCode and preview</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let classes = (\"normal\", \"punctuation\", \"opening\", \"closing\", \"fence\", \"large\", \"relation\", \"unary\", \"binary\", \"vary\")\n\n#table(\n  columns: 2,\n  align: center + horizon,\n  \"class\", \"behavior\",\n  ..classes\n    .map(c =&gt; {\n      let symbol = math.class(c, \"test\")\n      (\n        c,\n        $\n          \"with space:\" &amp;a symbol b \\\n          \"without space:\" &amp;a#symbol;b\n        $,\n      )\n    })\n    .flatten()\n)\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/8/8abd6dd37c1a6fba9d25dc7f6d5cfe85e2d09f66.jpeg\" data-download-href=\"https://forum.typst.app/uploads/default/8abd6dd37c1a6fba9d25dc7f6d5cfe85e2d09f66\" title=\"test\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/8/8abd6dd37c1a6fba9d25dc7f6d5cfe85e2d09f66_2_309x500.jpeg\" alt=\"test\" data-base62-sha1=\"jNlJVfDPjNiDgFQskHqbpndk59k\" width=\"309\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/8/8abd6dd37c1a6fba9d25dc7f6d5cfe85e2d09f66_2_309x500.jpeg, https://forum.typst.app/uploads/default/optimized/2X/8/8abd6dd37c1a6fba9d25dc7f6d5cfe85e2d09f66_2_463x750.jpeg 1.5x, https://forum.typst.app/uploads/default/optimized/2X/8/8abd6dd37c1a6fba9d25dc7f6d5cfe85e2d09f66_2_618x1000.jpeg 2x\" data-dominant-color=\"F3F3F3\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">test</span><span class=\"informations\">651×1052 74.7 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>\n<p>The math class of <code>\"GF\"</code> is <code>normal</code> so spaces around it counts.</p>",
      "raw": "This is related to the symbol's [math class](https://typst.app/docs/reference/math/class/). You can try and observe it's behavior with code below.\n\n[details=\"Code and preview\"]\n```typ\n#let classes = (\"normal\", \"punctuation\", \"opening\", \"closing\", \"fence\", \"large\", \"relation\", \"unary\", \"binary\", \"vary\")\n\n#table(\n  columns: 2,\n  align: center + horizon,\n  \"class\", \"behavior\",\n  ..classes\n    .map(c => {\n      let symbol = math.class(c, \"test\")\n      (\n        c,\n        $\n          \"with space:\" &a symbol b \\\n          \"without space:\" &a#symbol;b\n        $,\n      )\n    })\n    .flatten()\n)\n```\n![test|309x500](upload://jNlJVfDPjNiDgFQskHqbpndk59k.jpeg)\n[/details]\n\nThe math class of `\"GF\"` is `normal` so spaces around it counts.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 34,
      "score": 66.8,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 14
    },
    {
      "id": 6730,
      "post_number": 3,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-12-18T07:06:04.579Z",
      "updated_at": "2024-12-19T10:36:44.605Z",
      "cooked": "<p>Hello! My advice here is to use <s>change the math class</s> <a href=\"https://typst.app/docs/reference/math/op/\">text operator</a>.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let GF = math.op(\"GF\")\ndefine $GF ( p^n )$ as the field with $p^n$ elements\ndefine $GF( p^n )$ as the field with $p^n$ elements\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/2/2892cbdb7ab5a9aca1d11751719e2c49c1bcf409.png\" alt=\"image\" data-base62-sha1=\"5MVBIZoxZZEbqHMVEHZtLH0kNoR\" width=\"333\" height=\"66\"></p>",
      "raw": "Hello! My advice here is to use ~~change the math class~~ [text operator](https://typst.app/docs/reference/math/op/).\n\n```typst\n#let GF = math.op(\"GF\")\ndefine $GF ( p^n )$ as the field with $p^n$ elements\ndefine $GF( p^n )$ as the field with $p^n$ elements\n```\n![image|333x66](upload://5MVBIZoxZZEbqHMVEHZtLH0kNoR.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 33,
      "score": 71.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 6733,
      "post_number": 4,
      "username": "Gilles",
      "name": "Gilles",
      "created_at": "2024-12-18T09:04:59.156Z",
      "updated_at": "2024-12-18T09:04:59.156Z",
      "cooked": "<p>Very clear. Thank you both!</p>",
      "raw": "Very clear. Thank you both!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 5.8,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 948
    },
    {
      "id": 6743,
      "post_number": 5,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-12-18T20:06:28.682Z",
      "updated_at": "2024-12-18T20:12:30.721Z",
      "cooked": "<p>This is not entirely correct. While it’s true that <code>\"GF\"</code> by default has the <code>\"normal\"</code> class, it’s not what is responsible for the spacing. Any single-letter variable (like <code>p</code> or <code>theta</code>) also has the <code>\"normal\"</code> class. It is only because <code>\"GF\"</code> is in a string (with quotes), that it’s sensitive to spaces around it. The same is true for other elements which create a new frame, e.g. <code>box</code> or <code>block</code>.</p>\n<p>For more detail, see the <a href=\"https://github.com/typst/typst/blob/db06dbf9763d6c610d1f7a267597ecdad309048a/crates/typst-layout/src/math/fragment.rs#L134-L147\" rel=\"noopener nofollow ugc\"><code>is_spaced</code></a> function in the compiler’s source code.</p>\n<p>A space is then only kept if at least one of the elements around it is <code>spaced</code>. One (slightly hacky) workaround to remove the “spacedness” of an element, while keeping it of class <code>\"normal\"</code>, is by doing something like</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let symbol = math.class(\"normal\", \"GF\" + h(0pt))\n$ a symbol b $\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/3/397247c9c7c0248fa6838b5f3e771e459c2ef07b.png\" alt=\"image\" data-base62-sha1=\"8cc3KwVxeDus6ieeHemwdeHd12P\" width=\"66\" height=\"28\"></p>\n<p>See also <a href=\"https://github.com/typst/typst/issues/3379#issuecomment-2013886558\" rel=\"noopener nofollow ugc\">this comment</a> on GitHub.</p>\n<p><em>(For this case, you should follow what <a class=\"mention\" href=\"/u/quachpas\">@quachpas</a> suggested though, as that is exactly what the <code>op</code> function is for.)</em></p>",
      "raw": "This is not entirely correct. While it's true that `\"GF\"` by default has the `\"normal\"` class, it's not what is responsible for the spacing. Any single-letter variable (like `p` or `theta`) also has the `\"normal\"` class. It is only because `\"GF\"` is in a string (with quotes), that it's sensitive to spaces around it. The same is true for other elements which create a new frame, e.g. `box` or `block`.\n\nFor more detail, see the [`is_spaced`](https://github.com/typst/typst/blob/db06dbf9763d6c610d1f7a267597ecdad309048a/crates/typst-layout/src/math/fragment.rs#L134-L147) function in the compiler's source code.\n\nA space is then only kept if at least one of the elements around it is `spaced`. One (slightly hacky) workaround to remove the \"spacedness\" of an element, while keeping it of class `\"normal\"`, is by doing something like\n```typ\n#let symbol = math.class(\"normal\", \"GF\" + h(0pt))\n$ a symbol b $\n```\n![image|88x38, 75%](upload://8cc3KwVxeDus6ieeHemwdeHd12P.png)\n\nSee also [this comment](https://github.com/typst/typst/issues/3379#issuecomment-2013886558) on GitHub.\n\n_(For this case, you should follow what @quachpas suggested though, as that is exactly what the `op` function is for.)_",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 24,
      "score": 49.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    }
  ],
  "scraped_at": "2025-06-10T09:53:33.090137"
}