{
  "topic_metadata": {
    "id": 3466,
    "title": "How can I have a temporary local counter for equations?",
    "slug": "how-can-i-have-a-temporary-local-counter-for-equations",
    "posts_count": 5,
    "created_at": "2025-03-31T13:56:17.463Z",
    "last_posted_at": "2025-03-31T21:48:54.058Z",
    "views": 94,
    "like_count": 7,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "quachpas",
    "tags": [
      "math",
      "counter"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1113
  },
  "posts": [
    {
      "id": 10460,
      "post_number": 1,
      "username": "heptocat",
      "name": "",
      "created_at": "2025-03-31T13:56:17.600Z",
      "updated_at": "2025-04-18T13:08:51.089Z",
      "cooked": "<p>Hi<br>\nIn my document, I would like to at some points, have equations with a custom, local numbering</p>\n<p>equation (1)</p>\n<p>(i) first local equation<br>\n(ii) second local equation<br>\n(iii) third local equation</p>\n<p>equation (2)</p>\n<p>that does not interfere with the global numbering of equations in the document. I know how to customize the look of the equation number and how to manually set the counter, but not how to switch back to the original number. Ideally I would be able to assign a fresh counter to equations, or have a block that ignores the document’s equation counter, but it doesn’t seem possible, so I’m contented with this hacky approach that <em>almost</em> works (see screenshot):</p>\n<pre><code class=\"lang-auto\">#set enum(numbering: \"(i)\", indent: 1em) // remember the indent you set here, important!\n#set text(font:\"New Computer Modern\")\n#set math.equation(numbering: \"(1)\")\n\n$ a = 1 $&lt;label&gt;\n\n#[\n  // #let c = current math equation counter somehow?\n  #counter(math.equation).update(0)\n  #set math.equation(numbering: \"(i)\", number-align:left+horizon)\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n  // counter(math.equation).update(c)\n]\n\n$ a = 2 $\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/5/5fedffbea12efc38b870ff49e38648b77f03f508.png\" alt=\"image\" data-base62-sha1=\"dGDgKF9vhhbji3q4yxlhFt71UeY\" width=\"518\" height=\"148\"></p>\n<p>it works as I want it, except that the equation a =2 should be numbered 2. I don’t know how to access the int of the counter (.get().at(0) returns content), or how to create a fresh counter for my block. And ideas on how to achieve this? Cheers!</p>",
      "raw": "Hi\nIn my document, I would like to at some points, have equations with a custom, local numbering\n\nequation (1)\n\n(i) first local equation\n(ii) second local equation\n(iii) third local equation\n\nequation (2)\n\nthat does not interfere with the global numbering of equations in the document. I know how to customize the look of the equation number and how to manually set the counter, but not how to switch back to the original number. Ideally I would be able to assign a fresh counter to equations, or have a block that ignores the document's equation counter, but it doesn't seem possible, so I'm contented with this hacky approach that *almost* works (see screenshot):\n\n```\n#set enum(numbering: \"(i)\", indent: 1em) // remember the indent you set here, important!\n#set text(font:\"New Computer Modern\")\n#set math.equation(numbering: \"(1)\")\n\n$ a = 1 $<label>\n\n#[\n  // #let c = current math equation counter somehow?\n  #counter(math.equation).update(0)\n  #set math.equation(numbering: \"(i)\", number-align:left+horizon)\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n  // counter(math.equation).update(c)\n]\n\n$ a = 2 $\n```\n![image|518x148](upload://dGDgKF9vhhbji3q4yxlhFt71UeY.png)\n\nit works as I want it, except that the equation a =2 should be numbered 2. I don't know how to access the int of the counter (.get().at(0) returns content), or how to create a fresh counter for my block. And ideas on how to achieve this? Cheers!",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 165.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 659
    },
    {
      "id": 10461,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-03-31T14:05:03.748Z",
      "updated_at": "2025-03-31T14:06:21.862Z",
      "cooked": "<p>If you wrap everything in a context, you can write</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#context [\n  #let c = counter(math.equation).get()\n  #counter(math.equation).update(0)\n  #set math.equation(numbering: \"(i)\", number-align:left+horizon)\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n  #counter(math.equation).update(c)\n]\n</code></pre>\n<p>With a small function definition, you can write</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let eq(body) = context {\n  let c = counter(math.equation).get()\n  counter(math.equation).update(0)\n  body\n  counter(math.equation).update(c)\n}\n\n$ a = 1 $&lt;label&gt;\n\n#eq[\n  #set math.equation(numbering: \"(i)\", number-align:left+horizon)\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n</code></pre>\n<aside class=\"quote no-group\" data-username=\"heptocat\" data-post=\"1\" data-topic=\"3466\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/h/2DAB7D/48.png\" class=\"avatar\"> heptocat:</div>\n<blockquote>\n<p>I don’t know how to access the int of the counter (.get().at(0) returns content)</p>\n</blockquote>\n</aside>\n<p>See <a href=\"https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164\" class=\"inline-onebox\">Why is the value I receive from context always content?</a></p>",
      "raw": "If you wrap everything in a context, you can write\n\n```typ\n#context [\n  #let c = counter(math.equation).get()\n  #counter(math.equation).update(0)\n  #set math.equation(numbering: \"(i)\", number-align:left+horizon)\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n  #counter(math.equation).update(c)\n]\n```\n\nWith a small function definition, you can write\n\n```typ\n#let eq(body) = context {\n  let c = counter(math.equation).get()\n  counter(math.equation).update(0)\n  body\n  counter(math.equation).update(c)\n}\n\n$ a = 1 $<label>\n\n#eq[\n  #set math.equation(numbering: \"(i)\", number-align:left+horizon)\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n```\n\n[quote=\"heptocat, post:1, topic:3466\"]\nI don’t know how to access the int of the counter (.get().at(0) returns content)\n[/quote]\nSee https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 4,
      "reads": 28,
      "score": 70.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 10472,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-03-31T19:46:26.390Z",
      "updated_at": "2025-03-31T21:49:53.494Z",
      "cooked": "<p>You probably will use this multiple times, in which case this will simplify it even further:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let eq(body, numbering: \"(i)\", number-align: left + horizon) = context {\n  let eq-counter = counter(math.equation)\n  let c = eq-counter.get()\n  eq-counter.update(0)\n  set math.equation(numbering: numbering, number-align: number-align)\n  body\n  eq-counter.update(c)\n}\n\n$ a = 1 $ &lt;label&gt;\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n</code></pre>",
      "raw": "You probably will use this multiple times, in which case this will simplify it even further:\n\n```typ\n#let eq(body, numbering: \"(i)\", number-align: left + horizon) = context {\n  let eq-counter = counter(math.equation)\n  let c = eq-counter.get()\n  eq-counter.update(0)\n  set math.equation(numbering: numbering, number-align: number-align)\n  body\n  eq-counter.update(c)\n}\n\n$ a = 1 $ <label>\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 4.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 10475,
      "post_number": 4,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-03-31T21:25:42.640Z",
      "updated_at": "2025-03-31T21:28:17.198Z",
      "cooked": "<p>Note that the given solutions only work if the <code>eq</code> function isn’t used more than 5 times in the document, as otherwise the layout doesn’t converge. You can read more about why this is the case in <a href=\"https://forum.typst.app/t/why-is-state-final-not-final/1483/2\" class=\"inline-onebox\">Why is State Final not \"final\"? - #2 by SillyFreak</a>.</p>\n<p>The solution I came with is a bit more complex, but works also when used more than 5 times:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.equation(numbering: \"(1)\")\n\n#let eq(body, numbering: \"(i)\", number-align: start + horizon) = {\n  // Counter for this \"eq\" function, as each one can contain\n  // a different amount of sub-equations.\n  let eq-counter = counter(\"eq\")\n  eq-counter.step()\n\n  context {\n    // Unique counter for sub-equations in this \"eq\" block.\n    let sub-counter = counter(\"eq/\" + str(eq-counter.get().first()))\n\n    // Use the sub-counter to number the sub-equations.\n    // We need to add 1 since the counter is only stepped the first time\n    // after the first equation (and number) has already been constructed.\n    set math.equation(\n      numbering: (..) =&gt; std.numbering(numbering, sub-counter.get().first() + 1),\n      number-align: number-align\n    )\n      \n    // Step the sub-equation counter for each numbered sub-equation.\n    show math.equation.where(block: true): it =&gt; {\n      if it.numbering != none {\n        sub-counter.step()\n      }\n      it\n    }\n\n    body\n\n    // Step back main equation counter so that the sub-equations\n    // aren't counted towards the main equation number.\n    let sub-eqs = sub-counter.final().first()\n    counter(math.equation).update(n =&gt; n - sub-eqs)\n  }\n}\n</code></pre>",
      "raw": "Note that the given solutions only work if the `eq` function isn't used more than 5 times in the document, as otherwise the layout doesn't converge. You can read more about why this is the case in https://forum.typst.app/t/why-is-state-final-not-final/1483/2?u=eric.\n\nThe solution I came with is a bit more complex, but works also when used more than 5 times:\n```typ\n#set math.equation(numbering: \"(1)\")\n\n#let eq(body, numbering: \"(i)\", number-align: start + horizon) = {\n  // Counter for this \"eq\" function, as each one can contain\n  // a different amount of sub-equations.\n  let eq-counter = counter(\"eq\")\n  eq-counter.step()\n\n  context {\n    // Unique counter for sub-equations in this \"eq\" block.\n    let sub-counter = counter(\"eq/\" + str(eq-counter.get().first()))\n\n    // Use the sub-counter to number the sub-equations.\n    // We need to add 1 since the counter is only stepped the first time\n    // after the first equation (and number) has already been constructed.\n    set math.equation(\n      numbering: (..) => std.numbering(numbering, sub-counter.get().first() + 1),\n      number-align: number-align\n    )\n      \n    // Step the sub-equation counter for each numbered sub-equation.\n    show math.equation.where(block: true): it => {\n      if it.numbering != none {\n        sub-counter.step()\n      }\n      it\n    }\n\n    body\n\n    // Step back main equation counter so that the sub-equations\n    // aren't counted towards the main equation number.\n    let sub-eqs = sub-counter.final().first()\n    counter(math.equation).update(n => n - sub-eqs)\n  }\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 20,
      "score": 69.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 10476,
      "post_number": 5,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-03-31T21:48:54.058Z",
      "updated_at": "2025-03-31T22:08:06.131Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Eric\" data-post=\"4\" data-topic=\"3466\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/eric/48/87_2.png\" class=\"avatar\"> Eric:</div>\n<blockquote>\n<p>Note that the given solutions only work if the <code>eq</code> function isn’t used more than 5 times in the document, as otherwise the layout doesn’t converge.</p>\n</blockquote>\n</aside>\n<p>This is incorrect.</p>\n<details><summary>eq function used more than 5 times in the document</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let eq(body, numbering: \"(i)\", number-align: left + horizon) = context {\n  let eq-counter = counter(math.equation)\n  let c = eq-counter.get()\n  eq-counter.update(0)\n  set math.equation(numbering: numbering, number-align: number-align)\n  body\n  eq-counter.update(c)\n}\n\n$ a = 1 $ &lt;label&gt;\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n</code></pre>\n</details>\n<p>That is, unless global <code>set math.equation(numbering: \"(1)\")</code> is added, which is actually present in the OP. So, good catch.</p>\n<p>You can combine <code>.step()</code> and <code>.get()</code> like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let eq(body, numbering: \"(i)\", number-align: left + horizon) = {\n  let eq-counter = counter(\"eq\")\n  eq-counter.step()\n  context {\n    let sub-counter = counter(\"eq/\" + str(eq-counter.get().first()))\n    let sub-eq-total = sub-counter.final().first()\n    let value = context std.numbering(numbering, ..sub-counter.get())\n    set math.equation(\n      numbering: (..) =&gt; sub-counter.step() + value,\n      number-align: number-align,\n    )\n    body\n    counter(math.equation).update(n =&gt; n - sub-eq-total)\n  }\n}\n</code></pre>\n<details><summary>Full example</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let eq(body, numbering: \"(i)\", number-align: left + horizon) = {\n  let eq-counter = counter(\"eq\")\n  eq-counter.step()\n  context {\n    let sub-counter = counter(\"eq/\" + str(eq-counter.get().first()))\n    let sub-eq-total = sub-counter.final().first()\n    let value = context std.numbering(numbering, ..sub-counter.get())\n    set math.equation(\n      numbering: (..) =&gt; sub-counter.step() + value,\n      number-align: number-align,\n    )\n    body\n    counter(math.equation).update(n =&gt; n - sub-eq-total)\n  }\n}\n\n#set math.equation(numbering: \"(1)\")\n\n$ a = 1 $ &lt;label&gt;\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n</code></pre>\n</details>",
      "raw": "[quote=\"Eric, post:4, topic:3466\"]\nNote that the given solutions only work if the `eq` function isn’t used more than 5 times in the document, as otherwise the layout doesn’t converge.\n[/quote]\n\nThis is incorrect.\n\n<details><summary>eq function used more than 5 times in the document</summary>\n\n```typ\n#let eq(body, numbering: \"(i)\", number-align: left + horizon) = context {\n  let eq-counter = counter(math.equation)\n  let c = eq-counter.get()\n  eq-counter.update(0)\n  set math.equation(numbering: numbering, number-align: number-align)\n  body\n  eq-counter.update(c)\n}\n\n$ a = 1 $ <label>\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n```\n\n</details>\n\nThat is, unless global `set math.equation(numbering: \"(1)\")` is added, which is actually present in the OP. So, good catch.\n\nYou can combine `.step()` and `.get()` like this:\n\n```typ\n#let eq(body, numbering: \"(i)\", number-align: left + horizon) = {\n  let eq-counter = counter(\"eq\")\n  eq-counter.step()\n  context {\n    let sub-counter = counter(\"eq/\" + str(eq-counter.get().first()))\n    let sub-eq-total = sub-counter.final().first()\n    let value = context std.numbering(numbering, ..sub-counter.get())\n    set math.equation(\n      numbering: (..) => sub-counter.step() + value,\n      number-align: number-align,\n    )\n    body\n    counter(math.equation).update(n => n - sub-eq-total)\n  }\n}\n```\n\n<details><summary>Full example</summary>\n\n```typ\n#let eq(body, numbering: \"(i)\", number-align: left + horizon) = {\n  let eq-counter = counter(\"eq\")\n  eq-counter.step()\n  context {\n    let sub-counter = counter(\"eq/\" + str(eq-counter.get().first()))\n    let sub-eq-total = sub-counter.final().first()\n    let value = context std.numbering(numbering, ..sub-counter.get())\n    set math.equation(\n      numbering: (..) => sub-counter.step() + value,\n      number-align: number-align,\n    )\n    body\n    counter(math.equation).update(n => n - sub-eq-total)\n  }\n}\n\n#set math.equation(numbering: \"(1)\")\n\n$ a = 1 $ <label>\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n\n#eq[\n  $ b = 1 $\n  $ b = 2 $\n  $ b = 3 $\n]\n\n$ a = 2 $\n```\n\n</details>",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 19,
      "score": 18.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:49:51.237570"
}