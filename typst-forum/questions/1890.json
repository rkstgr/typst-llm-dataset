{
  "topic_metadata": {
    "id": 1890,
    "title": "How to avoid nested enum items breaking at the end of the page?",
    "slug": "how-to-avoid-nested-enum-items-breaking-at-the-end-of-the-page",
    "posts_count": 4,
    "created_at": "2024-11-25T21:14:59.164Z",
    "last_posted_at": "2025-06-04T21:59:06.272Z",
    "views": 141,
    "like_count": 2,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "scripting",
      "layout"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 545
  },
  "posts": [
    {
      "id": 6096,
      "post_number": 1,
      "username": "Anemona-Anonima",
      "name": "Esteban Muñoz",
      "created_at": "2024-11-25T21:14:59.561Z",
      "updated_at": "2024-11-25T21:14:59.561Z",
      "cooked": "<p>Hi all. I’m trying to create a simple multiple choice test. For the sake of readability, I want to have a question and all its choices in the same page, meaning that if a choice doesn’t fit in the current page the whole question is moved to the next.</p>\n<p>To achieve it I’m using nested enums like this</p>\n<details>\n<summary>\nCode</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/numbly:0.1.0\": numbly\n\n\n#set page(height: 7cm)\n#set enum(numbering: numbly(\"{1}.\", \"{2:A})\"), full: true)\n#show enum.item: set block(breakable: false)\n\n+ Some question\n  \n  + First answer\n  \n  + Second answer\n  \n  + Third answer\n  \n  + Fourth answer\n\n\n+ Another question\n  \n  + First answer\n  \n  + Second answer\n  \n  + Third answer\n  \n  + Fourth answer\n</code></pre>\n</details>\n<details>\n<summary>\nResult</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/4/49ee9e28bc350558cc7e91373b6305c6fedea344.png\" alt=\"nested-enums-1\" data-base62-sha1=\"ay25GgAXQ2UgHMYRgnPQzsWxTLK\" width=\"595\" height=\"198\"><br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/9/98aff44effe067928e1432eb11c52669b9ada33f.png\" alt=\"nested-enums-2\" data-base62-sha1=\"lMJysXV9YjT9ct4rgxqmQClfLqv\" width=\"595\" height=\"198\"></p>\n</details>\n<p>As you can see, the question stays in the same page, but the choices go to the next. I tried to wrap every <code>enum.item</code> in a block, but it breaks the enum counter and instead of fixing that I just prefer to call a <code>pagebreak</code> manually.</p>\n<p>Any help would be appreciated!</p>",
      "raw": "Hi all. I'm trying to create a simple multiple choice test. For the sake of readability, I want to have a question and all its choices in the same page, meaning that if a choice doesn't fit in the current page the whole question is moved to the next.\n\nTo achieve it I'm using nested enums like this\n\n\n[details=\"Code\"]\n```typ\n#import \"@preview/numbly:0.1.0\": numbly\n\n\n#set page(height: 7cm)\n#set enum(numbering: numbly(\"{1}.\", \"{2:A})\"), full: true)\n#show enum.item: set block(breakable: false)\n\n+ Some question\n  \n  + First answer\n  \n  + Second answer\n  \n  + Third answer\n  \n  + Fourth answer\n\n\n+ Another question\n  \n  + First answer\n  \n  + Second answer\n  \n  + Third answer\n  \n  + Fourth answer\n```\n[/details]\n\n[details=\"Result\"]\n![nested-enums-1|595x198](upload://ay25GgAXQ2UgHMYRgnPQzsWxTLK.png)\n![nested-enums-2|595x198](upload://lMJysXV9YjT9ct4rgxqmQClfLqv.png)\n[/details]\n\nAs you can see, the question stays in the same page, but the choices go to the next. I tried to wrap every `enum.item` in a block, but it breaks the enum counter and instead of fixing that I just prefer to call a `pagebreak` manually.\n\nAny help would be appreciated!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 38,
      "score": 332.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 41
    },
    {
      "id": 6106,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-11-26T08:27:26.192Z",
      "updated_at": "2024-11-26T08:47:53.834Z",
      "cooked": "<p>You were already on the right track to try to <code>#show enum.item: set block(breakable: false)</code> – this would, if enum items were implicitly wrapped in a block, make that block non-breakable. This works e.g. for <code>table</code>s. Enum items are not implicitly blocks, however (at least it seems so).</p>\n<p>Adding a block within the show rule doesn’t work because it resets numbering, as you have already noticed:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show enum.item: block.with(breakable: false)\n</code></pre>\n<p>The trick is to not wrap the enum item in a block, but the enum item’s <em>body</em>. You can inspect your current content by wrapping it in <code>repr()</code> and you’ll see that an enum item looks e.g. like this:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">item(\n  body: sequence(\n    [Some question],\n    parbreak(),\n    item(body: [First answer]),\n    // etc.\n  ),\n)\n</code></pre>\n<p>So if the body was an unbreakable block, this would work. However, the naive way of doing that also leads to a problem:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show enum.item: it =&gt; {\n  let (number, body, ..fields) = it.fields()\n  body = block(breakable: false, body)\n  enum.item(number, body, ..fields)\n}\n</code></pre>\n<blockquote>\n<p>maximum show rule depth exceeded</p>\n</blockquote>\n<p>Each show rule application creates a new enum item, on which the show rule is applied again… With one extra line to return the original item if it’s already the result of this show rule, it works:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show enum.item: it =&gt; {\n  let (number, body, ..fields) = it.fields()\n  if body.func() == block { return it }\n\n  body = block(breakable: false, body)\n  enum.item(number, body, ..fields)\n}\n</code></pre>",
      "raw": "You were already on the right track to try to `#show enum.item: set block(breakable: false)` -- this would, if enum items were implicitly wrapped in a block, make that block non-breakable. This works e.g. for `table`s. Enum items are not implicitly blocks, however (at least it seems so).\n\nAdding a block within the show rule doesn't work because it resets numbering, as you have already noticed:\n```typ\n#show enum.item: block.with(breakable: false)\n```\n\nThe trick is to not wrap the enum item in a block, but the enum item's _body_. You can inspect your current content by wrapping it in `repr()` and you'll see that an enum item looks e.g. like this:\n```typc\nitem(\n  body: sequence(\n    [Some question],\n    parbreak(),\n    item(body: [First answer]),\n    // etc.\n  ),\n)\n```\nSo if the body was an unbreakable block, this would work. However, the naive way of doing that also leads to a problem:\n```typ\n#show enum.item: it => {\n  let (number, body, ..fields) = it.fields()\n  body = block(breakable: false, body)\n  enum.item(number, body, ..fields)\n}\n```\n>maximum show rule depth exceeded\n\nEach show rule application creates a new enum item, on which the show rule is applied again... With one extra line to return the original item if it's already the result of this show rule, it works:\n```typ\n#show enum.item: it => {\n  let (number, body, ..fields) = it.fields()\n  if body.func() == block { return it }\n\n  body = block(breakable: false, body)\n  enum.item(number, body, ..fields)\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 2,
      "reads": 32,
      "score": 51.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 6126,
      "post_number": 3,
      "username": "Anemona-Anonima",
      "name": "Esteban Muñoz",
      "created_at": "2024-11-26T15:38:03.521Z",
      "updated_at": "2024-11-26T15:38:03.521Z",
      "cooked": "<p>Thank you! I thought about recreating the enum but believed it was going to be harder. This works as expected.</p>",
      "raw": "Thank you! I thought about recreating the enum but believed it was going to be harder. This works as expected.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 4.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 41
    },
    {
      "id": 13709,
      "post_number": 4,
      "username": "kalmarek",
      "name": "Marek",
      "created_at": "2025-06-04T21:59:06.272Z",
      "updated_at": "2025-06-04T21:59:06.272Z",
      "cooked": "<p>That’s a fine solution, but only when items are shorter than pages. In my examples I have something like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(height: 7cm, width: 10cm)\n\n+ First item\n\n  #lorem(20)\n  \n  #lorem(20)\n\n+ Second item\n  \n  #lorem(20)\n  \n  #lorem(50)\n</code></pre>\n<p>and <code>Second item</code> is either hanging at the end of the first page, or (with your solution) the second item doesn’t break where it should and overruns the page. In latex there’s the concept of “glue” which causes the page-break before rather than after <code>Second item</code>. Can we instruct typst about this preference of ours?</p>",
      "raw": "That's a fine solution, but only when items are shorter than pages. In my examples I have something like this:\n```\n#set page(height: 7cm, width: 10cm)\n\n+ First item\n\n  #lorem(20)\n  \n  #lorem(20)\n\n+ Second item\n  \n  #lorem(20)\n  \n  #lorem(50)\n```\n\nand `Second item` is either hanging at the end of the first page, or (with your solution) the second item doesn't break where it should and overruns the page. In latex there's the concept of \"glue\" which causes the page-break before rather than after `Second item`. Can we instruct typst about this preference of ours?",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 11,
      "score": 7.2,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1706
    }
  ],
  "scraped_at": "2025-06-10T09:54:23.241092"
}