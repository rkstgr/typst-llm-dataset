{
  "topic_metadata": {
    "id": 2794,
    "title": "How to generate pdf with typst syntax using python?",
    "slug": "how-to-generate-pdf-with-typst-syntax-using-python",
    "posts_count": 6,
    "created_at": "2025-02-12T17:56:43.240Z",
    "last_posted_at": "2025-02-13T11:12:52.283Z",
    "views": 293,
    "like_count": 5,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 6,
    "accepted_answer_username": "aarnent",
    "tags": [
      "data-loading"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 563
  },
  "posts": [
    {
      "id": 8525,
      "post_number": 1,
      "username": "This_isYE",
      "name": "This isYE",
      "created_at": "2025-02-12T17:56:43.380Z",
      "updated_at": "2025-02-12T19:37:58.639Z",
      "cooked": "<p>Hello,<br>\nI have a typst file on the webapp, it uses a csv file as an argument:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"ABC_lib.typ\": *\n#show: ABC_format\n\n#import \"@preview/cetz:0.3.2\": canvas, draw\n#import \"@preview/cetz-plot:0.1.1\": plot\n\n\n\n\n// Load CSV and separate first row from others\n#let (names, ..data) = csv(\"ABC_data.csv\",\nrow-type: array)\n\n//here the rest of the typst code\n</code></pre>\n<p>I want to generate the same PDF file for different Csv files, my idea is to use python to :</p>\n<ol>\n<li>loop over the csv files in python</li>\n<li>feed the template Csv_i</li>\n<li>output a temporary typst file_i</li>\n<li>use subprocess and convert it to PDF_i using typst compile.</li>\n<li>delete the temporary file_i</li>\n<li>repeat</li>\n</ol>\n<p>I know how to do this in latex, but not in typst since it uses scripting, so it this optimal ? can it be done another way ?</p>\n<p>requirements:<br>\nI need to do it locally since I have thousands of CSV files.<br>\nif you noticed i am importing a ABC_lib.typ which contains all the formatting and rules i usually use to generate pdfs, how do I include that file in the python process?</p>",
      "raw": "Hello,\nI have a typst file on the webapp, it uses a csv file as an argument:\n```typ\n#import \"ABC_lib.typ\": *\n#show: ABC_format\n\n#import \"@preview/cetz:0.3.2\": canvas, draw\n#import \"@preview/cetz-plot:0.1.1\": plot\n\n\n\n\n// Load CSV and separate first row from others\n#let (names, ..data) = csv(\"ABC_data.csv\",\nrow-type: array)\n\n//here the rest of the typst code\n```\n\nI want to generate the same PDF file for different Csv files, my idea is to use python to : \n1. loop over the csv files in python\n2. feed the template Csv_i\n3. output a temporary typst file_i\n4. use subprocess and convert it to PDF_i using typst compile.\n5. delete the temporary file_i\n6. repeat\n\nI know how to do this in latex, but not in typst since it uses scripting, so it this optimal ? can it be done another way ? \n\nrequirements:\nI need to do it locally since I have thousands of CSV files.\nif you noticed i am importing a ABC_lib.typ which contains all the formatting and rules i usually use to generate pdfs, how do I include that file in the python process?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 41,
      "score": 1008.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1060
    },
    {
      "id": 8528,
      "post_number": 2,
      "username": "flokl",
      "name": "",
      "created_at": "2025-02-12T18:40:29.344Z",
      "updated_at": "2025-02-12T19:12:23.403Z",
      "cooked": "<p>With Typst you can skip step 3 and 5 with the temporary file and use in step 4 with the Typst compile command <a href=\"https://typst.app/docs/reference/foundations/sys\"><code>--input key=value</code></a> to provide the csv file name (and read the data with <code>csv(...)</code>) or provide the csv data directly to your Typst file. Inside the Typst file you can access the argument with <code>sys.inputs.yourkey</code>.</p>\n<p>Edit: The full command you would use in step 4 with the Python subprocess is:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">typst c main.typ --input yourkey=somefilename.csv\n</code></pre>\n<p>With the Typst compile command, <code>#import ABC_lib.typ ...</code> would be automatically used, no additional actions needed.</p>",
      "raw": "With Typst you can skip step 3 and 5 with the temporary file and use in step 4 with the Typst compile command [`--input key=value`](https://typst.app/docs/reference/foundations/sys) to provide the csv file name (and read the data with `csv(...)`) or provide the csv data directly to your Typst file. Inside the Typst file you can access the argument with `sys.inputs.yourkey`.\n\nEdit: The full command you would use in step 4 with the Python subprocess is:\n```typst\ntypst c main.typ --input yourkey=somefilename.csv\n```\nWith the Typst compile command, `#import ABC_lib.typ ...` would be automatically used, no additional actions needed.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 40,
      "score": 28.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 8
    },
    {
      "id": 8529,
      "post_number": 3,
      "username": "This_isYE",
      "name": "This isYE",
      "created_at": "2025-02-12T19:29:14.529Z",
      "updated_at": "2025-02-12T19:29:14.529Z",
      "cooked": "<p>Hi, thank you for your response,<br>\nIn the typst file how do I reference the csv file to take the “yourkey=somefilename.csv” as an argument fed to him by the subprocess ?</p>",
      "raw": "Hi, thank you for your response, \nIn the typst file how do I reference the csv file to take the \"yourkey=somefilename.csv\" as an argument fed to him by the subprocess ?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 37,
      "score": 7.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1060
    },
    {
      "id": 8530,
      "post_number": 4,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-02-12T19:37:39.792Z",
      "updated_at": "2025-02-12T19:37:39.792Z",
      "cooked": "<p>I think you’ll be interested in the other questions tagged <a class=\"hashtag-cooked\" href=\"/tag/data-loading\" data-type=\"tag\" data-slug=\"data-loading\" data-id=\"86\"><span class=\"hashtag-icon-placeholder\"><svg class=\"fa d-icon d-icon-square-full svg-icon svg-node\"><use href=\"#square-full\"></use></svg></span><span>data-loading</span></a> (in fact, I will add that tag to your question after I finish writing this <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\">). Particularly this one, which sounds very close to what you’re trying to do:</p>\n<aside class=\"quote quote-modified\" data-post=\"2\" data-topic=\"417\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/d/9335FF/48.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/is-there-a-way-to-programmaticaly-generate-documents/417/2\">Is there a way to programmaticaly generate documents?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    You can use a similar process to what you already have with jinja templating. In fact, you could even use jinja to create a typst document rather than whatever document format you are using right now (I assume you’re doing HTML then converting to PDF). \nSo, if for example: \n&lt;h1&gt;{{ some_heading }}&lt;/h1&gt;\n&lt;p&gt; Some {{ some_value }} &lt;/p&gt;\n\nYou’d convert that to \n= {{ some_heading }}\nSome {{ some_value }}\n\nand so on. \nYou would then \n\npopulate the template with values,\noutput a temporary typst file\nuse …\n  </blockquote>\n</aside>\n",
      "raw": "I think you'll be interested in the other questions tagged #data-loading (in fact, I will add that tag to your question after I finish writing this :wink:). Particularly this one, which sounds very close to what you're trying to do:\n\nhttps://forum.typst.app/t/is-there-a-way-to-programmaticaly-generate-documents/417/2",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 37,
      "score": 147.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 8566,
      "post_number": 5,
      "username": "This_isYE",
      "name": "This isYE",
      "created_at": "2025-02-13T10:08:43.122Z",
      "updated_at": "2025-02-13T10:08:43.122Z",
      "cooked": "<p>Yes, that helped me indeed, but I have hit a road block:<br>\nAs I understand it, i must either feed typst a dictionary of all csv files or one csv file at a time.<br>\nThe optimal way as I see it, is to loop over the files in python, feed them to typst, generate the pdf, but now I have multiple pdf files, I need to merge them into one report :/<br>\nIs there a way around this?</p>",
      "raw": "Yes, that helped me indeed, but I have hit a road block:\nAs I understand it, i must either feed typst a dictionary of all csv files or one csv file at a time.\nThe optimal way as I see it, is to loop over the files in python, feed them to typst, generate the pdf, but now I have multiple pdf files, I need to merge them into one report :/ \nIs there a way around this?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 15.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1060
    },
    {
      "id": 8571,
      "post_number": 6,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-02-13T11:12:52.283Z",
      "updated_at": "2025-02-13T11:18:48.218Z",
      "cooked": "<p>You can pass all files as a JSON-object, for example. If you have have a folder <code>csvs/</code>, you can load all of them in python as a json string:</p>\n<pre data-code-wrap=\"python\"><code class=\"lang-python\">import subprocess\nimport glob\nimport os\nimport json\n\nfolder_path = \"csvs\"\n\nfiles = glob.glob(\n    os.path.join(folder_path, \"*.csv\")\n)\n\njson_files = json.dumps(files)\n\nsubprocess.run([\n    \"typst\",\n    \"c\",\n    \"main.typ\",\n    \"--input\",\n    f\"files={json_files}\"\n], capture_output=True, text=True)\n</code></pre>\n<p>and then read it in typst:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let files = json.decode(sys.inputs.files)\n\n#files\n\n\n#for f in files {\n  let data = csv(f)\n  // do what you want with the files\n}\n</code></pre>",
      "raw": "You can pass all files as a JSON-object, for example. If you have have a folder `csvs/`, you can load all of them in python as a json string:\n```python\nimport subprocess\nimport glob\nimport os\nimport json\n\nfolder_path = \"csvs\"\n\nfiles = glob.glob(\n    os.path.join(folder_path, \"*.csv\")\n)\n\njson_files = json.dumps(files)\n\nsubprocess.run([\n    \"typst\",\n    \"c\",\n    \"main.typ\",\n    \"--input\",\n    f\"files={json_files}\"\n], capture_output=True, text=True)\n```\n\nand then read it in typst:\n\n```typst\n#let files = json.decode(sys.inputs.files)\n\n#files\n\n\n#for f in files {\n  let data = csv(f)\n  // do what you want with the files\n}\n```",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 25,
      "score": 205.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 501
    }
  ],
  "scraped_at": "2025-06-10T09:51:41.667040"
}