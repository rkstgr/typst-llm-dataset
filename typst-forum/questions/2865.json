{
  "topic_metadata": {
    "id": 2865,
    "title": "How can I use a show rule to change the text of bullet point lists?",
    "slug": "how-can-i-use-a-show-rule-to-change-the-text-of-bullet-point-lists",
    "posts_count": 9,
    "created_at": "2025-02-17T21:34:43.778Z",
    "last_posted_at": "2025-02-18T20:22:20.370Z",
    "views": 209,
    "like_count": 1,
    "reply_count": 5,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 9,
    "accepted_answer_username": "Olaf",
    "tags": [
      "layout",
      "lists"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 806
  },
  "posts": [
    {
      "id": 8759,
      "post_number": 1,
      "username": "Olaf",
      "name": "Olaf",
      "created_at": "2025-02-17T21:34:43.887Z",
      "updated_at": "2025-02-22T09:54:00.991Z",
      "cooked": "<p>I would like to use a show rule to wrap the elements of a bullet point list with a function call. By this I mean the text after the bullet point, not the bullet point itself.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let taglist(content) = {\n  let tags = content.text\n    .split(\";\")\n    .map(str.trim)\n    .filter(s =&gt; s != \"\")\n\n  tags.map(t =&gt; strong(t)).join(\", \")\n}\n\n#show list.item: it =&gt; {\n    taglist(it.body)\n}\n\n- One; Two; Three\n- AAA; BBB; CCC \n</code></pre>\n<p>This is to be equivalent with:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">- #taglist([One; Two; Three])\n- #taglist([AAA; BBB; CCC])\n\n</code></pre>\n<p>And eventually:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">- #strong([One]), #strong([Two]), #strong([Three])\n- #strong([AAA]), #strong([BBB]), #strong([CCC])\n</code></pre>\n<p>Unfortunately, this only works halfway. The bullet point list has now been cancelled.</p>",
      "raw": "I would like to use a show rule to wrap the elements of a bullet point list with a function call. By this I mean the text after the bullet point, not the bullet point itself.\n\n```typ\n#let taglist(content) = {\n  let tags = content.text\n    .split(\";\")\n    .map(str.trim)\n    .filter(s => s != \"\")\n\n  tags.map(t => strong(t)).join(\", \")\n}\n\n#show list.item: it => {\n    taglist(it.body)\n}\n\n- One; Two; Three\n- AAA; BBB; CCC \n```\n\nThis is to be equivalent with:\n\n```typ\n- #taglist([One; Two; Three])\n- #taglist([AAA; BBB; CCC])\n\n```\n\nAnd eventually:\n\n```typ\n- #strong([One]), #strong([Two]), #strong([Three])\n- #strong([AAA]), #strong([BBB]), #strong([CCC])\n```\n\nUnfortunately, this only works halfway. The bullet point list has now been cancelled.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 47,
      "score": 549.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 418
    },
    {
      "id": 8761,
      "post_number": 2,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-02-18T06:35:30.516Z",
      "updated_at": "2025-02-18T06:35:30.516Z",
      "cooked": "<p>The <code>show</code> rule is currently returning the modified <code>it.body</code> which is no longer an <code>enum.item</code>.</p>\n<p>Returning the correct thing:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let taglist(content) = {\n  let tags = content.text\n    .split(\";\")\n    .map(str.trim)\n    .filter(s =&gt; s != \"\")\n\n  tags.map(t =&gt; strong(t)).join(\", \")\n}\n\n#show list.item: it =&gt; {\n    enum.item(taglist(it.body))//small change here\n}\n\n- One; Two; Three\n- AAA; BBB; CCC\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/7/7cd10556e5db85521df6b60c6abba73020112700.png\" alt=\"image\" data-base62-sha1=\"hOb1WV3IVkWUdE5QLELfP9ha9oI\" width=\"155\" height=\"54\"></p>",
      "raw": "The `show` rule is currently returning the modified `it.body` which is no longer an `enum.item`.\n\nReturning the correct thing:\n```typ\n#let taglist(content) = {\n  let tags = content.text\n    .split(\";\")\n    .map(str.trim)\n    .filter(s => s != \"\")\n\n  tags.map(t => strong(t)).join(\", \")\n}\n\n#show list.item: it => {\n    enum.item(taglist(it.body))//small change here\n}\n\n- One; Two; Three\n- AAA; BBB; CCC\n```\n![image|155x54](upload://hOb1WV3IVkWUdE5QLELfP9ha9oI.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 40,
      "score": 13.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 8763,
      "post_number": 3,
      "username": "Olaf",
      "name": "Olaf",
      "created_at": "2025-02-18T08:14:24.155Z",
      "updated_at": "2025-02-18T08:14:24.155Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"gezepi\" data-post=\"2\" data-topic=\"2865\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/g/C34CE0/48.png\" class=\"avatar\"> gezepi:</div>\n<blockquote>\n<p><code>enum.item</code></p>\n</blockquote>\n</aside>\n<p>Thank you for your reply. Unfortunately, your answer refers to a numbered list. I would like to have a list with bullet points.</p>",
      "raw": "[quote=\"gezepi, post:2, topic:2865\"]\n`enum.item`\n[/quote]\n\nThank you for your reply. Unfortunately, your answer refers to a numbered list. I would like to have a list with bullet points.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 36,
      "score": 37.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 418
    },
    {
      "id": 8766,
      "post_number": 4,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-02-18T09:21:15.944Z",
      "updated_at": "2025-02-18T09:21:15.944Z",
      "cooked": "<p>Sorry about that!<br>\nIn theory it would be as simple as changing it from <code>enum.item</code> to <code>list.item</code> but then the <code>show</code> rule applies to the already modified item.  So this will first check if there is a semicolon before modifying it.  If there is no semicolon it will simply return what it found (<code>it</code>).</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show list.item: it =&gt; {\n  if it.body.func() == text and it.body.fields().text.contains(\";\"){\n    list.item(taglist(it.body)) \n  } else {\n    it\n  }\n}\n</code></pre>\n<p>If you are using semicolons in your lists for other things you may need to make further changes to the code (maybe attaching a label to all modified items and checking for labels before applying the <code>show</code> rule).</p>\n<details>\n<summary>\nFull Code</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let taglist(content) = {\n  let fields = content.fields().text\n  let tags = fields\n    .split(\";\")\n    .map(str.trim)\n    .filter(s =&gt; s != \"\")\n\n  tags.map(t =&gt; strong(t)).join(\", \")\n}\n\n#show list.item: it =&gt; {\n  if it.body.func() == text and it.body.fields().text.contains(\";\"){\n    list.item(taglist(it.body)) \n  } else {\n    it\n  }\n}\n\n- One; Two; Three\n- AAA; BBB; CCC\n- This doesn't have a semicolon\n- This does; So it gets treated differently\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/b/b524e832e324763ea0f5bd27880407ce5d403ead.png\" alt=\"image\" data-base62-sha1=\"pQtuH80q0lZ1t3WECZzu4rbMvGR\" width=\"283\" height=\"89\"></p>\n</details>",
      "raw": "Sorry about that!\nIn theory it would be as simple as changing it from `enum.item` to `list.item` but then the `show` rule applies to the already modified item.  So this will first check if there is a semicolon before modifying it.  If there is no semicolon it will simply return what it found (`it`).\n\n```typ\n#show list.item: it => {\n  if it.body.func() == text and it.body.fields().text.contains(\";\"){\n    list.item(taglist(it.body)) \n  } else {\n    it\n  }\n}\n```\n\nIf you are using semicolons in your lists for other things you may need to make further changes to the code (maybe attaching a label to all modified items and checking for labels before applying the `show` rule).\n\n[details=\"Full Code\"]\n```typ\n#let taglist(content) = {\n  let fields = content.fields().text\n  let tags = fields\n    .split(\";\")\n    .map(str.trim)\n    .filter(s => s != \"\")\n\n  tags.map(t => strong(t)).join(\", \")\n}\n\n#show list.item: it => {\n  if it.body.func() == text and it.body.fields().text.contains(\";\"){\n    list.item(taglist(it.body)) \n  } else {\n    it\n  }\n}\n\n- One; Two; Three\n- AAA; BBB; CCC\n- This doesn't have a semicolon\n- This does; So it gets treated differently\n```\n![image|283x89](upload://pQtuH80q0lZ1t3WECZzu4rbMvGR.png)\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 36,
      "score": 22.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 8767,
      "post_number": 5,
      "username": "Olaf",
      "name": "Olaf",
      "created_at": "2025-02-18T09:41:29.979Z",
      "updated_at": "2025-02-18T09:42:14.898Z",
      "cooked": "<p>Where did you get this information? Is there a detailed documentation somewhere regarding list.item and list.item.body? It’s a bit thin: <a href=\"https://typst.app/docs/reference/model/list/#definitions-item\" class=\"inline-onebox\">Bullet List Function – Typst Documentation</a></p>",
      "raw": "Where did you get this information? Is there a detailed documentation somewhere regarding list.item and list.item.body? It's a bit thin: https://typst.app/docs/reference/model/list/#definitions-item",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 30,
      "score": 11.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 418
    },
    {
      "id": 8768,
      "post_number": 6,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-02-18T10:04:03.708Z",
      "updated_at": "2025-02-18T10:04:03.708Z",
      "cooked": "<p>Mostly I just fumbled around inside the <code>show</code> function.  By hovering the mouse over a variable, you can see all the values it has in the document.  This let me find out what properties and methods were available (and their values) for a list item.</p>\n<p>Also, it turns out that solution is actually very fragile:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">- 1; 2\n- 1;2\n- _1_; 2\n- 1 ; 2\n- 1; _2_\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/b/baaa057c2f71f5c1af4311e143cd6319e45891ff.png\" alt=\"image\" data-base62-sha1=\"qDj4SDlAjzo6J0bSHJpa8157fwb\" width=\"99\" height=\"160\"></p>\n<p>Changing to nested <code>show</code> rules like this is much more robust.  The only downside I know of right now is that, unlike your example from the original post, this one also applies <code>strong</code> to the commas (,).</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show list.item: it =&gt; {\n  show regex(\".*;.*\"): it =&gt; {\n    show regex(\"\\s*;\\s*\"): \", \"\n    strong(it)\n  }\n  it\n}\n\n- 1; 2\n- 1;2\n- _1_; 2\n- 1 ; 2\n- 1; _2_\n- One; Two; Three\n- AAA; BBB; CCC\n- This doesn't have a semicolon\n- This does; So it gets treated differently\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/3/31ce6c6d5190f7b22345dbe45588e5b803215183.png\" alt=\"image\" data-base62-sha1=\"76BEHpdefmbErUdjQQSUWiYvwcj\" width=\"470\" height=\"299\"></p>\n</details>",
      "raw": "Mostly I just fumbled around inside the `show` function.  By hovering the mouse over a variable, you can see all the values it has in the document.  This let me find out what properties and methods were available (and their values) for a list item.\n\nAlso, it turns out that solution is actually very fragile:\n```typ\n- 1; 2\n- 1;2\n- _1_; 2\n- 1 ; 2\n- 1; _2_\n```\n![image|99x160](upload://qDj4SDlAjzo6J0bSHJpa8157fwb.png)\n\nChanging to nested `show` rules like this is much more robust.  The only downside I know of right now is that, unlike your example from the original post, this one also applies `strong` to the commas (,).\n\n```typ\n#show list.item: it => {\n  show regex(\".*;.*\"): it => {\n    show regex(\"\\s*;\\s*\"): \", \"\n    strong(it)\n  }\n  it\n}\n\n- 1; 2\n- 1;2\n- _1_; 2\n- 1 ; 2\n- 1; _2_\n- One; Two; Three\n- AAA; BBB; CCC\n- This doesn't have a semicolon\n- This does; So it gets treated differently\n```\n\n[details=\"Output\"]\n![image|470x299](upload://76BEHpdefmbErUdjQQSUWiYvwcj.png)\n[/details]",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 30,
      "score": 36.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 8770,
      "post_number": 7,
      "username": "Olaf",
      "name": "Olaf",
      "created_at": "2025-02-18T10:48:15.739Z",
      "updated_at": "2025-02-18T10:48:15.739Z",
      "cooked": "<p>Are you working with the web editor or with another editor (e.g. Visual Studio Code)?</p>",
      "raw": "Are you working with the web editor or with another editor (e.g. Visual Studio Code)?",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 28,
      "score": 10.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 418
    },
    {
      "id": 8771,
      "post_number": 8,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-02-18T11:02:44.548Z",
      "updated_at": "2025-02-18T11:02:44.548Z",
      "cooked": "<p>For this, the web editor.  I also use VSCodium (basically VSCode) with tinymist, and the “hover over to see the values” works in both.</p>",
      "raw": "For this, the web editor.  I also use VSCodium (basically VSCode) with tinymist, and the \"hover over to see the values\" works in both.",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 30,
      "score": 16.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 8779,
      "post_number": 9,
      "username": "Olaf",
      "name": "Olaf",
      "created_at": "2025-02-18T20:22:20.370Z",
      "updated_at": "2025-02-18T20:22:20.370Z",
      "cooked": "<p>I have created something that works for me. I used a trick that I copied from <a href=\"https://github.com/OrangeX4/typst-cheq/blob/13a0b7316025613cc13913bf4e4b7784a17abe40/lib.typ#L154\" rel=\"noopener nofollow ugc\">typst-chep</a>. To ensure that the show rule is only applied once, I use a content element as a marker. After the show rule has been applied, the marker is removed and the show rule is not applied again.</p>\n<p>Next, I filter out all elements that I cannot convert into text (e.g. spaces). I then join the remaining elements together.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let taglist(text) = {\n  let tags = text\n    .split(\";\")\n    .map(str.trim)\n    .filter(s =&gt; s != \"\")\n\n  tags.map(t =&gt; strong(t)).join(\", \")\n}\n\n#show list.item: it =&gt; {\n  if not (type(it.body) == content and it.body.func() == [].func()) {\n    return it\n  }\n  let children = it.body.children\n\n  if children.at(0) != [#\"[\"] or children.at(1) != [#\"TL\"] or children.at(2) != [#\"]\"] {\n    return it\n  }\n  \n  let c = children.slice(4)\n    .filter(i =&gt; i.func() == text)\n    .map(i =&gt; i.text)\n    .join()\n\n  list(taglist(c))\n}\n\n- [TL] Hello\n- [TL] One; Two\n- [TL] AAA; BBB ; CCC;\n</code></pre>",
      "raw": "I have created something that works for me. I used a trick that I copied from [typst-chep](https://github.com/OrangeX4/typst-cheq/blob/13a0b7316025613cc13913bf4e4b7784a17abe40/lib.typ#L154). To ensure that the show rule is only applied once, I use a content element as a marker. After the show rule has been applied, the marker is removed and the show rule is not applied again. \n\nNext, I filter out all elements that I cannot convert into text (e.g. spaces). I then join the remaining elements together. \n\n```typ\n#let taglist(text) = {\n  let tags = text\n    .split(\";\")\n    .map(str.trim)\n    .filter(s => s != \"\")\n\n  tags.map(t => strong(t)).join(\", \")\n}\n\n#show list.item: it => {\n  if not (type(it.body) == content and it.body.func() == [].func()) {\n    return it\n  }\n  let children = it.body.children\n\n  if children.at(0) != [#\"[\"] or children.at(1) != [#\"TL\"] or children.at(2) != [#\"]\"] {\n    return it\n  }\n  \n  let c = children.slice(4)\n    .filter(i => i.func() == text)\n    .map(i => i.text)\n    .join()\n\n  list(taglist(c))\n}\n\n- [TL] Hello\n- [TL] One; Two\n- [TL] AAA; BBB ; CCC;\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 28,
      "score": 20.6,
      "accepted_answer": true,
      "trust_level": 1,
      "user_id": 418
    }
  ],
  "scraped_at": "2025-06-10T09:51:27.639066"
}