{
  "topic_metadata": {
    "id": 3576,
    "title": "How can I parse content into a custom structure?",
    "slug": "how-can-i-parse-content-into-a-custom-structure",
    "posts_count": 5,
    "created_at": "2025-04-09T03:51:21.851Z",
    "last_posted_at": "2025-04-11T21:27:07.335Z",
    "views": 139,
    "like_count": 3,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Bolt",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 389
  },
  "posts": [
    {
      "id": 10826,
      "post_number": 1,
      "username": "Bolt",
      "name": "",
      "created_at": "2025-04-09T03:51:21.987Z",
      "updated_at": "2025-04-11T01:20:17.917Z",
      "cooked": "<p>Is it possible to have a function parse content into a custom structure like so?</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#parse[\n  [a[b[c][d]]]\n] == (body: [a], children: (\n  (body: [b], children: (\n      (body: [c], children: ()),\n      (body: [d], children: ()),\n    )\n  ),\n))\n</code></pre>\n<p>I know how to do this for strings and have done so, but would like to write a solution which allows for any content as the nodes’ bodies. I could try going into the sequence and messing around, but I wanted to see if there’s a better way to approah this first.</p>\n<p>As a note, square brackets are typically used for this (linguistics syntax trees), but if it’s not possible I’d still be interested in how to do this for other delimiters.</p>",
      "raw": "Is it possible to have a function parse content into a custom structure like so?\n```typ\n#parse[\n  [a[b[c][d]]]\n] == (body: [a], children: (\n  (body: [b], children: (\n      (body: [c], children: ()),\n      (body: [d], children: ()),\n    )\n  ),\n))\n```\nI know how to do this for strings and have done so, but would like to write a solution which allows for any content as the nodes' bodies. I could try going into the sequence and messing around, but I wanted to see if there's a better way to approah this first. \n\nAs a note, square brackets are typically used for this (linguistics syntax trees), but if it's not possible I'd still be interested in how to do this for other delimiters.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 196.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 737
    },
    {
      "id": 10830,
      "post_number": 2,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-04-09T05:58:21.073Z",
      "updated_at": "2025-04-09T05:58:21.073Z",
      "cooked": "<p>Since you’ve already got a way to turn a string like “a[b[c]]” into that type of structure, maybe all you need is a way to convert <code>content</code> to <code>string</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let parseAsString(it) = {\n  let asString = it.fields().at(\"children\")\n    .map(c =&gt; c.fields())\n    .map(v =&gt; v.at(\"text\", default: none))\n    .filter(v =&gt; v != none).join()\n  \n  return asString\n}\n</code></pre>\n<p>A more general solution for converting content to string was provided by GitHub user <code>lvjr</code> here:</p><aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://github.com/typst/typst/discussions/3876#discussioncomment-9016808\">\n  <header class=\"source\">\n      <img src=\"https://forum.typst.app/uploads/default/original/2X/b/bad3e5f9ad67c1ddf145107ce7032ac1d7b22563.svg\" class=\"site-icon\" data-dominant-color=\"\" width=\"32\" height=\"32\">\n\n      <a href=\"https://github.com/typst/typst/discussions/3876#discussioncomment-9016808\" target=\"_blank\" rel=\"noopener\">GitHub</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/344;\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/9/9119129a5c9b4de1ee748c64a1ea5f6efb67705f_2_690x345.png\" class=\"thumbnail\" data-dominant-color=\"F4F5F3\" width=\"690\" height=\"345\"></div>\n\n<h3><a href=\"https://github.com/typst/typst/discussions/3876#discussioncomment-9016808\" target=\"_blank\" rel=\"noopener\">Turning content into string · typst/typst · Discussion #3876</a></h3>\n\n  <p>In a comment in issue #2196, @EpicEricEE gave a function for turning content into string, but it failed when the content has some math function such as sin: #let to-string(content) = { if content.h...</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
      "raw": "Since you've already got a way to turn a string like \"a[b[c]]\" into that type of structure, maybe all you need is a way to convert `content` to `string`:\n```typ\n#let parseAsString(it) = {\n  let asString = it.fields().at(\"children\")\n    .map(c => c.fields())\n    .map(v => v.at(\"text\", default: none))\n    .filter(v => v != none).join()\n  \n  return asString\n}\n```\n\nA more general solution for converting content to string was provided by GitHub user `lvjr` here:\nhttps://github.com/typst/typst/discussions/3876#discussioncomment-9016808",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 20.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 10851,
      "post_number": 3,
      "username": "Bolt",
      "name": "",
      "created_at": "2025-04-09T14:58:14.133Z",
      "updated_at": "2025-04-09T14:58:14.133Z",
      "cooked": "<p>That would work if I only wanted string output. I was able to find a solution that preserves content (ie. allows <code>[$x$[*y*][@z]]</code>). As a result of using square brackets, all content passed into the function ends up being a sequence (as far as I can tell), where <code>[</code> and <code>]</code> are never grouped with anything else (they’re their own child). So I ended up taking the sequence’s children and matching on <code>[[]</code> and <code>[]]</code> instead of <code>\"[\"</code> and <code>\"]\"</code>, then concatenating the children which make up the body.</p>",
      "raw": "That would work if I only wanted string output. I was able to find a solution that preserves content (ie. allows `[$x$[*y*][@z]]`). As a result of using square brackets, all content passed into the function ends up being a sequence (as far as I can tell), where `[` and `]` are never grouped with anything else (they're their own child). So I ended up taking the sequence's children and matching on `[[]` and `[]]` instead of `\"[\"` and `\"]\"`, then concatenating the children which make up the body.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 5.0,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 737
    },
    {
      "id": 10867,
      "post_number": 4,
      "username": "Bolt",
      "name": "",
      "created_at": "2025-04-10T01:35:52.510Z",
      "updated_at": "2025-04-10T01:35:52.510Z",
      "cooked": "<p>I ended up needing this for an extension to my parser, so it was super helpful. Thanks! I  modified it for my use case to preserve quotation marks, so here’s that for posterity.</p>\n<pre><code class=\"lang-auto\">let stringify(it) = {\n  for child in it.children {\n    if child.func() == smartquote {\n        if child.double { \"\\\"\" } else { \"'\" }\n      } else {\n        child.at(\"text\", default: none)\n      }\n  }\n}\n</code></pre>",
      "raw": "I ended up needing this for an extension to my parser, so it was super helpful. Thanks! I  modified it for my use case to preserve quotation marks, so here's that for posterity.\n\n```\nlet stringify(it) = {\n  for child in it.children {\n    if child.func() == smartquote {\n        if child.double { \"\\\"\" } else { \"'\" }\n      } else {\n        child.at(\"text\", default: none)\n      }\n  }\n}\n```",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 22,
      "score": 64.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 737
    },
    {
      "id": 10951,
      "post_number": 5,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-11T21:27:07.335Z",
      "updated_at": "2025-04-11T21:27:07.335Z",
      "cooked": "<p>For converting content to string, there is t4t package:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/t4t:0.4.2\": get\n#get.text[content]\n</code></pre>\n<p>Although it doesn’t always work as expected, like for math mode, but I think there are other packages that can handle math conversion.</p>",
      "raw": "For converting content to string, there is t4t package:\n\n```typ\n#import \"@preview/t4t:0.4.2\": get\n#get.text[content]\n```\n\nAlthough it doesn't always work as expected, like for math mode, but I think there are other packages that can handle math conversion.",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 18,
      "score": 3.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:49:29.877146"
}