{
  "topic_metadata": {
    "id": 1416,
    "title": "How to display outline using grid?",
    "slug": "how-to-display-outline-using-grid",
    "posts_count": 5,
    "created_at": "2024-10-29T15:40:48.405Z",
    "last_posted_at": "2025-03-04T12:46:12.577Z",
    "views": 282,
    "like_count": 4,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Eric",
    "tags": [
      "scripting",
      "layout",
      "outline"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 825
  },
  "posts": [
    {
      "id": 4810,
      "post_number": 1,
      "username": "ArthurAraruna",
      "name": "Arthur Rodrigues Araruna",
      "created_at": "2024-10-29T15:40:48.549Z",
      "updated_at": "2024-10-31T04:42:11.435Z",
      "cooked": "<p>My university has a strict guide of style and layout for academic documents. I’m making a template for it and one of the styles I could not yet reproduce is the one for the outline.</p>\n<p>The rules state that (in summary):</p>\n<ul>\n<li>Each heading level has to reflect the corresponding styling from the text.</li>\n<li>The numbering and page numbers have to be laid out in columns (so that they occupy the same width).</li>\n<li>The filling has to start and end in the same line as the last letter of each title.</li>\n<li>Front matter headings must not be present. Back matter headings must not display a numbering.</li>\n</ul>\n<p>Here is the sample they provide from their style guide:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/d/d8454bf19369b74b63c35353b045f1c53011cdf4.png\" data-download-href=\"https://forum.typst.app/uploads/default/d8454bf19369b74b63c35353b045f1c53011cdf4\" title=\"guianormalizacaotrabalhosacademicos-17.05.2022-sumario\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/d/d8454bf19369b74b63c35353b045f1c53011cdf4_2_353x500.png\" alt=\"guianormalizacaotrabalhosacademicos-17.05.2022-sumario\" data-base62-sha1=\"uRdBgiNythi1qNVJObdRmw9ebzK\" width=\"353\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/d/d8454bf19369b74b63c35353b045f1c53011cdf4_2_353x500.png, https://forum.typst.app/uploads/default/optimized/2X/d/d8454bf19369b74b63c35353b045f1c53011cdf4_2_529x750.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/d/d8454bf19369b74b63c35353b045f1c53011cdf4_2_706x1000.png 2x\" data-dominant-color=\"F9F8F8\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">guianormalizacaotrabalhosacademicos-17.05.2022-sumario</span><span class=\"informations\">793×1121 80.1 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>For the columnar layout I figured I have to use a custom <code>show outline</code> rule, but from there I didn’t find a way yet to get the data for the headings. I know I could query for them, but first I wanted to ask you if you know an easier way to get that info.</p>\n<p>Using <code> show outline.entry</code> does not seem to cut it because I can’t guarantee the same-width rule for the numbering columns.</p>\n<p>How could I solve this laying-out problem? Thank you in advance.</p>",
      "raw": "My university has a strict guide of style and layout for academic documents. I'm making a template for it and one of the styles I could not yet reproduce is the one for the outline.\n\nThe rules state that (in summary):\n\n- Each heading level has to reflect the corresponding styling from the text.\n- The numbering and page numbers have to be laid out in columns (so that they occupy the same width).\n- The filling has to start and end in the same line as the last letter of each title.\n- Front matter headings must not be present. Back matter headings must not display a numbering.\n\nHere is the sample they provide from their style guide:\n\n![guianormalizacaotrabalhosacademicos-17.05.2022-sumario|353x500](upload://uRdBgiNythi1qNVJObdRmw9ebzK.png)\n\nFor the columnar layout I figured I have to use a custom `show outline` rule, but from there I didn't find a way yet to get the data for the headings. I know I could query for them, but first I wanted to ask you if you know an easier way to get that info.\n\nUsing ` show outline.entry` does not seem to cut it because I can't guarantee the same-width rule for the numbering columns.\n\nHow could I solve this laying-out problem? Thank you in advance.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 56,
      "score": 756.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 684
    },
    {
      "id": 4817,
      "post_number": 2,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-10-29T21:19:19.640Z",
      "updated_at": "2025-03-13T18:13:44.340Z",
      "cooked": "<blockquote>\n<p><img src=\"https://forum.typst.app/images/emoji/apple/warning.png?v=12\" title=\":warning:\" class=\"emoji\" alt=\":warning:\" loading=\"lazy\" width=\"20\" height=\"20\"> <em>As of Typst 0.13, the following answer may be outdated. Feel free to aks in this thread for an updated answer.</em></p>\n</blockquote>\n<hr>\n<p>There are likely many different ways to achieve something like that.</p>\n<p>One option would be to use a show rule on <code>outline.entry</code> like you suggested, and using a state to keep track of the widths for the number and page columns. The downside here is that you would need to use different states if you have multiple outlines (e.g. for a list of figures), or else they would all have the same column widths. This is of course possible by using counters to count the outlines and then using the corresponding counter value in the name of the state, but it would still introduce quite a bit of complexity.</p>\n<details>\n<summary>\nCode Example</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let outline-state = state(\"outline\", (number-width: 0pt, page-width: 0pt))\n#show outline.entry: it =&gt; context {\n  let body = if it.element.func() == heading { it.element.body }\n             else { it.element.caption.body }\n             \n  let number = if it.element.numbering != none {\n    let counter = if it.element.has(\"counter\") { it.element.counter }\n                  else { counter(heading) }\n    numbering(\n      it.element.numbering,\n      ..counter.at(it.element.location())\n    )\n  }\n\n  let page-numbering = it.element.location().page-numbering()\n  if page-numbering == none { page-numbering = \"1\" }\n  let page = numbering(\n    page-numbering,\n    ..counter(page).at(it.element.location())\n  )\n\n  // Update state with current number/page widths.\n  let number-width = measure(number).width\n  let page-width = measure(page).width\n  outline-state.update(s =&gt; (\n    number-width: calc.max(number-width, s.number-width),\n    page-width: calc.max(page-width, s.page-width)\n  ))\n\n  // Get final width values and construct outline entry.\n  let (number-width, page-width) = outline-state.final()\n  box(grid(\n    column-gutter: 0.5em,\n    columns: (number-width, 1fr, page-width),\n    align: (start, start, end + bottom),\n    number, body + [ ] + box(width: 1fr, it.fill), page\n  ))\n}\n</code></pre>\n</details>\n<p>Another shorter option would be to use a show rule on <code>outline</code>. There, you can then query the elements manually and directly lay them out in a grid with three columns. The downside here is that you can’t nicely reconstruct the automatically translated outline title.</p>\n<details>\n<summary>\nCode Example</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show outline: it =&gt; {\n  let elements = query(it.target)\n  let has-number = elements.any(el =&gt; el.numbering != none)\n\n  // Can't use the automatically translated title here.\n  heading(if it.title == auto [ Contents ] else { it.title })\n  \n  grid(\n    column-gutter: 0.5em,\n    align: (start, start, end + bottom),\n    row-gutter: par.leading,\n    columns: (auto, 1fr, auto),\n    ..elements.map(el =&gt; {\n      let body = if el.func() == heading { el.body } else { el.caption.body }\n      \n      let num = if el.numbering != none {\n        let counter = if el.has(\"counter\") { el.counter } else { counter(heading) }\n        numbering(el.numbering, ..counter.at(el.location()))\n      }\n\n      let page-numbering = el.location().page-numbering()\n      if page-numbering == none { page-numbering = \"1\" }\n      let page = numbering(page-numbering, ..counter(page).at(el.location()))\n\n      (num, body + [ ] + box(width: 1fr, it.fill), page)\n    }).flatten()\n  )\n}\n</code></pre>\n</details>",
      "raw": "> :warning: _As of Typst 0.13, the following answer may be outdated. Feel free to aks in this thread for an updated answer._\n\n---\n\nThere are likely many different ways to achieve something like that.\n\nOne option would be to use a show rule on `outline.entry` like you suggested, and using a state to keep track of the widths for the number and page columns. The downside here is that you would need to use different states if you have multiple outlines (e.g. for a list of figures), or else they would all have the same column widths. This is of course possible by using counters to count the outlines and then using the corresponding counter value in the name of the state, but it would still introduce quite a bit of complexity.\n\n[details=\"Code Example\"]\n```typ\n#let outline-state = state(\"outline\", (number-width: 0pt, page-width: 0pt))\n#show outline.entry: it => context {\n  let body = if it.element.func() == heading { it.element.body }\n             else { it.element.caption.body }\n             \n  let number = if it.element.numbering != none {\n    let counter = if it.element.has(\"counter\") { it.element.counter }\n                  else { counter(heading) }\n    numbering(\n      it.element.numbering,\n      ..counter.at(it.element.location())\n    )\n  }\n\n  let page-numbering = it.element.location().page-numbering()\n  if page-numbering == none { page-numbering = \"1\" }\n  let page = numbering(\n    page-numbering,\n    ..counter(page).at(it.element.location())\n  )\n\n  // Update state with current number/page widths.\n  let number-width = measure(number).width\n  let page-width = measure(page).width\n  outline-state.update(s => (\n    number-width: calc.max(number-width, s.number-width),\n    page-width: calc.max(page-width, s.page-width)\n  ))\n\n  // Get final width values and construct outline entry.\n  let (number-width, page-width) = outline-state.final()\n  box(grid(\n    column-gutter: 0.5em,\n    columns: (number-width, 1fr, page-width),\n    align: (start, start, end + bottom),\n    number, body + [ ] + box(width: 1fr, it.fill), page\n  ))\n}\n```\n[/details]\n\nAnother shorter option would be to use a show rule on `outline`. There, you can then query the elements manually and directly lay them out in a grid with three columns. The downside here is that you can't nicely reconstruct the automatically translated outline title.\n\n[details=\"Code Example\"]\n```typ\n#show outline: it => {\n  let elements = query(it.target)\n  let has-number = elements.any(el => el.numbering != none)\n\n  // Can't use the automatically translated title here.\n  heading(if it.title == auto [ Contents ] else { it.title })\n  \n  grid(\n    column-gutter: 0.5em,\n    align: (start, start, end + bottom),\n    row-gutter: par.leading,\n    columns: (auto, 1fr, auto),\n    ..elements.map(el => {\n      let body = if el.func() == heading { el.body } else { el.caption.body }\n      \n      let num = if el.numbering != none {\n        let counter = if el.has(\"counter\") { el.counter } else { counter(heading) }\n        numbering(el.numbering, ..counter.at(el.location()))\n      }\n\n      let page-numbering = el.location().page-numbering()\n      if page-numbering == none { page-numbering = \"1\" }\n      let page = numbering(page-numbering, ..counter(page).at(el.location()))\n\n      (num, body + [ ] + box(width: 1fr, it.fill), page)\n    }).flatten()\n  )\n}\n```\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 46,
      "score": 64.2,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 4875,
      "post_number": 3,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-10-31T04:42:29.162Z",
      "updated_at": "2024-10-31T04:42:29.162Z",
      "cooked": "<p>Hey <a class=\"mention\" href=\"/u/arthurararuna\">@ArthurAraruna</a>, welcome to the forum! I’ve updated your post title to better fit our guidelines for question posts: <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a></p>\n<p>Make sure your post title is a question you’d ask to a friend about Typst. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hey @ArthurAraruna, welcome to the forum! I've updated your post title to better fit our guidelines for question posts: https://forum.typst.app/t/how-to-post-in-the-questions-category/11\n\nMake sure your post title is a question you'd ask to a friend about Typst. :wink:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 41,
      "score": 48.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 9361,
      "post_number": 4,
      "username": "Jonathan",
      "name": "Jonathan",
      "created_at": "2025-03-04T12:12:24.286Z",
      "updated_at": "2025-03-04T12:12:24.286Z",
      "cooked": "<p>How can I add clickable references? I want to klick add the text “Abbilung 1” and then the document should automatically scroll to the figure.</p>",
      "raw": "How can I add clickable references? I want to klick add the text \"Abbilung 1\" and then the document should automatically scroll to the figure.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 24.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1196
    },
    {
      "id": 9364,
      "post_number": 5,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-03-04T12:46:12.577Z",
      "updated_at": "2025-03-04T12:46:12.577Z",
      "cooked": "<p>You can wrap the entry (or the parts of the entry) with a link to the element’s location, e.g.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show outline.entry: it =&gt; {\n  ...\n  link(it.element.location(), box(..))\n}\n</code></pre>\n<p>Note though, that my post above is likely out of date as outlines were completely overhauled in Typst v0.13.</p>",
      "raw": "You can wrap the entry (or the parts of the entry) with a link to the element's location, e.g.\n```typ\n#show outline.entry: it => {\n  ...\n  link(it.element.location(), box(..))\n}\n```\nNote though, that my post above is likely out of date as outlines were completely overhauled in Typst v0.13.",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 22,
      "score": 19.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    }
  ],
  "scraped_at": "2025-06-10T09:55:47.912222"
}