{
  "topic_metadata": {
    "id": 1695,
    "title": "Why do I receive an \"Unexpected argument\" error in anonymous function creater function?",
    "slug": "why-do-i-receive-an-unexpected-argument-error-in-anonymous-function-creater-function",
    "posts_count": 9,
    "created_at": "2024-11-12T20:33:21.554Z",
    "last_posted_at": "2024-11-15T05:27:04.388Z",
    "views": 409,
    "like_count": 1,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 8,
    "accepted_answer_username": "Xodarap",
    "tags": [
      "scripting",
      "numbering"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 1271
  },
  "posts": [
    {
      "id": 5556,
      "post_number": 1,
      "username": "Xodarap",
      "name": "Xodarap",
      "created_at": "2024-11-12T20:33:21.820Z",
      "updated_at": "2024-11-12T21:35:08.474Z",
      "cooked": "<p>I want to create my own counter with different levels. Sadly I’m struggling with updating the value. Now I just get the error message: “unexpected argument”</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let template(\n  exercise-heading-prefix: \"Exercise\",\n  exercise-heading-numbering-format: \"1\",\n  subexercise-heading-prefix: \"\",\n  subexercise-heading-numbering-format: \"a)\",\n  subsubexercise-heading-prefix: \"\",\n  subsubexercise-heading-numbering-format: \"(i)\",\n) = {\n  // custom exercise headings\n  let counter-exercise = counter(\"counter-exercise\")\n\n  let counter_incr(i) = a =&gt; {\n    // to array\n    if type(a) == int { a = (a,) }\n    assert(type(a) == array, message: \"counter update got unexpected type\")\n\n    // a = a.slice(0, i)\n    // a.at(-1) += 1\n\n    while a.len() &lt; 3 {\n      a.push(0)\n    }\n    a.at(i - 1) += 1\n    for idx in range(i, 3) {\n      a.at(idx) = 0\n    }\n\n    return a\n  }\n\n  let base_exercise_heading(prefix, num-format, level, content) = {\n    let w = (\"medium\", \"regular\", \"regular\").at(level - 1)\n    let fontsize = 16pt - 2pt * (level - 1)\n    let fup = counter_incr(level)\n    context counter-exercise.update(fup)\n    text(size: fontsize, weight: w)[\n      #prefix\n      #context {\n        counter-exercise.display(num-format)\n      }\n      #if content != [] [ \\- #content ]\n    ]\n  }\n\n  let exercise(prefix: none, num-format: none, content) = {\n    let level = 1\n    if prefix == none { prefix = exercise-heading-prefix }\n    if num-format == none { num-format = exercise-heading-numbering-format }\n    base_exercise_heading(prefix, num-format, level, content)\n  }\n\n  let subexercise(prefix: none, num-format: none, content) = {\n    let level = 2\n    if prefix == none { prefix = subexercise-heading-prefix }\n    if num-format == none { num-format = subexercise-heading-numbering-format }\n    base_exercise_heading(prefix, num-format, level, content)\n  }\n\n  return (\n    \"exercise\": exercise,\n    \"subexercise\": subexercise,\n  )\n}\n\n#let (exercise, subexercise) = template()\n\n#set heading(numbering: \"I.\")\n\n= Mandatory Exercises\n\n#exercise[]\n\nHere we go. #lorem(30)\n\n\n#exercise[Binary]\n\n#lorem(50)\n\n#subexercise[]\\\n#lorem(10)\n\n#subexercise[]\\\n#lorem(12)\n\n#exercise[Hexa-decimal]\n\n#lorem(30)\n\n\n= Elective Compulsory Exercises\n\n\n#exercise[Foo]\n\n#lorem(50). That's all. Trivial.\n\n\n#exercise(num-format: \"I\")[Roman]\n\nThat was easy.\n\n#exercise[]\n\n#lorem(20)\n</code></pre>\n<p>EDIT: sry missed to send the error, here is a picture<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/8/8d9f3f3d80d38f169f299bb666b23a934cb153f4.png\" data-download-href=\"https://forum.typst.app/uploads/default/8d9f3f3d80d38f169f299bb666b23a934cb153f4\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/8/8d9f3f3d80d38f169f299bb666b23a934cb153f4_2_690x370.png\" alt=\"image\" data-base62-sha1=\"kcQvwM3A9kYdoPez5cW5RPqlERC\" width=\"690\" height=\"370\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/8/8d9f3f3d80d38f169f299bb666b23a934cb153f4_2_690x370.png, https://forum.typst.app/uploads/default/original/2X/8/8d9f3f3d80d38f169f299bb666b23a934cb153f4.png 1.5x, https://forum.typst.app/uploads/default/original/2X/8/8d9f3f3d80d38f169f299bb666b23a934cb153f4.png 2x\" data-dominant-color=\"311228\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">746×401 30.3 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>I don’t understand why it’s complaining about an unexpected argument but it is actually pointing to the parameter definition of this anonymous function.</p>",
      "raw": "I want to create my own counter with different levels. Sadly I'm struggling with updating the value. Now I just get the error message: \"unexpected argument\"\n\n```typ\n#let template(\n  exercise-heading-prefix: \"Exercise\",\n  exercise-heading-numbering-format: \"1\",\n  subexercise-heading-prefix: \"\",\n  subexercise-heading-numbering-format: \"a)\",\n  subsubexercise-heading-prefix: \"\",\n  subsubexercise-heading-numbering-format: \"(i)\",\n) = {\n  // custom exercise headings\n  let counter-exercise = counter(\"counter-exercise\")\n\n  let counter_incr(i) = a => {\n    // to array\n    if type(a) == int { a = (a,) }\n    assert(type(a) == array, message: \"counter update got unexpected type\")\n\n    // a = a.slice(0, i)\n    // a.at(-1) += 1\n\n    while a.len() < 3 {\n      a.push(0)\n    }\n    a.at(i - 1) += 1\n    for idx in range(i, 3) {\n      a.at(idx) = 0\n    }\n\n    return a\n  }\n\n  let base_exercise_heading(prefix, num-format, level, content) = {\n    let w = (\"medium\", \"regular\", \"regular\").at(level - 1)\n    let fontsize = 16pt - 2pt * (level - 1)\n    let fup = counter_incr(level)\n    context counter-exercise.update(fup)\n    text(size: fontsize, weight: w)[\n      #prefix\n      #context {\n        counter-exercise.display(num-format)\n      }\n      #if content != [] [ \\- #content ]\n    ]\n  }\n\n  let exercise(prefix: none, num-format: none, content) = {\n    let level = 1\n    if prefix == none { prefix = exercise-heading-prefix }\n    if num-format == none { num-format = exercise-heading-numbering-format }\n    base_exercise_heading(prefix, num-format, level, content)\n  }\n\n  let subexercise(prefix: none, num-format: none, content) = {\n    let level = 2\n    if prefix == none { prefix = subexercise-heading-prefix }\n    if num-format == none { num-format = subexercise-heading-numbering-format }\n    base_exercise_heading(prefix, num-format, level, content)\n  }\n\n  return (\n    \"exercise\": exercise,\n    \"subexercise\": subexercise,\n  )\n}\n\n#let (exercise, subexercise) = template()\n\n#set heading(numbering: \"I.\")\n\n= Mandatory Exercises\n\n#exercise[]\n\nHere we go. #lorem(30)\n\n\n#exercise[Binary]\n\n#lorem(50)\n\n#subexercise[]\\\n#lorem(10)\n\n#subexercise[]\\\n#lorem(12)\n\n#exercise[Hexa-decimal]\n\n#lorem(30)\n\n\n= Elective Compulsory Exercises\n\n\n#exercise[Foo]\n\n#lorem(50). That's all. Trivial.\n\n\n#exercise(num-format: \"I\")[Roman]\n\nThat was easy.\n\n#exercise[]\n\n#lorem(20)\n```\n\nEDIT: sry missed to send the error, here is a picture\n![image|690x370](upload://kcQvwM3A9kYdoPez5cW5RPqlERC.png)\n\nI don't understand why it's complaining about an unexpected argument but it is actually pointing to the parameter definition of this anonymous function.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 49,
      "score": 1764.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 797
    },
    {
      "id": 5559,
      "post_number": 2,
      "username": "Xodarap",
      "name": "Xodarap",
      "created_at": "2024-11-12T20:47:56.947Z",
      "updated_at": "2024-11-12T20:47:56.947Z",
      "cooked": "<p>Oh, I think I got it. the <code>counter.update()</code> function calls my anonymous function with the current counter value with each number a separate argument.</p>\n<p>At this point I should probably write <code>(..a) =&gt; ...</code>.</p>\n<p>As a bonus: Is this an acceptable way to implement a custom multilevel counter? Or am I missing a much more convenient way?</p>",
      "raw": "Oh, I think I got it. the `counter.update()` function calls my anonymous function with the current counter value with each number a separate argument.\n\nAt this point I should probably write `(..a) => ...`.\n\n\n\nAs a bonus: Is this an acceptable way to implement a custom multilevel counter? Or am I missing a much more convenient way?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 42,
      "score": 8.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 797
    },
    {
      "id": 5560,
      "post_number": 3,
      "username": "Xodarap",
      "name": "Xodarap",
      "created_at": "2024-11-12T21:04:05.584Z",
      "updated_at": "2024-11-12T21:15:40.240Z",
      "cooked": "<p>This here is a working solution:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#{\n  let counter-exercise = counter(\"counter-exercise\")\n  let counter_incr(i) = (..a) =&gt; {\n    a = a.pos()\n    while a.len() &lt; 3 { a.push(0) }\n    a.at(i - 1) += 1\n    for idx in range(i, 3) { a.at(idx) = 0 }\n    return a\n  }\n  let base_exercise_heading(prefix, num-format, level, content) = {\n    let w = (\"medium\", \"regular\", \"regular\").at(level - 1)\n    let fontsize = 16pt - 2pt * (level - 1)\n    context {\n      counter-exercise.update(counter_incr(level))\n      let val = counter-exercise.get().at(level - 1) + 1\n      text(size: fontsize, weight: w)[\n        #prefix\n        #numbering(num-format, val)\n        #if content != [] [ \\- #content ]\n      ]\n    }\n  }\n}\n</code></pre>\n<p>I’m fine with this for now…</p>\n<p>However I still wonder:<br>\nIs that really the way to do it? Seems a bit ugly to me. I can well imagine that I have fabricated something here that is actually much simpler.</p>\n<p>Would really appreciate your thoughts ;)</p>",
      "raw": "This here is a working solution:\n```typ\n#{\n  let counter-exercise = counter(\"counter-exercise\")\n  let counter_incr(i) = (..a) => {\n    a = a.pos()\n    while a.len() < 3 { a.push(0) }\n    a.at(i - 1) += 1\n    for idx in range(i, 3) { a.at(idx) = 0 }\n    return a\n  }\n  let base_exercise_heading(prefix, num-format, level, content) = {\n    let w = (\"medium\", \"regular\", \"regular\").at(level - 1)\n    let fontsize = 16pt - 2pt * (level - 1)\n    context {\n      counter-exercise.update(counter_incr(level))\n      let val = counter-exercise.get().at(level - 1) + 1\n      text(size: fontsize, weight: w)[\n        #prefix\n        #numbering(num-format, val)\n        #if content != [] [ \\- #content ]\n      ]\n    }\n  }\n}\n```\n\nI'm fine with this for now...\n\nHowever I still wonder:\nIs that really the way to do it? Seems a bit ugly to me. I can well imagine that I have fabricated something here that is actually much simpler.\n\nWould really appreciate your thoughts ;)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 43,
      "score": 23.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 797
    },
    {
      "id": 5568,
      "post_number": 4,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-11-12T21:37:57.850Z",
      "updated_at": "2024-11-12T21:37:57.850Z",
      "cooked": "<p>Hey <a class=\"mention\" href=\"/u/xodarap\">@Xodarap</a>, welcome to the forum! I’ve updated your post title in accordance with our question post guidelines: <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a></p>\n<p>Make sure your title is a question you’d ask to a friend about Typst. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hey @Xodarap, welcome to the forum! I’ve updated your post title in accordance with our question post guidelines: https://forum.typst.app/t/how-to-post-in-the-questions-category/11\n\nMake sure your title is a question you’d ask to a friend about Typst. :wink:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 36,
      "score": 42.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 5569,
      "post_number": 5,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-11-12T21:39:38.156Z",
      "updated_at": "2024-11-12T21:39:38.156Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Xodarap\" data-post=\"3\" data-topic=\"1695\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/x/D58100/48.png\" class=\"avatar\"> Xodarap:</div>\n<blockquote>\n<p>Is that really the way to do it? Seems a bit ugly to me. I can well imagine that I have fabricated something here that is actually much simpler</p>\n</blockquote>\n</aside>\n<p>I believe you can replace <code>counter-exercise.update(counter_incr(level))</code> by <code>counter-exercise.step(level: level)</code>; see docs here: <a href=\"https://typst.app/docs/reference/introspection/counter/#definitions-step\" class=\"inline-onebox\">Counter Type – Typst Documentation</a></p>",
      "raw": "[quote=\"Xodarap, post:3, topic:1695\"]\nIs that really the way to do it? Seems a bit ugly to me. I can well imagine that I have fabricated something here that is actually much simpler\n[/quote]\n\nI believe you can replace `counter-exercise.update(counter_incr(level))` by `counter-exercise.step(level: level)`; see docs here: https://typst.app/docs/reference/introspection/counter/#definitions-step",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 36,
      "score": 7.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 5571,
      "post_number": 6,
      "username": "Xodarap",
      "name": "Xodarap",
      "created_at": "2024-11-13T00:04:35.496Z",
      "updated_at": "2024-11-13T00:14:23.116Z",
      "cooked": "<p>Thank you for your answer.</p>\n<p>Yes, it seems that step with the level parameter behaves like that. Unfortunately it doesn’t state this behavior in the documentation. This is why i thought that complicated about this in the first place. There is definitely  room for improvement.</p>\n<p>There is still a problem: the step-update of only takes affect right after the surrounding context environment. One possible workaround would be to split the function into two separate context blocks. But is that the supposed design?</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#{\n  // custom exercise headings\n  let counter-exercise = counter(\"counter-exercise\")\n\n  let base_exercise_heading(prefix, num-format, level, content) = {\n    let w = if level == 1 { \"medium\" } else { \"regular\" }\n    let fontsize = 16pt - 2pt * (level - 1)\n    context counter-exercise.step(level: level )\n    context text(size: fontsize, weight: w)[\n      #prefix\n      #numbering(num-format, counter-exercise.get().at(level - 1))\n      #if content != [] [ \\- #content ]\n    ]\n  }\n}\n</code></pre>\n<p>This code does the trick. But there are still 2 <code>context</code> expressions.</p>",
      "raw": "Thank you for your answer.\n\nYes, it seems that step with the level parameter behaves like that. Unfortunately it doesn't state this behavior in the documentation. This is why i thought that complicated about this in the first place. There is definitely  room for improvement.\n\nThere is still a problem: the step-update of only takes affect right after the surrounding context environment. One possible workaround would be to split the function into two separate context blocks. But is that the supposed design?\n\n```typ\n#{\n  // custom exercise headings\n  let counter-exercise = counter(\"counter-exercise\")\n\n  let base_exercise_heading(prefix, num-format, level, content) = {\n    let w = if level == 1 { \"medium\" } else { \"regular\" }\n    let fontsize = 16pt - 2pt * (level - 1)\n    context counter-exercise.step(level: level )\n    context text(size: fontsize, weight: w)[\n      #prefix\n      #numbering(num-format, counter-exercise.get().at(level - 1))\n      #if content != [] [ \\- #content ]\n    ]\n  }\n}\n```\nThis code does the trick. But there are still 2 `context` expressions.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 33,
      "score": 31.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 797
    },
    {
      "id": 5591,
      "post_number": 7,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-11-13T16:54:27.221Z",
      "updated_at": "2024-11-13T16:54:27.221Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Xodarap\" data-post=\"6\" data-topic=\"1695\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/x/D58100/48.png\" class=\"avatar\"> Xodarap:</div>\n<blockquote>\n<p>There is still a problem: the step-update of only takes affect right after the surrounding context environment. One possible workaround would be to split the function into two separate context blocks. But is that the supposed design?</p>\n</blockquote>\n</aside>\n<p>You can remove the first <code>context</code>; <code>.step()</code> doesn’t require context. But yes, this is intended. The <code>.step()</code> function simply inserts into the document a command that says “from here onwards in the document, any attempt to read the counter will see its value increased by 1.” Now, what <code>context</code> does is: it creates an element which must be placed into the document. That element is responsible for running the code you wrote inside the context block using the document introspection information made available to it. In particular, when you write <code>here()</code> inside the context block, you will always get the same location: the location of that element. Also, when you get counter values by writing <code>.get()</code>, that is equivalent to <code>.at(here())</code>, so you will always be getting the counter value at the location of that element. Therefore, when you step the counter inside a context block, the updated counter value isn’t visible inside that same context block because you’re always using the location at the start of it. The only way to react to the updated value is to begin the context block after the step.</p>",
      "raw": "[quote=\"Xodarap, post:6, topic:1695\"]\nThere is still a problem: the step-update of only takes affect right after the surrounding context environment. One possible workaround would be to split the function into two separate context blocks. But is that the supposed design?\n[/quote]\n\nYou can remove the first `context`; `.step()` doesn't require context. But yes, this is intended. The `.step()` function simply inserts into the document a command that says \"from here onwards in the document, any attempt to read the counter will see its value increased by 1.\" Now, what `context` does is: it creates an element which must be placed into the document. That element is responsible for running the code you wrote inside the context block using the document introspection information made available to it. In particular, when you write `here()` inside the context block, you will always get the same location: the location of that element. Also, when you get counter values by writing `.get()`, that is equivalent to `.at(here())`, so you will always be getting the counter value at the location of that element. Therefore, when you step the counter inside a context block, the updated counter value isn't visible inside that same context block because you're always using the location at the start of it. The only way to react to the updated value is to begin the context block after the step.",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 29,
      "score": 20.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 5656,
      "post_number": 8,
      "username": "Xodarap",
      "name": "Xodarap",
      "created_at": "2024-11-15T02:50:29.657Z",
      "updated_at": "2024-11-15T02:50:29.657Z",
      "cooked": "<p>Thank you for the explanation <a class=\"mention\" href=\"/u/pgbiel\">@PgBiel</a> .</p>\n<p>As a solution to this Question:<br>\nThe anonymous function I defined is later on called with potentially several integers by <code>counter-exercise.update()</code>. That means that the number of arguments ist variable and it is not an array with variable length. Therefore it is best to use an argument sink like <code>(..a) =&gt; {&lt;impl&gt;}</code>.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let counter_incr(i) = (..a) =&gt; {\n    a = a.pos()\n    while a.len() &lt; 3 { a.push(0) }\n    a.at(i - 1) += 1\n    for idx in range(i, 3) { a.at(idx) = 0 }\n    return a\n}\n</code></pre>\n<hr>\n<p>That is however only the original question.With that being fixed, I discovered (with the help of <a class=\"mention\" href=\"/u/pgbiel\">@PgBiel</a>) that my implementation was overly complicated and the logic I intended with my anonymous functions for different levels is all build in as a sane default in the <code>counter.step()</code> function. (I still think this could be more clear in the documentation). With this knowledge the <code>base_exercise_heading()</code> function can be simplified like this. (This also takes care of some other bugs I didn’t realize before, because I didn’t understand <code>context</code>. Now I do :))</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let base_exercise_heading(prefix, num-format, level, content) = {\n  let w = if level == 1 { \"medium\" } else { \"regular\" }\n  let fontsize = 16pt - 2pt * (level - 1)\n  counter-exercise.step(level: level)\n  context text(size: fontsize, weight: w)[\n    #prefix\n    #numbering(num-format, counter-exercise.get().at(level - 1))\n    #if content != [] [ \\- #content ]\n  ]\n}\n</code></pre>\n<p>That means <code>counter_incr()</code> can be dropped completely.</p>",
      "raw": "Thank you for the explanation @PgBiel .\n\nAs a solution to this Question:\nThe anonymous function I defined is later on called with potentially several integers by `counter-exercise.update()`. That means that the number of arguments ist variable and it is not an array with variable length. Therefore it is best to use an argument sink like `(..a) => {<impl>}`.\n\n```typ\n#let counter_incr(i) = (..a) => {\n    a = a.pos()\n    while a.len() < 3 { a.push(0) }\n    a.at(i - 1) += 1\n    for idx in range(i, 3) { a.at(idx) = 0 }\n    return a\n}\n```\n----\n\nThat is however only the original question.With that being fixed, I discovered (with the help of @PgBiel) that my implementation was overly complicated and the logic I intended with my anonymous functions for different levels is all build in as a sane default in the `counter.step()` function. (I still think this could be more clear in the documentation). With this knowledge the `base_exercise_heading()` function can be simplified like this. (This also takes care of some other bugs I didn't realize before, because I didn't understand `context`. Now I do :))\n\n```typ\n#let base_exercise_heading(prefix, num-format, level, content) = {\n  let w = if level == 1 { \"medium\" } else { \"regular\" }\n  let fontsize = 16pt - 2pt * (level - 1)\n  counter-exercise.step(level: level)\n  context text(size: fontsize, weight: w)[\n    #prefix\n    #numbering(num-format, counter-exercise.get().at(level - 1))\n    #if content != [] [ \\- #content ]\n  ]\n}\n```\nThat means `counter_incr()` can be dropped completely.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 26,
      "score": 145.0,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 797
    },
    {
      "id": 5657,
      "post_number": 9,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-11-15T05:27:04.388Z",
      "updated_at": "2024-11-15T05:27:04.388Z",
      "cooked": "<p>Feel free to mark your post as a solution <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Feel free to mark your post as a solution :slight_smile:",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 4.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    }
  ],
  "scraped_at": "2025-06-10T09:55:01.911662"
}