{
  "topic_metadata": {
    "id": 824,
    "title": "How to split a list of calendar entries by month?",
    "slug": "how-to-split-a-list-of-calendar-entries-by-month",
    "posts_count": 5,
    "created_at": "2024-09-30T22:16:57.190Z",
    "last_posted_at": "2024-10-01T22:29:03.265Z",
    "views": 138,
    "like_count": 1,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "sijo",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 1102
  },
  "posts": [
    {
      "id": 3051,
      "post_number": 1,
      "username": "baptiste",
      "name": "baptiste",
      "created_at": "2024-09-30T22:16:57.294Z",
      "updated_at": "2024-10-01T00:54:54.510Z",
      "cooked": "<p>I’m thinking of formatting a yearly calendar of outreach events, starting with a Yaml list similar to this:</p>\n<pre><code class=\"lang-auto\">\"Oolong Day\":\n  Date: 2024-08-20\n  Lead: baptiste \n  Purpose: Sipping\n\n\"Steep learning curve\":\n  Date: 2024-08-28\n  Lead: Tea master \n  Purpose: Engagement\n\n\"Gong fu cha vs instant powder\":\n  Date: 2024-09-04\n  Lead: All\n  Purpose: Inform\n</code></pre>\n<p>I’ve started with a possible layout here:<br>\n<a href=\"https://typst.app/project/wJzR_45uyD6Fs2hyB0gfJM\"><img src=\"https://forum.typst.app/uploads/default/original/1X/5c2703997fa0f45777cf31a5bebc6fce676df424.png\" alt=\"Screenshot 2024-10-01 at 10.42.08\" data-base62-sha1=\"d9dvTOR7p8eEqj30iGjVs0fY4Ly\" width=\"610\" height=\"500\"></a></p>\n<p>but I’m not sure how to automatically grab the data corresponding to a given month, and insert it in the corresponding grid. Any tips? Ideally I’d end up with a list similar to:</p>\n<pre><code class=\"lang-auto\">(1: (&lt;event 1&gt;, &lt;event 2&gt;, ...),\n2: (&lt;event 1&gt;, &lt;event 2&gt;, ...),\n3: (&lt;event 1&gt;, &lt;event 2&gt;, ...),\n...\n12: (&lt;event 1&gt;, &lt;event 2&gt;, ...),\n)\n</code></pre>\n<p>and I could then just grab the n-th month set of events and insert those in the grid.</p>\n<p>I’ve tried:</p>\n<pre><code class=\"lang-auto\">#let el = yaml(\"dummy-events.yaml\")\n(\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\").map(month =&gt; #el.pairs().filter(it =&gt; it.at(1).Date.slice(5,7) == month))\n</code></pre>\n<p>but for some reason it complains that month isn’t known? (scoping issue within filter I guess)</p>",
      "raw": "I'm thinking of formatting a yearly calendar of outreach events, starting with a Yaml list similar to this:\n\n```\n\"Oolong Day\":\n  Date: 2024-08-20\n  Lead: baptiste \n  Purpose: Sipping\n\n\"Steep learning curve\":\n  Date: 2024-08-28\n  Lead: Tea master \n  Purpose: Engagement\n\n\"Gong fu cha vs instant powder\":\n  Date: 2024-09-04\n  Lead: All\n  Purpose: Inform\n``` \n\nI've started with a possible layout here:\n[![Screenshot 2024-10-01 at 10.42.08|610x500](upload://d9dvTOR7p8eEqj30iGjVs0fY4Ly.png)](https://typst.app/project/wJzR_45uyD6Fs2hyB0gfJM)\n\n\n\nbut I'm not sure how to automatically grab the data corresponding to a given month, and insert it in the corresponding grid. Any tips? Ideally I'd end up with a list similar to:\n\n```\n(1: (<event 1>, <event 2>, ...),\n2: (<event 1>, <event 2>, ...),\n3: (<event 1>, <event 2>, ...),\n...\n12: (<event 1>, <event 2>, ...),\n)\n```\n\nand I could then just grab the n-th month set of events and insert those in the grid.\n\nI've tried:\n\n```\n#let el = yaml(\"dummy-events.yaml\")\n(\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\").map(month => #el.pairs().filter(it => it.at(1).Date.slice(5,7) == month))\n```\nbut for some reason it complains that month isn't known? (scoping issue within filter I guess)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 34,
      "score": 306.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 85
    },
    {
      "id": 3073,
      "post_number": 2,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-01T11:41:53.487Z",
      "updated_at": "2024-10-01T11:41:53.487Z",
      "cooked": "<p>To fix the error you need to put the whole second line in code mode: put a <code>#</code> at the start and remove the <code>#</code> from <code>#el.pair</code>.</p>",
      "raw": "To fix the error you need to put the whole second line in code mode: put a `#` at the start and remove the `#` from `#el.pair`.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 30,
      "score": 26.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 3121,
      "post_number": 3,
      "username": "baptiste",
      "name": "baptiste",
      "created_at": "2024-10-01T18:30:51.266Z",
      "updated_at": "2024-10-01T18:30:51.266Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"baptiste\" data-post=\"1\" data-topic=\"824\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/b/441A5E/48.png\" class=\"avatar\"> baptiste:</div>\n<blockquote>\n<p><code>(\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\").map(month =&gt; #el.pairs().filter(it =&gt; it.at(1).Date.slice(5,7) == month))</code></p>\n</blockquote>\n</aside>\n<p>Thanks! I find this use of <code>#</code> to refer to code mode (but also variables in normal mode) endlessly confusing; somehow I’d made it work by adding a <code>#let variable = ...</code> at the start, which I guess does the same thing as <code>#()...</code>.</p>",
      "raw": "[quote=\"baptiste, post:1, topic:824\"]\n`(\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\").map(month => #el.pairs().filter(it => it.at(1).Date.slice(5,7) == month))`\n[/quote]\n\nThanks! I find this use of `#` to refer to code mode (but also variables in normal mode) endlessly confusing; somehow I'd made it work by adding a `#let variable = ...` at the start, which I guess does the same thing as `#()...`.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 26,
      "score": 10.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 85
    },
    {
      "id": 3127,
      "post_number": 4,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-01T19:24:09.564Z",
      "updated_at": "2024-10-01T19:24:31.280Z",
      "cooked": "<p>Yes exactly: when you start writing it’s always in markup mode. When you write the <code>#</code> character it enters code mode until the end of the command / parentheses / etc.  So <code>#(...)</code> enters code mode until the closing parenthesis, and <code>#let variable = ...</code> enters code mode until the end of the variable definition.</p>",
      "raw": "Yes exactly: when you start writing it's always in markup mode. When you write the `#` character it enters code mode until the end of the command / parentheses / etc.  So `#(...)` enters code mode until the closing parenthesis, and `#let variable = ...` enters code mode until the end of the variable definition.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 5.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 3146,
      "post_number": 5,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-10-01T22:29:03.265Z",
      "updated_at": "2024-10-02T11:35:19.227Z",
      "cooked": "<p>For input, let’s use this (to make reproducible examples):</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// #set page(width: 10cm, height: auto)\n#let yaml-string = \"\n\\\"Oolong Day\\\":\n  Date: 2024-08-20\n  Lead: baptiste\n  Purpose: Sipping\n\n\\\"Steep learning curve\\\":\n  Date: 2024-08-28\n  Lead: Tea master\n  Purpose: Engagement\n\n\\\"Gong fu cha vs instant powder\\\":\n  Date: 2024-09-04\n  Lead: All\n  Purpose: Inform\n\"\n#let dict = yaml.decode(yaml-string)\n#dict\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/4fc4f374385a8fa165ac69041d9b40cef2e5a9a2.png\" alt=\"image\" data-base62-sha1=\"bnFGvUhvxXsdeZyMBghsWroMMIq\" width=\"259\" height=\"258\"></p>\n</details>\n<p>If you want to use 2-char string like you did here:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#(\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\").map(month =&gt; dict.pairs().filter(it =&gt; it.at(1).Date.slice(5,7) == month))\n</code></pre>\n<p>Then you can do something like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let format-month(n) = (\"0\" + str(n)).slice(-2)\n#let months = range(12).map(i =&gt; format-month(i + 1))\n#let belongs-to-month(month) = ((k, v)) =&gt; v.Date.slice(5, 7) == month\n\n// This returns `array` of pairs per event\n// (`array` of `array`/tuple of `str` and `dictionary`).\n#let get-related-events(month) = dict.pairs().filter(belongs-to-month(month))\n#let per-month-events = months.map(get-related-events)\n#per-month-events\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/2d8cbcdd1f480dd4d87defa5fb547f67f1528ba6.png\" data-download-href=\"https://forum.typst.app/uploads/default/2d8cbcdd1f480dd4d87defa5fb547f67f1528ba6\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/2d8cbcdd1f480dd4d87defa5fb547f67f1528ba6_2_237x500.png\" alt=\"image\" data-base62-sha1=\"6uX0XdTSNTHm0nlsT1iUXQEYoqq\" width=\"237\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/2d8cbcdd1f480dd4d87defa5fb547f67f1528ba6_2_237x500.png, https://forum.typst.app/uploads/default/original/1X/2d8cbcdd1f480dd4d87defa5fb547f67f1528ba6.png 1.5x, https://forum.typst.app/uploads/default/original/1X/2d8cbcdd1f480dd4d87defa5fb547f67f1528ba6.png 2x\" data-dominant-color=\"111311\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">295×622 26.1 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>\n<p>This will get you <code>array</code> where each element is <code>array</code> for a given month. Each such element contain events represented by a tuple (array of event name and its data).</p>\n<p>If you want to just group initial events into months without changing types:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let format-month(n) = (\"0\" + str(n)).slice(-2)\n#let belongs-to-month(month) = ((k, v)) =&gt; v.Date.slice(5, 7) == month\n#let pair-to-dict(pair) = { let (k, v) = pair; ((k): v) }\n// This returns `dictionary` per event (`array` of `dictionary`).\n#let get-related-events(month) = {\n  dict\n  .pairs()\n  .filter(belongs-to-month(month))\n  .map(pair-to-dict)\n  .fold((:), (v, acc) =&gt; acc + v)\n  // let d = dict\n  // .pairs()\n  // .filter(belongs-to-month(month))\n  // .map(pair-to-dict)\n  // .join()\n  // if d == none { (:) } else { d }\n}\n#let months = range(12).map(i =&gt; format-month(i + 1))\n#let per-month-events = months.map(get-related-events)\n#per-month-events\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/37b0e2f2738aff304177e0aa916ad9d6b1779d7b.png\" alt=\"image\" data-base62-sha1=\"7WFeMIbMSghFaSIMzFA3GTy4lx9\" width=\"273\" height=\"492\"></p>\n</details>\n<p>Here each month is an element of <code>array</code> which itself is a <code>dictionary</code> containing only necessary events.</p>\n<p>Looking at this:</p>\n<pre><code class=\"lang-plaintext\">(1: (&lt;event 1&gt;, &lt;event 2&gt;, ...),\n2: (&lt;event 1&gt;, &lt;event 2&gt;, ...),\n3: (&lt;event 1&gt;, &lt;event 2&gt;, ...),\n...\n12: (&lt;event 1&gt;, &lt;event 2&gt;, ...),\n)\n</code></pre>\n<p>This looks like a dictionary of type <code>(int, array)</code>. Unfortunately, in Typst, <a href=\"https://typst.app/docs/reference/foundations/dictionary/\"><code>dictionary</code></a> values are indexed by strings only, so you can’t have <code>int</code> keys. But the closest solution will still be:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let format-month(n) = (\"0\" + str(n)).slice(-2)\n#let pair-to-dict(pair) = { let (k, v) = pair; ((k): v) }\n#let belongs-to-month(month) = ((k, v)) =&gt; v.Date.slice(5, 7) == format-month(month)\n// This returns `dictionary` per event (`array` of `dictionary`).\n#let get-related-events(month) = {\n  (str(month): dict\n  .pairs()\n  .filter(belongs-to-month(month))\n  .map(pair-to-dict))\n}\n#let months = range(1, 13)\n#let month-events-dict = months.map(get-related-events).join()\n#month-events-dict\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/50cd7211d674aaab7a77e570e9dff275de8f627b.png\" data-download-href=\"https://forum.typst.app/uploads/default/50cd7211d674aaab7a77e570e9dff275de8f627b\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/50cd7211d674aaab7a77e570e9dff275de8f627b_2_235x500.png\" alt=\"image\" data-base62-sha1=\"bwOmuuvrXtfsLb6ODiaCxStUV8n\" width=\"235\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/50cd7211d674aaab7a77e570e9dff275de8f627b_2_235x500.png, https://forum.typst.app/uploads/default/original/1X/50cd7211d674aaab7a77e570e9dff275de8f627b.png 1.5x, https://forum.typst.app/uploads/default/original/1X/50cd7211d674aaab7a77e570e9dff275de8f627b.png 2x\" data-dominant-color=\"121411\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">281×596 28.3 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>\n<p>But if you want to index by <code>int</code> rather than by <code>str</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let format-month(n) = (\"0\" + str(n)).slice(-2)\n#let pair-to-dict(pair) = { let (k, v) = pair; ((k): v) }\n#let belongs-to-month(month) = ((k, v)) =&gt; v.Date.slice(5, 7) == format-month(month)\n// This returns `array` of `dictionary`-events per month.\n#let get-related-events(month) = {\n  dict\n  .pairs()\n  .filter(belongs-to-month(month))\n  .map(pair-to-dict)\n}\n#let months = range(1, 13)\n#let month-events-dict = months.map(get-related-events)\n#month-events-dict\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/2d40af407499a3ca669b9d5decb90c8ca86feabe.png\" data-download-href=\"https://forum.typst.app/uploads/default/2d40af407499a3ca669b9d5decb90c8ca86feabe\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/2d40af407499a3ca669b9d5decb90c8ca86feabe_2_241x499.png\" alt=\"image\" data-base62-sha1=\"6sk4tGiAWBx5H0CKXZrsVnMzdpQ\" width=\"241\" height=\"499\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/2d40af407499a3ca669b9d5decb90c8ca86feabe_2_241x499.png, https://forum.typst.app/uploads/default/original/1X/2d40af407499a3ca669b9d5decb90c8ca86feabe.png 1.5x, https://forum.typst.app/uploads/default/original/1X/2d40af407499a3ca669b9d5decb90c8ca86feabe.png 2x\" data-dominant-color=\"121311\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">284×588 25.3 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>\n<p>If you prefer to have less expressive/maintainable but much smaller code, here is a MWE:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(width: 10cm, height: auto)\n#let yaml-string = \"\n\\\"Oolong Day\\\":\n  Date: 2024-08-20\n  Lead: baptiste\n  Purpose: Sipping\n\n\\\"Steep learning curve\\\":\n  Date: 2024-08-28\n  Lead: Tea master\n  Purpose: Engagement\n\n\\\"Gong fu cha vs instant powder\\\":\n  Date: 2024-09-04\n  Lead: All\n  Purpose: Inform\n\"\n#let dict = yaml.decode(yaml-string)\n#let month-events-dict = range(1, 13).map(month =&gt;\n  dict\n  .pairs()\n  .filter(\n    ((k, v)) =&gt; v.Date.slice(5, 7) == (\"0\" + str(month)).slice(-2)\n  )\n  .map(\n    ((k, v)) =&gt; ((k): v)\n  )\n)\n#month-events-dict\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/8adfac04a0c53136b5cd4c51651594fb6b9cc8de.png\" data-download-href=\"https://forum.typst.app/uploads/default/8adfac04a0c53136b5cd4c51651594fb6b9cc8de\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/8adfac04a0c53136b5cd4c51651594fb6b9cc8de_2_250x500.png\" alt=\"image\" data-base62-sha1=\"jOx6yUi4kgSwbE1pbzPYX8nW7CK\" width=\"250\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/8adfac04a0c53136b5cd4c51651594fb6b9cc8de_2_250x500.png, https://forum.typst.app/uploads/default/original/1X/8adfac04a0c53136b5cd4c51651594fb6b9cc8de.png 1.5x, https://forum.typst.app/uploads/default/original/1X/8adfac04a0c53136b5cd4c51651594fb6b9cc8de.png 2x\" data-dominant-color=\"111311\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">292×584 25.4 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>\n<p>Ultimately, I think I provided enough examples so you can mix and match these solutions to get <em>yet another</em> output.</p>",
      "raw": "For input, let's use this (to make reproducible examples):\n\n```typ\n// #set page(width: 10cm, height: auto)\n#let yaml-string = \"\n\\\"Oolong Day\\\":\n  Date: 2024-08-20\n  Lead: baptiste\n  Purpose: Sipping\n\n\\\"Steep learning curve\\\":\n  Date: 2024-08-28\n  Lead: Tea master\n  Purpose: Engagement\n\n\\\"Gong fu cha vs instant powder\\\":\n  Date: 2024-09-04\n  Lead: All\n  Purpose: Inform\n\"\n#let dict = yaml.decode(yaml-string)\n#dict\n```\n\n[details=Output]\n![image|259x258](upload://bnFGvUhvxXsdeZyMBghsWroMMIq.png)\n[/details]\n\nIf you want to use 2-char string like you did here:\n\n```typ\n#(\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\").map(month => dict.pairs().filter(it => it.at(1).Date.slice(5,7) == month))\n```\n\nThen you can do something like this:\n\n```typ\n#let format-month(n) = (\"0\" + str(n)).slice(-2)\n#let months = range(12).map(i => format-month(i + 1))\n#let belongs-to-month(month) = ((k, v)) => v.Date.slice(5, 7) == month\n\n// This returns `array` of pairs per event\n// (`array` of `array`/tuple of `str` and `dictionary`).\n#let get-related-events(month) = dict.pairs().filter(belongs-to-month(month))\n#let per-month-events = months.map(get-related-events)\n#per-month-events\n```\n\n[details=Output]\n![image|237x500](upload://6uX0XdTSNTHm0nlsT1iUXQEYoqq.png)\n[/details]\n\nThis will get you `array` where each element is `array` for a given month. Each such element contain events represented by a tuple (array of event name and its data).\n\nIf you want to just group initial events into months without changing types:\n\n```typ\n#let format-month(n) = (\"0\" + str(n)).slice(-2)\n#let belongs-to-month(month) = ((k, v)) => v.Date.slice(5, 7) == month\n#let pair-to-dict(pair) = { let (k, v) = pair; ((k): v) }\n// This returns `dictionary` per event (`array` of `dictionary`).\n#let get-related-events(month) = {\n  dict\n  .pairs()\n  .filter(belongs-to-month(month))\n  .map(pair-to-dict)\n  .fold((:), (v, acc) => acc + v)\n  // let d = dict\n  // .pairs()\n  // .filter(belongs-to-month(month))\n  // .map(pair-to-dict)\n  // .join()\n  // if d == none { (:) } else { d }\n}\n#let months = range(12).map(i => format-month(i + 1))\n#let per-month-events = months.map(get-related-events)\n#per-month-events\n```\n\n[details=Output]\n![image|273x492](upload://7WFeMIbMSghFaSIMzFA3GTy4lx9.png)\n[/details]\n\nHere each month is an element of `array` which itself is a `dictionary` containing only necessary events.\n\nLooking at this:\n\n```plain\n(1: (<event 1>, <event 2>, ...),\n2: (<event 1>, <event 2>, ...),\n3: (<event 1>, <event 2>, ...),\n...\n12: (<event 1>, <event 2>, ...),\n)\n```\n\nThis looks like a dictionary of type `(int, array)`. Unfortunately, in Typst, [`dictionary`](https://typst.app/docs/reference/foundations/dictionary/) values are indexed by strings only, so you can't have `int` keys. But the closest solution will still be:\n\n```typ\n#let format-month(n) = (\"0\" + str(n)).slice(-2)\n#let pair-to-dict(pair) = { let (k, v) = pair; ((k): v) }\n#let belongs-to-month(month) = ((k, v)) => v.Date.slice(5, 7) == format-month(month)\n// This returns `dictionary` per event (`array` of `dictionary`).\n#let get-related-events(month) = {\n  (str(month): dict\n  .pairs()\n  .filter(belongs-to-month(month))\n  .map(pair-to-dict))\n}\n#let months = range(1, 13)\n#let month-events-dict = months.map(get-related-events).join()\n#month-events-dict\n```\n\n[details=Output]\n![image|235x500](upload://bwOmuuvrXtfsLb6ODiaCxStUV8n.png)\n[/details]\n\nBut if you want to index by `int` rather than by `str`:\n\n```typ\n#let format-month(n) = (\"0\" + str(n)).slice(-2)\n#let pair-to-dict(pair) = { let (k, v) = pair; ((k): v) }\n#let belongs-to-month(month) = ((k, v)) => v.Date.slice(5, 7) == format-month(month)\n// This returns `array` of `dictionary`-events per month.\n#let get-related-events(month) = {\n  dict\n  .pairs()\n  .filter(belongs-to-month(month))\n  .map(pair-to-dict)\n}\n#let months = range(1, 13)\n#let month-events-dict = months.map(get-related-events)\n#month-events-dict\n```\n\n[details=Output]\n![image|241x499](upload://6sk4tGiAWBx5H0CKXZrsVnMzdpQ.png)\n[/details]\n\nIf you prefer to have less expressive/maintainable but much smaller code, here is a MWE:\n\n```typ\n#set page(width: 10cm, height: auto)\n#let yaml-string = \"\n\\\"Oolong Day\\\":\n  Date: 2024-08-20\n  Lead: baptiste\n  Purpose: Sipping\n\n\\\"Steep learning curve\\\":\n  Date: 2024-08-28\n  Lead: Tea master\n  Purpose: Engagement\n\n\\\"Gong fu cha vs instant powder\\\":\n  Date: 2024-09-04\n  Lead: All\n  Purpose: Inform\n\"\n#let dict = yaml.decode(yaml-string)\n#let month-events-dict = range(1, 13).map(month =>\n  dict\n  .pairs()\n  .filter(\n    ((k, v)) => v.Date.slice(5, 7) == (\"0\" + str(month)).slice(-2)\n  )\n  .map(\n    ((k, v)) => ((k): v)\n  )\n)\n#month-events-dict\n```\n\n[details=Output]\n![image|250x500](upload://jOx6yUi4kgSwbE1pbzPYX8nW7CK.png)\n[/details]\n\nUltimately, I think I provided enough examples so you can mix and match these solutions to get *yet another* output.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 39.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:57:43.114160"
}