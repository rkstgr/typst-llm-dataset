{
  "topic_metadata": {
    "id": 2669,
    "title": "How can I automatically assign a different color to each heading?",
    "slug": "how-can-i-automatically-assign-a-different-color-to-each-heading",
    "posts_count": 7,
    "created_at": "2025-02-04T18:37:12.046Z",
    "last_posted_at": "2025-02-05T09:03:33.886Z",
    "views": 180,
    "like_count": 4,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 6,
    "accepted_answer_username": "aarnent",
    "tags": [
      "scripting",
      "layout"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 688
  },
  "posts": [
    {
      "id": 8207,
      "post_number": 1,
      "username": "cgruesser",
      "name": "",
      "created_at": "2025-02-04T18:37:12.197Z",
      "updated_at": "2025-02-04T18:44:14.358Z",
      "cooked": "<p>Hey all,<br>\nthis is my first question here and I would appreciate your assistance.</p>\n<p>I’m trying to write a template, where:</p>\n<ol>\n<li>Count all level 1 headings and store the total in a variable called <code>X</code>.</li>\n<li>Sample <code>X</code> different colors from a gradient and store them in an array, <code>A</code>, with <code>X</code> entries.</li>\n<li>Assign each of the <code>X</code> headings one of the entries from array <code>A</code>.</li>\n</ol>\n<p>I’ve tried quite a few approaches, but I seem to be struggling with the last part. It prints each heading <code>X</code> times for each color instead of just once.<br>\nAlso everything has to remain in the <code>context</code>  which is not very elegant.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#set heading(numbering: \"1\")\n\n#context[\n  \n  //get the number of level-one headings\n  #let counter = counter(heading).final().at(0)\n  #counter\n  \n  \n  //get array of ratios\n  #let ratios = ()\n  #for i in range(1, counter+1) {\n    ratios.push(i*(100/counter)*1%)\n  }\n  #ratios\n\n  \n  //generate colors\n  #let grad = gradient.linear(..color.map.rainbow).samples(..ratios)\n  #grad     \n\n  #show heading: it =&gt; for i in range(counter){\n    //if i+1 == counter(heading).at(i){\n      align(center, text(font: \"Poppins\", fill: grad.at(i), it.body))\n    } \n\n]\n\n= one\n= two\n= three\n</code></pre>\n<p>Thank you in advance!</p>",
      "raw": "Hey all,\nthis is my first question here and I would appreciate your assistance.\n\nI'm trying to write a template, where:\n1. Count all level 1 headings and store the total in a variable called `X`.\n2. Sample `X` different colors from a gradient and store them in an array, `A`, with `X` entries.\n3. Assign each of the `X` headings one of the entries from array `A`.\n\nI've tried quite a few approaches, but I seem to be struggling with the last part. It prints each heading `X` times for each color instead of just once.\nAlso everything has to remain in the `context`  which is not very elegant.\n\n```typst\n#set heading(numbering: \"1\")\n\n#context[\n  \n  //get the number of level-one headings\n  #let counter = counter(heading).final().at(0)\n  #counter\n  \n  \n  //get array of ratios\n  #let ratios = ()\n  #for i in range(1, counter+1) {\n    ratios.push(i*(100/counter)*1%)\n  }\n  #ratios\n\n  \n  //generate colors\n  #let grad = gradient.linear(..color.map.rainbow).samples(..ratios)\n  #grad     \n\n  #show heading: it => for i in range(counter){\n    //if i+1 == counter(heading).at(i){\n      align(center, text(font: \"Poppins\", fill: grad.at(i), it.body))\n    } \n\n]\n\n= one\n= two\n= three\n```\n\nThank you in advance!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 34,
      "score": 586.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 402
    },
    {
      "id": 8208,
      "post_number": 2,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-02-04T19:30:56.596Z",
      "updated_at": "2025-02-04T19:30:56.596Z",
      "cooked": "<p>Are you trying to make each heading a different color? if so, the best way would be to use a show rule that applies to headings:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show heading: it =&gt; context [\n  \n  //get the number of level-one headings\n  #let finalcounter = counter(heading).final().at(0)\n  #let currentcounter = counter(heading).at(here()).at(0)\n\n  #let ratio = currentcounter / finalcounter * 100%\n  \n  //generate color\n  #let grad = gradient.linear(..color.map.rainbow).sample(ratio)\n  \n  #align(center, text(font: \"Poppins\", fill: grad, it.body))\n]\n\n= one\n= two\n= three\n</code></pre>\n<p>If instead you are trying to get a sort of outline of all headings at the beginning, you can do that like so</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#context [\n  \n  //get all level-one headings\n  #let allheadings = query(heading.where(level: 1))\n\n  #for (i, h) in allheadings.enumerate() {\n    let ratio = i / allheadings.len() * 100%\n    \n    //generate color\n    let grad = gradient.linear(..color.map.rainbow).sample(ratio)\n    \n    align(center, text(font: \"Poppins\", fill: grad, h.body))\n    \n  }\n]\n\n= one\n= two\n= three\n</code></pre>\n<p>If you are curious about why your code didn’t work, it is because you are doing a for loop for each heading, so each heading gets displayed as the output of the for loop, leaving you with X copies.</p>",
      "raw": "Are you trying to make each heading a different color? if so, the best way would be to use a show rule that applies to headings:\n\n```typst\n#show heading: it => context [\n  \n  //get the number of level-one headings\n  #let finalcounter = counter(heading).final().at(0)\n  #let currentcounter = counter(heading).at(here()).at(0)\n\n  #let ratio = currentcounter / finalcounter * 100%\n  \n  //generate color\n  #let grad = gradient.linear(..color.map.rainbow).sample(ratio)\n  \n  #align(center, text(font: \"Poppins\", fill: grad, it.body))\n]\n\n= one\n= two\n= three\n```\n\nIf instead you are trying to get a sort of outline of all headings at the beginning, you can do that like so\n```typst\n#context [\n  \n  //get all level-one headings\n  #let allheadings = query(heading.where(level: 1))\n\n  #for (i, h) in allheadings.enumerate() {\n    let ratio = i / allheadings.len() * 100%\n    \n    //generate color\n    let grad = gradient.linear(..color.map.rainbow).sample(ratio)\n    \n    align(center, text(font: \"Poppins\", fill: grad, h.body))\n    \n  }\n]\n\n= one\n= two\n= three\n```\n\nIf you are curious about why your code didn't work, it is because you are doing a for loop for each heading, so each heading gets displayed as the output of the for loop, leaving you with X copies.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 31,
      "score": 56.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 501
    },
    {
      "id": 8209,
      "post_number": 3,
      "username": "cgruesser",
      "name": "",
      "created_at": "2025-02-04T19:43:27.105Z",
      "updated_at": "2025-02-04T19:43:27.105Z",
      "cooked": "<p>Oh my gosh, it works! Instead of dealing with multiple values and attempting to apply the show rule to each one individually, you can simply consolidate everything into a single show rule that will be applied to each heading separately. It’s such a clever solution!</p>",
      "raw": "Oh my gosh, it works! Instead of dealing with multiple values and attempting to apply the show rule to each one individually, you can simply consolidate everything into a single show rule that will be applied to each heading separately. It's such a clever solution!",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 26,
      "score": 10.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 402
    },
    {
      "id": 8210,
      "post_number": 4,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-02-04T19:59:47.308Z",
      "updated_at": "2025-02-04T19:59:47.308Z",
      "cooked": "<p>No problem. Though do note that taking the value from the counter can lead to unwanted behavior if it’s manually set in the document:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">= one\n= two\n\n#counter(heading).update(1)\n= three\n</code></pre>\n<details>\n<summary>\nSummary</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/4/4859d1ae581d94bbde49d286b7ca5bdcf4bd40f3.png\" alt=\"image\" data-base62-sha1=\"ak2OuiNCHxYnaWDtUrNdUgSuXp9\" width=\"491\" height=\"178\"></p>\n</details>\n<p>So if this is a problem, you should use queries instead of relying on counters :)</p>",
      "raw": "No problem. Though do note that taking the value from the counter can lead to unwanted behavior if it's manually set in the document:\n\n```typst\n= one\n= two\n\n#counter(heading).update(1)\n= three\n```\n\n\n[details=\"Summary\"]\n![image|491x178](upload://ak2OuiNCHxYnaWDtUrNdUgSuXp9.png)\n[/details]\n\nSo if this is a problem, you should use queries instead of relying on counters :)",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 26,
      "score": 10.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 501
    },
    {
      "id": 8212,
      "post_number": 5,
      "username": "cgruesser",
      "name": "",
      "created_at": "2025-02-04T20:01:24.872Z",
      "updated_at": "2025-02-04T20:01:24.872Z",
      "cooked": "<p>I haven’t looked at queries yet. Would you mind elaborating a bit?</p>",
      "raw": "I haven't looked at queries yet. Would you mind elaborating a bit?",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 10.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 402
    },
    {
      "id": 8216,
      "post_number": 6,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-02-04T20:45:53.538Z",
      "updated_at": "2025-02-04T20:45:53.538Z",
      "cooked": "<p>Sure. All you need to do is replace the lines up to calculating the ratio with</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">  //get all level-one headings\n  #let allheadings = query(heading.where(level: 1))\n\n  #let currentheading = query(heading.where(level: 1).before(here()))\n\n  #let ratio = currentheading.len() / allheadings.len() * 100%\n</code></pre>\n<p>This will calculate the ratio using the number of headings in the document, instead of relying on the counter whose value can be changed arbitrarily</p>",
      "raw": "Sure. All you need to do is replace the lines up to calculating the ratio with\n\n```typst\n  //get all level-one headings\n  #let allheadings = query(heading.where(level: 1))\n\n  #let currentheading = query(heading.where(level: 1).before(here()))\n\n  #let ratio = currentheading.len() / allheadings.len() * 100%\n```\n\nThis will calculate the ratio using the number of headings in the document, instead of relying on the counter whose value can be changed arbitrarily",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 22,
      "score": 129.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 501
    },
    {
      "id": 8227,
      "post_number": 7,
      "username": "cgruesser",
      "name": "",
      "created_at": "2025-02-05T09:03:33.886Z",
      "updated_at": "2025-02-05T09:27:59.377Z",
      "cooked": "<p>I think this is what I searched for in the first place. I will definitely have a look at the documentation. I marked your comment as the best solution. There is also no need to specify the heading numbering like this, which makes the code even cleaner.</p>\n<p>Here is the full code:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show heading: it =&gt; context [\n  \n  //get the number of level-one headings\n  #let allheadings = query(heading.where(level: 1))\n  #let currentheading = query(heading.where(level: 1).before(here()))\n\n  //calculate ratio\n  #let ratio = currentheading.len() / allheadings.len() * 100%\n  \n  //generate color\n  #let grad = gradient.linear(..color.map.rainbow).sample(ratio)\n  \n  #align(center+horizon, text(font: \"Poppins\", fill: grad, it))\n\n]\n\n= one\n= two\n= three\n</code></pre>",
      "raw": "I think this is what I searched for in the first place. I will definitely have a look at the documentation. I marked your comment as the best solution. There is also no need to specify the heading numbering like this, which makes the code even cleaner.\n\nHere is the full code:\n```typst\n#show heading: it => context [\n  \n  //get the number of level-one headings\n  #let allheadings = query(heading.where(level: 1))\n  #let currentheading = query(heading.where(level: 1).before(here()))\n\n  //calculate ratio\n  #let ratio = currentheading.len() / allheadings.len() * 100%\n  \n  //generate color\n  #let grad = gradient.linear(..color.map.rainbow).sample(ratio)\n  \n  #align(center+horizon, text(font: \"Poppins\", fill: grad, it))\n\n]\n\n= one\n= two\n= three\n```",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 20,
      "score": 19.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 402
    }
  ],
  "scraped_at": "2025-06-10T09:52:03.527974"
}