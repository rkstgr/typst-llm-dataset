{
  "topic_metadata": {
    "id": 510,
    "title": "How do I draw parabolas?",
    "slug": "how-do-i-draw-parabolas",
    "posts_count": 11,
    "created_at": "2024-09-20T01:17:17.369Z",
    "last_posted_at": "2024-09-22T13:48:53.418Z",
    "views": 394,
    "like_count": 2,
    "reply_count": 5,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 6,
    "accepted_answer_username": "SillyFreak",
    "tags": [
      "graphics"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 2154
  },
  "posts": [
    {
      "id": 1988,
      "post_number": 1,
      "username": "thelyfsoshort",
      "name": "Jason Dusek",
      "created_at": "2024-09-20T01:17:17.480Z",
      "updated_at": "2024-09-20T16:00:31.540Z",
      "cooked": "<p>I would really like to make a parabola. I am not sure if I have figured it out, yet.</p>\n<p>Something that looks basically right is a <code>path</code> as follows:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = w / 2\n#let c1-y = w / 4\n#let c2-x = w / 2\n#let c2-y = 3 * w / 4\n\n#let parabola = [\n  #path(\n    start,\n    (\n      (apex-x, apex-y),\n      (c1-x - apex-x, c1-y - apex-y),\n      (c2-x - apex-x, c2-y - apex-y),\n    ),\n    end,\n  )\n]\n</code></pre>\n<p>At the end of the document, please find a fuller program that creates the following diagram:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/52b9313db0fcac36df7e034d111e03c93908603f.png\" data-download-href=\"https://forum.typst.app/uploads/default/52b9313db0fcac36df7e034d111e03c93908603f\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/52b9313db0fcac36df7e034d111e03c93908603f_2_499x500.png\" alt=\"image\" data-base62-sha1=\"bNNVn3czcpVIDytJHE1R3YaUZ6T\" width=\"499\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/52b9313db0fcac36df7e034d111e03c93908603f_2_499x500.png, https://forum.typst.app/uploads/default/optimized/1X/52b9313db0fcac36df7e034d111e03c93908603f_2_748x750.png 1.5x, https://forum.typst.app/uploads/default/optimized/1X/52b9313db0fcac36df7e034d111e03c93908603f_2_998x1000.png 2x\" data-dominant-color=\"F5F7F8\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1058×1060 103 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>In blue, we have the control polygon of a quadratic Bezier curve. This is translated to a cubic Bezier curve, the control polygon of which is in green. (In Typst, there is a Bezier curve type – <code>path</code> – which supports only cubic curves.) It certainly does look like a parabola, but the control points that make it look like this don’t make a whole lot of sense to me.</p>\n<p>A parabola can be easily represented with a <em>quadratic</em> Bezier curve (as far as I can tell, the control point is the point on the directrix opposite the focus) and there is a way to translate quadratic Bezier curves to cubic Bezier curves. Per <a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Degree_elevation\" rel=\"noopener nofollow ugc\">“Degree Elevation” on Wikipedia</a>, we learn that “A Bézier curve of degree n can be converted into a Bézier curve of degree n + 1 with the same shape.”.</p>\n<p>According to the formula given by Wikipedia (and other sources), the cubic control points should be:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let c1-x = (2 * control-x / 3) + (start.first() / 3)\n#let c1-y = (2 * control-y / 3) + (start.last() / 3)\n#let c2-x = (2 * control-x / 3) + (end.first() / 3)\n#let c2-y = (2 * control-y / 3) + (end.last() / 3)\n</code></pre>\n<p>However, this results in a lobed curve:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/9577d8298083e779d9132ad2abdd6d13013e0792.png\" data-download-href=\"https://forum.typst.app/uploads/default/9577d8298083e779d9132ad2abdd6d13013e0792\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/9577d8298083e779d9132ad2abdd6d13013e0792_2_499x500.png\" alt=\"image\" data-base62-sha1=\"lkfUkhUxfc8TcmzjYYykXEhteim\" width=\"499\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/9577d8298083e779d9132ad2abdd6d13013e0792_2_499x500.png, https://forum.typst.app/uploads/default/optimized/1X/9577d8298083e779d9132ad2abdd6d13013e0792_2_748x750.png 1.5x, https://forum.typst.app/uploads/default/optimized/1X/9577d8298083e779d9132ad2abdd6d13013e0792_2_998x1000.png 2x\" data-dominant-color=\"F5F7F8\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1054×1056 103 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Now I am just not sure if I really made a parabola or not, since I really just eyeballed it.</p>\n<p>Here is the code for the full diagram:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#set page(paper: \"a4\")\n\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = w / 2\n#let c1-y = w / 4\n#let c2-x = w / 2\n#let c2-y = 3 * w / 4\n// #let c1-x = (2 * control-x / 3) + (start.first() / 3)\n// #let c1-y = (2 * control-y / 3) + (start.last() / 3)\n// #let c2-x = (2 * control-x / 3) + (end.first() / 3)\n// #let c2-y = (2 * control-y / 3) + (end.last() / 3)\n\n#let parabola = [\n  #path(\n    start,\n    (\n      (apex-x, apex-y),\n      (c1-x - apex-x, c1-y - apex-y),\n      (c2-x - apex-x, c2-y - apex-y),\n    ),\n    end,\n    stroke: black + 1mm,\n  )\n]\n\n#let grid = {\n  let steps = 10\n  let step = w / steps\n  let cell = rect(width: step, height: step, stroke: gray + 0.1mm)\n\n  for i in array.range(0, steps) {\n    for j in array.range(0, steps) {\n      place(dx: i * step, dy: j * step, cell)\n    }\n  }\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (control-x, control-y), end,\n            stroke: blue.transparentize(25%) + 1mm)\n  )\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (c1-x, c1-y), (c2-x, c2-y), end,\n            stroke: green.transparentize(50%) + 0.5mm)\n  )\n}\n\n#place(dx: 0mm, dy: 0mm, parabola)\n#place(dx: 0mm, dy: 0mm, grid)\n</code></pre>",
      "raw": "I would really like to make a parabola. I am not sure if I have figured it out, yet.\n\nSomething that looks basically right is a `path` as follows:\n\n```typst\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = w / 2\n#let c1-y = w / 4\n#let c2-x = w / 2\n#let c2-y = 3 * w / 4\n\n#let parabola = [\n  #path(\n    start,\n    (\n      (apex-x, apex-y),\n      (c1-x - apex-x, c1-y - apex-y),\n      (c2-x - apex-x, c2-y - apex-y),\n    ),\n    end,\n  )\n]\n````\n\nAt the end of the document, please find a fuller program that creates the following diagram:\n\n![image|499x500](upload://bNNVn3czcpVIDytJHE1R3YaUZ6T.png)\n\nIn blue, we have the control polygon of a quadratic Bezier curve. This is translated to a cubic Bezier curve, the control polygon of which is in green. (In Typst, there is a Bezier curve type -- `path` -- which supports only cubic curves.) It certainly does look like a parabola, but the control points that make it look like this don't make a whole lot of sense to me.\n\nA parabola can be easily represented with a *quadratic* Bezier curve (as far as I can tell, the control point is the point on the directrix opposite the focus) and there is a way to translate quadratic Bezier curves to cubic Bezier curves. Per [\"Degree Elevation\" on Wikipedia](https://en.wikipedia.org/wiki/Bézier_curve#Degree_elevation), we learn that \"A Bézier curve of degree n can be converted into a Bézier curve of degree n + 1 with the same shape.\".\n\nAccording to the formula given by Wikipedia (and other sources), the cubic control points should be:\n\n```typst\n#let c1-x = (2 * control-x / 3) + (start.first() / 3)\n#let c1-y = (2 * control-y / 3) + (start.last() / 3)\n#let c2-x = (2 * control-x / 3) + (end.first() / 3)\n#let c2-y = (2 * control-y / 3) + (end.last() / 3)\n```\n\nHowever, this results in a lobed curve:\n\n![image|499x500](upload://lkfUkhUxfc8TcmzjYYykXEhteim.png)\n\nNow I am just not sure if I really made a parabola or not, since I really just eyeballed it.\n\nHere is the code for the full diagram:\n\n```typst\n#set page(paper: \"a4\")\n\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = w / 2\n#let c1-y = w / 4\n#let c2-x = w / 2\n#let c2-y = 3 * w / 4\n// #let c1-x = (2 * control-x / 3) + (start.first() / 3)\n// #let c1-y = (2 * control-y / 3) + (start.last() / 3)\n// #let c2-x = (2 * control-x / 3) + (end.first() / 3)\n// #let c2-y = (2 * control-y / 3) + (end.last() / 3)\n\n#let parabola = [\n  #path(\n    start,\n    (\n      (apex-x, apex-y),\n      (c1-x - apex-x, c1-y - apex-y),\n      (c2-x - apex-x, c2-y - apex-y),\n    ),\n    end,\n    stroke: black + 1mm,\n  )\n]\n\n#let grid = {\n  let steps = 10\n  let step = w / steps\n  let cell = rect(width: step, height: step, stroke: gray + 0.1mm)\n\n  for i in array.range(0, steps) {\n    for j in array.range(0, steps) {\n      place(dx: i * step, dy: j * step, cell)\n    }\n  }\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (control-x, control-y), end,\n            stroke: blue.transparentize(25%) + 1mm)\n  )\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (c1-x, c1-y), (c2-x, c2-y), end,\n            stroke: green.transparentize(50%) + 0.5mm)\n  )\n}\n\n#place(dx: 0mm, dy: 0mm, parabola)\n#place(dx: 0mm, dy: 0mm, grid)\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 83,
      "score": 861.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 202
    },
    {
      "id": 1989,
      "post_number": 2,
      "username": "Enivex",
      "name": "Enivex",
      "created_at": "2024-09-20T01:30:41.154Z",
      "updated_at": "2024-09-20T01:30:41.154Z",
      "cooked": "<p>Unless you really want to use path directly, I’d suggest you use Cetz instead. It’s vastly more user friendly</p>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://typst.app/universe/package/cetz/\">\n  <header class=\"source\">\n      <img src=\"https://forum.typst.app/uploads/default/original/1X/098187a593d51c4db99324614e2baeeb1bb355cc.png\" class=\"site-icon\" data-dominant-color=\"3CA8B6\" width=\"32\" height=\"32\">\n\n      <a href=\"https://typst.app/universe/package/cetz/\" target=\"_blank\" rel=\"noopener\">Typst</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/361;\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/db1c18ed802fe6841bee62606931f352da10ed09_2_690x362.png\" class=\"thumbnail\" data-dominant-color=\"7CC2C5\" width=\"690\" height=\"362\"></div>\n\n<h3><a href=\"https://typst.app/universe/package/cetz/\" target=\"_blank\" rel=\"noopener\">cetz – Typst Universe</a></h3>\n\n  <p>Drawing with Typst made easy, providing an API inspired by TikZ and Processing. Includes modules for plotting, charts and tree layout.</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
      "raw": "Unless you really want to use path directly, I'd suggest you use Cetz instead. It's vastly more user friendly\n\nhttps://typst.app/universe/package/cetz/",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 75,
      "score": 60.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 5
    },
    {
      "id": 1992,
      "post_number": 3,
      "username": "thelyfsoshort",
      "name": "Jason Dusek",
      "created_at": "2024-09-20T02:46:48.334Z",
      "updated_at": "2024-09-20T02:46:48.334Z",
      "cooked": "<p>I would really like to understand <code>path</code>.</p>",
      "raw": "I would really like to understand `path`.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 73,
      "score": 34.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 202
    },
    {
      "id": 1996,
      "post_number": 4,
      "username": "Enivex",
      "name": "Enivex",
      "created_at": "2024-09-20T04:01:43.376Z",
      "updated_at": "2024-09-20T04:21:24.056Z",
      "cooked": "<p><a class=\"mention\" href=\"/u/fenjalien\">@fenjalien</a> or <a class=\"mention\" href=\"/u/jwolf\">@jwolf</a> might be the best ones to answer. At one point I did know this, but forgot the details.</p>\n<p>I think it’s mostly just making sure you’re talking about the same control points.</p>",
      "raw": "@fenjalien or @jwolf might be the best ones to answer. At one point I did know this, but forgot the details.\n\nI think it's mostly just making sure you're talking about the same control points.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 71,
      "score": 14.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 5
    },
    {
      "id": 2070,
      "post_number": 5,
      "username": "thelyfsoshort",
      "name": "Jason Dusek",
      "created_at": "2024-09-20T15:13:30.484Z",
      "updated_at": "2024-09-20T15:13:30.484Z",
      "cooked": "<p>Maybe it’s actually two quadratic curves, not cubic at all.</p>",
      "raw": "Maybe it's actually two quadratic curves, not cubic at all.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 62,
      "score": 12.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 202
    },
    {
      "id": 2082,
      "post_number": 6,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-20T19:36:27.404Z",
      "updated_at": "2024-09-22T13:48:26.248Z",
      "cooked": "<p>ok, I figured it out. The docs are maybe a bit hard to parse here… tldr: the first control point of the cubic bezier, which by Wikipedia’s formula results in a quadratic bezier, needs to be specified <em>with the start point</em>. In a Typst path, you specify control points for specific vertices, not for specific curves.</p>\n<p>Let me put some code and an image first:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let weight(a, (xa, ya), b, (xb, yb)) = {\n  (a * xa + b * xb, a * ya + b * yb)\n}\n\n#let dot((x, y), stroke: black) = {\n  place(path(\n    stroke: (thickness: 3pt, paint: stroke, join: \"round\"),\n    closed: true,\n    (x - 1pt, y - 1pt),\n    (x - 1pt, y + 1pt),\n    (x + 1pt, y + 1pt),\n    (x + 1pt, y - 1pt),\n  ))\n}\n\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n#let control = (w, w/2)\n\n#{\n  let c1 = weight(1/3, start, 2/3, control)\n  let c2 = weight(2/3, control, 1/3, end)\n\n  dot(start)\n  dot(c1, stroke: red)\n  dot(control, stroke: blue)\n  dot(c2, stroke: red)\n  dot(end)\n\n  place(path(\n    start,\n    end,\n  ))\n  // (1)\n  place(path(\n    stroke: blue,\n    (\n      start,\n      weight(1, start, -1, control),\n    ),\n    (\n      end,\n      weight(1, control, -1, end),\n    ),\n  ))\n  // (2)\n  place(path(\n    stroke: blue,\n    start,\n    (\n      end,\n      weight(1, control, -1, end),\n    ),\n  ))\n  // (3)\n  place(path(\n    stroke: red,\n    (\n      start,\n      (0mm, 0mm),\n      weight(1, c1, -1, start),\n    ),\n    (\n      end,\n      weight(1, c2, -1, end),\n      (0mm, 0mm),\n    ),\n  ))\n}\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/5fd9cb096a86a5a0a26305d532f7d04d1b60e2ec.png\" data-download-href=\"https://forum.typst.app/uploads/default/5fd9cb096a86a5a0a26305d532f7d04d1b60e2ec\" title=\"bezier\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/5fd9cb096a86a5a0a26305d532f7d04d1b60e2ec_2_375x375.png\" alt=\"bezier\" data-base62-sha1=\"dFVYImNAZ9lYgHL460qtAXAPF24\" width=\"375\" height=\"375\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/5fd9cb096a86a5a0a26305d532f7d04d1b60e2ec_2_375x375.png, https://forum.typst.app/uploads/default/optimized/1X/5fd9cb096a86a5a0a26305d532f7d04d1b60e2ec_2_562x562.png 1.5x, https://forum.typst.app/uploads/default/optimized/1X/5fd9cb096a86a5a0a26305d532f7d04d1b60e2ec_2_750x750.png 2x\" data-dominant-color=\"FCFCFD\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">bezier</span><span class=\"informations\">1252×1252 132 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<hr>\n<p>For (1), let’s look what the <a href=\"https://typst.app/docs/reference/visualize/path/#parameters-vertices\">docs</a> say:</p>\n<blockquote>\n<p>An array of two points, the first being the vertex and the second being the control point. The control point is expressed relative to the vertex and is mirrored to get the second control point. The given control point is the one that affects the curve coming <em>into</em> this vertex (even for the first point). The mirrored control point affects the curve going out of this vertex.</p>\n</blockquote>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">  place(path(\n    stroke: blue,\n    (\n      start,\n      weight(1, start, -1, control),\n    ),\n    (\n      end,\n      weight(1, control, -1, end),\n    ),\n  ))\n</code></pre>\n<p>We have two points with one control point each, and we are drawing a bezier <em>going out of</em> <code>start</code> and <em>going into</em> <code>end</code>. Going into start would be <code>start + (start - control)</code> (remember, relative to start), out is thus <code>start - (start - control) = control</code>. Going into end is <code>end + (control - end) = control</code>.<br>\nSo we end up with a bezier curve with the points <code>(start, control, control, end)</code> - a symmentrical cubic bezier with coinciding control points, great.</p>\n<p>(2) is a bit of a naive attempt:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">  place(path(\n    stroke: blue,\n    start,\n    (\n      end,\n      weight(1, control, -1, end),\n    ),\n  ))\n</code></pre>\n<p>With only a single point, the start control points are just the <code>start</code> point itself. Thus the resulting bezier is <code>(start, start, control, end)</code>. I think that should be asymmetric, although it doesn’t seem like it… maybe I’m still missing something there.</p>\n<p>(3) is what you were after</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">  // (3)\n  place(path(\n    stroke: red,\n    (\n      start,\n      (0mm, 0mm),\n      weight(1, c1, -1, start),\n    ),\n    (\n      end,\n      weight(1, c2, -1, end),\n      (0mm, 0mm),\n    ),\n  ))\n</code></pre>\n<p>Here I used three coordinates per vertex of the path:</p>\n<blockquote>\n<p>An array of three points, the first being the vertex and the next being the control points (control point for curves coming in and out, respectively).</p>\n</blockquote>\n<p>We don’t need the control point going into <code>start</code> or out of <code>end</code> so I set these to the vertices themselves (in relative coordinates). The result is the cubic bezier <code>(start, c1, c2, end)</code>!</p>\n<hr>\n<p>Let’s look at your path again:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let parabola = [\n  #path(\n    start,\n    (\n      (apex-x, apex-y),\n      (c1-x - apex-x, c1-y - apex-y),\n      (c2-x - apex-x, c2-y - apex-y),\n    ),\n    end,\n  )\n]\n</code></pre>\n<p>This resulted in two curves: <code>(start, start, c1, apex)</code> and <code>(apex, c2, end, end)</code>.</p>",
      "raw": "ok, I figured it out. The docs are maybe a bit hard to parse here... tldr: the first control point of the cubic bezier, which by Wikipedia's formula results in a quadratic bezier, needs to be specified _with the start point_. In a Typst path, you specify control points for specific vertices, not for specific curves.\n\nLet me put some code and an image first:\n```typ\n#let weight(a, (xa, ya), b, (xb, yb)) = {\n  (a * xa + b * xb, a * ya + b * yb)\n}\n\n#let dot((x, y), stroke: black) = {\n  place(path(\n    stroke: (thickness: 3pt, paint: stroke, join: \"round\"),\n    closed: true,\n    (x - 1pt, y - 1pt),\n    (x - 1pt, y + 1pt),\n    (x + 1pt, y + 1pt),\n    (x + 1pt, y - 1pt),\n  ))\n}\n\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n#let control = (w, w/2)\n\n#{\n  let c1 = weight(1/3, start, 2/3, control)\n  let c2 = weight(2/3, control, 1/3, end)\n\n  dot(start)\n  dot(c1, stroke: red)\n  dot(control, stroke: blue)\n  dot(c2, stroke: red)\n  dot(end)\n\n  place(path(\n    start,\n    end,\n  ))\n  // (1)\n  place(path(\n    stroke: blue,\n    (\n      start,\n      weight(1, start, -1, control),\n    ),\n    (\n      end,\n      weight(1, control, -1, end),\n    ),\n  ))\n  // (2)\n  place(path(\n    stroke: blue,\n    start,\n    (\n      end,\n      weight(1, control, -1, end),\n    ),\n  ))\n  // (3)\n  place(path(\n    stroke: red,\n    (\n      start,\n      (0mm, 0mm),\n      weight(1, c1, -1, start),\n    ),\n    (\n      end,\n      weight(1, c2, -1, end),\n      (0mm, 0mm),\n    ),\n  ))\n}\n```\n\n![bezier|500x500, 75%](upload://dFVYImNAZ9lYgHL460qtAXAPF24.png)\n\n---\n\nFor (1), let's look what the [docs](https://typst.app/docs/reference/visualize/path/#parameters-vertices) say:\n> An array of two points, the first being the vertex and the second being the control point. The control point is expressed relative to the vertex and is mirrored to get the second control point. The given control point is the one that affects the curve coming *into* this vertex (even for the first point). The mirrored control point affects the curve going out of this vertex.\n```typc\n  place(path(\n    stroke: blue,\n    (\n      start,\n      weight(1, start, -1, control),\n    ),\n    (\n      end,\n      weight(1, control, -1, end),\n    ),\n  ))\n```\nWe have two points with one control point each, and we are drawing a bezier _going out of_ `start` and _going into_ `end`. Going into start would be `start + (start - control)` (remember, relative to start), out is thus `start - (start - control) = control`. Going into end is `end + (control - end) = control`.\nSo we end up with a bezier curve with the points `(start, control, control, end)` - a symmentrical cubic bezier with coinciding control points, great.\n\n(2) is a bit of a naive attempt:\n```typc\n  place(path(\n    stroke: blue,\n    start,\n    (\n      end,\n      weight(1, control, -1, end),\n    ),\n  ))\n```\nWith only a single point, the start control points are just the `start` point itself. Thus the resulting bezier is `(start, start, control, end)`. I think that should be asymmetric, although it doesn't seem like it... maybe I'm still missing something there.\n\n(3) is what you were after\n```typc\n  // (3)\n  place(path(\n    stroke: red,\n    (\n      start,\n      (0mm, 0mm),\n      weight(1, c1, -1, start),\n    ),\n    (\n      end,\n      weight(1, c2, -1, end),\n      (0mm, 0mm),\n    ),\n  ))\n```\nHere I used three coordinates per vertex of the path:\n> An array of three points, the first being the vertex and the next being the control points (control point for curves coming in and out, respectively).\n\nWe don't need the control point going into `start` or out of `end` so I set these to the vertices themselves (in relative coordinates). The result is the cubic bezier `(start, c1, c2, end)`!\n\n---\n\nLet's look at your path again:\n```typ\n#let parabola = [\n  #path(\n    start,\n    (\n      (apex-x, apex-y),\n      (c1-x - apex-x, c1-y - apex-y),\n      (c2-x - apex-x, c2-y - apex-y),\n    ),\n    end,\n  )\n]\n```\n\nThis resulted in two curves: `(start, start, c1, apex)` and `(apex, c2, end, end)`.",
      "reply_to_post_number": 3,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 59,
      "score": 21.8,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 2193,
      "post_number": 7,
      "username": "thelyfsoshort",
      "name": "Jason Dusek",
      "created_at": "2024-09-21T20:31:27.214Z",
      "updated_at": "2024-09-21T20:31:27.214Z",
      "cooked": "<p>Here is a small update that makes it clear the sort-of-right shape is not the target parabola. The red dots are points on the parabola.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/bd4346d40750edf8108e1dd58feb43c2a4db1741.png\" data-download-href=\"https://forum.typst.app/uploads/default/bd4346d40750edf8108e1dd58feb43c2a4db1741\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/bd4346d40750edf8108e1dd58feb43c2a4db1741_2_501x500.png\" alt=\"image\" data-base62-sha1=\"r0inEzh2wLPmzKcJkkP9DV2GJ6F\" width=\"501\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/bd4346d40750edf8108e1dd58feb43c2a4db1741_2_501x500.png, https://forum.typst.app/uploads/default/optimized/1X/bd4346d40750edf8108e1dd58feb43c2a4db1741_2_751x750.png 1.5x, https://forum.typst.app/uploads/default/optimized/1X/bd4346d40750edf8108e1dd58feb43c2a4db1741_2_1002x1000.png 2x\" data-dominant-color=\"F7F8F9\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1170×1166 123 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#set page(paper: \"a4\")\n\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = w / 2\n#let c1-y = w / 4\n#let c2-x = w / 2\n#let c2-y = 3 * w / 4\n// #let c1-x = (2 * control-x / 3) + (start.first() / 3)\n// #let c1-y = (2 * control-y / 3) + (start.last() / 3)\n// #let c2-x = (2 * control-x / 3) + (end.first() / 3)\n// #let c2-y = (2 * control-y / 3) + (end.last() / 3)\n\n#let parabola = [\n  #path(\n    start,\n    (\n      (apex-x, apex-y),\n      (c1-x - apex-x, c1-y - apex-y),\n      (c2-x - apex-x, c2-y - apex-y),\n    ),\n    end,\n    stroke: black + 1mm,\n  )\n]\n\n#let grid = {\n  let steps = 10\n  let step = w / steps\n  let cell = rect(width: step, height: step, stroke: gray + 0.1mm)\n\n  for i in array.range(0, steps) {\n    for j in array.range(0, steps) {\n      place(dx: i * step, dy: j * step, cell)\n    }\n  }\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (control-x, control-y), end,\n            stroke: blue.transparentize(25%) + 1mm)\n  )\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (c1-x, c1-y), (c2-x, c2-y), end,\n            stroke: green.transparentize(50%) + 0.5mm)\n  )\n}\n\n#let parabola-points = {\n  let steps = 50\n  let step = w / steps\n  let r = 0.5mm\n  let dot = circle(radius: r, fill: red, stroke: none)\n\n  for i in array.range(0, steps) {\n    let y = (step / 2) + (i * step)\n    let t = (y - (w / 2)) / w\n    let x = (w / 2) -  (2 * t * t * w)\n    place(dx: x - r, dy: y - r, dot)\n  }\n}\n\n#place(dx: 0mm, dy: 0mm, parabola)\n#place(dx: 0mm, dy: 0mm, grid)\n#place(dx: 0mm, dy: 0mm, parabola-points)\n</code></pre>",
      "raw": "Here is a small update that makes it clear the sort-of-right shape is not the target parabola. The red dots are points on the parabola.\n\n![image|501x500](upload://r0inEzh2wLPmzKcJkkP9DV2GJ6F.png)\n\n\n\n```typst\n#set page(paper: \"a4\")\n\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = w / 2\n#let c1-y = w / 4\n#let c2-x = w / 2\n#let c2-y = 3 * w / 4\n// #let c1-x = (2 * control-x / 3) + (start.first() / 3)\n// #let c1-y = (2 * control-y / 3) + (start.last() / 3)\n// #let c2-x = (2 * control-x / 3) + (end.first() / 3)\n// #let c2-y = (2 * control-y / 3) + (end.last() / 3)\n\n#let parabola = [\n  #path(\n    start,\n    (\n      (apex-x, apex-y),\n      (c1-x - apex-x, c1-y - apex-y),\n      (c2-x - apex-x, c2-y - apex-y),\n    ),\n    end,\n    stroke: black + 1mm,\n  )\n]\n\n#let grid = {\n  let steps = 10\n  let step = w / steps\n  let cell = rect(width: step, height: step, stroke: gray + 0.1mm)\n\n  for i in array.range(0, steps) {\n    for j in array.range(0, steps) {\n      place(dx: i * step, dy: j * step, cell)\n    }\n  }\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (control-x, control-y), end,\n            stroke: blue.transparentize(25%) + 1mm)\n  )\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (c1-x, c1-y), (c2-x, c2-y), end,\n            stroke: green.transparentize(50%) + 0.5mm)\n  )\n}\n\n#let parabola-points = {\n  let steps = 50\n  let step = w / steps\n  let r = 0.5mm\n  let dot = circle(radius: r, fill: red, stroke: none)\n\n  for i in array.range(0, steps) {\n    let y = (step / 2) + (i * step)\n    let t = (y - (w / 2)) / w\n    let x = (w / 2) -  (2 * t * t * w)\n    place(dx: x - r, dy: y - r, dot)\n  }\n}\n\n#place(dx: 0mm, dy: 0mm, parabola)\n#place(dx: 0mm, dy: 0mm, grid)\n#place(dx: 0mm, dy: 0mm, parabola-points)\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 44,
      "score": 8.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 202
    },
    {
      "id": 2194,
      "post_number": 8,
      "username": "thelyfsoshort",
      "name": "Jason Dusek",
      "created_at": "2024-09-21T20:33:14.140Z",
      "updated_at": "2024-09-21T20:33:14.140Z",
      "cooked": "<p>What is <code>weight()</code>? It doesn’t seem to be a standard library function.</p>",
      "raw": "What is `weight()`? It doesn't seem to be a standard library function.",
      "reply_to_post_number": 6,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 37,
      "score": 22.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 202
    },
    {
      "id": 2198,
      "post_number": 9,
      "username": "thelyfsoshort",
      "name": "Jason Dusek",
      "created_at": "2024-09-21T21:01:09.128Z",
      "updated_at": "2024-09-21T21:01:09.128Z",
      "cooked": "<p>Something very close to your code seems to be right.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/ab794bce0f3b7072f02b7a79632c4880fc64191a.png\" data-download-href=\"https://forum.typst.app/uploads/default/ab794bce0f3b7072f02b7a79632c4880fc64191a\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/ab794bce0f3b7072f02b7a79632c4880fc64191a_2_498x499.png\" alt=\"image\" data-base62-sha1=\"osVwr47YsGzw1kGufQzNrcmJ8pQ\" width=\"498\" height=\"499\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/ab794bce0f3b7072f02b7a79632c4880fc64191a_2_498x499.png, https://forum.typst.app/uploads/default/optimized/1X/ab794bce0f3b7072f02b7a79632c4880fc64191a_2_747x748.png 1.5x, https://forum.typst.app/uploads/default/optimized/1X/ab794bce0f3b7072f02b7a79632c4880fc64191a_2_996x998.png 2x\" data-dominant-color=\"F7F8F9\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1144×1148 117 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Here we are using two control points, where one control point is “the point itself” (<code>0, 0</code> in relative terms) and the other is one of the control points calculated using the calculation per <a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Degree_elevation\" rel=\"noopener nofollow ugc\">“Degree Elevation” on Wikipedia</a>.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = (2 * control-x / 3) + (start.first() / 3)\n#let c1-y = (2 * control-y / 3) + (start.last() / 3)\n#let c2-x = (2 * control-x / 3) + (end.first() / 3)\n#let c2-y = (2 * control-y / 3) + (end.last() / 3)\n\n#let parabola = [\n  #path(\n    (start, (0mm, 0mm), (c1-x - start.first(), c1-y - start.last())),\n    (end, (c2-x - end.first(), c2-y - end.last()), (0mm, 0mm)),\n    stroke: black + 1mm,\n  )\n]\n</code></pre>\n<p>Here is the code for rendering the curve with the control polygons and grid:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#set page(paper: \"a4\")\n\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = (2 * control-x / 3) + (start.first() / 3)\n#let c1-y = (2 * control-y / 3) + (start.last() / 3)\n#let c2-x = (2 * control-x / 3) + (end.first() / 3)\n#let c2-y = (2 * control-y / 3) + (end.last() / 3)\n\n#let parabola = [\n  #path(\n    (start, (0mm, 0mm), (c1-x - start.first(), c1-y - start.last())),\n    (end, (c2-x - end.first(), c2-y - end.last()), (0mm, 0mm)),\n    stroke: black + 1mm,\n  )\n]\n\n#let grid = {\n  let steps = 10\n  let step = w / steps\n  let cell = rect(width: step, height: step, stroke: gray + 0.1mm)\n\n  for i in array.range(0, steps) {\n    for j in array.range(0, steps) {\n      place(dx: i * step, dy: j * step, cell)\n    }\n  }\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (control-x, control-y), end,\n            stroke: blue.transparentize(25%) + 1mm)\n  )\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (c1-x, c1-y), (c2-x, c2-y), end,\n            stroke: green.transparentize(50%) + 0.5mm)\n  )\n}\n\n#let parabola-points = {\n  let steps = 50\n  let step = w / steps\n  let r = 0.5mm\n  let dot = circle(radius: r, fill: red, stroke: none)\n\n  for i in array.range(0, steps) {\n    let y = (step / 2) + (i * step)\n    let t = (y - (w / 2)) / w\n    let x = (w / 2) -  (2 * t * t * w)\n    place(dx: x - r, dy: y - r, dot)\n  }\n}\n\n#place(dx: 0mm, dy: 0mm, parabola)\n#place(dx: 0mm, dy: 0mm, grid)\n#place(dx: 0mm, dy: 0mm, parabola-points)\n\n</code></pre>",
      "raw": "Something very close to your code seems to be right.\n\n![image|498x499](upload://osVwr47YsGzw1kGufQzNrcmJ8pQ.png)\n\nHere we are using two control points, where one control point is \"the point itself\" (`0, 0` in relative terms) and the other is one of the control points calculated using the calculation per [“Degree Elevation” on Wikipedia](https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Degree_elevation).\n\n```typst\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = (2 * control-x / 3) + (start.first() / 3)\n#let c1-y = (2 * control-y / 3) + (start.last() / 3)\n#let c2-x = (2 * control-x / 3) + (end.first() / 3)\n#let c2-y = (2 * control-y / 3) + (end.last() / 3)\n\n#let parabola = [\n  #path(\n    (start, (0mm, 0mm), (c1-x - start.first(), c1-y - start.last())),\n    (end, (c2-x - end.first(), c2-y - end.last()), (0mm, 0mm)),\n    stroke: black + 1mm,\n  )\n]\n```\n\nHere is the code for rendering the curve with the control polygons and grid:\n\n```typst\n#set page(paper: \"a4\")\n\n#let w = 100mm\n#let start = (0mm, 0mm)\n#let end = (0mm, w)\n\n#let apex-x = w / 2\n#let apex-y = w / 2\n\n// Control point for quadratic Bezier curve.\n#let control-x = w\n#let control-y = w / 2\n\n// Cubic control points\n#let c1-x = (2 * control-x / 3) + (start.first() / 3)\n#let c1-y = (2 * control-y / 3) + (start.last() / 3)\n#let c2-x = (2 * control-x / 3) + (end.first() / 3)\n#let c2-y = (2 * control-y / 3) + (end.last() / 3)\n\n#let parabola = [\n  #path(\n    (start, (0mm, 0mm), (c1-x - start.first(), c1-y - start.last())),\n    (end, (c2-x - end.first(), c2-y - end.last()), (0mm, 0mm)),\n    stroke: black + 1mm,\n  )\n]\n\n#let grid = {\n  let steps = 10\n  let step = w / steps\n  let cell = rect(width: step, height: step, stroke: gray + 0.1mm)\n\n  for i in array.range(0, steps) {\n    for j in array.range(0, steps) {\n      place(dx: i * step, dy: j * step, cell)\n    }\n  }\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (control-x, control-y), end,\n            stroke: blue.transparentize(25%) + 1mm)\n  )\n\n  place(\n    dx: 0mm,\n    dy: 0mm,\n    polygon(start, (c1-x, c1-y), (c2-x, c2-y), end,\n            stroke: green.transparentize(50%) + 0.5mm)\n  )\n}\n\n#let parabola-points = {\n  let steps = 50\n  let step = w / steps\n  let r = 0.5mm\n  let dot = circle(radius: r, fill: red, stroke: none)\n\n  for i in array.range(0, steps) {\n    let y = (step / 2) + (i * step)\n    let t = (y - (w / 2)) / w\n    let x = (w / 2) -  (2 * t * t * w)\n    place(dx: x - r, dy: y - r, dot)\n  }\n}\n\n#place(dx: 0mm, dy: 0mm, parabola)\n#place(dx: 0mm, dy: 0mm, grid)\n#place(dx: 0mm, dy: 0mm, parabola-points)\n\n```",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 41,
      "score": 23.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 202
    },
    {
      "id": 2200,
      "post_number": 10,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-21T21:06:05.366Z",
      "updated_at": "2024-09-21T21:07:13.776Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"thelyfsoshort\" data-post=\"8\" data-topic=\"510\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/thelyfsoshort/48/185_2.png\" class=\"avatar\"> thelyfsoshort:</div>\n<blockquote>\n<p>What is <code>weight()</code>? It doesn’t seem to be a standard library function.</p>\n</blockquote>\n</aside>\n<p>Sorry, I missed it while copy pasting (<code>dot</code> as well). I’ll correct my post later, but it’s basically a weighted sum of 2D points/vectors: <code>weight(a, v, b, w) = a * v + b * w</code>.</p>",
      "raw": "[quote=\"thelyfsoshort, post:8, topic:510, full:true\"]\nWhat is `weight()`? It doesn’t seem to be a standard library function.\n[/quote]\n\nSorry, I missed it while copy pasting (`dot` as well). I'll correct my post later, but it's basically a weighted sum of 2D points/vectors: `weight(a, v, b, w) = a * v + b * w`.",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 37,
      "score": 7.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 2242,
      "post_number": 11,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-22T13:48:53.418Z",
      "updated_at": "2024-09-22T13:48:53.418Z",
      "cooked": "<p>(I edited the original reply)</p>",
      "raw": "(I edited the original reply)",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 5.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:58:35.076114"
}