{
  "topic_metadata": {
    "id": 489,
    "title": "Character count of body text?",
    "slug": "character-count-of-body-text",
    "posts_count": 8,
    "created_at": "2024-09-19T10:47:42.218Z",
    "last_posted_at": "2024-09-19T18:41:26.819Z",
    "views": 436,
    "like_count": 7,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 6,
    "accepted_answer_username": "Daniel",
    "tags": [],
    "category_id": 5,
    "participant_count": 6,
    "word_count": 619
  },
  "posts": [
    {
      "id": 1906,
      "post_number": 1,
      "username": "dob",
      "name": "Dan Okkels Brendstrup",
      "created_at": "2024-09-19T10:47:42.405Z",
      "updated_at": "2024-09-19T10:47:42.405Z",
      "cooked": "<p>Is there any way to get a character count of the entire body text? I can‚Äôt find anything in the docs, and GitHub Copilot keeps suggesting things like <code>body.text().len()</code> which do not exist <img src=\"https://forum.typst.app/images/emoji/apple/upside_down_face.png?v=12\" title=\":upside_down_face:\" class=\"emoji\" alt=\":upside_down_face:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Is there any way to get a character count of the entire body text? I can't find anything in the docs, and GitHub Copilot keeps suggesting things like `body.text().len()` which do not exist üôÉ",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 61,
      "score": 1702.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 387
    },
    {
      "id": 1908,
      "post_number": 2,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-19T11:12:00.209Z",
      "updated_at": "2024-09-19T11:12:00.209Z",
      "cooked": "<p>The answer depends on what the <code>body</code> actually means in this context.</p>\n<p>For a string of text, it‚Äôs simply <a href=\"https://typst.app/docs/reference/foundations/str/#definitions-len\"><code>\"text\".len()</code></a> (or <code>\"\".clusters().len()</code> for grapheme counting instead of UTF-8 bytes). For a content that consists only of plain text, it will be <code>#[text].text.clusters().len()</code>.</p>\n<p>For more complex examples, a more verbose solution is needed. <a href=\"https://github.com/typst/typst/issues/2196#issuecomment-1728135476\" rel=\"noopener nofollow ugc\">A solution</a> by <a class=\"mention\" href=\"/u/eric\">@Eric</a> for something similar mentioned <a href=\"https://forum.typst.app/t/how-to-write-a-function-that-alters-the-text-of-a-given-content-parameter-but-retains-everything-else/468\">here</a> would be:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let to-string(content) = {\n  if content.has(\"text\") {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n\n#to-string[This _*cool*_ project] // =&gt; \"This cool project\"\n</code></pre>\n<p>I haven‚Äôt tested this, it might still miss some text, but it‚Äôs a great start nevertheless. So you would use it like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let content-variable = [This _*cool*_ project]\n#to-string(content-variable).clusters().len()\n// Output: 17\n</code></pre>",
      "raw": "The answer depends on what the `body` actually means in this context.\n\nFor a string of text, it's simply [`\"text\".len()`](https://typst.app/docs/reference/foundations/str/#definitions-len) (or `\"\".clusters().len()` for grapheme counting instead of UTF-8 bytes). For a content that consists only of plain text, it will be `#[text].text.clusters().len()`.\n\nFor more complex examples, a more verbose solution is needed. [A solution](https://github.com/typst/typst/issues/2196#issuecomment-1728135476) by @Eric for something similar mentioned [here](https://forum.typst.app/t/how-to-write-a-function-that-alters-the-text-of-a-given-content-parameter-but-retains-everything-else/468) would be:\n\n```typ\n#let to-string(content) = {\n  if content.has(\"text\") {\n    content.text\n  } else if content.has(\"children\") {\n    content.children.map(to-string).join(\"\")\n  } else if content.has(\"body\") {\n    to-string(content.body)\n  } else if content == [ ] {\n    \" \"\n  }\n}\n\n#to-string[This _*cool*_ project] // => \"This cool project\"\n```\n\nI haven't tested this, it might still miss some text, but it's a great start nevertheless. So you would use it like this:\n\n```typ\n#let content-variable = [This _*cool*_ project]\n#to-string(content-variable).clusters().len()\n// Output: 17\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 61,
      "score": 147.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 1934,
      "post_number": 3,
      "username": "gezepi",
      "name": "",
      "created_at": "2024-09-19T13:46:42.654Z",
      "updated_at": "2024-09-19T13:47:50.360Z",
      "cooked": "<p>Here‚Äôs another method of counting each character in a document that uses regular expressions:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let charCounter = counter(\"charCounter\")\n\n#show regex(\"[a-zA-Z]\"): it =&gt;{\n  charCounter.step()\n  it\n}\n\nTotal characters: #charCounter.display()\n</code></pre>\n<p>In this example the result is 15 characters, the number present in ‚ÄúTotal characters:‚Äù.</p>\n<p>The regex string can be adjusted to include spaces and special characters as well.</p>\n<p>I don‚Äôt know what the performance impact of doing it this way is, but I assume it‚Äôs not a good option for large documents.</p>",
      "raw": "Here's another method of counting each character in a document that uses regular expressions:\n\n```typ\n#let charCounter = counter(\"charCounter\")\n\n#show regex(\"[a-zA-Z]\"): it =>{\n  charCounter.step()\n  it\n}\n\nTotal characters: #charCounter.display()\n```\nIn this example the result is 15 characters, the number present in \"Total characters:\".\n\nThe regex string can be adjusted to include spaces and special characters as well.\n\nI don't know what the performance impact of doing it this way is, but I assume it's not a good option for large documents.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 55,
      "score": 86.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 1935,
      "post_number": 4,
      "username": "laurmaedje",
      "name": "Laurenz M√§dje",
      "created_at": "2024-09-19T13:56:54.580Z",
      "updated_at": "2024-09-19T13:56:54.580Z",
      "cooked": "<p>Aside from the large performance impact, it will also negatively affect text layout. Each letter is seen individually by the layout engine (at least currently), which prevents e.g. ligatures. If the performance is acceptable, this can be used temporarily, but I would not use this for a final deliverable.</p>",
      "raw": "Aside from the large performance impact, it will also negatively affect text layout. Each letter is seen individually by the layout engine (at least currently), which prevents e.g. ligatures. If the performance is acceptable, this can be used temporarily, but I would not use this for a final deliverable.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 53,
      "score": 65.6,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 1938,
      "post_number": 5,
      "username": "kotfind",
      "name": "",
      "created_at": "2024-09-19T15:14:57.901Z",
      "updated_at": "2024-09-19T15:14:57.901Z",
      "cooked": "<p>Just came across this plugin: <a href=\"https://typst.app/universe/package/wordometer\">wordometer</a>.<br>\nI haven‚Äôt tried it, but it looks like it may help.</p>",
      "raw": "Just came across this plugin: [wordometer](https://typst.app/universe/package/wordometer).\nI haven't tried it, but it looks like it may help.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 49,
      "score": 64.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 386
    },
    {
      "id": 1943,
      "post_number": 6,
      "username": "Daniel",
      "name": "Daniel Cook",
      "created_at": "2024-09-19T18:11:44.135Z",
      "updated_at": "2024-09-19T18:11:44.135Z",
      "cooked": "<p>I‚Äôve been using wordometer for word count. It does character count as well.<br>\nThere are some things it can‚Äôt count properly. Look at some open issues on GitHub.</p>\n<p>A follow up question: what is your use case? Do you need the count in your rendered document, or outside just as a metric?</p>\n<p>I think at the moment the more accurate way to go about a whole document character count will be to use an external script after rendering a PDF. So, have a toggle to disable some things you don‚Äôt want counted (page numbers, etc), compile it, then convert the PDF to text, do a count.</p>",
      "raw": "I've been using wordometer for word count. It does character count as well.\nThere are some things it can't count properly. Look at some open issues on GitHub.\n\nA follow up question: what is your use case? Do you need the count in your rendered document, or outside just as a metric?\n\nI think at the moment the more accurate way to go about a whole document character count will be to use an external script after rendering a PDF. So, have a toggle to disable some things you don't want counted (page numbers, etc), compile it, then convert the PDF to text, do a count.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 40,
      "score": 168.0,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 94
    },
    {
      "id": 1944,
      "post_number": 7,
      "username": "dob",
      "name": "Dan Okkels Brendstrup",
      "created_at": "2024-09-19T18:35:37.514Z",
      "updated_at": "2024-09-19T18:35:37.514Z",
      "cooked": "<p>Thanks! Yeah, I can see that <code>wordometer</code> has some issues that are dealbreakers in my case (I need to included spaces, for one). Seemed perfect otherwise.</p>\n<p>Yeah, my use case is including the character count in the actual document. So I think you‚Äôre right that doing a character count on a rendered PDF is probably the best solution <img src=\"https://forum.typst.app/images/emoji/apple/+1.png?v=12\" title=\":+1:\" class=\"emoji\" alt=\":+1:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Thanks! Yeah, I can see that `wordometer` has some issues that are dealbreakers in my case (I need to included spaces, for one). Seemed perfect otherwise.\n\nYeah, my use case is including the character count in the actual document. So I think you're right that doing a character count on a rendered PDF is probably the best solution üëç",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 39,
      "score": 7.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 387
    },
    {
      "id": 1945,
      "post_number": 8,
      "username": "dob",
      "name": "Dan Okkels Brendstrup",
      "created_at": "2024-09-19T18:41:26.819Z",
      "updated_at": "2024-09-19T18:41:26.819Z",
      "cooked": "<p>Thanks for all of your suggestions! What a great community <img src=\"https://forum.typst.app/images/emoji/apple/pray.png?v=12\" title=\":pray:\" class=\"emoji\" alt=\":pray:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>I‚Äôll experiment with your suggestions, but I have a feeling that the most trustworthy solution in the end is probably to run a character count on the final PDF.</p>\n<p>Still trying to get a handle on the Typst scripting language, but it is quite powerful!</p>",
      "raw": "Thanks for all of your suggestions! What a great community üôè\n\nI'll experiment with your suggestions, but I have a feeling that the most trustworthy solution in the end is probably to run a character count on the final PDF. \n\nStill trying to get a handle on the Typst scripting language, but it is quite powerful!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 38,
      "score": 17.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 387
    }
  ],
  "scraped_at": "2025-06-10T09:58:38.785648"
}