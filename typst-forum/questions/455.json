{
  "topic_metadata": {
    "id": 455,
    "title": "How to set the columnspan or the rowspan of a specific cell with a show-set rule (when creating table from a CSV file)?",
    "slug": "how-to-set-the-columnspan-or-the-rowspan-of-a-specific-cell-with-a-show-set-rule-when-creating-table-from-a-csv-file",
    "posts_count": 10,
    "created_at": "2024-09-18T16:26:27.718Z",
    "last_posted_at": "2024-09-19T10:41:29.769Z",
    "views": 844,
    "like_count": 8,
    "reply_count": 7,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "Andrew",
    "tags": [
      "tables"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 1923
  },
  "posts": [
    {
      "id": 1782,
      "post_number": 1,
      "username": "shazid",
      "name": "Shazid",
      "created_at": "2024-09-18T16:26:27.902Z",
      "updated_at": "2024-09-18T16:28:39.018Z",
      "cooked": "<p>I am trying to create a very large table from a CSV file. It has some cells that need to have column span and some that need row span. The CSV looks something like this:<br>\n<img src=\"https://forum.typst.app/uploads/default/original/1X/b6315f565db0f1723991e3213f0ad64655ac4d77.png\" alt=\"image\" data-base62-sha1=\"pZKG860bpmdeOQ0qWrt06vawkAL\" width=\"289\" height=\"126\"></p>\n<p>I have copy-pasted the contents of the CSV file below:</p>\n<pre data-code-wrap=\"csv\"><code class=\"lang-csv\">,Spanned column,\nA,B,C\nSpanned row,1,2\n,3,4\nD,5,6\n</code></pre>\n<p>What I have tried so far:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let dat = csv(\"test.csv\")\n\n#{\n// approach 1\n  show table.cell.where(x:1, y:0): set table.cell(colspan: 2)\n  show table.cell.where(x:0, y:2): set table.cell(rowspan: 2)\n  table(\n    columns: 3,\n    ..dat.flatten()\n  )\n}\n\n#{\n// approach 2\n  show table.cell.where(x: 1, y:0): it =&gt; table.cell(colspan: 2)[#it]\n  show table.cell.where(x: 0, y:2): it =&gt; table.cell(colspan: 2)[#it]\n  table(\n    columns: 3,\n    ..dat.flatten()\n  )\n}\n</code></pre>\n<p>Neither approach seem to work. Neither table has any column or row span. MWE link: <a href=\"https://typst.app/project/r7fzqahb3BQJTwBRFV4-Ei\" class=\"inline-onebox\">Typst</a></p>\n<p>Any help regarding this would be greatly appreciated. Thank you.</p>",
      "raw": "I am trying to create a very large table from a CSV file. It has some cells that need to have column span and some that need row span. The CSV looks something like this:\n![image|289x126](upload://pZKG860bpmdeOQ0qWrt06vawkAL.png)\n\nI have copy-pasted the contents of the CSV file below:\n```csv\n,Spanned column,\nA,B,C\nSpanned row,1,2\n,3,4\nD,5,6\n```\n\nWhat I have tried so far:\n```typst\n#let dat = csv(\"test.csv\")\n\n#{\n// approach 1\n  show table.cell.where(x:1, y:0): set table.cell(colspan: 2)\n  show table.cell.where(x:0, y:2): set table.cell(rowspan: 2)\n  table(\n    columns: 3,\n    ..dat.flatten()\n  )\n}\n\n#{\n// approach 2\n  show table.cell.where(x: 1, y:0): it => table.cell(colspan: 2)[#it]\n  show table.cell.where(x: 0, y:2): it => table.cell(colspan: 2)[#it]\n  table(\n    columns: 3,\n    ..dat.flatten()\n  )\n}\n```\n\nNeither approach seem to work. Neither table has any column or row span. MWE link: https://typst.app/project/r7fzqahb3BQJTwBRFV4-Ei\n\nAny help regarding this would be greatly appreciated. Thank you.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 64,
      "score": 4197.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 284
    },
    {
      "id": 1791,
      "post_number": 2,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-18T17:36:45.827Z",
      "updated_at": "2024-09-18T17:51:38.560Z",
      "cooked": "<p>From a comment <a href=\"https://github.com/typst/typst/issues/4159#issuecomment-2116280907\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Show-set rules don't seem to work for `table.cell` · Issue #4159 · typst/typst · GitHub</a> :</p>\n<blockquote>\n<p>Unfortunately this just hasn’t been implemented yet, but it will be in the future, for sure.</p>\n<p>In the meantime, if your selector only relies on the cell’s position, you can use e.g. <code>#set table(fill: (x, y) =&gt; if x == 0 { red } else { blue })</code>.</p>\n</blockquote>\n<p>The described workaround only works for fields that support function type <strong>and</strong> are available in the <a href=\"https://typst.app/docs/reference/model/table/#parameters\"><code>table()</code></a> function: <code>fill</code>, <code>align</code>, <code>stroke</code>, <code>inset</code>.</p>\n<p>Since you need to modify the cell itself by changing the <code>colspan</code>/<code>rowspan</code> field, you also won’t be able to use something like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show table.cell: it =&gt; {\n  if it.x == 1 and it.y == 0 { table.cell(colspan: 2, it) } else { it }\n}\n</code></pre>\n<p>This is because you can’t create a new element inside a show rule for that element, i.e., creating a table cell inside a show rule for a table cell. You probably can get away with it if your newly created cell won’t trigger the same branch of the if statement, but in this case this is not possible. Only if you change cell’s content or inset value etc. beforehand.</p>\n<p>The second approach probably didn’t work either because you again try to create a new cell inside a show rule for a cell and/or because show rule is applied later (not when you create a table with elements). I’m not entirely sure.</p>\n<p>I still think that maybe some hacky workaround is possible, but I need time to figure out if this is true.</p>\n<p>Update. Yes my hacky solution works, but I need to make it prettier and more reusable.</p>",
      "raw": "From a comment https://github.com/typst/typst/issues/4159#issuecomment-2116280907 :\n\n> Unfortunately this just hasn't been implemented yet, but it will be in the future, for sure.\n> \n> In the meantime, if your selector only relies on the cell's position, you can use e.g. `#set table(fill: (x, y) => if x == 0 { red } else { blue })`.\n\nThe described workaround only works for fields that support function type **and** are available in the [`table()`](https://typst.app/docs/reference/model/table/#parameters) function: `fill`, `align`, `stroke`, `inset`.\n\nSince you need to modify the cell itself by changing the `colspan`/`rowspan` field, you also won't be able to use something like this:\n\n```typ\n#show table.cell: it => {\n  if it.x == 1 and it.y == 0 { table.cell(colspan: 2, it) } else { it }\n}\n```\n\nThis is because you can't create a new element inside a show rule for that element, i.e., creating a table cell inside a show rule for a table cell. You probably can get away with it if your newly created cell won't trigger the same branch of the if statement, but in this case this is not possible. Only if you change cell's content or inset value etc. beforehand.\n\nThe second approach probably didn't work either because you again try to create a new cell inside a show rule for a cell and/or because show rule is applied later (not when you create a table with elements). I'm not entirely sure.\n\nI still think that maybe some hacky workaround is possible, but I need time to figure out if this is true.\n\nUpdate. Yes my hacky solution works, but I need to make it prettier and more reusable.",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 57,
      "score": 46.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 1793,
      "post_number": 3,
      "username": "shazid",
      "name": "Shazid",
      "created_at": "2024-09-18T17:52:35.248Z",
      "updated_at": "2024-09-18T17:52:35.248Z",
      "cooked": "<p>Welp, guess I’ll just have to wait till it is implemented then.</p>",
      "raw": "Welp, guess I'll just have to wait till it is implemented then.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 50,
      "score": 25.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 284
    },
    {
      "id": 1797,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-18T18:54:45.465Z",
      "updated_at": "2024-09-18T19:15:56.636Z",
      "cooked": "<details>\n<summary>\nDefault result</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let dat = csv(\"test.csv\")\n\n#repr(dat)\n\n#set table(align: center + horizon)\n\n#table(columns: (3cm,) * 3, ..dat.flatten())\n</code></pre>\n<div align=\"center\">\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/bd99aab49f1770c7dd8977f08955587273297794.png\" alt=\"image\" data-base62-sha1=\"r3hteEOT76tnwYSfrZHG8ZoNBI0\" width=\"252\" height=\"188\"></p>\n</div>\n</details>\n<hr>\n<p>First attempt:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let dat = csv(\"test.csv\")\n#set table(align: center + horizon)\n#{\n  // show table.cell.where(y: 0, x: 1): set table.cell(colspan: 2)\n  // show table.cell.where(y: 2, x: 0): set table.cell(rowspan: 2)\n  let colspan-cells = ((0, 1),) // (y, x)\n  let rowspan-cells = ((2, 0),) // (y, x)\n  let data = dat\n  for ((y, x)) in colspan-cells {\n    data.at(y) = {\n      let row = data.at(y)\n      let _ = row.remove(x + 1)\n      row\n    }\n  }\n  for ((y, x)) in rowspan-cells {\n    data.at(y + 1) = {\n      let row = data.at(y + 1)\n      let _ = row.remove(x)\n      row\n    }\n  }\n  let bonus-coloring = (fill: green.transparentize(70%))\n  table(columns: (3cm,) * 3, ..data\n  .enumerate()\n  .map(((y, row)) =&gt; row.enumerate().map(((x, cell)) =&gt;\n  if x == 1 and y == 0 {\n    table.cell(colspan: 2, cell, ..bonus-coloring)\n  } else if x == 0 and y == 2 {\n    table.cell(rowspan: 2, cell, ..bonus-coloring)\n  } else {\n    cell\n  }))\n  .flatten())\n}\n</code></pre>\n<div align=\"center\">\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/68415b6a2608b8dd9ff4af83082db29c9feed255.png\" alt=\"image\" data-base62-sha1=\"eShGoGUxFU1TzQR5ZC3HycyNlZz\" width=\"324\" height=\"120\"></p>\n</div>\n<hr>\n<p>Second attempt:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let dat = csv(\"test.csv\")\n#set table(align: center + horizon)\n\n/// Removes elements which will be overwritten by a `colspan`/`rowspan`.\n/// * `data` a 2D array of future cell content elements\n/// * `colspan-cells` an array of tuples `(y, x, length)` describing each colspan cell\n/// * `rowspan-cells` an array of tuples `(y, x, length)` describing each rowspan cell\n/// Returns a prepared 2D `array`.\n///\n/// Note that length of each row can differ.\n#let prepare-data(data, colspan-cells, rowspan-cells) = {\n  for ((y, x, length)) in colspan-cells {\n    data.at(y) = {\n      let row = data.at(y)\n      for i in range(length - 1) {\n        assert(\n          (x + 1) &lt; row.len(),\n          message: \"Column span out of bounds: \" + repr((y, x, length)),\n        )\n        let _ = row.remove(x + 1)\n      }\n      row\n    }\n  }\n  for ((y, x, length)) in rowspan-cells {\n    for i in range(length - 1) {\n      data.at(y + 1 + i) = {\n        assert(\n          (y + 1 + i) &lt; data.len(),\n          message: \"Row span out of bounds: \" + repr((y, x, length)),\n        )\n        let row = data.at(y + 1 + i)\n        let _ = row.remove(x)\n        row\n      }\n    }\n  }\n  data\n}\n\n/// Adds `colspan`/`rowspan` field to specified cells.\n/// * `cells` a 2D array of cells (content)\n/// * `colspan-cells` an array of tuples `(y, x, length)` describing each colspan cell\n/// * `rowspan-cells` an array of tuples `(y, x, length)` describing each rowspan cell\n/// Returns flatten `array` of patched cells.\n///\n/// Note that this is not tested for when cell already wrapped in `cell()`.\n#let patch-span-cells(cells, colspan-cells, rowspan-cells) = {\n  let fill = (fill: green.transparentize(70%))\n  for ((y, x, length)) in colspan-cells {\n    cells.at(y).at(x) = table.cell(colspan: length, cells.at(y).at(x), ..fill)\n  }\n  for ((y, x, length)) in rowspan-cells {\n    cells.at(y).at(x) = table.cell(rowspan: length, cells.at(y).at(x), ..fill)\n  }\n  cells.flatten()\n}\n\n#{\n  // show table.cell.where(y: 0, x: 1): set table.cell(colspan: 2)\n  // show table.cell.where(y: 2, x: 0): set table.cell(rowspan: 2)\n  let colspan-cells = ((0, 1, 2),) // (y, x, length), min_length = 2 (no-op for \"&lt; 2\")\n  let rowspan-cells = ((2, 0, 2),) // (y, x, length), min_length = 2 (no-op for \"&lt; 2\")\n  let data = prepare-data(dat, colspan-cells, rowspan-cells)\n  table(\n    columns: (3cm,) * 3,\n    ..patch-span-cells(data, colspan-cells, rowspan-cells),\n  )\n}\n</code></pre>\n<div align=\"center\">\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/fadb6a7682fe9b5b38e8cbf4e960bb1cdb771917.png\" alt=\"image\" data-base62-sha1=\"zNbsLpFXHitNcYeF6wEfUunSwNV\" width=\"328\" height=\"121\"></p>\n</div>\n<p>You can merge or rewrite the 2 helper functions however you see fit. If you don’t need to do anything in between, then you don’t really need two of them. But they can also be easily merged by making a 3rd wrapper function:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let patch-spans(data, colspan-cells, rowspan-cells) = {\n  patch-span-cells(\n    prepare-data(dat, colspan-cells, rowspan-cells),\n    colspan-cells,\n    rowspan-cells,\n  )\n}\n\n#table(\n  // A small bonus (can only use (the initial) unmodified\n  // 2D array here).\n  columns: dat.at(0).len(),\n  ..patch-spans(dat, colspan-cells, rowspan-cells),\n)\n</code></pre>",
      "raw": "[details=\"Default result\"]\n```typ\n#let dat = csv(\"test.csv\")\n\n#repr(dat)\n\n#set table(align: center + horizon)\n\n#table(columns: (3cm,) * 3, ..dat.flatten())\n```\n\n<div align=center>\n\n![image|336x251, 75%](upload://r3hteEOT76tnwYSfrZHG8ZoNBI0.png)\n</div>\n[/details]\n\n---\n\nFirst attempt:\n\n```typ\n#let dat = csv(\"test.csv\")\n#set table(align: center + horizon)\n#{\n  // show table.cell.where(y: 0, x: 1): set table.cell(colspan: 2)\n  // show table.cell.where(y: 2, x: 0): set table.cell(rowspan: 2)\n  let colspan-cells = ((0, 1),) // (y, x)\n  let rowspan-cells = ((2, 0),) // (y, x)\n  let data = dat\n  for ((y, x)) in colspan-cells {\n    data.at(y) = {\n      let row = data.at(y)\n      let _ = row.remove(x + 1)\n      row\n    }\n  }\n  for ((y, x)) in rowspan-cells {\n    data.at(y + 1) = {\n      let row = data.at(y + 1)\n      let _ = row.remove(x)\n      row\n    }\n  }\n  let bonus-coloring = (fill: green.transparentize(70%))\n  table(columns: (3cm,) * 3, ..data\n  .enumerate()\n  .map(((y, row)) => row.enumerate().map(((x, cell)) =>\n  if x == 1 and y == 0 {\n    table.cell(colspan: 2, cell, ..bonus-coloring)\n  } else if x == 0 and y == 2 {\n    table.cell(rowspan: 2, cell, ..bonus-coloring)\n  } else {\n    cell\n  }))\n  .flatten())\n}\n```\n\n<div align=center>\n\n![image|324x120](upload://eShGoGUxFU1TzQR5ZC3HycyNlZz.png)\n</div>\n\n---\n\nSecond attempt:\n\n```typ\n#let dat = csv(\"test.csv\")\n#set table(align: center + horizon)\n\n/// Removes elements which will be overwritten by a `colspan`/`rowspan`.\n/// * `data` a 2D array of future cell content elements\n/// * `colspan-cells` an array of tuples `(y, x, length)` describing each colspan cell\n/// * `rowspan-cells` an array of tuples `(y, x, length)` describing each rowspan cell\n/// Returns a prepared 2D `array`.\n///\n/// Note that length of each row can differ.\n#let prepare-data(data, colspan-cells, rowspan-cells) = {\n  for ((y, x, length)) in colspan-cells {\n    data.at(y) = {\n      let row = data.at(y)\n      for i in range(length - 1) {\n        assert(\n          (x + 1) < row.len(),\n          message: \"Column span out of bounds: \" + repr((y, x, length)),\n        )\n        let _ = row.remove(x + 1)\n      }\n      row\n    }\n  }\n  for ((y, x, length)) in rowspan-cells {\n    for i in range(length - 1) {\n      data.at(y + 1 + i) = {\n        assert(\n          (y + 1 + i) < data.len(),\n          message: \"Row span out of bounds: \" + repr((y, x, length)),\n        )\n        let row = data.at(y + 1 + i)\n        let _ = row.remove(x)\n        row\n      }\n    }\n  }\n  data\n}\n\n/// Adds `colspan`/`rowspan` field to specified cells.\n/// * `cells` a 2D array of cells (content)\n/// * `colspan-cells` an array of tuples `(y, x, length)` describing each colspan cell\n/// * `rowspan-cells` an array of tuples `(y, x, length)` describing each rowspan cell\n/// Returns flatten `array` of patched cells.\n///\n/// Note that this is not tested for when cell already wrapped in `cell()`.\n#let patch-span-cells(cells, colspan-cells, rowspan-cells) = {\n  let fill = (fill: green.transparentize(70%))\n  for ((y, x, length)) in colspan-cells {\n    cells.at(y).at(x) = table.cell(colspan: length, cells.at(y).at(x), ..fill)\n  }\n  for ((y, x, length)) in rowspan-cells {\n    cells.at(y).at(x) = table.cell(rowspan: length, cells.at(y).at(x), ..fill)\n  }\n  cells.flatten()\n}\n\n#{\n  // show table.cell.where(y: 0, x: 1): set table.cell(colspan: 2)\n  // show table.cell.where(y: 2, x: 0): set table.cell(rowspan: 2)\n  let colspan-cells = ((0, 1, 2),) // (y, x, length), min_length = 2 (no-op for \"< 2\")\n  let rowspan-cells = ((2, 0, 2),) // (y, x, length), min_length = 2 (no-op for \"< 2\")\n  let data = prepare-data(dat, colspan-cells, rowspan-cells)\n  table(\n    columns: (3cm,) * 3,\n    ..patch-span-cells(data, colspan-cells, rowspan-cells),\n  )\n}\n```\n\n<div align=center>\n\n![image|328x121](upload://zNbsLpFXHitNcYeF6wEfUunSwNV.png)\n</div>\n\nYou can merge or rewrite the 2 helper functions however you see fit. If you don't need to do anything in between, then you don't really need two of them. But they can also be easily merged by making a 3rd wrapper function:\n\n```typ\n#let patch-spans(data, colspan-cells, rowspan-cells) = {\n  patch-span-cells(\n    prepare-data(dat, colspan-cells, rowspan-cells),\n    colspan-cells,\n    rowspan-cells,\n  )\n}\n\n#table(\n  // A small bonus (can only use (the initial) unmodified\n  // 2D array here).\n  columns: dat.at(0).len(),\n  ..patch-spans(dat, colspan-cells, rowspan-cells),\n)\n```",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 4,
      "reads": 51,
      "score": 575.2,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 1815,
      "post_number": 5,
      "username": "shazid",
      "name": "Shazid",
      "created_at": "2024-09-18T19:35:40.330Z",
      "updated_at": "2024-09-18T19:35:40.330Z",
      "cooked": "<p>That works perfectly, thank you very much.</p>\n<p>But, now I wonder if this could be extended to support cells with <em><strong>both</strong></em> column span <em><strong>and</strong></em> row span.</p>",
      "raw": "That works perfectly, thank you very much.\n\nBut, now I wonder if this could be extended to support cells with ***both*** column span ***and*** row span.",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 43,
      "score": 58.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 284
    },
    {
      "id": 1818,
      "post_number": 6,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-18T19:58:33.423Z",
      "updated_at": "2024-09-18T19:58:33.423Z",
      "cooked": "<p>Most definitely! If you can easily (with a hack) do this for column-/row-span-only cells, then you can do this for column-and-rowspan cells.</p>\n<p>The algorithm does 2 basic steps:</p>\n<ol>\n<li>delete all elements from a matrix that shouldn’t be visible in the result table (due to a span);</li>\n<li>add a <code>table.cell()</code> wrapper to all elements in the matrix that are span cells’ content.</li>\n</ol>\n<p>Based on that, for a “block-span” cell you need to delete a block of elements from the matrix first (excluding the top-left element, which is the span-cell) — needs 2 nested for-loops (instead of 2 separate ones), and then add a <code>table.cell()</code> wrapper with <code>colspan</code> and <code>rowspan</code> fields set to the desired size.</p>",
      "raw": "Most definitely! If you can easily (with a hack) do this for column-/row-span-only cells, then you can do this for column-and-rowspan cells.\n\nThe algorithm does 2 basic steps:\n1. delete all elements from a matrix that shouldn't be visible in the result table (due to a span);\n2. add a `table.cell()` wrapper to all elements in the matrix that are span cells' content.\n\nBased on that, for a \"block-span\" cell you need to delete a block of elements from the matrix first (excluding the top-left element, which is the span-cell) — needs 2 nested for-loops (instead of 2 separate ones), and then add a `table.cell()` wrapper with `colspan` and `rowspan` fields set to the desired size.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 46,
      "score": 39.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 1890,
      "post_number": 7,
      "username": "shazid",
      "name": "Shazid",
      "created_at": "2024-09-19T09:14:30.665Z",
      "updated_at": "2024-09-19T09:14:30.665Z",
      "cooked": "<p>I have come up with a “arguably simpler” method (depending on whom you ask).</p>\n<p><strong>It relies on the CSV itself having flags for which cells should not be visible.</strong> However, this is not a problem for my current use case because the data is generated from R. So, I can just put something like “” in the cells that will be spanned over by other cells in R before writing the CSV to disk.</p>\n<p>For example, suppose that the CSV looks as follows:</p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/41416dc46e480f8f7d3c5e1ba508a2f935ebf0c0.png\" alt=\"image\" data-base62-sha1=\"9jhdoEt31V37QOZRpbrVDCdfBXa\" width=\"278\" height=\"167\"></p>\n<p>You can copy from below (I have named it <code>new.csv</code> in the code that follows):</p>\n<pre><code class=\"lang-auto\">,Spans column,&lt;spanned&gt;\nA,B,C\nSpans row,1,2\n&lt;spanned&gt;,3,4\nD,Spans rect,&lt;spanned&gt;\nE,&lt;spanned&gt;,&lt;spanned&gt;\nF,5,6\n</code></pre>\n<p>The Typst code I have written to make the table is:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let ndat = csv(\"new.csv\")\n\n#let cellinfo = (\n  (0, 1, 1, 2, red.transparentize(70%)),    // (row, col, rowspan, colspan, cell color)\n  (2, 0, 2, 1, green.transparentize(70%)),\n  (4, 1, 2, 2, blue.transparentize(70%))\n)\n\n#let prepdat(csvdat, cellinfo) = {\n  for (r, c, rs, cs, clr) in cellinfo{\n    csvdat.at(r).at(c) = table.cell(csvdat.at(r).at(c), colspan: cs, rowspan: rs, fill: clr)\n  }\n  \n  let filter_func(item) = {item != \"&lt;spanned&gt;\"}\n  \n  let csvflat = csvdat.flatten()\n  csvflat = csvflat.filter(filter_func)\n  return csvflat\n}\n\n#table(\n  columns: 3, \n  ..prepdat(ndat, cellinfo)\n)\n</code></pre>\n<p>The minimum working example can be found here: <a href=\"https://typst.app/project/r7fzqahb3BQJTwBRFV4-Ei\" class=\"inline-onebox\">Typst</a></p>\n<p>I would like to thank <a class=\"mention\" href=\"/u/andrew\">@Andrew</a> for his original solution which inspired me to write my own solution</p>",
      "raw": "I have come up with a \"arguably simpler\" method (depending on whom you ask).\n\n**It relies on the CSV itself having flags for which cells should not be visible.** However, this is not a problem for my current use case because the data is generated from R. So, I can just put something like \"<spanned>\" in the cells that will be spanned over by other cells in R before writing the CSV to disk.\n\nFor example, suppose that the CSV looks as follows:\n\n![image|278x167](upload://9jhdoEt31V37QOZRpbrVDCdfBXa.png)\n\nYou can copy from below (I have named it `new.csv` in the code that follows):\n\n```\n,Spans column,<spanned>\nA,B,C\nSpans row,1,2\n<spanned>,3,4\nD,Spans rect,<spanned>\nE,<spanned>,<spanned>\nF,5,6\n```\n\nThe Typst code I have written to make the table is:\n```typ\n#let ndat = csv(\"new.csv\")\n\n#let cellinfo = (\n  (0, 1, 1, 2, red.transparentize(70%)),    // (row, col, rowspan, colspan, cell color)\n  (2, 0, 2, 1, green.transparentize(70%)),\n  (4, 1, 2, 2, blue.transparentize(70%))\n)\n\n#let prepdat(csvdat, cellinfo) = {\n  for (r, c, rs, cs, clr) in cellinfo{\n    csvdat.at(r).at(c) = table.cell(csvdat.at(r).at(c), colspan: cs, rowspan: rs, fill: clr)\n  }\n  \n  let filter_func(item) = {item != \"<spanned>\"}\n  \n  let csvflat = csvdat.flatten()\n  csvflat = csvflat.filter(filter_func)\n  return csvflat\n}\n\n#table(\n  columns: 3, \n  ..prepdat(ndat, cellinfo)\n)\n```\n\nThe minimum working example can be found here: https://typst.app/project/r7fzqahb3BQJTwBRFV4-Ei\n\nI would like to thank @Andrew for his original solution which inspired me to write my own solution",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 40,
      "score": 48.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 284
    },
    {
      "id": 1891,
      "post_number": 8,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-19T09:27:59.883Z",
      "updated_at": "2024-09-19T09:27:59.883Z",
      "cooked": "<p>If the CSV file indeed can be altered, then this is indeed a better solution size-wise (and feature-wise). I see you’ve added block-spans, nice. One downside to this will be instances where you have big spans, which means you have to mark a lot of elements/cells in the CSV instead of just providing a position and a span length of a single spanned element. And also a very small potential problem is if you can have virtually any string in the CSV cell, including the spanned marker. But I don’t think this is the case here.</p>\n<aside class=\"quote no-group\" data-username=\"shazid\" data-post=\"7\" data-topic=\"455\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/s/001666/48.png\" class=\"avatar\"> shazid:</div>\n<blockquote>\n<p>The Typst code I have written to make the table is:</p>\n</blockquote>\n</aside>\n<p>You should share the output too (you can put it in a “details” block if you want).</p>",
      "raw": "If the CSV file indeed can be altered, then this is indeed a better solution size-wise (and feature-wise). I see you've added block-spans, nice. One downside to this will be instances where you have big spans, which means you have to mark a lot of elements/cells in the CSV instead of just providing a position and a span length of a single spanned element. And also a very small potential problem is if you can have virtually any string in the CSV cell, including the spanned marker. But I don't think this is the case here.\n\n[quote=\"shazid, post:7, topic:455\"]\nThe Typst code I have written to make the table is:\n[/quote]\n\nYou should share the output too (you can put it in a \"details\" block if you want).",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 31,
      "score": 16.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 1895,
      "post_number": 9,
      "username": "shazid",
      "name": "Shazid",
      "created_at": "2024-09-19T09:48:20.494Z",
      "updated_at": "2024-09-19T09:48:20.494Z",
      "cooked": "<p>I think the main issue with the my solution would be performance if the table is really big or if there are many such tables, since we have to filter out elements of an array (which is quite an expensive task, I assume).</p>\n<aside class=\"quote no-group\" data-username=\"Andrew\" data-post=\"8\" data-topic=\"455\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<p>You should share the output too (you can put it in a “details” block if you want).</p>\n</blockquote>\n</aside>\n<p>I tried to post the screenshot of the output. But, it doesn’t let me post multiple screenshots because I’m new to the forum.</p>",
      "raw": "I think the main issue with the my solution would be performance if the table is really big or if there are many such tables, since we have to filter out elements of an array (which is quite an expensive task, I assume).\n\n[quote=\"Andrew, post:8, topic:455\"]\nYou should share the output too (you can put it in a “details” block if you want).\n[/quote]\n\nI tried to post the screenshot of the output. But, it doesn't let me post multiple screenshots because I'm new to the forum.",
      "reply_to_post_number": 8,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 30,
      "score": 16.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 284
    },
    {
      "id": 1903,
      "post_number": 10,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-19T10:41:29.769Z",
      "updated_at": "2024-09-19T10:41:29.769Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"shazid\" data-post=\"9\" data-topic=\"455\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/s/001666/48.png\" class=\"avatar\"> shazid:</div>\n<blockquote>\n<p>I think the main issue with the my solution would be performance if the table is really big or if there are many such tables, since we have to filter out elements of an array (which is quite an expensive task, I assume).</p>\n</blockquote>\n</aside>\n<p>Right, I forgot about that. Yeah, filtering will be more expensive. I think it will go from <code>O(s)</code> to <code>O(r*c)</code> where <code>s</code> — number of spans, <code>r</code> — number of rows, <code>c</code> — number of columns.</p>\n<aside class=\"quote no-group\" data-username=\"shazid\" data-post=\"9\" data-topic=\"455\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/s/001666/48.png\" class=\"avatar\"> shazid:</div>\n<blockquote>\n<p>I tried to post the screenshot of the output. But, it doesn’t let me post multiple screenshots because I’m new to the forum.</p>\n</blockquote>\n</aside>\n<p>Oh, I see. If you want to lift the current limits, you can check out <a href=\"https://forum.typst.app/t/new-user-limits-are-annoyingly-restrictive/474/2\" class=\"inline-onebox\">New user limits are annoyingly restrictive - #2 by quachpas</a>.</p>",
      "raw": "[quote=\"shazid, post:9, topic:455\"]\nI think the main issue with the my solution would be performance if the table is really big or if there are many such tables, since we have to filter out elements of an array (which is quite an expensive task, I assume).\n[/quote]\n\nRight, I forgot about that. Yeah, filtering will be more expensive. I think it will go from `O(s)` to `O(r*c)` where `s` — number of spans, `r` — number of rows, `c` — number of columns.\n\n[quote=\"shazid, post:9, topic:455\"]\nI tried to post the screenshot of the output. But, it doesn’t let me post multiple screenshots because I’m new to the forum.\n[/quote]\n\nOh, I see. If you want to lift the current limits, you can check out https://forum.typst.app/t/new-user-limits-are-annoyingly-restrictive/474/2.",
      "reply_to_post_number": 9,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 32,
      "score": 46.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:58:41.777331"
}