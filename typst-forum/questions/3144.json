{
  "topic_metadata": {
    "id": 3144,
    "title": "How to use variables in eval, when variables are defined in another document?",
    "slug": "how-to-use-variables-in-eval-when-variables-are-defined-in-another-document",
    "posts_count": 6,
    "created_at": "2025-03-07T15:23:43.507Z",
    "last_posted_at": "2025-03-09T14:53:25.548Z",
    "views": 95,
    "like_count": 2,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "aarnent",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 533
  },
  "posts": [
    {
      "id": 9472,
      "post_number": 1,
      "username": "Mikael",
      "name": "Mikaël",
      "created_at": "2025-03-07T15:23:43.607Z",
      "updated_at": "2025-03-08T20:27:26.509Z",
      "cooked": "<p>Hi,</p>\n<p>I want to create a document where the content will be stored in YAML files. However the YAML file may contain variables that should be defined in the main Typst file.</p>\n<p>Here is an example of Typst file:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let content = yaml(\"content.yaml\")\n#let stuff = \"Stuff\"\n\n#eval(content.content, mode: \"markup\")\n</code></pre>\n<p>And the <code>content.yaml</code> file:</p>\n<pre data-code-wrap=\"yaml\"><code class=\"lang-yaml\">content: |\n  It _appears_ that the #stuff matters.\n</code></pre>\n<p>When compiling, I get this error:</p>\n<pre><code class=\"lang-auto\">error: unknown variable: stuff\n  ┌─ test.typ:4:6\n  │\n4 │ #eval(content.content, mode: \"markup\")\n  │       ^^^^^^^^^^^^^^^\n</code></pre>\n<p>So, <code>#stuff</code> is correctly identified as a variable, but the issue is that the eval function seems not to take into account the calling environment.</p>\n<p>In order to fix this, I need to provide a <code>scope</code> parameter to the <code>eval</code> function, such as:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#eval(content.content, mode: \"markup\", scope: (stuff: stuff))\n</code></pre>\n<p>However my framework is slightly more complicated in practice and the <code>eval</code> function is called in a package that should not know the variables that are defined in the main document (and the package shouldn’t even know about the main document). Therefore, how to achieve the same behaviour, with the constraint that we cannot ask the package to load variables from the main document?</p>\n<p>Thanks!</p>",
      "raw": "Hi,\n\nI want to create a document where the content will be stored in YAML files. However the YAML file may contain variables that should be defined in the main Typst file.\n\nHere is an example of Typst file:\n```typ\n#let content = yaml(\"content.yaml\")\n#let stuff = \"Stuff\"\n\n#eval(content.content, mode: \"markup\")\n```\n\nAnd the `content.yaml` file:\n```yaml\ncontent: |\n  It _appears_ that the #stuff matters.\n```\n\nWhen compiling, I get this error:\n```\nerror: unknown variable: stuff\n  ┌─ test.typ:4:6\n  │\n4 │ #eval(content.content, mode: \"markup\")\n  │       ^^^^^^^^^^^^^^^\n```\n\nSo, `#stuff` is correctly identified as a variable, but the issue is that the eval function seems not to take into account the calling environment.\n\nIn order to fix this, I need to provide a `scope` parameter to the `eval` function, such as:\n```typ\n#eval(content.content, mode: \"markup\", scope: (stuff: stuff))\n```\n\nHowever my framework is slightly more complicated in practice and the `eval` function is called in a package that should not know the variables that are defined in the main document (and the package shouldn't even know about the main document). Therefore, how to achieve the same behaviour, with the constraint that we cannot ask the package to load variables from the main document?\n\nThanks!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 28,
      "score": 125.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1314
    },
    {
      "id": 9482,
      "post_number": 2,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-03-07T22:01:02.547Z",
      "updated_at": "2025-03-07T22:01:02.547Z",
      "cooked": "<p>The reason for <code>eval</code> not being able to access arbitrary variables is because (AFAIK) security reasons.</p>\n<p>But if I understand your question correctly, you are calling <code>eval</code> inside a package which is itself inside main? If so, you can just define the <code>scope</code> (a dictionary) in main, and pass that to the package (which would then pass it to <code>eval</code>)</p>",
      "raw": "The reason for `eval` not being able to access arbitrary variables is because (AFAIK) security reasons. \n\nBut if I understand your question correctly, you are calling `eval` inside a package which is itself inside main? If so, you can just define the `scope` (a dictionary) in main, and pass that to the package (which would then pass it to `eval`)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 5.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 501
    },
    {
      "id": 9493,
      "post_number": 3,
      "username": "Mikael",
      "name": "Mikaël",
      "created_at": "2025-03-08T11:06:53.017Z",
      "updated_at": "2025-03-08T11:06:53.017Z",
      "cooked": "<p>Thanks for your reply! And sorry, I didn’t make that clear.</p>\n<p>Let’s assume I have three files:</p>\n<ol>\n<li>the main file: <code>main.typ</code></li>\n<li>a package: <code>mypackage.typ</code></li>\n<li>a YAML file with the content: <code>content.yaml</code></li>\n</ol>\n<p>The content of <code>main.typ</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"./mypackage.typ\": *\n#let content = yaml(\"content.yaml\")\n#let stuff = \"Stuff\"\n\n#display(content)\n</code></pre>\n<p>The content of <code>mypackage.typ</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let display(content) = {\n    eval(content.content, mode: \"markup\")\n}\n</code></pre>\n<p>And the content of <code>content.yaml</code>:</p>\n<pre data-code-wrap=\"yaml\"><code class=\"lang-yaml\">content: |\n  It appears that #stuff matters\n</code></pre>\n<p>So, indeed I would like to pass all the variables/functions to <code>mypackage</code> but the problem is that I don’t know how to pass the dictionary of the scope to <code>mypackage.typ</code>.</p>\n<p>Thanks again!</p>",
      "raw": "Thanks for your reply! And sorry, I didn't make that clear.\n\nLet's assume I have three files:\n1. the main file: `main.typ`\n2. a package: `mypackage.typ`\n3. a YAML file with the content: `content.yaml`\n\nThe content of `main.typ`:\n\n```typ\n#import \"./mypackage.typ\": *\n#let content = yaml(\"content.yaml\")\n#let stuff = \"Stuff\"\n\n#display(content)\n```\n\nThe content of `mypackage.typ`:\n```typ\n#let display(content) = {\n    eval(content.content, mode: \"markup\")\n}\n```\n\nAnd the content of `content.yaml`:\n```yaml\ncontent: |\n  It appears that #stuff matters\n```\n\nSo, indeed I would like to pass all the variables/functions to `mypackage` but the problem is that I don't know how to pass the dictionary of the scope to `mypackage.typ`.\n\nThanks again!",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 9.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1314
    },
    {
      "id": 9498,
      "post_number": 4,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-03-08T14:52:33.868Z",
      "updated_at": "2025-03-08T14:52:33.868Z",
      "cooked": "<p>Would something like this work for you?</p>\n<p><code>main.typ</code>:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"./mypackage.typ\": *\n#let content = yaml(\"content.yaml\")\n#let stuff = \"Stuff\"\n\n#let scopedict = (\n  stuff: stuff,\n)\n\n#display(content, scopedict)\n</code></pre>\n<p><code>mypackage.typ</code>:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let display(content, scope) = {\n    eval(content.content, mode: \"markup\", scope: scope)\n}\n</code></pre>\n<p>With <code>content.yaml</code> being defined as before. If you’re seeking a way to maintain the scope dictionary automatically, you’ll have to program your own external tools</p>",
      "raw": "Would something like this work for you?\n\n`main.typ`:\n```typst\n#import \"./mypackage.typ\": *\n#let content = yaml(\"content.yaml\")\n#let stuff = \"Stuff\"\n\n#let scopedict = (\n  stuff: stuff,\n)\n\n#display(content, scopedict)\n```\n\n`mypackage.typ`:\n```typst\n#let display(content, scope) = {\n    eval(content.content, mode: \"markup\", scope: scope)\n}\n```\n\nWith `content.yaml` being defined as before. If you're seeking a way to maintain the scope dictionary automatically, you'll have to program your own external tools",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 20,
      "score": 24.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 501
    },
    {
      "id": 9511,
      "post_number": 5,
      "username": "Mikael",
      "name": "Mikaël",
      "created_at": "2025-03-09T07:49:36.523Z",
      "updated_at": "2025-03-09T07:49:36.523Z",
      "cooked": "<p>Thanks! Is there a way to include all the variables from the scope, without explicitly adding them to the dictionary?</p>\n<p>Something similar to</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"imports.typ\" as imported\n#let scopedict = dictionary(imported)\n</code></pre>\n<p>but instead of <code>imports.typ</code> it would only import what is declared so far in the current document? Otherwise, I would move my variable declarations in another file.</p>\n<p>Thanks again!</p>",
      "raw": "Thanks! Is there a way to include all the variables from the scope, without explicitly adding them to the dictionary?\n\nSomething similar to \n```typst\n#import \"imports.typ\" as imported\n#let scopedict = dictionary(imported)\n```\nbut instead of `imports.typ` it would only import what is declared so far in the current document? Otherwise, I would move my variable declarations in another file.\n\nThanks again!",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 20,
      "score": 9.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1314
    },
    {
      "id": 9522,
      "post_number": 6,
      "username": "aarnent",
      "name": "",
      "created_at": "2025-03-09T14:53:25.548Z",
      "updated_at": "2025-03-09T14:53:25.548Z",
      "cooked": "<p>Sadly, I don’t think there’s currently a way of finding all variables in scope</p>",
      "raw": "Sadly, I don't think there's currently a way of finding all variables in scope",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 15,
      "score": 18.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 501
    }
  ],
  "scraped_at": "2025-06-10T09:50:35.627733"
}