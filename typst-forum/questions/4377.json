{
  "topic_metadata": {
    "id": 4377,
    "title": "How can I parse this two-level array, or is there a better alternative",
    "slug": "how-can-i-parse-this-two-level-array-or-is-there-a-better-alternative",
    "posts_count": 6,
    "created_at": "2025-05-29T20:29:42.888Z",
    "last_posted_at": "2025-06-07T16:17:05.794Z",
    "views": 78,
    "like_count": 4,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Andrew",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1575
  },
  "posts": [
    {
      "id": 13408,
      "post_number": 1,
      "username": "Rik",
      "name": "Rik",
      "created_at": "2025-05-29T20:29:42.957Z",
      "updated_at": "2025-05-29T20:29:42.957Z",
      "cooked": "<p>I have created an enhanced <span class=\"hashtag-raw\">#quote</span> function to support, in addition to an attribution, restatements and translations. <em>Translation</em> is used to present a quotation that is not in the language of the article in the language of the article; <em>restatement</em> is used to present a quotation in a different form (antiqua instead of an original fraktur type face, or phonetically, or translated into a third language.) There may be multiple restatements and translations. My current code handles the multiples well, but I cannot seem to get a second level of array working to support specification of the language of a restatement so that it is properly hyphenated.</p>\n<p>Restatements are almost always in the language of the original quotation, but not always (consider phonetic transcriptions, or instances as shown here where Latin is used to restate a Greek original). So, I would prefer not to explicitly state a language, but only state it for the exceptional cases. I would expect an array like;</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\"> restatement: (\n   [restatement_in_language_of_quotation],\n   ( [other_language_code], [restatement_in_other_language]),\n   ( [null_language_code], [phonetic transcription])\n )\n</code></pre>\n<p>should work, but I cannot get that working.</p>\n<p>The code so far:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let    QGray = luma(175)\n#let   QInset = 2em\n#let   QScale = 1.1818em // roughly 13pt for 11pt text\n\n#let   QAOpen = [#text(size: QScale, fill: QGray)[--]]\n#let QAIndent = -4mm  // Indent for attribution decoration\n\n#let   QROpen = [#text(size: QScale, fill: QGray)[\\[]]\n#let  QRClose = [#text(size: QScale, fill: QGray)[#sym.wj\\]]]\n#let QRIndent = -2.5mm  // Indent for attribution decoration\n\n#let   QTOpen = [#text(size: QScale, fill: QGray)[\\(]]\n#let  QTClose = [#text(size: QScale, fill: QGray)[#sym.wj\\)]]\n#let QTIndent = -2.5mm  // Indent for attribution decoration\n\n#let Quote(\n  label: none,\n  attribution: none,\n  restatement: (),\n  translation: (),\n  lang: none,\n  body,\n) = {\n  if restatement != none [\n    #if type(restatement) != array {\n      restatement = (restatement,)\n    }\n  ]\n  if translation != none [\n    #if type(translation) != array {\n      translation = (translation,)\n    }\n  ]\n  block(\n    above: 0em, //-0.5em,\n    below: 0em, //-0.5em,\n    inset: QInset,\n    [\n      #if lang != none [\n        #set text(\n          lang: lang\n        )\n      ]\n      #body\n      #if restatement != none [\n        #for restate in restatement [\n          #par(\n            first-line-indent: QRIndent\n          )[\n            #QROpen\n            #restate\n            #QRClose\n          ]\n        ]\n      ]\n      #if translation != none [\n        #for trans in translation [\n          #par(\n            first-line-indent: QTIndent\n          )[\n            #QTOpen\n            #trans\n            #QTClose\n          ]\n        ]\n      ]\n      #if attribution != none [\n        #par(\n            first-line-indent: QAIndent\n        )[\n          #QAOpen\n          #attribution\n        ]\n      ]\n    ]\n  )\n}\n#Quote(\n  attribution: [Synesius of Cyrene (_circa_ 370--_circa_ 413) in modernized Greek, followed by Latin restatements (1) as used by Robert Burton in _The Anatomy of Melancholy_ (1628) and matching the Latin by Thomas Naogeorgus (1559), (2) published by Claudius Morellus in a 1605 collection of Synesius's letters, and (3) by Rudolf Hercher in his 1873 collection of the letters, followed by Burton's English translation],\n  restatement: (\n    [Magis impium Mortuorum Lucubrationes quam veſtes furari.],\n    [arbitror magis impiú mortuorum ſcript furari, quam veſtes, quod appelatur buſta effodere.],\n    [Magis autem impium esse arbitror mortuorum lucubrationes quam vestes furari, quod sepulcra perfodere dicitur.]\n  ),\n  translation: [It is a greater offence to ſteale dead mens labours, than their clothes],\n  lang: \"el\"\n)[ἡγοῦμαι δὲ ἀσεβέστερον ἀποθανόντων λόγους κλέπτειν ἢ θοἰμάτια, ὃ καλεῖται τυμβωρυχεῖν.\n]\n</code></pre>\n<p>Can somebody suggest how to process the two-level array?</p>",
      "raw": "I have created an enhanced \\#quote function to support, in addition to an attribution, restatements and translations. *Translation* is used to present a quotation that is not in the language of the article in the language of the article; *restatement* is used to present a quotation in a different form (antiqua instead of an original fraktur type face, or phonetically, or translated into a third language.) There may be multiple restatements and translations. My current code handles the multiples well, but I cannot seem to get a second level of array working to support specification of the language of a restatement so that it is properly hyphenated.\n\nRestatements are almost always in the language of the original quotation, but not always (consider phonetic transcriptions, or instances as shown here where Latin is used to restate a Greek original). So, I would prefer not to explicitly state a language, but only state it for the exceptional cases. I would expect an array like;\n\n```typ\n restatement: (\n   [restatement_in_language_of_quotation],\n   ( [other_language_code], [restatement_in_other_language]),\n   ( [null_language_code], [phonetic transcription])\n )\n```\n should work, but I cannot get that working.\n\nThe code so far:\n\n```typ\n#let    QGray = luma(175)\n#let   QInset = 2em\n#let   QScale = 1.1818em // roughly 13pt for 11pt text\n\n#let   QAOpen = [#text(size: QScale, fill: QGray)[--]]\n#let QAIndent = -4mm  // Indent for attribution decoration\n\n#let   QROpen = [#text(size: QScale, fill: QGray)[\\[]]\n#let  QRClose = [#text(size: QScale, fill: QGray)[#sym.wj\\]]]\n#let QRIndent = -2.5mm  // Indent for attribution decoration\n\n#let   QTOpen = [#text(size: QScale, fill: QGray)[\\(]]\n#let  QTClose = [#text(size: QScale, fill: QGray)[#sym.wj\\)]]\n#let QTIndent = -2.5mm  // Indent for attribution decoration\n\n#let Quote(\n  label: none,\n  attribution: none,\n  restatement: (),\n  translation: (),\n  lang: none,\n  body,\n) = {\n  if restatement != none [\n    #if type(restatement) != array {\n      restatement = (restatement,)\n    }\n  ]\n  if translation != none [\n    #if type(translation) != array {\n      translation = (translation,)\n    }\n  ]\n  block(\n    above: 0em, //-0.5em,\n    below: 0em, //-0.5em,\n    inset: QInset,\n    [\n      #if lang != none [\n        #set text(\n          lang: lang\n        )\n      ]\n      #body\n      #if restatement != none [\n        #for restate in restatement [\n          #par(\n            first-line-indent: QRIndent\n          )[\n            #QROpen\n            #restate\n            #QRClose\n          ]\n        ]\n      ]\n      #if translation != none [\n        #for trans in translation [\n          #par(\n            first-line-indent: QTIndent\n          )[\n            #QTOpen\n            #trans\n            #QTClose\n          ]\n        ]\n      ]\n      #if attribution != none [\n        #par(\n            first-line-indent: QAIndent\n        )[\n          #QAOpen\n          #attribution\n        ]\n      ]\n    ]\n  )\n}\n#Quote(\n  attribution: [Synesius of Cyrene (_circa_ 370--_circa_ 413) in modernized Greek, followed by Latin restatements (1) as used by Robert Burton in _The Anatomy of Melancholy_ (1628) and matching the Latin by Thomas Naogeorgus (1559), (2) published by Claudius Morellus in a 1605 collection of Synesius's letters, and (3) by Rudolf Hercher in his 1873 collection of the letters, followed by Burton's English translation],\n  restatement: (\n    [Magis impium Mortuorum Lucubrationes quam veſtes furari.],\n    [arbitror magis impiú mortuorum ſcript furari, quam veſtes, quod appelatur buſta effodere.],\n    [Magis autem impium esse arbitror mortuorum lucubrationes quam vestes furari, quod sepulcra perfodere dicitur.]\n  ),\n  translation: [It is a greater offence to ſteale dead mens labours, than their clothes],\n  lang: \"el\"\n)[ἡγοῦμαι δὲ ἀσεβέστερον ἀποθανόντων λόγους κλέπτειν ἢ θοἰμάτια, ὃ καλεῖται τυμβωρυχεῖν.\n]\n```\n\nCan somebody suggest how to process the two-level array?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 4.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1174
    },
    {
      "id": 13429,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2025-05-30T08:34:33.145Z",
      "updated_at": "2025-05-30T08:35:04.200Z",
      "cooked": "<p>Hello! If I understand correctly, you want the correct language parameter for your restatement in case you specify one.</p>\n<p>I can only suggest to use a dictionary so it’s more explicit what’s going on, although an array with a string, then text is also fine. From your example, it would look like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#Quote(\n  attribution: [Synesius of Cyrene (_circa_ 370--_circa_ 413) in modernized Greek, followed by Latin restatements (1) as used by Robert Burton in _The Anatomy of Melancholy_ (1628) and matching the Latin by Thomas Naogeorgus (1559), (2) published by Claudius Morellus in a 1605 collection of Synesius's letters, and (3) by Rudolf Hercher in his 1873 collection of the letters, followed by Burton's English translation],\n  restatement: (\n    (\n      [Magis impium Mortuorum Lucubrationes quam veſtes furari.],\n      [arbitror magis impiú mortuorum ſcript furari, quam veſtes, quod appelatur buſta effodere.],\n      [Magis autem impium esse arbitror mortuorum lucubrationes quam vestes furari, quod sepulcra perfodere dicitur.],\n    ),\n    (\n      [mɑdʒis impium mɔɾtuɔɾum lukubɾɑtsiɔnɛs kwɑm vɛſtɛs fuɾɑɾi.],\n      [ɑɾbitɾɔɾ mɑdʒis impiu mɔɾtuɔɾum ſkɾipt fuɾɑɾi, kwɑm vɛſtɛs, kwɔd ɑppɛlɑtuɾ buſtɑ ɛffɔdɛɾɛ.],\n      [mɑdʒis ɑutɛm impium ɛssɛ ɑɾbitɾɔɾ mɔɾtuɔɾum lukubɾɑtsiɔnɛs kwɑm vɛstɛs fuɾɑɾi, kwɔd sɛpulkɾɑ pɛɾfɔdɛɾɛ ditʃituɾ.],\n    ),\n    (\n      lang: \"fr\",\n      text: [Je mène une voie plus irrespectueuse pour voler ou profaner les paroles des morts, ce qu'on appelle le pillage de tombes.],\n    )\n  ),\n  lang: \"el\",\n  translation: [It is a greater offence to ſteale dead mens labours, than their clothes],\n  [ἡγοῦμαι δὲ ἀσεβέστερον ἀποθανόντων λόγους κλέπτειν ἢ θοἰμάτια, ὃ καλεῖται τυμβωρυχεῖν.],\n)\n</code></pre>\n<p><code>restatement</code> (should probably be <code>restatements</code>) is a nested array as you say, so you need to process every restatement, then every line in the text.</p>\n<p>In which case, the restatement processing should look like this. I deliberately made it very verbose, but I’m sure it could be written more succinctly.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">...\n        #for restate in restatement [ // per statement\n          #let restate = (\n            lang: if type(restate) == dictionary { restate.lang } else {\n              \"\"\n            }, // extract the lang if provided\n            text: if type(restate) == dictionary {\n              restate.text\n            } else {\n              restate // ([Lorem],), [Lorem]\n            },\n          )\n          #if type(restate.text) != array { // if text is not an array\n            restate.text = (restate.text,) // (.., text: [Lorem])\n          }\n          #let txt = if restate.lang != \"\" {\n            text.with(lang: restate.lang) // specify the lang!\n          } else {\n            text\n          }\n          #for line in restate.text { // iterate over (text: ([Lorem],))\n            par(first-line-indent: QRIndent)[\n              #QROpen\n              #txt(line)\n              #QRClose\n            ]\n          }\n        ]\n</code></pre>\n<p>Then you get something like this<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/a/adf87fd300292cf7370b6e137317bb01ca8323df.jpeg\" data-download-href=\"https://forum.typst.app/uploads/default/adf87fd300292cf7370b6e137317bb01ca8323df\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/a/adf87fd300292cf7370b6e137317bb01ca8323df_2_690x493.jpeg\" alt=\"image\" data-base62-sha1=\"oP10BkqXhvgttQGi96qFMn58yaX\" width=\"690\" height=\"493\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/a/adf87fd300292cf7370b6e137317bb01ca8323df_2_690x493.jpeg, https://forum.typst.app/uploads/default/optimized/2X/a/adf87fd300292cf7370b6e137317bb01ca8323df_2_1035x739.jpeg 1.5x, https://forum.typst.app/uploads/default/optimized/2X/a/adf87fd300292cf7370b6e137317bb01ca8323df_2_1380x986.jpeg 2x\" data-dominant-color=\"F2F2F2\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1920×1374 160 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "Hello! If I understand correctly, you want the correct language parameter for your restatement in case you specify one.\n\nI can only suggest to use a dictionary so it's more explicit what's going on, although an array with a string, then text is also fine. From your example, it would look like this:\n\n```typ\n#Quote(\n  attribution: [Synesius of Cyrene (_circa_ 370--_circa_ 413) in modernized Greek, followed by Latin restatements (1) as used by Robert Burton in _The Anatomy of Melancholy_ (1628) and matching the Latin by Thomas Naogeorgus (1559), (2) published by Claudius Morellus in a 1605 collection of Synesius's letters, and (3) by Rudolf Hercher in his 1873 collection of the letters, followed by Burton's English translation],\n  restatement: (\n    (\n      [Magis impium Mortuorum Lucubrationes quam veſtes furari.],\n      [arbitror magis impiú mortuorum ſcript furari, quam veſtes, quod appelatur buſta effodere.],\n      [Magis autem impium esse arbitror mortuorum lucubrationes quam vestes furari, quod sepulcra perfodere dicitur.],\n    ),\n    (\n      [mɑdʒis impium mɔɾtuɔɾum lukubɾɑtsiɔnɛs kwɑm vɛſtɛs fuɾɑɾi.],\n      [ɑɾbitɾɔɾ mɑdʒis impiu mɔɾtuɔɾum ſkɾipt fuɾɑɾi, kwɑm vɛſtɛs, kwɔd ɑppɛlɑtuɾ buſtɑ ɛffɔdɛɾɛ.],\n      [mɑdʒis ɑutɛm impium ɛssɛ ɑɾbitɾɔɾ mɔɾtuɔɾum lukubɾɑtsiɔnɛs kwɑm vɛstɛs fuɾɑɾi, kwɔd sɛpulkɾɑ pɛɾfɔdɛɾɛ ditʃituɾ.],\n    ),\n    (\n      lang: \"fr\",\n      text: [Je mène une voie plus irrespectueuse pour voler ou profaner les paroles des morts, ce qu'on appelle le pillage de tombes.],\n    )\n  ),\n  lang: \"el\",\n  translation: [It is a greater offence to ſteale dead mens labours, than their clothes],\n  [ἡγοῦμαι δὲ ἀσεβέστερον ἀποθανόντων λόγους κλέπτειν ἢ θοἰμάτια, ὃ καλεῖται τυμβωρυχεῖν.],\n)\n```\n`restatement` (should probably be `restatements`) is a nested array as you say, so you need to process every restatement, then every line in the text.\n\nIn which case, the restatement processing should look like this. I deliberately made it very verbose, but I'm sure it could be written more succinctly.\n\n```typ\n...\n        #for restate in restatement [ // per statement\n          #let restate = (\n            lang: if type(restate) == dictionary { restate.lang } else {\n              \"\"\n            }, // extract the lang if provided\n            text: if type(restate) == dictionary {\n              restate.text\n            } else {\n              restate // ([Lorem],), [Lorem]\n            },\n          )\n          #if type(restate.text) != array { // if text is not an array\n            restate.text = (restate.text,) // (.., text: [Lorem])\n          }\n          #let txt = if restate.lang != \"\" {\n            text.with(lang: restate.lang) // specify the lang!\n          } else {\n            text\n          }\n          #for line in restate.text { // iterate over (text: ([Lorem],))\n            par(first-line-indent: QRIndent)[\n              #QROpen\n              #txt(line)\n              #QRClose\n            ]\n          }\n        ]\n```\nThen you get something like this\n![image|690x493](upload://oP10BkqXhvgttQGi96qFMn58yaX.jpeg)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 4.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 13443,
      "post_number": 3,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-30T14:32:41.473Z",
      "updated_at": "2025-05-30T14:32:41.473Z",
      "cooked": "<p>Please try avoiding using markup square brackets in scripting if you continue to use scripting inside. It can add spaces in some cases. Can you share the reason you are using it? I don’t think documentation has this.</p>\n<p>Like <a class=\"mention\" href=\"/u/quachpas\">@quachpas</a> said, maybe <code>restatement</code> really should be <code>restatements</code>, even though you technically can pass only one. I guess this is the same problem as <a href=\"https://typst.app/docs/reference/model/document/#parameters-author\"><code>document.author</code></a>.</p>\n<p>To parse array with different data structures, use <a href=\"https://typst.app/docs/reference/foundations/type/\"><code>type()</code></a>. With <a href=\"https://typst.app/docs/reference/foundations/array/#definitions-filter\"><code>array.map</code></a> you can check the type and change the element’s structure.</p>\n<p>The conditional set rule doesn’t work this way, see <a href=\"https://typst.app/docs/reference/styling/#set-rules:~:text=Sometimes%2C%20you'll%20want%20to%20apply%20a%20set%20rule%20conditionally.%20For%20this%2C%20you%20can%20use%20a%20set%2Dif%20rule.\">this</a>.</p>\n<p>There is also <a href=\"https://typst.app/docs/reference/layout/block/#parameters-spacing\"><code>block.spacing</code></a>.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let    QGray = luma(175)\n#let   QInset = 2em\n#let   QScale = 1.1818em // roughly 13pt for 11pt text\n\n#let   QAOpen = text(size: QScale, fill: QGray)[--]\n#let QAIndent = -4mm  // Indent for attribution decoration\n\n#let   QROpen = text(size: QScale, fill: QGray)[\\[]\n#let  QRClose = text(size: QScale, fill: QGray)[#sym.wj\\]]\n#let QRIndent = -2.5mm  // Indent for attribution decoration\n\n#let   QTOpen = text(size: QScale, fill: QGray)[\\(]\n#let  QTClose = text(size: QScale, fill: QGray)[#sym.wj\\)]\n#let QTIndent = -2.5mm  // Indent for attribution decoration\n\n#let Quote(\n  label: none,\n  attribution: none,\n  restatement: (),\n  translation: (),\n  lang: none,\n  body,\n) = {\n  if type(restatement) != array { restatement = (restatement,) }\n  if type(translation) != array { translation = (translation,) }\n  restatement = restatement.map(x =&gt; if type(x) != array { (lang, x) } else { x })\n  block(spacing: 0em, inset: QInset, {\n    set text(lang: lang) if lang != none\n    body\n    for (lang, restate) in restatement {\n        set text(lang: lang)\n      par(first-line-indent: QRIndent)[#QROpen (#lang) #restate #QRClose]\n    }\n    for trans in translation {\n      par(first-line-indent: QTIndent)[#QTOpen #trans #QTClose]\n    }\n    if attribution != none {\n      par(first-line-indent: QAIndent)[#QAOpen #attribution]\n    }\n  })\n}\n\n#Quote(\n  attribution: [Synesius of Cyrene (_circa_ 370--_circa_ 413) in modernized Greek, followed by Latin restatements (1) as used by Robert Burton in _The Anatomy of Melancholy_ (1628) and matching the Latin by Thomas Naogeorgus (1559), (2) published by Claudius Morellus in a 1605 collection of Synesius's letters, and (3) by Rudolf Hercher in his 1873 collection of the letters, followed by Burton's English translation],\n  restatement: (\n     [restatement_in_language_of_quotation],\n     (\"us\", [\"restatement_in_other_language\"]),\n     (\"ru\", [\"phonetic\" transcription]),\n  ),\n  translation: [It is a greater offence to ſteale dead mens labours, than their clothes],\n  lang: \"el\"\n)[ἡγοῦμαι δὲ ἀσεβέστερον ἀποθανόντων λόγους κλέπτειν ἢ θοἰμάτια, ὃ καλεῖται τυμβωρυχεῖν.\n]\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/0/0ab7079fc48efe4fbb336184e2788d4792ced1c9.png\" data-download-href=\"https://forum.typst.app/uploads/default/0ab7079fc48efe4fbb336184e2788d4792ced1c9\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/original/2X/0/0ab7079fc48efe4fbb336184e2788d4792ced1c9.png\" alt=\"image\" data-base62-sha1=\"1wMUGcbICcvUZ9TYpStNDLXQQat\" width=\"540\" height=\"253\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">540×253 46.1 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>With <a href=\"https://forum.typst.app/t/which-show-rule-takes-precedence/3904/5\">show rule wrapping</a> it can be slightly simplified:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let Quote(\n  label: none,\n  attribution: none,\n  restatement: (),\n  translation: (),\n  lang: none,\n  body,\n) = {\n  if type(restatement) != array { restatement = (restatement,) }\n  if type(translation) != array { translation = (translation,) }\n  restatement = restatement.map(x =&gt; if type(x) != array { (lang, x) } else { x })\n  show: block.with(spacing: 0em, inset: QInset)\n  set text(lang: lang) if lang != none\n  body\n  for (lang, restate) in restatement {\n    set text(lang: lang)\n    par(first-line-indent: QRIndent)[#QROpen (#lang) #restate #QRClose]\n  }\n  for trans in translation {\n    par(first-line-indent: QTIndent)[#QTOpen #trans #QTClose]\n  }\n  if attribution != none {\n    par(first-line-indent: QAIndent)[#QAOpen #attribution]\n  }\n}\n</code></pre>",
      "raw": "Please try avoiding using markup square brackets in scripting if you continue to use scripting inside. It can add spaces in some cases. Can you share the reason you are using it? I don't think documentation has this.\n\nLike @quachpas said, maybe `restatement` really should be `restatements`, even though you technically can pass only one. I guess this is the same problem as [`document.author`](https://typst.app/docs/reference/model/document/#parameters-author).\n\nTo parse array with different data structures, use [`type()`](https://typst.app/docs/reference/foundations/type/). With [`array.map`](https://typst.app/docs/reference/foundations/array/#definitions-filter) you can check the type and change the element's structure.\n\nThe conditional set rule doesn't work this way, see [this](https://typst.app/docs/reference/styling/#set-rules:~:text=Sometimes%2C%20you'll%20want%20to%20apply%20a%20set%20rule%20conditionally.%20For%20this%2C%20you%20can%20use%20a%20set%2Dif%20rule.).\n\nThere is also [`block.spacing`](https://typst.app/docs/reference/layout/block/#parameters-spacing).\n\n```typ\n#let    QGray = luma(175)\n#let   QInset = 2em\n#let   QScale = 1.1818em // roughly 13pt for 11pt text\n\n#let   QAOpen = text(size: QScale, fill: QGray)[--]\n#let QAIndent = -4mm  // Indent for attribution decoration\n\n#let   QROpen = text(size: QScale, fill: QGray)[\\[]\n#let  QRClose = text(size: QScale, fill: QGray)[#sym.wj\\]]\n#let QRIndent = -2.5mm  // Indent for attribution decoration\n\n#let   QTOpen = text(size: QScale, fill: QGray)[\\(]\n#let  QTClose = text(size: QScale, fill: QGray)[#sym.wj\\)]\n#let QTIndent = -2.5mm  // Indent for attribution decoration\n\n#let Quote(\n  label: none,\n  attribution: none,\n  restatement: (),\n  translation: (),\n  lang: none,\n  body,\n) = {\n  if type(restatement) != array { restatement = (restatement,) }\n  if type(translation) != array { translation = (translation,) }\n  restatement = restatement.map(x => if type(x) != array { (lang, x) } else { x })\n  block(spacing: 0em, inset: QInset, {\n    set text(lang: lang) if lang != none\n    body\n    for (lang, restate) in restatement {\n        set text(lang: lang)\n      par(first-line-indent: QRIndent)[#QROpen (#lang) #restate #QRClose]\n    }\n    for trans in translation {\n      par(first-line-indent: QTIndent)[#QTOpen #trans #QTClose]\n    }\n    if attribution != none {\n      par(first-line-indent: QAIndent)[#QAOpen #attribution]\n    }\n  })\n}\n\n#Quote(\n  attribution: [Synesius of Cyrene (_circa_ 370--_circa_ 413) in modernized Greek, followed by Latin restatements (1) as used by Robert Burton in _The Anatomy of Melancholy_ (1628) and matching the Latin by Thomas Naogeorgus (1559), (2) published by Claudius Morellus in a 1605 collection of Synesius's letters, and (3) by Rudolf Hercher in his 1873 collection of the letters, followed by Burton's English translation],\n  restatement: (\n     [restatement_in_language_of_quotation],\n     (\"us\", [\"restatement_in_other_language\"]),\n     (\"ru\", [\"phonetic\" transcription]),\n  ),\n  translation: [It is a greater offence to ſteale dead mens labours, than their clothes],\n  lang: \"el\"\n)[ἡγοῦμαι δὲ ἀσεβέστερον ἀποθανόντων λόγους κλέπτειν ἢ θοἰμάτια, ὃ καλεῖται τυμβωρυχεῖν.\n]\n```\n\n![image|540x253](upload://1wMUGcbICcvUZ9TYpStNDLXQQat.png)\n\nWith [show rule wrapping](https://forum.typst.app/t/which-show-rule-takes-precedence/3904/5?u=andrew) it can be slightly simplified:\n\n```typ\n#let Quote(\n  label: none,\n  attribution: none,\n  restatement: (),\n  translation: (),\n  lang: none,\n  body,\n) = {\n  if type(restatement) != array { restatement = (restatement,) }\n  if type(translation) != array { translation = (translation,) }\n  restatement = restatement.map(x => if type(x) != array { (lang, x) } else { x })\n  show: block.with(spacing: 0em, inset: QInset)\n  set text(lang: lang) if lang != none\n  body\n  for (lang, restate) in restatement {\n    set text(lang: lang)\n    par(first-line-indent: QRIndent)[#QROpen (#lang) #restate #QRClose]\n  }\n  for trans in translation {\n    par(first-line-indent: QTIndent)[#QTOpen #trans #QTClose]\n  }\n  if attribution != none {\n    par(first-line-indent: QAIndent)[#QAOpen #attribution]\n  }\n}\n```",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 21,
      "score": 34.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 13825,
      "post_number": 4,
      "username": "Rik",
      "name": "Rik",
      "created_at": "2025-06-06T18:58:34.213Z",
      "updated_at": "2025-06-06T18:58:34.213Z",
      "cooked": "<p>To the question about where I saw the use of scripting inside square brackets and why I have used it: I can only say that I saw it in some example, somewhere, as I was getting a feel for the basic syntax and it worked, so I continued to use it. Likely it was not in formal documentation but in this forum. Sorry I cannot be more specific, but if I notice it I will investigate further.</p>",
      "raw": "To the question about where I saw the use of scripting inside square brackets and why I have used it: I can only say that I saw it in some example, somewhere, as I was getting a feel for the basic syntax and it worked, so I continued to use it. Likely it was not in formal documentation but in this forum. Sorry I cannot be more specific, but if I notice it I will investigate further.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 16,
      "score": 17.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1174
    },
    {
      "id": 13845,
      "post_number": 5,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-06-07T13:58:19.851Z",
      "updated_at": "2025-06-07T15:01:55.505Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Andrew\" data-post=\"3\" data-topic=\"4377\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<p>I don’t think documentation has this.</p>\n</blockquote>\n</aside>\n<p>Seems like <a href=\"https://typst.app/docs/reference/scripting/#conditionals\" class=\"inline-onebox\">Scripting – Typst Documentation</a> under the heading Conditionals  shows that it can be done, it shows both options of course, (and markup blocks is the cool novelty, IMO, could attract anyone) but no guidance at that point which one to use.</p>",
      "raw": "[quote=\"Andrew, post:3, topic:4377\"]\nI don’t think documentation has this.\n[/quote]\n\nSeems like https://typst.app/docs/reference/scripting/#conditionals under the heading Conditionals  shows that it can be done, it shows both options of course, (and markup blocks is the cool novelty, IMO, could attract anyone) but no guidance at that point which one to use.",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 1,
      "reads": 14,
      "score": 22.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 13852,
      "post_number": 6,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-06-07T16:17:05.794Z",
      "updated_at": "2025-06-07T16:17:05.794Z",
      "cooked": "<p>Great. <a href=\"https://github.com/typst/typst/issues/6403\" class=\"inline-onebox\">Include explanation between `[]` and `{}` conditional/loop blocks · Issue #6403 · typst/typst · GitHub</a></p>",
      "raw": "Great. https://github.com/typst/typst/issues/6403",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 14,
      "score": 17.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:47:04.547044"
}