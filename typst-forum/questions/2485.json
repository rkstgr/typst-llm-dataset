{
  "topic_metadata": {
    "id": 2485,
    "title": "How to correctly customize equation numbering & referencing simultaneously?",
    "slug": "how-to-correctly-customize-equation-numbering-referencing-simultaneously",
    "posts_count": 7,
    "created_at": "2025-01-20T16:29:02.225Z",
    "last_posted_at": "2025-05-14T16:22:30.825Z",
    "views": 234,
    "like_count": 2,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "Eric",
    "tags": [
      "scripting",
      "math",
      "numbering",
      "referencing"
    ],
    "category_id": 5,
    "participant_count": 5,
    "word_count": 659
  },
  "posts": [
    {
      "id": 7716,
      "post_number": 1,
      "username": "Gijs_Bellaard",
      "name": "Gijs Bellaard",
      "created_at": "2025-01-20T16:29:02.362Z",
      "updated_at": "2025-05-13T19:23:42.442Z",
      "cooked": "<p>Suppose I have custom equation numbering &amp; referencing as follows.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.equation(numbering: it =&gt; numbering(\"(1.1)\", counter(heading).get().at(0), it)) \n\n#set heading(numbering: \"1.1\")\n\n#show heading.where(level: 1): it =&gt; {\n  counter(math.equation).update(0)\n  it\n}\n\n#show ref: it =&gt; {\n    let el = it.element\n    if (el != none and el.func() == math.equation) {\n      let loc = el.location()\n      return link(loc,numbering(\n        el.numbering,\n        ..counter(math.equation).at(loc)\n      ))\n    }\n    return it\n  }\n\n\n= \n\n$ a^2 + b^2 = c^2 $ &lt;eq&gt;\n\n= \n\n$ a^2 + b^2 = c^2 $\n\nNow look at this reference: @eq.\nIt should say (1.1) but it says (2.1)\n</code></pre>\n<p>Notice that the equation referencing is <em>wrong</em>.<br>\nHow would one go about fixing this?</p>",
      "raw": "Suppose I have custom equation numbering & referencing as follows.\n\n```typ  \n#set math.equation(numbering: it => numbering(\"(1.1)\", counter(heading).get().at(0), it)) \n\n#set heading(numbering: \"1.1\")\n\n#show heading.where(level: 1): it => {\n  counter(math.equation).update(0)\n  it\n}\n\n#show ref: it => {\n    let el = it.element\n    if (el != none and el.func() == math.equation) {\n      let loc = el.location()\n      return link(loc,numbering(\n        el.numbering,\n        ..counter(math.equation).at(loc)\n      ))\n    }\n    return it\n  }\n\n\n= \n\n$ a^2 + b^2 = c^2 $ <eq>\n\n= \n\n$ a^2 + b^2 = c^2 $\n\nNow look at this reference: @eq.\nIt should say (1.1) but it says (2.1)\n```\n\nNotice that the equation referencing is _wrong_.\nHow would one go about fixing this?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 50,
      "score": 720.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1075
    },
    {
      "id": 7721,
      "post_number": 2,
      "username": "flokl",
      "name": "",
      "created_at": "2025-01-20T19:15:25.663Z",
      "updated_at": "2025-01-20T19:47:23.688Z",
      "cooked": "<p><s>I think the  following solution is quite nice: <a href=\"https://forum.typst.app/t/wrong-numbering-for-the-equation/1403/2\" class=\"inline-onebox\">Wrong numbering for the equation - #2 by Eric</a>. Basically you don’t change the <code>ref</code>, but just reset the equation counter after each heading.</s></p>",
      "raw": "~~I think the  following solution is quite nice: https://forum.typst.app/t/wrong-numbering-for-the-equation/1403/2?u=flokl. Basically you don't change the `ref`, but just reset the equation counter after each heading.~~",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 43,
      "score": 23.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 8
    },
    {
      "id": 7722,
      "post_number": 3,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-01-20T19:43:47.538Z",
      "updated_at": "2025-01-20T19:46:55.180Z",
      "cooked": "<p>From what I can tell, the goal of the show rule on <code>ref</code> is to change the appearance of a reference from <em>Equation 2.1</em> to just <em>(2.1)</em>. The unfortunate thing is that you have to explicitly call <code>numbering(..)</code> in the show rule, so the numbering function set in the rule for equations is always called with the context of the reference (instead of the context of the equation itself). The only possible workaround I could think of right now, is using a regex show rule to remove the supplement like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show ref: it =&gt; {\n  let el = it.element\n  if (el != none and el.func() == math.equation) {\n    // May need to adjust this when using letters in numbering\n    show regex(\"\\p{letter}+\\s+\"): none\n    it\n  } else {\n    it\n  }\n}\n</code></pre>\n<p>Other than that, there are some potentially related issues you could follow:</p>\n<ul>\n<li><a href=\"https://github.com/typst/typst/issues/1896\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Ergonomic numbering-by-section · Issue #1896 · typst/typst · GitHub</a></li>\n<li><a href=\"https://github.com/typst/typst/issues/3930\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Providing different `context`s · Issue #3930 · typst/typst · GitHub</a></li>\n<li><a href=\"https://github.com/typst/typst/issues/4646\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Numbering contexts do not include styles · Issue #4646 · typst/typst · GitHub</a></li>\n<li><a href=\"https://github.com/EpicEricEE/typst-equate/issues/3\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">`numbering` function does not get local counter for sub-equations · Issue #3 · EpicEricEE/typst-equate · GitHub</a> (for the same issue in the equate package)</li>\n</ul>",
      "raw": "From what I can tell, the goal of the show rule on `ref` is to change the appearance of a reference from _Equation 2.1_ to just _(2.1)_. The unfortunate thing is that you have to explicitly call `numbering(..)` in the show rule, so the numbering function set in the rule for equations is always called with the context of the reference (instead of the context of the equation itself). The only possible workaround I could think of right now, is using a regex show rule to remove the supplement like this:\n\n```typ\n#show ref: it => {\n  let el = it.element\n  if (el != none and el.func() == math.equation) {\n    // May need to adjust this when using letters in numbering\n    show regex(\"\\p{letter}+\\s+\"): none\n    it\n  } else {\n    it\n  }\n}\n```\n\nOther than that, there are some potentially related issues you could follow:\n- https://github.com/typst/typst/issues/1896\n- https://github.com/typst/typst/issues/3930\n- https://github.com/typst/typst/issues/4646\n- https://github.com/EpicEricEE/typst-equate/issues/3 (for the same issue in the equate package)",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 41,
      "score": 48.2,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 7723,
      "post_number": 4,
      "username": "Gijs_Bellaard",
      "name": "Gijs Bellaard",
      "created_at": "2025-01-20T19:52:26.086Z",
      "updated_at": "2025-01-20T19:52:26.086Z",
      "cooked": "<p>Sad to hear this.</p>\n<p>I’ve accepted your answer as the solution, however, I do hope that somebody comes up with something better.</p>",
      "raw": "Sad to hear this.\n\nI've accepted your answer as the solution, however, I do hope that somebody comes up with something better.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 38,
      "score": 7.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1075
    },
    {
      "id": 12363,
      "post_number": 5,
      "username": "John",
      "name": "John",
      "created_at": "2025-05-12T23:47:47.841Z",
      "updated_at": "2025-05-12T23:47:47.841Z",
      "cooked": "<p>This works for me. But it’s probably fragile.<br>\nNotice that where you had <code>el.numbering</code>, I have hardcoded “(1,1)”. So it’s not very flexible. Either the concept of “element” is not well documented, or I missed it. I wonder what <code>el.numbering</code> is and if it has structure that would be useful here.</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">    #show heading.where(level:1): it =&gt; {\n        counter(math.equation).update(0)\n        it\n    }\n\n    // Format equation references.\n    // Uses the top-level heading number first\n    #set math.equation(numbering: n =&gt; {\n        numbering(\"(1.1)\", counter(heading).get().first(), n)})\n\n    // References to equations are modified from \"Equation (x.y)\"\n    // to \"(x.y)\".\n    // This is hacky because \"(1.1)\" is hardcoded.\n    #show ref: it =&gt; {\n        let eq = math.equation\n        let el = it.element\n        if el != none and el.func() == eq {\n            link(el.location(),\n                numbering(\n                    \"(1.1)\",\n                    counter(heading).at(el.location()).first(),\n                    counter(eq).at(el.location()).first()\n                )\n            )\n        } else {\n            // Other references as usual.\n            it\n        }\n    }\n</code></pre>\n<p>If I use <code>el.numbering</code> rather than “(1.1)”, then I get an error:</p>\n<pre><code class=\"lang-auto\">error: unexpected argument\n   ┌─ lib/gjl_template.typ:33:34\n   │\n33 │     #set math.equation(numbering: n =&gt; {\n   │                                   ^\n</code></pre>",
      "raw": "This works for me. But it's probably fragile.\nNotice that where you had `el.numbering`, I have hardcoded \"(1,1)\". So it's not very flexible. Either the concept of \"element\" is not well documented, or I missed it. I wonder what `el.numbering` is and if it has structure that would be useful here.\n\n```typst\n    #show heading.where(level:1): it => {\n        counter(math.equation).update(0)\n        it\n    }\n\n    // Format equation references.\n    // Uses the top-level heading number first\n    #set math.equation(numbering: n => {\n        numbering(\"(1.1)\", counter(heading).get().first(), n)})\n\n    // References to equations are modified from \"Equation (x.y)\"\n    // to \"(x.y)\".\n    // This is hacky because \"(1.1)\" is hardcoded.\n    #show ref: it => {\n        let eq = math.equation\n        let el = it.element\n        if el != none and el.func() == eq {\n            link(el.location(),\n                numbering(\n                    \"(1.1)\",\n                    counter(heading).at(el.location()).first(),\n                    counter(eq).at(el.location()).first()\n                )\n            )\n        } else {\n            // Other references as usual.\n            it\n        }\n    }\n```\n\nIf I use `el.numbering` rather than \"(1.1)\", then I get an error:\n```\nerror: unexpected argument\n   ┌─ lib/gjl_template.typ:33:34\n   │\n33 │     #set math.equation(numbering: n => {\n   │                                   ^\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 18,
      "score": 3.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1572
    },
    {
      "id": 12447,
      "post_number": 6,
      "username": "Lima",
      "name": "Jan-Øivind Lima",
      "created_at": "2025-05-14T11:13:02.015Z",
      "updated_at": "2025-05-14T11:14:17.637Z",
      "cooked": "<p>I am not sure if I understand completely, but if you want to reference only the number you can use empty brackets after the reference.<br>\nE.g.<br>\n<span class=\"mention\">@eq</span>:derivative \\\\ this yields Equation 4.2<br>\n<span class=\"mention\">@eq</span>:derivative[<span class=\"chcklst-box fa fa-square-o fa-fw\"></span>] \\\\ this yields 4.2</p>",
      "raw": "I am not sure if I understand completely, but if you want to reference only the number you can use empty brackets after the reference. \nE.g.\n@eq:derivative \\\\\\ this yields Equation 4.2\n@eq:derivative[[\\]] \\\\\\ this yields 4.2",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 17,
      "score": 23.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1598
    },
    {
      "id": 12458,
      "post_number": 7,
      "username": "John",
      "name": "John",
      "created_at": "2025-05-14T16:22:30.825Z",
      "updated_at": "2025-05-14T16:24:32.325Z",
      "cooked": "<p>I confirm this works.</p>\n<p>I missed this before, but it is documented in the subheading “Syntax” on the documentation page for <a href=\"https://typst.app/docs/reference/model/ref/\">ref</a></p>\n<p>I should note that if you have asked for parentheses, for example with <code>numbering(\"(1.1)\",...</code>, then you get, following your example <code>(4.2)</code> rather than <code>Equation (4.2)</code>.</p>\n<p>It would be cleaner are more flexible to change the behavior with a bit of code in one place. But appending <code>[]</code> does work.</p>",
      "raw": "I confirm this works. \n\nI missed this before, but it is documented in the subheading \"Syntax\" on the documentation page for [ref](https://typst.app/docs/reference/model/ref/)\n\nI should note that if you have asked for parentheses, for example with `numbering(\"(1.1)\",...`, then you get, following your example `(4.2)` rather than `Equation (4.2)`.\n\nIt would be cleaner are more flexible to change the behavior with a bit of code in one place. But appending `[]` does work.",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 16,
      "score": 3.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1572
    }
  ],
  "scraped_at": "2025-06-10T09:52:38.821322"
}