{
  "topic_metadata": {
    "id": 1122,
    "title": "How to use the plain `raw` function?",
    "slug": "how-to-use-the-plain-raw-function",
    "posts_count": 13,
    "created_at": "2024-10-15T17:39:07.958Z",
    "last_posted_at": "2024-10-17T09:48:05.849Z",
    "views": 468,
    "like_count": 12,
    "reply_count": 8,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "afiaith",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 6,
    "word_count": 797
  },
  "posts": [
    {
      "id": 3960,
      "post_number": 1,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-15T17:39:08.158Z",
      "updated_at": "2024-10-23T11:59:01.087Z",
      "cooked": "<p>I try to figure out how to use the plain <code>raw</code> function.</p>\n<p>The following works fine:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">```\nfn main() {\n    println!(\"Hello World!\");\n}\n```\n</code></pre>\n<p>But this version doesn’t:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#raw(block: true, [\n  fn main() {\n      println!(\"Hello World!\");\n  }\n])\n</code></pre>\n<p>What’s wrong there?</p>",
      "raw": "I try to figure out how to use the plain `raw` function.\n\nThe following works fine:\n\n````typ\n```\nfn main() {\n    println!(\"Hello World!\");\n}\n```\n````\n\nBut this version doesn't:\n\n```typ\n#raw(block: true, [\n  fn main() {\n      println!(\"Hello World!\");\n  }\n])\n```\n\nWhat's wrong there?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 52,
      "score": 2035.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 3961,
      "post_number": 2,
      "username": "afiaith",
      "name": "Maja Abramski-Kronenberg",
      "created_at": "2024-10-15T17:57:38.757Z",
      "updated_at": "2024-10-15T17:57:38.757Z",
      "cooked": "<p>Note that the <a href=\"https://typst.app/docs/reference/text/raw/#parameters-text\"><code>text</code> parameter</a> is a string, not a content. It says <code>str</code> (in green), not <code>content</code> (in a different, more blueish shade of green…).</p>",
      "raw": "Note that the [`text` parameter](https://typst.app/docs/reference/text/raw/#parameters-text) is a string, not a content. It says `str` (in green), not `content` (in a different, more blueish shade of green…).",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 52,
      "score": 50.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 91
    },
    {
      "id": 3962,
      "post_number": 3,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-15T18:15:10.174Z",
      "updated_at": "2024-10-15T18:42:23.691Z",
      "cooked": "<p>Ah, now I see, thanks! The following works fine:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#raw(block: true,\n\"fn main() {\n    println!(\\\"Hello World!\\\");\n}\"\n)\n</code></pre>\n<p>But what if I prefer to indent the string? I tried</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#raw(block: true,\n  \"fn main() {\n      println!(\\\"Hello World!\\\");\n  }\"\n)\n</code></pre>\n<p>but then the output is indented wrongly:</p>\n<pre data-code-wrap=\"none\"><code class=\"lang-none\">fn main() {\n      println!(\"Hello World!\");\n  }\n</code></pre>",
      "raw": "Ah, now I see, thanks! The following works fine:\n\n```typ\n#raw(block: true,\n\"fn main() {\n    println!(\\\"Hello World!\\\");\n}\"\n)\n```\n\nBut what if I prefer to indent the string? I tried\n\n```typ\n#raw(block: true,\n  \"fn main() {\n      println!(\\\"Hello World!\\\");\n  }\"\n)\n```\n\nbut then the output is indented wrongly:\n\n```none\nfn main() {\n      println!(\"Hello World!\");\n  }\n```",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 53,
      "score": 40.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 3964,
      "post_number": 4,
      "username": "afiaith",
      "name": "Maja Abramski-Kronenberg",
      "created_at": "2024-10-15T18:57:31.968Z",
      "updated_at": "2024-10-15T18:57:31.968Z",
      "cooked": "<p>This is expected. If you look again at the <a href=\"https://typst.app/docs/reference/text/raw/#summary\">definition of <code>raw()</code></a> you’ll see it says</p>\n<blockquote>\n<p>Displays the text verbatim and in a monospace font.</p>\n</blockquote>\n<p>So when you indent your string you add tabs/spaces, which are treated verbatim and shown in the output.</p>",
      "raw": "This is expected. If you look again at the [definition of `raw()`](https://typst.app/docs/reference/text/raw/#summary) you’ll see it says\n\n> Displays the text verbatim and in a monospace font.\n\nSo when you indent your string you add tabs/spaces, which are treated verbatim and shown in the output.",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 50,
      "score": 35.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 91
    },
    {
      "id": 3990,
      "post_number": 5,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-16T08:24:40.687Z",
      "updated_at": "2024-10-16T08:25:39.052Z",
      "cooked": "<p>And there is no way to tell the compiler something like “ignore the first two spaces”, so that</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#raw(block: true,\n  \"fn main() {\n      println!(\\\"Hello World!\\\");\n  }\"\n)\n```\n</code></pre>\n<p>will give the output shown below?</p>\n<pre data-code-wrap=\"rust\"><code class=\"lang-rust\">fn main() {\n    println!(\"Hello World!\");\n}\n</code></pre>",
      "raw": "And there is no way to tell the compiler something like \"ignore the first two spaces\", so that \n\n````typ\n#raw(block: true,\n  \"fn main() {\n      println!(\\\"Hello World!\\\");\n  }\"\n)\n```\n````\n\nwill give the output shown below?\n\n```rust\nfn main() {\n    println!(\"Hello World!\");\n}\n```",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 46,
      "score": 19.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 3992,
      "post_number": 6,
      "username": "gezepi",
      "name": "",
      "created_at": "2024-10-16T08:49:15.178Z",
      "updated_at": "2024-10-16T08:50:07.260Z",
      "cooked": "<p>As far as I know there is not a way to do it built in, but you can create a helper function that does it for you:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let rawSkipChars(rawTxt, numCharsToSkip: 2) = raw(\n  block: true,\n  \n  rawTxt\n  .split(\"\\n\")\n  .map(l =&gt; l.slice(numCharsToSkip))\n  .join(\"\\n\")\n)\n\n#let func = \"  void print(x)\n  {\n    //something goes here\n  }\"\n\n#rect(raw(func))\n#rect(rawSkipChars(func))\n</code></pre>\n<details>\n<summary>\nOutput</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/320190c1bbf837142825948b625829afd21f8583.png\" alt=\"image\" data-base62-sha1=\"78ne6uQWNZyiNkUyCknWyRbKDIv\" width=\"263\" height=\"234\"></p>\n</details>\n<p>The <code>rawSkipChars</code> function splits the text given to it, removes the first two characters from each line, then joins all lines back together.</p>\n<p>Note that this won’t work with the exact string you have in your last post because the very first line does not have any spaces before <code>fn</code>.</p>",
      "raw": "As far as I know there is not a way to do it built in, but you can create a helper function that does it for you:\n```typ\n#let rawSkipChars(rawTxt, numCharsToSkip: 2) = raw(\n  block: true,\n  \n  rawTxt\n  .split(\"\\n\")\n  .map(l => l.slice(numCharsToSkip))\n  .join(\"\\n\")\n)\n\n#let func = \"  void print(x)\n  {\n    //something goes here\n  }\"\n\n#rect(raw(func))\n#rect(rawSkipChars(func))\n```\n\n[details=\"Output\"]\n![image|263x234](upload://78ne6uQWNZyiNkUyCknWyRbKDIv.png)\n[/details]\n\n\nThe `rawSkipChars` function splits the text given to it, removes the first two characters from each line, then joins all lines back together.\n\nNote that this won't work with the exact string you have in your last post because the very first line does not have any spaces before `fn`.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 49,
      "score": 54.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 3994,
      "post_number": 7,
      "username": "lukas.rt",
      "name": "Lukas",
      "created_at": "2024-10-16T09:01:25.842Z",
      "updated_at": "2024-10-16T10:06:16.969Z",
      "cooked": "<p>Here are some alternatives you can try:</p>\n<pre><code class=\"lang-auto\">// keep string indented by making it into seperate strings inside a list, that will be joines with linebreaks\n#raw(block: true, (\n  \"fn main() {\",\n  \"  println!(\\\"Hello World!\\\");\",\n  \"}\").join(\"\\n\")\n)\n\n//keep string indented by manually appending linebreaks and joining strings with + operator\n#raw(block: true,\n  \"fn main() {\\n\" +\n  \"  println!(\\\"Hello World!\\\");\\n\" +\n  \"}\"\n)\n\n\n//use a custom show rule, that trims the first two leading spaces of each line of any raw block\n#show raw: it =&gt; it.text.split(\"\\n\").map(line =&gt; line.trim(\"  \", at: start, repeat: false)).join(\"\\n\")\n\n#raw(block: true,\n  \"fn main() {\n    println!(\\\"Hello World!\\\");\n  }\"\n)\n</code></pre>\n<p>The last solution is similar to the proposed solution of <a class=\"mention\" href=\"/u/gezepi\">@gezepi</a></p>\n<p>EDIT: actually, my last proposal is somewhat flawed, because inside the show rule only the text ist returned and syntax styling gets lost.<br>\nA custom function applied to the string before handing it to a raw block would work better here.</p>",
      "raw": "Here are some alternatives you can try:\n\n```\n// keep string indented by making it into seperate strings inside a list, that will be joines with linebreaks\n#raw(block: true, (\n  \"fn main() {\",\n  \"  println!(\\\"Hello World!\\\");\",\n  \"}\").join(\"\\n\")\n)\n\n//keep string indented by manually appending linebreaks and joining strings with + operator\n#raw(block: true,\n  \"fn main() {\\n\" +\n  \"  println!(\\\"Hello World!\\\");\\n\" +\n  \"}\"\n)\n\n\n//use a custom show rule, that trims the first two leading spaces of each line of any raw block\n#show raw: it => it.text.split(\"\\n\").map(line => line.trim(\"  \", at: start, repeat: false)).join(\"\\n\")\n\n#raw(block: true,\n  \"fn main() {\n    println!(\\\"Hello World!\\\");\n  }\"\n)\n```\n\nThe last solution is similar to the proposed solution of @gezepi\n\nEDIT: actually, my last proposal is somewhat flawed, because inside the show rule only the text ist returned and syntax styling gets lost.\nA custom function applied to the string before handing it to a raw block would work better here.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 44,
      "score": 33.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 587
    },
    {
      "id": 3999,
      "post_number": 8,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-16T10:03:10.791Z",
      "updated_at": "2024-10-16T10:03:30.507Z",
      "cooked": "<p>Another solution is to actually use the raw <code>```</code> syntax to make the string <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#raw(block: true,\n  ```\n  fn main() {\n    println!(\"Hello World!\");\n  }\n  ```.text\n)\n</code></pre>\n<p>All spaces before the indent level of the <code>```</code> are trimmed (this feature seems to be undocumented).</p>\n<p>Of course this is going a bit in circles so I wonder why you want to avoid the <code>```</code> syntax for literal raw blocks? Is it to use escape sequences in the string?</p>",
      "raw": "Another solution is to actually use the raw ` ``` ` syntax to make the string :slight_smile: \n\n````typ\n#raw(block: true,\n  ```\n  fn main() {\n    println!(\"Hello World!\");\n  }\n  ```.text\n)\n````\n\nAll spaces before the indent level of the ` ``` ` are trimmed (this feature seems to be undocumented).\n\nOf course this is going a bit in circles so I wonder why you want to avoid the ` ``` ` syntax for literal raw blocks? Is it to use escape sequences in the string?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 37,
      "score": 67.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 4004,
      "post_number": 9,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-16T12:04:30.858Z",
      "updated_at": "2024-10-16T12:08:10.614Z",
      "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"sijo\" data-post=\"8\" data-topic=\"1122\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/s/0A3649/48.png\" class=\"avatar\"> sijo:</div>\n<blockquote>\n<p>I wonder why you want to avoid the ````` syntax for literal raw blocks?</p>\n</blockquote>\n</aside>\n<p>Well, currently I simply try to improve my understanding how the plain Typst functions work, because they provide more options to customize the output and thus are very useful. E.g., using plain ‘raw’, I can change the color theme of a specific code block, or maybe to highlight a line there. As far as I know, these things are not possible if I simply use something like</p>\n<pre><code class=\"lang-auto\">```\n// fenced code block\n```\n</code></pre>\n<p>I didn’t try your solution yet, because I’m currently not near my laptop.</p>",
      "raw": "[quote=\"sijo, post:8, topic:1122\"]\nI wonder why you want to avoid the ````` syntax for literal raw blocks?\n[/quote]\n\nWell, currently I simply try to improve my understanding how the plain Typst functions work, because they provide more options to customize the output and thus are very useful. E.g., using plain 'raw', I can change the color theme of a specific code block, or maybe to highlight a line there. As far as I know, these things are not possible if I simply use something like\n\n````\n```\n// fenced code block\n```\n````\n\nI didn't try your solution yet, because I'm currently not near my laptop.",
      "reply_to_post_number": 8,
      "reply_count": 2,
      "quote_count": 1,
      "like_count": 0,
      "reads": 34,
      "score": 31.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 4022,
      "post_number": 10,
      "username": "SebastianJL",
      "name": "Johannes Lade",
      "created_at": "2024-10-16T19:03:18.006Z",
      "updated_at": "2024-10-16T19:05:32.344Z",
      "cooked": "<p>I can’t try it either right now but if all you want to do is change some options on raw for a single code block you could enclose a set or show rule and the literal raw block in a content block. Like</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">[\n  #set raw(..set some option)\n  // Or\n  #show raw: set some styling\n  ```\n    //Some code\n  ```\n]\n</code></pre>",
      "raw": "I can't try it either right now but if all you want to do is change some options on raw for a single code block you could enclose a set or show rule and the literal raw block in a content block. Like\n\n````typst\n[\n  #set raw(..set some option)\n  // Or\n  #show raw: set some styling\n  ```\n    //Some code\n  ```\n]\n````",
      "reply_to_post_number": 9,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 35,
      "score": 52.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 591
    },
    {
      "id": 4023,
      "post_number": 11,
      "username": "afiaith",
      "name": "Maja Abramski-Kronenberg",
      "created_at": "2024-10-16T20:19:17.869Z",
      "updated_at": "2024-10-16T20:19:17.869Z",
      "cooked": "<p>The <code>```</code> notation is just <a href=\"https://en.wikipedia.org/wiki/Syntactic_sugar\" rel=\"noopener nofollow ugc\">syntactic sugar</a> for <code>raw()</code>; see the first <a href=\"https://github.com/typst/typst?tab=readme-ov-file#design-principles\" rel=\"noopener nofollow ugc\">design principle</a> of Typst, <em>simplicity through consistency</em>.</p>",
      "raw": "The ` ``` ` notation is just [syntactic sugar](https://en.wikipedia.org/wiki/Syntactic_sugar) for `raw()`; see the first [design principle](https://github.com/typst/typst?tab=readme-ov-file#design-principles) of Typst, *simplicity through consistency*.",
      "reply_to_post_number": 9,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 35,
      "score": 22.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 91
    },
    {
      "id": 4035,
      "post_number": 12,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-17T00:13:24.091Z",
      "updated_at": "2024-10-17T00:13:24.091Z",
      "cooked": "<p>This is an interesting suggestion. Could you show a working example?</p>",
      "raw": "This is an interesting suggestion. Could you show a working example?",
      "reply_to_post_number": 10,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 36,
      "score": 12.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 4067,
      "post_number": 13,
      "username": "SebastianJL",
      "name": "Johannes Lade",
      "created_at": "2024-10-17T09:48:05.849Z",
      "updated_at": "2024-10-17T15:05:56.504Z",
      "cooked": "<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#[\n  #show raw: set text(weight: \"bold\")\n  ```rust\n  fn main() {\n    println!(\"Hello World!\");\n  }\n  ```\n]\n\n```rust\nfn main() {\n  println!(\"Hello World!\");\n}\n```\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/e6fe94e6381bee2b2774c2e06b7fe4f741dda640.png\" data-download-href=\"https://forum.typst.app/uploads/default/e6fe94e6381bee2b2774c2e06b7fe4f741dda640\" title=\"Test (1)\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/e6fe94e6381bee2b2774c2e06b7fe4f741dda640_2_661x500.png\" alt=\"Test (1)\" data-base62-sha1=\"wXtfVjNHND9ooiLvWwlryLshjYk\" width=\"661\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/e6fe94e6381bee2b2774c2e06b7fe4f741dda640_2_661x500.png, https://forum.typst.app/uploads/default/optimized/1X/e6fe94e6381bee2b2774c2e06b7fe4f741dda640_2_991x750.png 1.5x, https://forum.typst.app/uploads/default/original/1X/e6fe94e6381bee2b2774c2e06b7fe4f741dda640.png 2x\" data-dominant-color=\"FCFDFC\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">Test (1)</span><span class=\"informations\">1187×897 74.4 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "````typst\n#[\n  #show raw: set text(weight: \"bold\")\n  ```rust\n  fn main() {\n    println!(\"Hello World!\");\n  }\n  ```\n]\n\n```rust\nfn main() {\n  println!(\"Hello World!\");\n}\n```\n````\n\n![Test (1)|661x500](upload://wXtfVjNHND9ooiLvWwlryLshjYk.png)",
      "reply_to_post_number": 12,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 32,
      "score": 36.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 591
    }
  ],
  "scraped_at": "2025-06-10T09:56:46.764321"
}