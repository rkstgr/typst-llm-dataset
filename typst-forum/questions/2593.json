{
  "topic_metadata": {
    "id": 2593,
    "title": "How to use counter inside a generated table",
    "slug": "how-to-use-counter-inside-a-generated-table",
    "posts_count": 5,
    "created_at": "2025-01-29T15:00:20.128Z",
    "last_posted_at": "2025-02-01T02:29:01.547Z",
    "views": 167,
    "like_count": 3,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "janekfleper",
    "tags": [
      "scripting",
      "tables"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 480
  },
  "posts": [
    {
      "id": 7994,
      "post_number": 1,
      "username": "fadasme",
      "name": "Francisco Adasme",
      "created_at": "2025-01-29T15:00:20.365Z",
      "updated_at": "2025-01-29T15:00:20.365Z",
      "cooked": "<p>Hey everyone,</p>\n<p>I’m trying to generate a table from an array, where each element is a dictionary holding data for each row. I’d like to add a counter in each row based on a particular field. I searched the forum for similar issues (e.g., <a href=\"https://forum.typst.app/t/how-does-the-counter-update-function-works/799\" class=\"inline-onebox\">How does the counter update function works?</a>) but I couldn’t get it to work.</p>\n<p>I have the following reduced example:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let activity-table(activities) = {\n  let ctypes = (a: counter(\"a\"), b: counter(\"b\"))\n  table(\n    columns: 2,\n    ..activities.map(it =&gt; {\n      let ctype = ctypes.at(it.type)\n      ctype.step()\n      return (\n        [#it.type#context ctype.display()],\n        it.description,\n      )\n    }).flatten()\n  )\n}\n\n#let activities = (\n  (type: \"a\", description: lorem(20)),\n  (type: \"b\", description: lorem(10)),\n  (type: \"a\", description: lorem(15)),\n)\n#activity-table(activities)\n</code></pre>\n<p>which produces:</p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/0/066dd234ada7b772dad16872a2fef62ed0d8d7d9.png\" alt=\"image\" data-base62-sha1=\"US9DF3pzAF6Mf37L2mkH9zdVmV\" width=\"633\" height=\"128\"></p>\n<p>I expected it to print a1, b1, a2, and so on.</p>\n<p>Thank you.</p>",
      "raw": "Hey everyone,\n\nI'm trying to generate a table from an array, where each element is a dictionary holding data for each row. I'd like to add a counter in each row based on a particular field. I searched the forum for similar issues (e.g., https://forum.typst.app/t/how-does-the-counter-update-function-works/799?u=fadasme) but I couldn't get it to work.\n\nI have the following reduced example:\n\n```typ\n#let activity-table(activities) = {\n  let ctypes = (a: counter(\"a\"), b: counter(\"b\"))\n  table(\n    columns: 2,\n    ..activities.map(it => {\n      let ctype = ctypes.at(it.type)\n      ctype.step()\n      return (\n        [#it.type#context ctype.display()],\n        it.description,\n      )\n    }).flatten()\n  )\n}\n\n#let activities = (\n  (type: \"a\", description: lorem(20)),\n  (type: \"b\", description: lorem(10)),\n  (type: \"a\", description: lorem(15)),\n)\n#activity-table(activities)\n```\n\nwhich produces:\n\n![image|633x128](upload://US9DF3pzAF6Mf37L2mkH9zdVmV.png)\n\nI expected it to print a1, b1, a2, and so on.\n\nThank you.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 34,
      "score": 476.6,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1110
    },
    {
      "id": 7998,
      "post_number": 2,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-01-29T15:54:41.172Z",
      "updated_at": "2025-01-29T15:54:41.172Z",
      "cooked": "<p>If you call <code>ctype.step()</code> inside the returned list/content, the counter will work. I don’t know why this is necessary though, seems to be some technical detail/issue with counters/contexts inside a map?</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">// replace the lines inside ..activities.map(it =&gt; {}) with the following lines\nlet ctype = ctypes.at(it.type)\nreturn (\n  [#ctype.step() #it.type#context ctype.display()],\n  it.description,\n)\n</code></pre>",
      "raw": "If you call `ctype.step()` inside the returned list/content, the counter will work. I don't know why this is necessary though, seems to be some technical detail/issue with counters/contexts inside a map?\n\n```typc\n// replace the lines inside ..activities.map(it => {}) with the following lines\nlet ctype = ctypes.at(it.type)\nreturn (\n  [#ctype.step() #it.type#context ctype.display()],\n  it.description,\n)\n```",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 76.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 69
    },
    {
      "id": 8004,
      "post_number": 3,
      "username": "jbirnick",
      "name": "Johann Birnick",
      "created_at": "2025-01-30T04:27:56.957Z",
      "updated_at": "2025-01-30T04:29:37.804Z",
      "cooked": "<p>It has nothing to do with maps. Only counter steps that end up in the document will actually make a step. Counter steps are about <em>placing content</em>, not about a <em>computation with a side effect</em>.</p>\n<p>You probably think that <code>mycounter.step(...)</code> will have the side effect of increasing some state that is stored somewhere. But this is not the case. Typst doesn’t think in terms of computation. That would be a problem, because your function (like <code>activity-table</code>) might actually be called multiple times under the hood (which would increase the counter multiple times), or not get called at all because it has been memoized from a previous call (so would not increase the counter).</p>\n<p>Instead, what happens is that <code>counter.step(...)</code> actually returns a piece of <em>invisible content</em> which is essentially some metadata that says “step the counter here”. And so what you actually need to do is to place that piece of (invisible) content into the document.</p>\n<p>For example, consider:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let c = counter(\"test\")\n#let step = c.step()\n\n#step\n#step\n\n#context c.display(\"1.1\")\n</code></pre>\n<p>You might think it only increases the counter once since, after all, <code>step()</code> is only called once.<br>\nBut what’s important is the piece of content that <code>step()</code> returns, which is stored in the <code>step</code> variable in this case. And if I place it two times, it will in fact increase the counter twice! You could even do <code>#{ 10*step }</code>.</p>",
      "raw": "It has nothing to do with maps. Only counter steps that end up in the document will actually make a step. Counter steps are about _placing content_, not about a _computation with a side effect_.\n\nYou probably think that `mycounter.step(...)` will have the side effect of increasing some state that is stored somewhere. But this is not the case. Typst doesn't think in terms of computation. That would be a problem, because your function (like `activity-table`) might actually be called multiple times under the hood (which would increase the counter multiple times), or not get called at all because it has been memoized from a previous call (so would not increase the counter).\n\nInstead, what happens is that `counter.step(...)` actually returns a piece of _invisible content_ which is essentially some metadata that says \"step the counter here\". And so what you actually need to do is to place that piece of (invisible) content into the document.\n\nFor example, consider:\n```typ\n#let c = counter(\"test\")\n#let step = c.step()\n\n#step\n#step\n\n#context c.display(\"1.1\")\n```\nYou might think it only increases the counter once since, after all, `step()` is only called once.\nBut what's important is the piece of content that `step()` returns, which is stored in the `step` variable in this case. And if I place it two times, it will in fact increase the counter twice! You could even do `#{ 10*step }`.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 28,
      "score": 55.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 218
    },
    {
      "id": 8082,
      "post_number": 4,
      "username": "fadasme",
      "name": "Francisco Adasme",
      "created_at": "2025-02-01T02:21:01.778Z",
      "updated_at": "2025-02-01T02:21:01.778Z",
      "cooked": "<p>Thank you. That did work.</p>",
      "raw": "Thank you. That did work.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 4.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1110
    },
    {
      "id": 8083,
      "post_number": 5,
      "username": "fadasme",
      "name": "Francisco Adasme",
      "created_at": "2025-02-01T02:29:01.547Z",
      "updated_at": "2025-02-01T02:29:01.547Z",
      "cooked": "<p>Thank you for the explanation. It’s a little bit difficult to grasp, but I think I get it now.</p>",
      "raw": "Thank you for the explanation. It's a little bit difficult to grasp, but I think I get it now.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 4.4,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 1110
    }
  ],
  "scraped_at": "2025-06-10T09:52:22.741992"
}