{
  "topic_metadata": {
    "id": 1204,
    "title": "Is it possible to make level-1 headings to work as running heads?",
    "slug": "is-it-possible-to-make-level-1-headings-to-work-as-running-heads",
    "posts_count": 7,
    "created_at": "2024-10-19T10:57:29.101Z",
    "last_posted_at": "2024-10-25T10:41:52.716Z",
    "views": 295,
    "like_count": 10,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "Eric",
    "tags": [
      "layout",
      "page",
      "header-footer"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 742
  },
  "posts": [
    {
      "id": 4221,
      "post_number": 1,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-19T10:57:29.203Z",
      "updated_at": "2024-10-23T13:29:56.723Z",
      "cooked": "<p>Say you have a document like this one:</p>\n<p>Page 1:</p>\n<pre data-code-wrap=\"none\"><code class=\"lang-none\">= A\n\nLorem ipsum dolor sit amet...\n\n= B\n\nLorem ipsum dolor sit amet...\n</code></pre>\n<p>Page 2:</p>\n<pre data-code-wrap=\"none\"><code class=\"lang-none\">Lorem ipsum dolor sit amet...\n\n= C\n\nLorem ipsum dolor sit amet...\n\n== X\n\nLorem ipsum dolor sit amet...\n\n== Y\n\nLorem ipsum dolor sit amet...\n\n= D\n\nLorem ipsum dolor sit amet...\n</code></pre>\n<p>Page 3:</p>\n<pre data-code-wrap=\"none\"><code class=\"lang-none\">Lorem ipsum dolor sit amet...\n\n= E\n\nLorem ipsum dolor sit amet...\n\n= F\n\nLorem ipsum dolor sit amet...\n</code></pre>\n<p>Is it possible to put the first level-1 heading on each page to its header, so that the header of the 1st page will be “A”, the header of the 2nd page will be “C”, and the header of the 3rd page will be “E”?</p>",
      "raw": "Say you have a document like this one:\n\nPage 1:\n\n```none\n= A\n\nLorem ipsum dolor sit amet...\n\n= B\n\nLorem ipsum dolor sit amet...\n```\n\nPage 2:\n\n```none\nLorem ipsum dolor sit amet...\n\n= C\n\nLorem ipsum dolor sit amet...\n\n== X\n\nLorem ipsum dolor sit amet...\n\n== Y\n\nLorem ipsum dolor sit amet...\n\n= D\n\nLorem ipsum dolor sit amet...\n```\n\nPage 3:\n\n```none\nLorem ipsum dolor sit amet...\n\n= E\n\nLorem ipsum dolor sit amet...\n\n= F\n\nLorem ipsum dolor sit amet...\n```\n\nIs it possible to put the first level-1 heading on each page to its header, so that the header of the 1st page will be \"A\", the header of the 2nd page will be \"C\", and the header of the 3rd page will be \"E\"?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 46,
      "score": 1109.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 4222,
      "post_number": 2,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-10-19T11:19:09.406Z",
      "updated_at": "2024-10-19T11:19:09.406Z",
      "cooked": "<p>Usually I would recommend the <a href=\"https://typst.app/universe/package/hydra/\"><code>hydra</code></a> package for something like that, but it seems that it doesn’t support using the first heading on a page. Instead, it only supports using the last heading of the previous page(s), or the last heading of the current page.</p>\n<p>You can still implement what you want by running the query yourself without the package, which can then look something like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(header: context {\n  // Find first level-1 heading on this page (if any).\n  let h = query(heading.where(level: 1).after(here()))\n    .filter(h =&gt; h.location().page() == here().page())\n    .at(0, default: none)\n\n  if h != none {\n    // Create number from counter value and numbering.\n    let number = if h.numbering != none {\n      numbering(h.numbering, ..counter(heading).at(h.location()))\n    }\n\n    // Display number and heading body (with space between).\n    [#number #h.body]\n  }\n})\n</code></pre>",
      "raw": "Usually I would recommend the [`hydra`](https://typst.app/universe/package/hydra/) package for something like that, but it seems that it doesn't support using the first heading on a page. Instead, it only supports using the last heading of the previous page(s), or the last heading of the current page.\n\nYou can still implement what you want by running the query yourself without the package, which can then look something like this:\n```typ\n#set page(header: context {\n  // Find first level-1 heading on this page (if any).\n  let h = query(heading.where(level: 1).after(here()))\n    .filter(h => h.location().page() == here().page())\n    .at(0, default: none)\n\n  if h != none {\n    // Create number from counter value and numbering.\n    let number = if h.numbering != none {\n      numbering(h.numbering, ..counter(heading).at(h.location()))\n    }\n\n    // Display number and heading body (with space between).\n    [#number #h.body]\n  }\n})\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 42,
      "score": 83.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 4225,
      "post_number": 3,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-19T11:34:01.715Z",
      "updated_at": "2024-10-19T11:34:37.962Z",
      "cooked": "<p><a class=\"mention\" href=\"/u/eric\">@Eric</a> Thanks a lot. Works perfecly, though there is one minor issue:</p>\n<p>Currently, if a page doesn’t have a level-1 heading, its header is blank. Whereas what I tried to achieve is that in such a case it should “borrow” the level-1 heading from the nearest previous page.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(header: context {\n  // Find first level-1 heading on this page (if any).\n  let h = query(heading.where(level: 1).after(here()))\n    .filter(h =&gt; h.location().page() == here().page())\n    .at(0, default: none)\n\n  if h != none {\n    // Create number from counter value and numbering.\n    let number = if h.numbering != none {\n      numbering(h.numbering, ..counter(heading).at(h.location()))\n    }\n\n    // Display number and heading body (with space between).\n    [#number #h.body]\n  }\n})\n\n// --\n\n= A\n\n#lorem(2000)\n\n= B\n\n#lorem(500)\n\n= C\n\n#lorem(2000)\n\n= D\n\n#lorem(500)\n</code></pre>\n<p>Here:</p>\n<ul>\n<li>the header of the pages 1-3 should be “A”</li>\n<li>the header of 4th page should be \"B</li>\n<li>the header of the pages 5-6 should be “C”</li>\n<li>the header of the pages 7-8 should be “D”</li>\n</ul>",
      "raw": "@Eric Thanks a lot. Works perfecly, though there is one minor issue:\n\nCurrently, if a page doesn't have a level-1 heading, its header is blank. Whereas what I tried to achieve is that in such a case it should \"borrow\" the level-1 heading from the nearest previous page.\n\n```typ\n#set page(header: context {\n  // Find first level-1 heading on this page (if any).\n  let h = query(heading.where(level: 1).after(here()))\n    .filter(h => h.location().page() == here().page())\n    .at(0, default: none)\n\n  if h != none {\n    // Create number from counter value and numbering.\n    let number = if h.numbering != none {\n      numbering(h.numbering, ..counter(heading).at(h.location()))\n    }\n\n    // Display number and heading body (with space between).\n    [#number #h.body]\n  }\n})\n\n// --\n\n= A\n\n#lorem(2000)\n\n= B\n\n#lorem(500)\n\n= C\n\n#lorem(2000)\n\n= D\n\n#lorem(500)\n```\n\nHere:\n\n- the header of the pages 1-3 should be \"A\"\n- the header of 4th page should be \"B\n- the header of the pages 5-6 should be \"C\"\n- the header of the pages 7-8 should be \"D\"",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 36,
      "score": 17.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 4226,
      "post_number": 4,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-10-19T11:44:00.238Z",
      "updated_at": "2024-10-19T11:44:00.238Z",
      "cooked": "<p>In that case, you could run another query if the first one didn’t yield any results:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">let h = query(heading.where(level: 1).after(here()))\n  .filter(h =&gt; h.location().page() == here().page())\n  .at(0, default: {\n    // Fall back to last previous heading.\n    query(heading.where(level: 1).before(here())).at(-1, default: none)\n  })\n</code></pre>",
      "raw": "In that case, you could run another query if the first one didn't yield any results:\n```typc\nlet h = query(heading.where(level: 1).after(here()))\n  .filter(h => h.location().page() == here().page())\n  .at(0, default: {\n    // Fall back to last previous heading.\n    query(heading.where(level: 1).before(here())).at(-1, default: none)\n  })\n```",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 32,
      "score": 31.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 4294,
      "post_number": 5,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-20T10:25:28.337Z",
      "updated_at": "2024-10-20T10:28:19.746Z",
      "cooked": "<p><a class=\"mention\" href=\"/u/eric\">@Eric</a> , maybe you could you help once more?</p>\n<p>Here is a code I use to put page numbers in the outer top corners: that is, in the top left corner of the left page and in the top right corner of the right page.</p>\n<pre><code class=\"lang-auto\">#set page(header: context {\n  let page = counter(page).get().first()\n  align(if calc.odd(page) { right } else { left })[#page]\n})\n</code></pre>\n<p>Which gives:</p>\n<pre><code class=\"lang-auto\">┌────────────┐ ┌────────────╥────────────┐\n│          1 │ │ 2          ║          3 │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n└────────────┘ └────────────╨────────────┘\n</code></pre>\n<p>Could you show how to combine it with your solution, so that for left page the header will be something like</p>\n<pre data-code-wrap=\"none\"><code class=\"lang-none\">&lt;Page number&gt; #h(2em) &lt;Level-1 heading&gt;\n</code></pre>\n<p>and for the right page something like</p>\n<pre data-code-wrap=\"none\"><code class=\"lang-none\">&lt;Level-1 heading&gt; #h(2em) &lt;Page number&gt;\n</code></pre>\n<p>That is:</p>\n<pre><code class=\"lang-auto\">┌────────────┐ ┌────────────╥────────────┐\n│    Lorem 1 │ │ 2 Lorem    ║    Lorem 3 │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n└────────────┘ └────────────╨────────────┘\n</code></pre>",
      "raw": "@Eric , maybe you could you help once more?\n\nHere is a code I use to put page numbers in the outer top corners: that is, in the top left corner of the left page and in the top right corner of the right page.\n\n```\n#set page(header: context {\n  let page = counter(page).get().first()\n  align(if calc.odd(page) { right } else { left })[#page]\n})\n```\n\nWhich gives:\n\n```\n┌────────────┐ ┌────────────╥────────────┐\n│          1 │ │ 2          ║          3 │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n└────────────┘ └────────────╨────────────┘\n```\n\nCould you show how to combine it with your solution, so that for left page the header will be something like\n\n```none\n<Page number> #h(2em) <Level-1 heading>\n```\n\nand for the right page something like\n\n```none\n<Level-1 heading> #h(2em) <Page number>\n```\n\nThat is:\n\n```\n┌────────────┐ ┌────────────╥────────────┐\n│    Lorem 1 │ │ 2 Lorem    ║    Lorem 3 │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n│            │ │            ║            │\n└────────────┘ └────────────╨────────────┘\n```",
      "reply_to_post_number": null,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 29,
      "score": 40.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 4295,
      "post_number": 6,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2024-10-20T10:42:26.674Z",
      "updated_at": "2024-10-20T10:42:26.674Z",
      "cooked": "<p>Sure, you can store the previous output in a variable and use a stack with either <code>ltr</code> or <code>rtl</code> direction to show it next to the page. To align to the left or right of the page, use a <code>1fr</code> filler in the stack:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(header: context {\n  let h = query(...)\n\n  let h = if h != none {\n    ...\n    [#number #h.body]\n  }\n\n  // Get logical page number.\n  let numbering = if page.numbering != none { page.numbering } else { \"1\" }\n  let page = counter(page).display(numbering)\n\n  // Align right or left, based on physical page number.\n  stack(\n    dir: if calc.odd(here().page()) { rtl } else { ltr },\n    [#page], 2em, h, 1fr\n  )\n})\n</code></pre>",
      "raw": "Sure, you can store the previous output in a variable and use a stack with either `ltr` or `rtl` direction to show it next to the page. To align to the left or right of the page, use a `1fr` filler in the stack:\n```typ\n#set page(header: context {\n  let h = query(...)\n\n  let h = if h != none {\n    ...\n    [#number #h.body]\n  }\n\n  // Get logical page number.\n  let numbering = if page.numbering != none { page.numbering } else { \"1\" }\n  let page = counter(page).display(numbering)\n\n  // Align right or left, based on physical page number.\n  stack(\n    dir: if calc.odd(here().page()) { rtl } else { ltr },\n    [#page], 2em, h, 1fr\n  )\n})\n```",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 28,
      "score": 55.6,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 4665,
      "post_number": 7,
      "username": "Collete",
      "name": "Zeeqeen",
      "created_at": "2024-10-25T10:41:52.716Z",
      "updated_at": "2024-10-25T10:41:52.716Z",
      "cooked": "<p>That’s also what I want! Your question help me a lot! Maybe it should be marked as an example for the category of making a book.</p>",
      "raw": "That's also what I want! Your question help me a lot! Maybe it should be marked as an example for the category of making a book.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 23,
      "score": 24.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 676
    }
  ],
  "scraped_at": "2025-06-10T09:56:26.052136"
}