{
  "topic_metadata": {
    "id": 1342,
    "title": "What is the best way to identify parsing mode at given position in file?",
    "slug": "what-is-the-best-way-to-identify-parsing-mode-at-given-position-in-file",
    "posts_count": 4,
    "created_at": "2024-10-24T23:12:32.218Z",
    "last_posted_at": "2024-10-25T16:20:41.509Z",
    "views": 102,
    "like_count": 3,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "quachpas",
    "tags": [
      "scripting",
      "syntax"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 257
  },
  "posts": [
    {
      "id": 4635,
      "post_number": 1,
      "username": "jakobjpeters",
      "name": "Jakob Peters",
      "created_at": "2024-10-24T23:12:32.320Z",
      "updated_at": "2024-11-01T10:21:59.252Z",
      "cooked": "<p>Given a Typst file as a string and an index into that string, is there a good way to programmatically (in any language) identify whether it’s in markup, code, or math mode?</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">let s = \"a $ #{ b + 1 } c $\"\nmode(s, 0) // \"a\" --&gt; \"markup\"\nmode(s, 7) // \"b\" --&gt; \"code\"\nmode(s, 15) // \"c\" --&gt; \"math\"\n</code></pre>\n<h4><a name=\"p-4635-possible-solutions-1\" class=\"anchor\" href=\"#p-4635-possible-solutions-1\"></a>Possible solutions</h4>\n<ul>\n<li>Write a custom parser that only handles transitions between modes</li>\n<li>Use an existing grammar, such as <a href=\"https://github.com/uben0/tree-sitter-typst\" rel=\"noopener nofollow ugc\">tree-sitter-typst</a></li>\n<li>Fork the Typst parser</li>\n<li>???</li>\n</ul>",
      "raw": "Given a Typst file as a string and an index into that string, is there a good way to programmatically (in any language) identify whether it's in markup, code, or math mode?\n\n```typc\nlet s = \"a $ #{ b + 1 } c $\"\nmode(s, 0) // \"a\" --> \"markup\"\nmode(s, 7) // \"b\" --> \"code\"\nmode(s, 15) // \"c\" --> \"math\"\n```\n\n#### Possible solutions\n\n- Write a custom parser that only handles transitions between modes\n- Use an existing grammar, such as [tree-sitter-typst](https://github.com/uben0/tree-sitter-typst)\n- Fork the Typst parser\n- ???",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 201.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 674
    },
    {
      "id": 4639,
      "post_number": 2,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-10-25T06:01:47.342Z",
      "updated_at": "2024-10-25T06:01:47.342Z",
      "cooked": "<p>for reference, this is how tinymist does it (I presume)</p><aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/Myriad-Dreamin/tinymist/blob/136b1623609b6b9f8ad2987256f9a08958edf2a6/editors/vscode/src/editor-tools.ts#L268\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/Myriad-Dreamin/tinymist/blob/136b1623609b6b9f8ad2987256f9a08958edf2a6/editors/vscode/src/editor-tools.ts#L268\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/Myriad-Dreamin/tinymist/blob/136b1623609b6b9f8ad2987256f9a08958edf2a6/editors/vscode/src/editor-tools.ts#L268\" target=\"_blank\" rel=\"noopener nofollow ugc\">Myriad-Dreamin/tinymist/blob/136b1623609b6b9f8ad2987256f9a08958edf2a6/editors/vscode/src/editor-tools.ts#L268</a></h4>\n\n\n\n    <pre class=\"onebox\"><code class=\"lang-ts\">\n      <ol class=\"start lines\" start=\"258\" style=\"counter-reset: li-counter 257 ;\">\n          <li>  math,</li>\n          <li>  comment,</li>\n          <li>  markup,</li>\n          <li>  code,</li>\n          <li>  string: stringContent,</li>\n          <li>  raw,</li>\n          <li>  rest,</li>\n          <li>} = edit.newText;</li>\n          <li>const newText = kind === \"by-mode\" ? rest || \"\" : \"\";</li>\n          <li></li>\n          <li class=\"selected\">const res = await vscode.commands.executeCommand&lt;</li>\n          <li>  [{ mode: \"math\" | \"markup\" | \"code\" | \"comment\" | \"string\" | \"raw\" }]</li>\n          <li>&gt;(\"tinymist.interactCodeContext\", {</li>\n          <li>  textDocument: {</li>\n          <li>    uri: activeDocument.uri.toString(),</li>\n          <li>  },</li>\n          <li>  query: [</li>\n          <li>    {</li>\n          <li>      kind: \"modeAt\",</li>\n          <li>      position: {</li>\n          <li>        line: selectionStart.line,</li>\n      </ol>\n    </code></pre>\n\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>Alternatively, you can also take a loot at <a href=\"https://forum.typst.app/t/is-there-a-prism-language-definition-for-typst/914\" class=\"inline-onebox\">Is there a prism language definition for Typst?</a>, but there are issues with nested scopes.</p>",
      "raw": "for reference, this is how tinymist does it (I presume)\nhttps://github.com/Myriad-Dreamin/tinymist/blob/136b1623609b6b9f8ad2987256f9a08958edf2a6/editors/vscode/src/editor-tools.ts#L268\n\nAlternatively, you can also take a loot at https://forum.typst.app/t/is-there-a-prism-language-definition-for-typst/914, but there are issues with nested scopes.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 29,
      "score": 85.8,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 4648,
      "post_number": 3,
      "username": "jakobjpeters",
      "name": "Jakob Peters",
      "created_at": "2024-10-25T07:56:21.825Z",
      "updated_at": "2024-11-01T10:21:21.697Z",
      "cooked": "<p>tinimist is a great lead, thank you! It looks like it <a href=\"https://github.com/Myriad-Dreamin/tinymist/blob/136b1623609b6b9f8ad2987256f9a08958edf2a6/crates/tinymist-query/src/code_context.rs#L79\" rel=\"noopener nofollow ugc\">locates the leaf node of the Typst syntax tree</a>, <a href=\"https://github.com/Myriad-Dreamin/tinymist/blob/136b1623609b6b9f8ad2987256f9a08958edf2a6/crates/tinymist-query/src/syntax/matcher.rs#L108\" rel=\"noopener nofollow ugc\">matches the node kind on whether it has a known mode</a>, and traverses the parent nodes until finding a match.</p>\n<p>I’m still curious if there are other implementations out there, but it seems like this one is both well-done, widely used, and will be kept updated.</p>",
      "raw": "tinimist is a great lead, thank you! It looks like it [locates the leaf node of the Typst syntax tree](https://github.com/Myriad-Dreamin/tinymist/blob/136b1623609b6b9f8ad2987256f9a08958edf2a6/crates/tinymist-query/src/code_context.rs#L79), [matches the node kind on whether it has a known mode](https://github.com/Myriad-Dreamin/tinymist/blob/136b1623609b6b9f8ad2987256f9a08958edf2a6/crates/tinymist-query/src/syntax/matcher.rs#L108), and traverses the parent nodes until finding a match.\n\nI'm still curious if there are other implementations out there, but it seems like this one is both well-done, widely used, and will be kept updated.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 25,
      "score": 15.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 674
    },
    {
      "id": 4682,
      "post_number": 4,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-10-25T16:20:41.509Z",
      "updated_at": "2024-10-25T16:20:41.509Z",
      "cooked": "<p>I think a full parse is necessary to identify the current mode with certainty. No shortcuts here.</p>",
      "raw": "I think a full parse is necessary to identify the current mode with certainty. No shortcuts here.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 21,
      "score": 19.2,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    }
  ],
  "scraped_at": "2025-06-10T09:56:00.422362"
}