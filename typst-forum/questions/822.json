{
  "topic_metadata": {
    "id": 822,
    "title": "How do I know what elements compose a function for styling purposes?",
    "slug": "how-do-i-know-what-elements-compose-a-function-for-styling-purposes",
    "posts_count": 12,
    "created_at": "2024-09-30T21:03:57.887Z",
    "last_posted_at": "2024-10-02T13:23:16.260Z",
    "views": 153,
    "like_count": 7,
    "reply_count": 8,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "sijo",
    "tags": [
      "styling"
    ],
    "category_id": 5,
    "participant_count": 5,
    "word_count": 1305
  },
  "posts": [
    {
      "id": 3049,
      "post_number": 1,
      "username": "davystrong",
      "name": "David",
      "created_at": "2024-09-30T21:03:58.081Z",
      "updated_at": "2024-09-30T21:03:58.081Z",
      "cooked": "<p>I recently wanted to change the spacing between lines in a document. A quick Google search brought up <a href=\"https://stackoverflow.com/questions/76303403/how-to-change-spacing-between-lines-in-typst-template\" rel=\"noopener nofollow ugc\">this SO answer</a> which describes exactly what I wanted: spacing between lines can be set using the leading parameter and spacing between paragraphs can be set with the block’s spacing. Fairly logical once you know how.</p>\n<p>However, now I want to style a <code>quote</code>. For example, say I want to simply put the attribution in the middle (I know I could rewrite the <code>quote</code> function with a new show rule - that’s not what I want). How can I find the elements that make up a <code>quote</code> to style them like that. I.e. to change the spacing between paragraphs, I had to set a value for <code>block</code>. What is the equivalent for the attribution and, specifically, how can I find that without having to ask here?</p>",
      "raw": "I recently wanted to change the spacing between lines in a document. A quick Google search brought up [this SO answer](https://stackoverflow.com/questions/76303403/how-to-change-spacing-between-lines-in-typst-template) which describes exactly what I wanted: spacing between lines can be set using the leading parameter and spacing between paragraphs can be set with the block's spacing. Fairly logical once you know how.\n\nHowever, now I want to style a `quote`. For example, say I want to simply put the attribution in the middle (I know I could rewrite the `quote` function with a new show rule - that's not what I want). How can I find the elements that make up a `quote` to style them like that. I.e. to change the spacing between paragraphs, I had to set a value for `block`. What is the equivalent for the attribution and, specifically, how can I find that without having to ask here?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 40,
      "score": 308.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 504
    },
    {
      "id": 3070,
      "post_number": 2,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-01T11:29:13.589Z",
      "updated_at": "2024-10-01T11:29:13.589Z",
      "cooked": "<p>First a quick note: In the next release you won’t have to do <code>show par: set block(...)</code>, instead you will be able to do <code>set par(spacing: ...)</code> <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>You can’t always style things with set rules. For example the quote attribution alignment to the end of the line is <a href=\"https://github.com/typst/typst/blob/d03af848eb510a9ce0ad84db6714d27982c68717/crates/typst/src/model/quote.rs#L213\" rel=\"noopener nofollow ugc\">hardcoded in the source</a>. So you do need a show rule to build the quote yourself.</p>\n<p>As to how you can find out if you need a show rule or not, I also don’t think there’s a general way to do that currently (appart from looking at the source code).</p>",
      "raw": "First a quick note: In the next release you won't have to do `show par: set block(...)`, instead you will be able to do `set par(spacing: ...)` :slight_smile: \n\nYou can't always style things with set rules. For example the quote attribution alignment to the end of the line is [hardcoded in the source](https://github.com/typst/typst/blob/d03af848eb510a9ce0ad84db6714d27982c68717/crates/typst/src/model/quote.rs#L213). So you do need a show rule to build the quote yourself.\n\nAs to how you can find out if you need a show rule or not, I also don't think there's a general way to do that currently (appart from looking at the source code).",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 38,
      "score": 32.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 3098,
      "post_number": 3,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-10-01T14:35:17.232Z",
      "updated_at": "2024-10-01T14:35:17.232Z",
      "cooked": "<p>For posterity, <a class=\"mention\" href=\"/u/sijo\">@sijo</a> is talking about the next <span class=\"hashtag-raw\">#v0-12-0</span>. In <a class=\"hashtag-cooked\" href=\"/tag/v0-11-1\" data-type=\"tag\" data-slug=\"v0-11-1\" data-id=\"110\"><span class=\"hashtag-icon-placeholder\"><svg class=\"fa d-icon d-icon-square-full svg-icon svg-node\"><use href=\"#square-full\"></use></svg></span><span>v0-11-1</span></a>, the syntax is still <code>show par: set block(...)</code>. Andrew mentionned the specific PR <a href=\"https://forum.typst.app/t/why-bottom-pad-in-paragraph-breaks-left-pad-in-quote/600/12\">here</a>.</p>",
      "raw": "For posterity, @sijo is talking about the next #v0-12-0. In #v0-11-1, the syntax is still `show par: set block(...)`. Andrew mentionned the specific PR [here](https://forum.typst.app/t/why-bottom-pad-in-paragraph-breaks-left-pad-in-quote/600/12).",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 34,
      "score": 41.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 3102,
      "post_number": 4,
      "username": "davystrong",
      "name": "David",
      "created_at": "2024-10-01T15:31:50.272Z",
      "updated_at": "2024-10-01T15:31:50.272Z",
      "cooked": "<p>Ok, I wonder how that could be better documented? Maybe not in this specific case where it’s hard coded, but in the general case. I’ll have a think about it and maybe submit a PR or BR.</p>\n<p>Regarding the PR mentioned, thanks! That explains some of the layout changes I encountered after switching to HEAD.</p>",
      "raw": "Ok, I wonder how that could be better documented? Maybe not in this specific case where it's hard coded, but in the general case. I'll have a think about it and maybe submit a PR or BR.\n\nRegarding the PR mentioned, thanks! That explains some of the layout changes I encountered after switching to HEAD.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 34,
      "score": 26.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 504
    },
    {
      "id": 3137,
      "post_number": 5,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-10-01T20:55:37.255Z",
      "updated_at": "2024-10-01T20:55:37.255Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"davystrong\" data-post=\"4\" data-topic=\"822\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/d/C2387F/48.png\" class=\"avatar\"> davystrong:</div>\n<blockquote>\n<p>Ok, I wonder how that could be better documented?</p>\n</blockquote>\n</aside>\n<p>That’s a great question! A lot of people often want to rebuild some element via a show rule to tweak something, but every time you fall into the same pitfall, like you did. I do think that documentation should have a Typst code for recreating every element (if possible). Can you please <a href=\"https://github.com/typst/typst/issues/new?assignees=&amp;labels=docs&amp;projects=&amp;template=3-docs.yml&amp;title=Write+a+short+and+descriptive+title%21\" rel=\"noopener nofollow ugc\">open a documentation issue</a>?</p>\n<p>This change to documentation will probably greatly increase the ease of tinkering for everybody. And you wouldn’t have to keep a backlog of all show rules you created yourself (for future use).</p>",
      "raw": "[quote=\"davystrong, post:4, topic:822\"]\nOk, I wonder how that could be better documented?\n[/quote]\n\nThat's a great question! A lot of people often want to rebuild some element via a show rule to tweak something, but every time you fall into the same pitfall, like you did. I do think that documentation should have a Typst code for recreating every element (if possible). Can you please [open a documentation issue](https://github.com/typst/typst/issues/new?assignees=&labels=docs&projects=&template=3-docs.yml&title=Write+a+short+and+descriptive+title%21)?\n\nThis change to documentation will probably greatly increase the ease of tinkering for everybody. And you wouldn't have to keep a backlog of all show rules you created yourself (for future use).",
      "reply_to_post_number": 4,
      "reply_count": 2,
      "quote_count": 1,
      "like_count": 1,
      "reads": 32,
      "score": 31.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 3141,
      "post_number": 6,
      "username": "davystrong",
      "name": "David",
      "created_at": "2024-10-01T21:40:48.971Z",
      "updated_at": "2024-10-01T21:40:48.971Z",
      "cooked": "<p>I’ll aim to open a documentation issue, but I don’t like the idea of this having to be done manually every time an element is added or changed. However, for most elements automatically generating a code example is likely impractical, since any combination of arguments would map to any number of completely different results.</p>\n<p>Actually, when I said “documented” I was really thinking of something more like VS Code hover function. If I could define a <code>quote</code> in my document, then hover over it to see the equivalent typst code for that particular configuration of the function. Bonus points for a code action to generate the “identity” show function for the element.</p>\n<p>Does that sound interesting? Does it sound feasible? I assume this would require generating typst code from an AST. I realise the LSP isn’t provided by typst but I imagine the functionality required to do this would need to be added to the <code>typst-ide</code> crate.</p>",
      "raw": "I'll aim to open a documentation issue, but I don't like the idea of this having to be done manually every time an element is added or changed. However, for most elements automatically generating a code example is likely impractical, since any combination of arguments would map to any number of completely different results.\n\nActually, when I said \"documented\" I was really thinking of something more like VS Code hover function. If I could define a `quote` in my document, then hover over it to see the equivalent typst code for that particular configuration of the function. Bonus points for a code action to generate the \"identity\" show function for the element.\n\nDoes that sound interesting? Does it sound feasible? I assume this would require generating typst code from an AST. I realise the LSP isn't provided by typst but I imagine the functionality required to do this would need to be added to the `typst-ide` crate.",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 11.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 504
    },
    {
      "id": 3148,
      "post_number": 7,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-10-01T22:52:41.531Z",
      "updated_at": "2024-10-01T23:49:27.365Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"davystrong\" data-post=\"6\" data-topic=\"822\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/d/C2387F/48.png\" class=\"avatar\"> davystrong:</div>\n<blockquote>\n<p>I’ll aim to open a documentation issue</p>\n</blockquote>\n</aside>\n<p>I’m looking forward to it.</p>\n<aside class=\"quote no-group\" data-username=\"davystrong\" data-post=\"6\" data-topic=\"822\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/d/C2387F/48.png\" class=\"avatar\"> davystrong:</div>\n<blockquote>\n<p>I don’t like the idea of this having to be done manually every time an element is added or changed. However, for most elements automatically generating a code example is likely impractical</p>\n</blockquote>\n</aside>\n<p>The way elements created internally in Rust isn’t something that changes regularly (you can try <code>git blame</code> and see when those line have been changed the last time). So recreating them manually once per element basically will be a one-time investment. Moreover, making this somehow automated isn’t a trivial task, so I think it is safe to say that this is out of the question for near future (or in general, IDK, I’m not the creator). Also, since normally the function/element related code is documented right above the Rust struct in the doc string, it would be pretty easy to update the show rule code example (for a specific element that had its internal representation changed).</p>\n<aside class=\"quote no-group\" data-username=\"davystrong\" data-post=\"6\" data-topic=\"822\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/d/C2387F/48.png\" class=\"avatar\"> davystrong:</div>\n<blockquote>\n<p>Actually, when I said “documented” I was really thinking of something more like VS Code hover function. If I could define a <code>quote</code> in my document, then hover over it to see the equivalent typst code for that particular configuration of the function. Bonus points for a code action to generate the “identity” show function for the element.</p>\n</blockquote>\n</aside>\n<aside class=\"quote no-group\" data-username=\"davystrong\" data-post=\"6\" data-topic=\"822\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/d/C2387F/48.png\" class=\"avatar\"> davystrong:</div>\n<blockquote>\n<p>I realise the LSP isn’t provided by typst but I imagine the functionality required to do this would need to be added to the <code>typst-ide</code> crate.</p>\n</blockquote>\n</aside>\n<p>I answered a similar/same question in <a href=\"https://forum.typst.app/t/how-can-i-document-my-own-user-defined-functions-variables/839\" class=\"inline-onebox\">How can I document my own user defined functions/variables?</a>. You should look into <a href=\"https://github.com/Myriad-Dreamin/tinymist\" rel=\"noopener nofollow ugc\">tinymist</a> for such feature (for now). Also a small note that <a href=\"https://typst.app/docs/reference/model/quote/\"><code>quote</code></a> is already a defined element. See <a href=\"https://forum.typst.app/t/how-can-i-access-shadowed-functions/821/3\" class=\"inline-onebox\">How can I access shadowed functions? - #3 by Eric</a>.</p>\n<aside class=\"quote no-group\" data-username=\"davystrong\" data-post=\"6\" data-topic=\"822\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/d/C2387F/48.png\" class=\"avatar\"> davystrong:</div>\n<blockquote>\n<p>Does that sound interesting? Does it sound feasible?</p>\n</blockquote>\n</aside>\n<p>Yes. IMO, no.</p>",
      "raw": "[quote=\"davystrong, post:6, topic:822\"]\nI’ll aim to open a documentation issue\n[/quote]\n\nI'm looking forward to it.\n\n[quote=\"davystrong, post:6, topic:822\"]\nI don’t like the idea of this having to be done manually every time an element is added or changed. However, for most elements automatically generating a code example is likely impractical\n[/quote]\n\nThe way elements created internally in Rust isn't something that changes regularly (you can try `git blame` and see when those line have been changed the last time). So recreating them manually once per element basically will be a one-time investment. Moreover, making this somehow automated isn't a trivial task, so I think it is safe to say that this is out of the question for near future (or in general, IDK, I'm not the creator). Also, since normally the function/element related code is documented right above the Rust struct in the doc string, it would be pretty easy to update the show rule code example (for a specific element that had its internal representation changed).\n\n[quote=\"davystrong, post:6, topic:822\"]\nActually, when I said “documented” I was really thinking of something more like VS Code hover function. If I could define a `quote` in my document, then hover over it to see the equivalent typst code for that particular configuration of the function. Bonus points for a code action to generate the “identity” show function for the element.\n[/quote]\n\n[quote=\"davystrong, post:6, topic:822\"]\nI realise the LSP isn’t provided by typst but I imagine the functionality required to do this would need to be added to the `typst-ide` crate.\n[/quote]\n\nI answered a similar/same question in https://forum.typst.app/t/how-can-i-document-my-own-user-defined-functions-variables/839. You should look into [tinymist](https://github.com/Myriad-Dreamin/tinymist) for such feature (for now). Also a small note that [`quote`](https://typst.app/docs/reference/model/quote/) is already a defined element. See https://forum.typst.app/t/how-can-i-access-shadowed-functions/821/3.\n\n[quote=\"davystrong, post:6, topic:822\"]\nDoes that sound interesting? Does it sound feasible?\n[/quote]\n\nYes. IMO, no.",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 31,
      "score": 16.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 3157,
      "post_number": 8,
      "username": "quachpas",
      "name": "Pascal Quach",
      "created_at": "2024-10-02T06:02:56.531Z",
      "updated_at": "2024-10-02T06:02:56.531Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Andrew\" data-post=\"5\" data-topic=\"822\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<p>I do think that documentation should have a Typst code for recreating every element (if possible).</p>\n</blockquote>\n</aside>\n<p>That seems like a great idea! I can already imagine LSP adopting the default and auto-generating a default show rule function, i.e. typing</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show figure: it =&gt; ...\n</code></pre>\n<p>would suggest a snippet in order to provide a default function that reproduces the default Typst behaviour.</p>",
      "raw": "[quote=\"Andrew, post:5, topic:822\"]\nI do think that documentation should have a Typst code for recreating every element (if possible).\n[/quote]\n\nThat seems like a great idea! I can already imagine LSP adopting the default and auto-generating a default show rule function, i.e. typing\n```typ\n#show figure: it => ...\n```\nwould suggest a snippet in order to provide a default function that reproduces the default Typst behaviour.",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 1,
      "reads": 27,
      "score": 40.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 258
    },
    {
      "id": 3194,
      "post_number": 9,
      "username": "davystrong",
      "name": "David",
      "created_at": "2024-10-02T09:02:35.444Z",
      "updated_at": "2024-10-02T09:02:35.444Z",
      "cooked": "<p>Created the <a href=\"https://github.com/typst/typst/issues/5095\" rel=\"noopener nofollow ugc\">issue</a>.</p>",
      "raw": "Created the [issue](https://github.com/typst/typst/issues/5095).",
      "reply_to_post_number": 7,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 25,
      "score": 20.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 504
    },
    {
      "id": 3202,
      "post_number": 10,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-10-02T12:05:21.713Z",
      "updated_at": "2024-10-02T12:05:21.713Z",
      "cooked": "<p>Damn, that would be huge! <a class=\"mention\" href=\"/u/myriad-dreamin\">@Myriad-Dreamin</a>, <em>write that down, write that down!</em></p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/8d7e80ca88c4f236e6b73382e7247ea8828e0d8e.jpeg\" alt=\"Write that down, write that down!\" data-base62-sha1=\"kbIm0rC26ohWFh3UAIFrAYKdHCS\" width=\"245\" height=\"162\"></p>",
      "raw": "Damn, that would be huge! @Myriad-Dreamin, *write that down, write that down!*\n\n![Write that down, write that down!|490x324, 50%](upload://kbIm0rC26ohWFh3UAIFrAYKdHCS.jpeg)",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 19.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 3210,
      "post_number": 11,
      "username": "Myriad-Dreamin",
      "name": "Myriad-Dreamin",
      "created_at": "2024-10-02T12:59:40.377Z",
      "updated_at": "2024-10-02T12:59:40.377Z",
      "cooked": "<p>We now can easily access which styles are added to the element, but might not simply reference which exact show rules changes the element. Correct me if I wrongly get the requested feature.</p>",
      "raw": "We now can easily access which styles are added to the element, but might not simply reference which exact show rules changes the element. Correct me if I wrongly get the requested feature.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 20,
      "score": 9.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 20
    },
    {
      "id": 3214,
      "post_number": 12,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-10-02T13:23:16.260Z",
      "updated_at": "2024-10-02T13:23:16.260Z",
      "cooked": "<p><a href=\"https://forum.typst.app/t/how-do-i-know-what-elements-compose-a-function-for-styling-purposes/822/8\">Here</a> <a class=\"mention\" href=\"/u/quachpas\">@quachpas</a> is talking about a snippet suggestion from the LSP server (could perhaps also be a code action). A snippet includes a show rule for the specific element that can mirror how the element is created in the Rust code. Since tinymist is separate from the Typst itself, it can already start implementing and supporting it. But the caveat here is that not all elements can be fully recreated in Typst right now. And that someone has to manually write such show rules (as close to how it’s defined in Rust as possible). You might want to see the discussion in the created issue for more context.</p>",
      "raw": "[Here](https://forum.typst.app/t/how-do-i-know-what-elements-compose-a-function-for-styling-purposes/822/8) @quachpas is talking about a snippet suggestion from the LSP server (could perhaps also be a code action). A snippet includes a show rule for the specific element that can mirror how the element is created in the Rust code. Since tinymist is separate from the Typst itself, it can already start implementing and supporting it. But the caveat here is that not all elements can be fully recreated in Typst right now. And that someone has to manually write such show rules (as close to how it's defined in Rust as possible). You might want to see the discussion in the created issue for more context.",
      "reply_to_post_number": 11,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 18,
      "score": 8.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:57:43.894190"
}