{
  "topic_metadata": {
    "id": 2391,
    "title": "What Are Best Practices for Allowing Users to Modify Constants in Typst Packages?",
    "slug": "what-are-best-practices-for-allowing-users-to-modify-constants-in-typst-packages",
    "posts_count": 2,
    "created_at": "2025-01-13T22:52:04.803Z",
    "last_posted_at": "2025-01-13T23:18:51.577Z",
    "views": 180,
    "like_count": 2,
    "reply_count": 0,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "xkevio",
    "tags": [
      "scripting",
      "package-authoring"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 443
  },
  "posts": [
    {
      "id": 7439,
      "post_number": 1,
      "username": "Alex",
      "name": "Alex",
      "created_at": "2025-01-13T22:52:04.938Z",
      "updated_at": "2025-02-02T20:06:02.491Z",
      "cooked": "<p>Hi everyone,</p>\n<p>I’m currently working on a Typst project destined to become a package and would love to know how to design it so users can decide whether or not to modify certain constants. The goal is to give them the flexibility to customize the package while keeping it simple and intuitive.</p>\n<p>In this project, I have a large number of constants (e.g., font choices, spacings, font sizes) that control the layout and appearance of elements. Here’s an example of how the constants look:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">// in constant.typ\n#let _Title-font = \"Source Sans Pro\"       // Title font\n#let _Header-tune-font = \"Noto Sans\"       // \"Air:\" font\n#let _Title-spacing = 0.2cm                // Spacing between title and header\n#let _Title-fontsize = 14pt                // Title font size\n// ... and many more\n</code></pre>\n<p>I want users to be able to <strong>use the package defaults</strong> without any extra configuration or <strong>easily modify specific constants</strong> if they need to customize the layout.</p>\n<p>For the moment i’m thinking of using <code>state</code> but it comes with certain disavantages such as updating the whole project and forcing the user to use longer and “less intuitive” syntax :</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">// in constant.typ\n#let _Title-font = state(\"it\",\"Source Sans Pro\") \n// in main.typ\n#_Title-font.update(it =&gt; \"Arial\")\n</code></pre>\n<p>The ideal solution would be something like <code>#set</code> that allows users to override things with very clear and understandable syntax. For example:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#set _Title-font = \"Arial\"\n</code></pre>\n<p>In summary i have this questions :</p>\n<ul>\n<li>How do you typically design Typst packages to make some constants easily customizable?</li>\n<li>Is there a better alternative to using <code>state</code> for this purpose? Or a hack that i can develop to make it easier for the end user ?</li>\n<li>If previous quesiton is no, do you think requiring users to use <code>#_Title-font.update(...)</code> is acceptable, or would you consider it too cumbersome?</li>\n</ul>\n<p>Thank you in advance for your time and help. Since I started typst, I’ve found the community very responsive and helpful.</p>",
      "raw": "Hi everyone,\n\nI'm currently working on a Typst project destined to become a package and would love to know how to design it so users can decide whether or not to modify certain constants. The goal is to give them the flexibility to customize the package while keeping it simple and intuitive.\n\nIn this project, I have a large number of constants (e.g., font choices, spacings, font sizes) that control the layout and appearance of elements. Here's an example of how the constants look:\n\n```typst\n// in constant.typ\n#let _Title-font = \"Source Sans Pro\"       // Title font\n#let _Header-tune-font = \"Noto Sans\"       // \"Air:\" font\n#let _Title-spacing = 0.2cm                // Spacing between title and header\n#let _Title-fontsize = 14pt                // Title font size\n// ... and many more\n```\n\nI want users to be able to **use the package defaults** without any extra configuration or **easily modify specific constants** if they need to customize the layout.\n\nFor the moment i'm thinking of using `state` but it comes with certain disavantages such as updating the whole project and forcing the user to use longer and \"less intuitive\" syntax : \n```typst\n// in constant.typ\n#let _Title-font = state(\"it\",\"Source Sans Pro\") \n// in main.typ\n#_Title-font.update(it => \"Arial\")\n```\n\nThe ideal solution would be something like `#set` that allows users to override things with very clear and understandable syntax. For example:\n```typst\n#set _Title-font = \"Arial\"\n```\nIn summary i have this questions : \n- How do you typically design Typst packages to make some constants easily customizable?\n- Is there a better alternative to using `state` for this purpose? Or a hack that i can develop to make it easier for the end user ?\n- If previous quesiton is no, do you think requiring users to use `#_Title-font.update(...)` is acceptable, or would you consider it too cumbersome?\n\nThank you in advance for your time and help. Since I started typst, I've found the community very responsive and helpful.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 49,
      "score": 514.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 987
    },
    {
      "id": 7440,
      "post_number": 2,
      "username": "xkevio",
      "name": "Kevio",
      "created_at": "2025-01-13T23:18:51.577Z",
      "updated_at": "2025-01-13T23:19:42.659Z",
      "cooked": "<p>The idiomatic way, so far at least until we get custom elements and types, is to make all these variables (not constants) parameters of your template function which the user would apply with <code>#show: template.with(...)</code>.</p>\n<p>You could still keep your template-defined values in <code>constant.typ</code> by utilizing named parameters, like so:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import constant.typ: *\n#let my-template(\n  title-font: _Title-font,\n  title-spacing: _Title-spacing,\n  ..., // and so on\n  body\n) = {\n  // Your show and set rules.\n  body\n}\n</code></pre>\n<p>That way the user can either choose to override these values with <code>#show: my-template.with(title-font: \"Comic Sans\")</code> or leave them as-is by not providing the named parameter, see also <a href=\"https://typst.app/docs/tutorial/making-a-template/\" class=\"inline-onebox\">Making a Template – Typst Documentation</a>.</p>",
      "raw": "The idiomatic way, so far at least until we get custom elements and types, is to make all these variables (not constants) parameters of your template function which the user would apply with `#show: template.with(...)`.\n\nYou could still keep your template-defined values in `constant.typ` by utilizing named parameters, like so:\n```typ\n#import constant.typ: *\n#let my-template(\n  title-font: _Title-font,\n  title-spacing: _Title-spacing,\n  ..., // and so on\n  body\n) = {\n  // Your show and set rules.\n  body\n}\n```\n\nThat way the user can either choose to override these values with `#show: my-template.with(title-font: \"Comic Sans\")` or leave them as-is by not providing the named parameter, see also https://typst.app/docs/tutorial/making-a-template/.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 47,
      "score": 79.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 21
    }
  ],
  "scraped_at": "2025-06-10T09:52:51.680492"
}