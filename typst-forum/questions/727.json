{
  "topic_metadata": {
    "id": 727,
    "title": "How do I make a honeycomb?",
    "slug": "how-do-i-make-a-honeycomb",
    "posts_count": 6,
    "created_at": "2024-09-27T11:20:46.945Z",
    "last_posted_at": "2024-09-27T20:51:37.468Z",
    "views": 194,
    "like_count": 2,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 6,
    "accepted_answer_username": "Andrew",
    "tags": [
      "graphics"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 1342
  },
  "posts": [
    {
      "id": 2714,
      "post_number": 1,
      "username": "Nichlas_Hummelsberge",
      "name": "Nichlas Hummelsberger",
      "created_at": "2024-09-27T11:20:47.077Z",
      "updated_at": "2024-09-28T22:11:01.201Z",
      "cooked": "<p>Can someone guide me towards creating a honeycomb like below, where I can add labels both outside and inside the shapes? I do not need any colors or fills for the moment.</p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/63038ad1e5e40d08abc4ff1a5240e9029a7f9c47.png\" alt=\"2024-09-27 13_13_53-Trav2022CharSheet.pdf - Adobe Acrobat Reader (32-bit)\" data-base62-sha1=\"e7URfoil3ubf1qICAQAZmlaBwAT\" width=\"326\" height=\"111\"></p>",
      "raw": "Can someone guide me towards creating a honeycomb like below, where I can add labels both outside and inside the shapes? I do not need any colors or fills for the moment.\n\n![2024-09-27 13_13_53-Trav2022CharSheet.pdf - Adobe Acrobat Reader (32-bit)|326x111](upload://e7URfoil3ubf1qICAQAZmlaBwAT.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 57,
      "score": 71.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 475
    },
    {
      "id": 2716,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-09-27T11:33:48.355Z",
      "updated_at": "2024-09-27T11:34:36.929Z",
      "cooked": "<p>Are you aware of the <a href=\"https://typst.app/docs/reference/visualize/polygon/\"><code>polygon</code></a> function and <a href=\"https://typst.app/universe/package/cetz/\">CeTZ package</a>’s <code>cetz.draw.line()</code>? It should be relatively easy to use either to draw this (CeTZ is probably a bit easier), using a bit of trigonometry. For this, you’ll also want to use the <a href=\"https://typst.app/docs/reference/foundations/calc\"><code>calc.sin()</code> and <code>calc.cos()</code></a> functions to determine coordinates.</p>\n<p>Basically:</p>\n<ul>\n<li>choose the coordinates for where to have the first hexagon’s center (<code>cx</code>, <code>cy</code>), and a “radius”</li>\n<li>the six corners are each shifted by 60°, and you get them by <code>x = cx + cos(angle)*radius</code> and <code>y = cy + sin(angle)*radius</code> (the Wikipedia article on the <a href=\"https://en.wikipedia.org/wiki/Unit_circle\">unit circle</a> may help making it more clear why this works)</li>\n<li>the next hexagon has <code>cx2 = cx1 + 1.5*radius</code>, which is pretty easy to see. <code>cy2</code> is the same as the first hexagon’s lower corners’ <code>y</code>.</li>\n<li>to place the texts, add some extra distance to the upper/lower corners, and center text at <code>cx</code>.</li>\n</ul>\n<p>I think this <em>should</em> get you going. Feel free to ask follow-up questions, and when you’re done please post your result so that others can easily reuse it :)</p>",
      "raw": "Are you aware of the [`polygon`](https://typst.app/docs/reference/visualize/polygon/) function and [CeTZ package](https://typst.app/universe/package/cetz/)'s `cetz.draw.line()`? It should be relatively easy to use either to draw this (CeTZ is probably a bit easier), using a bit of trigonometry. For this, you'll also want to use the [`calc.sin()` and `calc.cos()`](https://typst.app/docs/reference/foundations/calc) functions to determine coordinates.\n\nBasically:\n- choose the coordinates for where to have the first hexagon's center (`cx`, `cy`), and a \"radius\"\n- the six corners are each shifted by 60°, and you get them by `x = cx + cos(angle)*radius` and `y = cy + sin(angle)*radius` (the Wikipedia article on the [unit circle](https://en.wikipedia.org/wiki/Unit_circle) may help making it more clear why this works)\n- the next hexagon has `cx2 = cx1 + 1.5*radius`, which is pretty easy to see. `cy2` is the same as the first hexagon's lower corners' `y`.\n- to place the texts, add some extra distance to the upper/lower corners, and center text at `cx`.\n\nI think this _should_ get you going. Feel free to ask follow-up questions, and when you're done please post your result so that others can easily reuse it :)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 58,
      "score": 16.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 2717,
      "post_number": 3,
      "username": "Nichlas_Hummelsberge",
      "name": "Nichlas Hummelsberger",
      "created_at": "2024-09-27T11:35:44.030Z",
      "updated_at": "2024-09-27T11:35:44.030Z",
      "cooked": "<p>Thank you <a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a>, I was not aware. I will try your suggestion, and return with the result.</p>",
      "raw": "Thank you @SillyFreak, I was not aware. I will try your suggestion, and return with the result.",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 57,
      "score": 56.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 475
    },
    {
      "id": 2746,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-27T18:18:10.918Z",
      "updated_at": "2024-09-27T20:30:07.007Z",
      "cooked": "<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.2.2\"\n\n#set page(height: auto, width: auto, margin: 0pt)\n\n#let background-color = gray\n#let fill-color = white\n#let stroke-color = black\n#let labels = (\"STR\", \"DEX\", \"END\", \"INT\", \"EDU\", \"SOC\")\n// #let labels = (\"STR\", \"DEX\", \"END\") // This also works!\n#let label-formatter(label) = text(font: \"Liberation Sans\", emph(strong(label)))\n\n#let d = 1.8cm // The diameter of the circumcircle of the hexagon.\n#let r = d / 2 // The radius of the circumcircle of the hexagon.\n\n// The height of one of 6 triangles inside hexagon, i.e., half-height of hexagon.\n#let h = r * calc.sqrt(3) / 2\n\n//   _____\n//  /|    \\\n// / |     \\\n//|\\ |     /\n//| \\|____/\n//|  |\n//|←→|\n// Small height (of a small triangle inside the hexagon).\n#let hh = calc.sqrt(r.cm() * r.cm() - h.cm() * h.cm()) * 1cm\n\n#let hexagon-shape = polygon.regular(\n  vertices: 6,\n  size: d,\n  fill: fill-color,\n  stroke: stroke-color,\n)\n\n#let hexagon(rel-pos, name, label-pos, label) = {\n  import cetz.draw: *\n  let rel-to = if name == 1 { () } else { str(name - 1) }\n  let position = (rel: rel-pos, to: rel-to)\n  content(position, name: str(name), hexagon-shape)\n  let text-offset = 0.2\n  let text-offset = text-offset * if label-pos == top { 1 } else { -1 }\n  let side = if label-pos == top { \"north\" } else { \"south\" }\n  content(\n    (rel: (0, text-offset), to: str(name) + \".\" + side),\n    label-formatter(label),\n  )\n}\n\n#let hexagon-right-top(name, label) = {\n  hexagon((hh + r, h), name, top, label)\n}\n\n#let hexagon-right-bottom(name, label) = {\n  hexagon((hh + r, -h), name, bottom, label)\n}\n\n#let img = cetz.canvas(background: background-color, {\n  import cetz.draw: *\n  let last = labels.len()\n  // Draw each hexagon and its label.\n  for (i, label) in labels.enumerate() {\n    if calc.odd(i + 1) {\n      hexagon-right-top(i + 1, label)\n    } else {\n      hexagon-right-bottom(i + 1, label)\n    }\n  }\n  // Draw background horizontal stripe.\n  on-layer(-1, {\n    let extend = 1\n    line(\n      (rel: (-extend, 0), to: \"1.west\"),\n      if calc.even(labels.len()) {\n        (rel: (extend, 0), to: str(last) + \".north-east\")\n      } else { () },\n      (rel: (extend, 0), to: str(last) + \".east\"),\n      if calc.odd(labels.len()) {\n        (rel: (extend, 0), to: str(last) + \".south-east\")\n      } else { () },\n      (rel: (-extend, 0), to: \"1.south-west\"),\n      close: true,\n      fill: fill-color,\n      stroke: fill-color,\n    )\n  })\n})\n\n// Add vertical padding.\n#let img = block(inset: (y: 2mm), fill: background-color, img)\n\n#img\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/8ad6469d5cdce25d8053a86f5fd23fdcc3f4c375.png\" alt=\"out\" data-base62-sha1=\"jOcYr5wkVXqQj13OmhH2SXLw1yB\" width=\"598\" height=\"193\"></p>\n<p>I tried to optimize the code, but I have very little overall cetz experience. Maybe <a class=\"mention\" href=\"/u/jwolf\">@jwolf</a> or someone else more experienced can get a cleaner/shorter solution, but <em>I think</em> the algorithm more or less will be the same.</p>",
      "raw": "```typ\n#import \"@preview/cetz:0.2.2\"\n\n#set page(height: auto, width: auto, margin: 0pt)\n\n#let background-color = gray\n#let fill-color = white\n#let stroke-color = black\n#let labels = (\"STR\", \"DEX\", \"END\", \"INT\", \"EDU\", \"SOC\")\n// #let labels = (\"STR\", \"DEX\", \"END\") // This also works!\n#let label-formatter(label) = text(font: \"Liberation Sans\", emph(strong(label)))\n\n#let d = 1.8cm // The diameter of the circumcircle of the hexagon.\n#let r = d / 2 // The radius of the circumcircle of the hexagon.\n\n// The height of one of 6 triangles inside hexagon, i.e., half-height of hexagon.\n#let h = r * calc.sqrt(3) / 2\n\n//   _____\n//  /|    \\\n// / |     \\\n//|\\ |     /\n//| \\|____/\n//|  |\n//|←→|\n// Small height (of a small triangle inside the hexagon).\n#let hh = calc.sqrt(r.cm() * r.cm() - h.cm() * h.cm()) * 1cm\n\n#let hexagon-shape = polygon.regular(\n  vertices: 6,\n  size: d,\n  fill: fill-color,\n  stroke: stroke-color,\n)\n\n#let hexagon(rel-pos, name, label-pos, label) = {\n  import cetz.draw: *\n  let rel-to = if name == 1 { () } else { str(name - 1) }\n  let position = (rel: rel-pos, to: rel-to)\n  content(position, name: str(name), hexagon-shape)\n  let text-offset = 0.2\n  let text-offset = text-offset * if label-pos == top { 1 } else { -1 }\n  let side = if label-pos == top { \"north\" } else { \"south\" }\n  content(\n    (rel: (0, text-offset), to: str(name) + \".\" + side),\n    label-formatter(label),\n  )\n}\n\n#let hexagon-right-top(name, label) = {\n  hexagon((hh + r, h), name, top, label)\n}\n\n#let hexagon-right-bottom(name, label) = {\n  hexagon((hh + r, -h), name, bottom, label)\n}\n\n#let img = cetz.canvas(background: background-color, {\n  import cetz.draw: *\n  let last = labels.len()\n  // Draw each hexagon and its label.\n  for (i, label) in labels.enumerate() {\n    if calc.odd(i + 1) {\n      hexagon-right-top(i + 1, label)\n    } else {\n      hexagon-right-bottom(i + 1, label)\n    }\n  }\n  // Draw background horizontal stripe.\n  on-layer(-1, {\n    let extend = 1\n    line(\n      (rel: (-extend, 0), to: \"1.west\"),\n      if calc.even(labels.len()) {\n        (rel: (extend, 0), to: str(last) + \".north-east\")\n      } else { () },\n      (rel: (extend, 0), to: str(last) + \".east\"),\n      if calc.odd(labels.len()) {\n        (rel: (extend, 0), to: str(last) + \".south-east\")\n      } else { () },\n      (rel: (-extend, 0), to: \"1.south-west\"),\n      close: true,\n      fill: fill-color,\n      stroke: fill-color,\n    )\n  })\n})\n\n// Add vertical padding.\n#let img = block(inset: (y: 2mm), fill: background-color, img)\n\n#img\n```\n\n![out|598x193](upload://jOcYr5wkVXqQj13OmhH2SXLw1yB.png)\n\nI tried to optimize the code, but I have very little overall cetz experience. Maybe @jwolf or someone else more experienced can get a cleaner/shorter solution, but _I think_ the algorithm more or less will be the same.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 49,
      "score": 14.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 2751,
      "post_number": 5,
      "username": "Nichlas_Hummelsberge",
      "name": "Nichlas Hummelsberger",
      "created_at": "2024-09-27T19:38:00.213Z",
      "updated_at": "2024-09-27T20:21:17.302Z",
      "cooked": "<p>Thanks a lot for contributing <a class=\"mention\" href=\"/u/andrew\">@Andrew</a> your solution seems slightly simpler than the one I came up with <img src=\"https://forum.typst.app/images/emoji/apple/smiley.png?v=12\" title=\":smiley:\" class=\"emoji\" alt=\":smiley:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>But now that I have spent all that time I’m going to post my solution anyways.</p>\n<p>First I tried the solution with sin() and cos() that <a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a> posted, but I think my math was way off because I never ended up with a real hexagon. But instead someone had posted the vertices on a webpage: (1, 0), (1/2, sqrt3 / 2), (-1/2, sqrt3 / 2), (-1, 0), (-1/2, -sqrt3 / 2), (1/2, -sqrt3 / 2)</p>\n<p>So with this I succeeded.</p>\n<h1><a name=\"p-2751-progress-1\" class=\"anchor\" href=\"#p-2751-progress-1\"></a>Progress</h1>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/b77608a42833f6ce48777337f38f140f8a540245.png\" data-download-href=\"https://forum.typst.app/uploads/default/b77608a42833f6ce48777337f38f140f8a540245\" title=\"Screenshot_20240927_212441\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/b77608a42833f6ce48777337f38f140f8a540245_2_690x334.png\" alt=\"Screenshot_20240927_212441\" data-base62-sha1=\"qaYgjUNHx19llPLclSlpAxxVQAl\" width=\"690\" height=\"334\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/b77608a42833f6ce48777337f38f140f8a540245_2_690x334.png, https://forum.typst.app/uploads/default/original/1X/b77608a42833f6ce48777337f38f140f8a540245.png 1.5x, https://forum.typst.app/uploads/default/original/1X/b77608a42833f6ce48777337f38f140f8a540245.png 2x\" data-dominant-color=\"ECEBED\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">Screenshot_20240927_212441</span><span class=\"informations\">910×441 55 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/826a3faf25eec5407d20290f8762692cde95dcb9.png\" data-download-href=\"https://forum.typst.app/uploads/default/826a3faf25eec5407d20290f8762692cde95dcb9\" title=\"Screenshot_20240927_212526\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/826a3faf25eec5407d20290f8762692cde95dcb9_2_690x334.png\" alt=\"Screenshot_20240927_212526\" data-base62-sha1=\"iBHHTTKwiO6woOObylRKWCw4urn\" width=\"690\" height=\"334\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/826a3faf25eec5407d20290f8762692cde95dcb9_2_690x334.png, https://forum.typst.app/uploads/default/original/1X/826a3faf25eec5407d20290f8762692cde95dcb9.png 1.5x, https://forum.typst.app/uploads/default/original/1X/826a3faf25eec5407d20290f8762692cde95dcb9.png 2x\" data-dominant-color=\"E8E8EA\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">Screenshot_20240927_212526</span><span class=\"informations\">910×441 64.3 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div><br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/857b5091ce1d925cae88febcf3b210201d5f0386.png\" data-download-href=\"https://forum.typst.app/uploads/default/857b5091ce1d925cae88febcf3b210201d5f0386\" title=\"Screenshot_20240927_212546\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/857b5091ce1d925cae88febcf3b210201d5f0386_2_690x334.png\" alt=\"Screenshot_20240927_212546\" data-base62-sha1=\"j2PHEKsqa3PiHMZAYmi6aw30rie\" width=\"690\" height=\"334\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/857b5091ce1d925cae88febcf3b210201d5f0386_2_690x334.png, https://forum.typst.app/uploads/default/original/1X/857b5091ce1d925cae88febcf3b210201d5f0386.png 1.5x, https://forum.typst.app/uploads/default/original/1X/857b5091ce1d925cae88febcf3b210201d5f0386.png 2x\" data-dominant-color=\"EAEAEA\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">Screenshot_20240927_212546</span><span class=\"informations\">910×441 49.5 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<h1><a name=\"p-2751-and-here-is-my-code-2\" class=\"anchor\" href=\"#p-2751-and-here-is-my-code-2\"></a>And here is my code</h1>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"@preview/cetz:0.2.2\"\n\n#set page(\n  paper: \"a3\",\n  flipped: true,\n  \n)\n\n#set text(\n  font: \"IBM Plex Sans\",\n)\n\n#cetz.canvas(\n  length: 20pt,\n  {\n    import cetz.draw: *\n    // grid((-1.5,-3), (9,2), stroke: luma(240), step: .25)\n    // grid((-1.5, -3), (9, 2), stroke: luma(160), step: 5)\n    let centery = 0\n    let centerx = 0\n    let angle = 60\n    let radius = 0.1\n    // Vertices at \n    //             (1, 0)\n    //   (1/2, sqrt3 / 2)\n    //  (-1/2, sqrt3 / 2)\n    //            (-1, 0)\n    // (-1/2, -sqrt3 / 2)\n    //  (1/2, -sqrt3 / 2)\n    let hex(x, y, property, level) = {\n      let ax = 1\n      let ay = 0\n      let a = (x + ax, y + ay)\n      \n      let bx = 1 / 2\n      let by = calc.sqrt(3) / 2\n      let b = (x + bx, y + by)\n      let cx = -(1 / 2)\n      let cy = by\n      let c = (x + cx, y + cy)\n      let dx = -1\n      let dy = 0\n      let d = (x + dx, y + dy)\n      let ex = -(1 / 2)\n      let ey = -by\n      let e = (x + ex, y + ey)\n      let fx = 1 / 2\n      let fy = -by\n      let f = (x + fx, y + fy)\n        // circle(a, radius: radius, stroke: 1pt + blue)\n        // circle(b, radius: radius, stroke: blue)\n        // circle(c, radius: radius, stroke: blue)\n        // circle(d, radius: radius, stroke: purple)\n        // circle(e, radius: radius, stroke: purple)\n        // circle(f, radius: radius, stroke: purple)\n        line(a, b, c, d, e, f, stroke: 1.5pt, close: true)\n        content((x + 0,y + 0), [#level])\n        content((x + 0,y + 1.2), [#text(style: \"italic\", weight: \"bold\", [#property])])\n  }\n\n  hex(0,0, \"STR\", \"10\")\n  hex(1.5,-calc.sqrt(3)/2, \"DEX\", \"10\")\n  hex(3,0, \"END\", \"10\")\n  hex(4.5,-calc.sqrt(3)/2, \"INT\", \"10\")\n  hex(6.0,0, \"EDU\", \"10\")\n  hex(7.5,-calc.sqrt(3)/2, \"SOC\", \"10\")\n})\n</code></pre>",
      "raw": "Thanks a lot for contributing @Andrew your solution seems slightly simpler than the one I came up with :smiley:\n\nBut now that I have spent all that time I'm going to post my solution anyways.\n\nFirst I tried the solution with sin() and cos() that @SillyFreak posted, but I think my math was way off because I never ended up with a real hexagon. But instead someone had posted the vertices on a webpage: (1, 0), (1/2, sqrt3 / 2), (-1/2, sqrt3 / 2), (-1, 0), (-1/2, -sqrt3 / 2), (1/2, -sqrt3 / 2)\n\nSo with this I succeeded.\n\n# Progress\n![Screenshot_20240927_212441|690x334](upload://qaYgjUNHx19llPLclSlpAxxVQAl.png)\n\n![Screenshot_20240927_212526|690x334](upload://iBHHTTKwiO6woOObylRKWCw4urn.png)\n![Screenshot_20240927_212546|690x334](upload://j2PHEKsqa3PiHMZAYmi6aw30rie.png)\n\n# And here is my code\n\n```typst\n#import \"@preview/cetz:0.2.2\"\n\n#set page(\n  paper: \"a3\",\n  flipped: true,\n  \n)\n\n#set text(\n  font: \"IBM Plex Sans\",\n)\n\n#cetz.canvas(\n  length: 20pt,\n  {\n    import cetz.draw: *\n    // grid((-1.5,-3), (9,2), stroke: luma(240), step: .25)\n    // grid((-1.5, -3), (9, 2), stroke: luma(160), step: 5)\n    let centery = 0\n    let centerx = 0\n    let angle = 60\n    let radius = 0.1\n    // Vertices at \n    //             (1, 0)\n    //   (1/2, sqrt3 / 2)\n    //  (-1/2, sqrt3 / 2)\n    //            (-1, 0)\n    // (-1/2, -sqrt3 / 2)\n    //  (1/2, -sqrt3 / 2)\n    let hex(x, y, property, level) = {\n      let ax = 1\n      let ay = 0\n      let a = (x + ax, y + ay)\n      \n      let bx = 1 / 2\n      let by = calc.sqrt(3) / 2\n      let b = (x + bx, y + by)\n      let cx = -(1 / 2)\n      let cy = by\n      let c = (x + cx, y + cy)\n      let dx = -1\n      let dy = 0\n      let d = (x + dx, y + dy)\n      let ex = -(1 / 2)\n      let ey = -by\n      let e = (x + ex, y + ey)\n      let fx = 1 / 2\n      let fy = -by\n      let f = (x + fx, y + fy)\n        // circle(a, radius: radius, stroke: 1pt + blue)\n        // circle(b, radius: radius, stroke: blue)\n        // circle(c, radius: radius, stroke: blue)\n        // circle(d, radius: radius, stroke: purple)\n        // circle(e, radius: radius, stroke: purple)\n        // circle(f, radius: radius, stroke: purple)\n        line(a, b, c, d, e, f, stroke: 1.5pt, close: true)\n        content((x + 0,y + 0), [#level])\n        content((x + 0,y + 1.2), [#text(style: \"italic\", weight: \"bold\", [#property])])\n  }\n\n  hex(0,0, \"STR\", \"10\")\n  hex(1.5,-calc.sqrt(3)/2, \"DEX\", \"10\")\n  hex(3,0, \"END\", \"10\")\n  hex(4.5,-calc.sqrt(3)/2, \"INT\", \"10\")\n  hex(6.0,0, \"EDU\", \"10\")\n  hex(7.5,-calc.sqrt(3)/2, \"SOC\", \"10\")\n})\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 47,
      "score": 64.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 475
    },
    {
      "id": 2757,
      "post_number": 6,
      "username": "Andrew",
      "name": "",
      "created_at": "2024-09-27T20:51:37.468Z",
      "updated_at": "2024-09-27T20:53:20.205Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Nichlas_Hummelsberge\" data-post=\"5\" data-topic=\"727\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/n/BF4705/48.png\" class=\"avatar\"> Nichlas_Hummelsberge:</div>\n<blockquote>\n<p>Thanks a lot for contributing <a class=\"mention\" href=\"/u/andrew\">@Andrew</a> your solution seems slightly simpler than the one I came up with</p>\n</blockquote>\n</aside>\n<p>You’re welcome. I can make my solution even simpler if you don’t need documentation, readability, and flexibility (but I don’t recommend it because it lacks all of that):</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(height: auto, width: auto, margin: 0pt)\n\n#import \"@preview/cetz:0.2.2\"\n\n#let d = 1.8cm\n\n#let hexagon(rel-pos, name, label) = {\n  cetz.draw.content(\n    (rel: rel-pos, to: if name == 1 { () } else { str(name - 1) }),\n    name: str(name),\n    polygon.regular(vertices: 6, size: d, fill: white, stroke: black),\n  )\n  let text-offset = 0.2 * if calc.odd(name) { 1 } else { -1 }\n  let side = if calc.odd(name) { \"north\" } else { \"south\" }\n  cetz.draw.content(\n    (rel: (0, text-offset), to: str(name) + \".\" + side),\n    text(font: \"Liberation Sans\", emph(strong(label))),\n  )\n}\n\n#block(inset: (y: 2mm), fill: gray, cetz.canvas(background: gray, {\n  let r = d / 2\n  let h = r * calc.sqrt(3) / 2\n  let hh = calc.sqrt(r.cm() * r.cm() - h.cm() * h.cm()) * 1cm\n  hexagon((hh + r, h), 1)[STR]\n  hexagon((hh + r, -h), 2)[DEX]\n  hexagon((hh + r, h), 3)[END]\n  hexagon((hh + r, -h), 4)[INT]\n  hexagon((hh + r, h), 5)[EDU]\n  hexagon((hh + r, -h), 6)[SOC]\n  cetz.draw.on-layer(-1, {\n    cetz.draw.rect(\n      (rel: (-1, 0), to: \"1.west\"),\n      (rel: (1, 0), to: \"6.east\"),\n      fill: white,\n      stroke: white,\n    )\n  })\n}))\n</code></pre>\n<p>I also saw some optimizations like not needing the <code>label-pos</code> parameter and substituting <code>line()</code> with <code>rect()</code>.</p>",
      "raw": "[quote=\"Nichlas_Hummelsberge, post:5, topic:727\"]\nThanks a lot for contributing @Andrew your solution seems slightly simpler than the one I came up with\n[/quote]\n\nYou're welcome. I can make my solution even simpler if you don't need documentation, readability, and flexibility (but I don't recommend it because it lacks all of that):\n\n```typ\n#set page(height: auto, width: auto, margin: 0pt)\n\n#import \"@preview/cetz:0.2.2\"\n\n#let d = 1.8cm\n\n#let hexagon(rel-pos, name, label) = {\n  cetz.draw.content(\n    (rel: rel-pos, to: if name == 1 { () } else { str(name - 1) }),\n    name: str(name),\n    polygon.regular(vertices: 6, size: d, fill: white, stroke: black),\n  )\n  let text-offset = 0.2 * if calc.odd(name) { 1 } else { -1 }\n  let side = if calc.odd(name) { \"north\" } else { \"south\" }\n  cetz.draw.content(\n    (rel: (0, text-offset), to: str(name) + \".\" + side),\n    text(font: \"Liberation Sans\", emph(strong(label))),\n  )\n}\n\n#block(inset: (y: 2mm), fill: gray, cetz.canvas(background: gray, {\n  let r = d / 2\n  let h = r * calc.sqrt(3) / 2\n  let hh = calc.sqrt(r.cm() * r.cm() - h.cm() * h.cm()) * 1cm\n  hexagon((hh + r, h), 1)[STR]\n  hexagon((hh + r, -h), 2)[DEX]\n  hexagon((hh + r, h), 3)[END]\n  hexagon((hh + r, -h), 4)[INT]\n  hexagon((hh + r, h), 5)[EDU]\n  hexagon((hh + r, -h), 6)[SOC]\n  cetz.draw.on-layer(-1, {\n    cetz.draw.rect(\n      (rel: (-1, 0), to: \"1.west\"),\n      (rel: (1, 0), to: \"6.east\"),\n      fill: white,\n      stroke: white,\n    )\n  })\n}))\n```\n\nI also saw some optimizations like not needing the `label-pos` parameter and substituting `line()` with `rect()`.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 39,
      "score": 12.8,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:57:55.390712"
}