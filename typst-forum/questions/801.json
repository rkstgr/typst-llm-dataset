{
  "topic_metadata": {
    "id": 801,
    "title": "How to make backlinks?",
    "slug": "how-to-make-backlinks",
    "posts_count": 6,
    "created_at": "2024-09-29T22:31:59.870Z",
    "last_posted_at": "2024-10-01T06:02:27.212Z",
    "views": 183,
    "like_count": 3,
    "reply_count": 4,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 5,
    "accepted_answer_username": "gabe",
    "tags": [
      "scripting"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 525
  },
  "posts": [
    {
      "id": 2972,
      "post_number": 1,
      "username": "gabe",
      "name": "",
      "created_at": "2024-09-29T22:32:00.008Z",
      "updated_at": "2024-09-29T22:32:00.008Z",
      "cooked": "<p>I’m trying to make backlinks. Ideally I would just query every link in the document and filter based on the target, but links are not locatable yet. So, the approach I’ve taken is to create a label on every link. To ensure that multiple labels are not created with the same name, I increment a counter which is used in their naming.</p>\n<p>This is my attempt.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let prefix = \"test:\"\n\n#let generate(it) = {\n  if type(it.dest) != label {\n    return it\n  }\n\n  let target = str(it.dest)\n  let backlink_count = counter(prefix + target)\n  context {\n    let here = label(\n      prefix + target + \":\" + str(backlink_count.get().first())\n    )\n    return [\n      #it\n      #here\n\n      #backlink_count.step()\n    ]\n  }\n}\n\n#let get(lab) = {\n  let target = str(lab)\n  let backlink_count = counter(prefix + target).final().first()\n\n  return range(backlink_count).map(\n    i =&gt; label(prefix + target + \":\" + str(i))\n  )\n}\n\n#show link: generate\n\nTest &lt;label1&gt;\n\n#link(&lt;label1&gt;)[Go to label1]\n\n#context link(get(&lt;label1&gt;).first())[Backlink] // This errors\n</code></pre>\n<p>This errors with <code>label `&lt;test:label1:0&gt;` does not exist in the document</code>. Why? Can I fix this?</p>",
      "raw": "I'm trying to make backlinks. Ideally I would just query every link in the document and filter based on the target, but links are not locatable yet. So, the approach I've taken is to create a label on every link. To ensure that multiple labels are not created with the same name, I increment a counter which is used in their naming. \n\nThis is my attempt.\n\n```typ\n#let prefix = \"test:\"\n\n#let generate(it) = {\n  if type(it.dest) != label {\n    return it\n  }\n\n  let target = str(it.dest)\n  let backlink_count = counter(prefix + target)\n  context {\n    let here = label(\n      prefix + target + \":\" + str(backlink_count.get().first())\n    )\n    return [\n      #it\n      #here\n\n      #backlink_count.step()\n    ]\n  }\n}\n\n#let get(lab) = {\n  let target = str(lab)\n  let backlink_count = counter(prefix + target).final().first()\n\n  return range(backlink_count).map(\n    i => label(prefix + target + \":\" + str(i))\n  )\n}\n\n#show link: generate\n\nTest <label1>\n\n#link(<label1>)[Go to label1]\n\n#context link(get(<label1>).first())[Backlink] // This errors\n```\n\nThis errors with ```label `<test:label1:0>` does not exist in the document```. Why? Can I fix this?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 39,
      "score": 437.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 433
    },
    {
      "id": 3020,
      "post_number": 2,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-30T07:36:50.512Z",
      "updated_at": "2024-09-30T07:36:50.512Z",
      "cooked": "<p>If you only use it to query the links, it’s fine to have multiple elements with the same label. So using just one label would probably suffice here.</p>",
      "raw": "If you only use it to query the links, it's fine to have multiple elements with the same label. So using just one label would probably suffice here.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 38,
      "score": 32.6,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 3029,
      "post_number": 3,
      "username": "gabe",
      "name": "",
      "created_at": "2024-09-30T15:38:52.109Z",
      "updated_at": "2024-09-30T15:38:52.109Z",
      "cooked": "<p>That’s great to know. Assuming the query returns the elements, I could then get their locations and link to those.</p>\n<p>For some reason, though, the query here returns an empty array.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let prefix = \"test:\"\n\n#let generate(it) = {\n  if type(it.dest) != label {\n    return it\n  }\n\n  return [\n    #it\n    #label(prefix + str(it.dest))\n  ]\n}\n\n#let get(lab) = {\n  query(label(prefix + str(lab)))\n}\n\n#show link: generate\n\nTarget &lt;link0&gt;\n\n#link(&lt;link0&gt;)[Backlink]\n\n#context get(&lt;link0&gt;)\n</code></pre>",
      "raw": "That's great to know. Assuming the query returns the elements, I could then get their locations and link to those.\n\nFor some reason, though, the query here returns an empty array.\n\n```typ\n#let prefix = \"test:\"\n\n#let generate(it) = {\n  if type(it.dest) != label {\n    return it\n  }\n\n  return [\n    #it\n    #label(prefix + str(it.dest))\n  ]\n}\n\n#let get(lab) = {\n  query(label(prefix + str(lab)))\n}\n\n#show link: generate\n\nTarget <link0>\n\n#link(<link0>)[Backlink]\n\n#context get(<link0>)\n```",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 28,
      "score": 10.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 433
    },
    {
      "id": 3031,
      "post_number": 4,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-09-30T16:24:45.559Z",
      "updated_at": "2024-09-30T16:24:45.559Z",
      "cooked": "<p>You’ve queried for <code>&lt;test:link0&gt;</code> here instead of <code>link0</code>, which causes the result to be empty.</p>\n<p>Aside from that, attaching a label to <code>it</code> in a show rule sadly doesn’t work. The element is already “finalized” so to speak before the show rule runs. If you need to do it in a show rule, you can add the label to some <a href=\"https://typst.app/docs/reference/introspection/metadata/\"><code>metadata</code></a> that you generate in the show rule instead.</p>",
      "raw": "You've queried for `<test:link0>` here instead of `link0`, which causes the result to be empty. \n\nAside from that, attaching a label to `it` in a show rule sadly doesn't work. The element is already \"finalized\" so to speak before the show rule runs. If you need to do it in a show rule, you can add the label to some [`metadata`](https://typst.app/docs/reference/introspection/metadata/) that you generate in the show rule instead.",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 23,
      "score": 24.6,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    },
    {
      "id": 3043,
      "post_number": 5,
      "username": "gabe",
      "name": "",
      "created_at": "2024-09-30T18:52:45.600Z",
      "updated_at": "2024-09-30T18:52:45.600Z",
      "cooked": "<p>Querying for <code>&lt;test:link0&gt;</code> is intended since I want to query the links, not the targets.</p>\n<p>Adding a metadata to the show rule produces results! The query works as intended and allows me to get the location of the metadata.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let prefix = \"test:\"\n\n#let generate(it) = {\n  if type(it.dest) != label {\n    return it\n  }\n\n  let target = str(it.dest)\n  return [\n    #it\n    #metadata(target)\n    #label(prefix + target)\n  ]\n}\n\n#let get(target) = {\n  query(label(prefix + str(target)))\n}\n\n#show link: generate\n\nTarget &lt;link0&gt;\n\n#context get(&lt;link0&gt;).map(x =&gt; link(x.location())[backlink]).first()\n\n#pagebreak()\n\n#link(&lt;link0&gt;)[Link]\n</code></pre>\n<p>You say that the link element is already “finalized”, so adding a label doesn’t work. Does that mean that labels aren’t content elements? Are they just applied as a property to whatever comes before it?</p>",
      "raw": "Querying for `<test:link0>` is intended since I want to query the links, not the targets.\n\nAdding a metadata to the show rule produces results! The query works as intended and allows me to get the location of the metadata.\n\n```typ\n#let prefix = \"test:\"\n\n#let generate(it) = {\n  if type(it.dest) != label {\n    return it\n  }\n\n  let target = str(it.dest)\n  return [\n    #it\n    #metadata(target)\n    #label(prefix + target)\n  ]\n}\n\n#let get(target) = {\n  query(label(prefix + str(target)))\n}\n\n#show link: generate\n\nTarget <link0>\n\n#context get(<link0>).map(x => link(x.location())[backlink]).first()\n\n#pagebreak()\n\n#link(<link0>)[Link]\n```\n\nYou say that the link element is already \"finalized\", so adding a label doesn't work. Does that mean that labels aren't content elements? Are they just applied as a property to whatever comes before it?",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 29.6,
      "accepted_answer": true,
      "trust_level": 1,
      "user_id": 433
    },
    {
      "id": 3054,
      "post_number": 6,
      "username": "laurmaedje",
      "name": "Laurenz Mädje",
      "created_at": "2024-10-01T06:02:27.212Z",
      "updated_at": "2024-10-01T06:02:27.212Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"gabe\" data-post=\"5\" data-topic=\"801\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/gabe/48/620_2.png\" class=\"avatar\"> gabe:</div>\n<blockquote>\n<p>You say that the link element is already “finalized”, so adding a label doesn’t work. Does that mean that labels aren’t content elements? Are they just applied as a property to whatever comes before it?</p>\n</blockquote>\n</aside>\n<p>That’s exactly right.</p>",
      "raw": "[quote=\"gabe, post:5, topic:801\"]\nYou say that the link element is already “finalized”, so adding a label doesn’t work. Does that mean that labels aren’t content elements? Are they just applied as a property to whatever comes before it?\n[/quote]\n\nThat's exactly right.",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 20,
      "score": 19.0,
      "accepted_answer": false,
      "trust_level": 4,
      "user_id": 2
    }
  ],
  "scraped_at": "2025-06-10T09:57:47.714419"
}