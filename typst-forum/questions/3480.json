{
  "topic_metadata": {
    "id": 3480,
    "title": "How can I extend Linguify for language-dependent images? - Converting linguify context to string",
    "slug": "how-can-i-extend-linguify-for-language-dependent-images-converting-linguify-context-to-string",
    "posts_count": 7,
    "created_at": "2025-04-01T12:02:35.478Z",
    "last_posted_at": "2025-04-05T12:57:52.945Z",
    "views": 92,
    "like_count": 6,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "TobiOneCenobi",
    "tags": [
      "scripting",
      "packages"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1426
  },
  "posts": [
    {
      "id": 10496,
      "post_number": 1,
      "username": "TobiOneCenobi",
      "name": "",
      "created_at": "2025-04-01T12:02:35.692Z",
      "updated_at": "2025-04-05T12:56:53.802Z",
      "cooked": "<p>Hi everyone,</p>\n<p>I’m currently working on extending the functionality of the <code>linguify</code> package to also handle language-specific images. My goal is to achieve this without explicit conditional logic (like <code>if/else</code> statements), so that users only need to specify the desired language, and the correct image will be displayed automatically.</p>\n<p>For those unfamiliar with it, <code>linguify</code> is a package that helps with internationalization by managing language-specific content defined in TOML files.</p>\n<p>I’ve successfully configured my TOML file to include paths to different language versions of the same image:</p>\n<pre data-code-wrap=\"toml\"><code class=\"lang-toml\">[conf]\ndefault-lang = \"en\"\n\n[lang.en]\ncover_title = \"Pancake Machine\"\ndate = \"Date\"\nrevision = \"Revision\"\nflag_logo = \"Cover/Pictures/Flag_of_the_United_Kingdom_(1-2).webp\"\n\n[lang.de]\ncover_title = \"Pfannkuchenmaschine\"\ndate = \"Datum\"\nrevision = \"Revision\"\nflag_logo = \"Cover/Pictures/Flag_of_Germany.webp\"\n\n[lang.fr]\ncover_title = \"machine à crêpes\"\ndate = \"Date\"\nrevision = \"Révision\"\nflag_logo = \"Cover/Pictures/Flag_of_France_(2020â__present).webp\"\n</code></pre>\n<p>My idea was to use the <code>linguify</code> function to retrieve the correct image path based on the currently selected language. I envisioned something like this in my template/code:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#image(linguify(\"flag_logo\"))\n</code></pre>\n<p>However, I’ve run into a problem. It seems that the <code>#image()</code> function expects a string representing the image path, while the <code>linguify()</code> function, when used in this context, returns a context object (likely containing more than just the string value).</p>\n<p>I’m struggling to figure out how to properly extract the string value (the image path) from the context object returned by <code>linguify()</code> so that it can be used by the <code>#image()</code> function.</p>\n<p>Could anyone provide some guidance on how to convert the context returned by <code>linguify(\"flag_logo\")</code> into a simple string containing the image path? Any suggestions or alternative approaches to achieve language-dependent images without explicit logic would be greatly appreciated!</p>",
      "raw": "Hi everyone,\n\nI'm currently working on extending the functionality of the `linguify` package to also handle language-specific images. My goal is to achieve this without explicit conditional logic (like `if/else` statements), so that users only need to specify the desired language, and the correct image will be displayed automatically.\n\nFor those unfamiliar with it, `linguify` is a package that helps with internationalization by managing language-specific content defined in TOML files.\n\nI've successfully configured my TOML file to include paths to different language versions of the same image:\n\n```toml\n[conf]\ndefault-lang = \"en\"\n\n[lang.en]\ncover_title = \"Pancake Machine\"\ndate = \"Date\"\nrevision = \"Revision\"\nflag_logo = \"Cover/Pictures/Flag_of_the_United_Kingdom_(1-2).webp\"\n\n[lang.de]\ncover_title = \"Pfannkuchenmaschine\"\ndate = \"Datum\"\nrevision = \"Revision\"\nflag_logo = \"Cover/Pictures/Flag_of_Germany.webp\"\n\n[lang.fr]\ncover_title = \"machine à crêpes\"\ndate = \"Date\"\nrevision = \"Révision\"\nflag_logo = \"Cover/Pictures/Flag_of_France_(2020â__present).webp\"\n```\n\nMy idea was to use the `linguify` function to retrieve the correct image path based on the currently selected language. I envisioned something like this in my template/code:\n\n```typ\n#image(linguify(\"flag_logo\"))\n```\n\nHowever, I've run into a problem. It seems that the `#image()` function expects a string representing the image path, while the `linguify()` function, when used in this context, returns a context object (likely containing more than just the string value).\n\nI'm struggling to figure out how to properly extract the string value (the image path) from the context object returned by `linguify()` so that it can be used by the `#image()` function.\n\nCould anyone provide some guidance on how to convert the context returned by `linguify(\"flag_logo\")` into a simple string containing the image path? Any suggestions or alternative approaches to achieve language-dependent images without explicit logic would be greatly appreciated!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 34,
      "score": 61.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1405
    },
    {
      "id": 10499,
      "post_number": 2,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-04-01T12:14:15.639Z",
      "updated_at": "2025-04-01T12:14:15.639Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/tobionecenobi\">@TobiOneCenobi</a>, welcome and thank you for your question! I have changed your post’s title to bring it in line with the <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\">question guidelines</a> and thus make it easier to understand from the title:</p>\n<blockquote>\n<p><strong>Good titles are questions you would ask your friend about Typst.</strong></p>\n</blockquote>\n<hr>\n<p>First of all, the basic problem you’re facing is the following:</p>\n<aside class=\"quote quote-modified\" data-post=\"2\" data-topic=\"164\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/laurmaedje/48/14_2.png\" class=\"avatar\">\n    <a href=\"https://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2\">Why is the value I receive from context always content?</a> <a class=\"badge-category__wrapper \" href=\"/c/questions/5\"><span data-category-id=\"5\" style=\"--category-badge-color: #F7C000; --category-badge-text-color: #fdfdfd;\" data-drop-close=\"true\" class=\"badge-category \" title=\"Your questions about using Typst and the web app go in this category.\"><span class=\"badge-category__name\">Questions</span></span></a>\n  </div>\n  <blockquote>\n    When working with context, you need to put everything that depends on the contextual information into the context block/expression itself. The explicit context expression is a trade-off: You get to know where in the document you are (accessible via <a href=\"https://typst.app/docs/reference/introspection/here/\">here()</a>) and which set rules are active there (accessible via things like text.lang). In return, the context value itself becomes opaque. You cannot peek into it, so everything that depends on the contextual information must happen within it. \nLet’s lo…\n  </blockquote>\n</aside>\n\n<p>Linguify can’t change that, but it can offer an option that requires <em>you</em> to provide context instead of doing that itself. I also help maintain that package, so I can give a bit of insight. The <code>linguify()</code> function is defined <a href=\"https://github.com/typst-community/linguify/blob/853be0ef1904ff9c2482c16ff52137f3124e89d0/src/linguify.typ#L154-L188\">here</a>, and the problematic code is the following:</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">  if from == auto or lang == auto {\n    // context is needed to use the default database or current language\n    context impl()\n  } else {\n    impl()\n  }\n</code></pre>\n<p>As you can see, you can work around this problem by providing the config and language explicitly, but that’s of course no fun. To support your use case (and have a github account), you could make a PR adding a parameter <code>outside-context: false</code> that, when set to <code>true</code> goes to the <code>else</code> branch. This enables you to get actual strings from the function, at the cost of having to call it as <code>context do-something(linguify(...))</code>.</p>",
      "raw": "Hi @TobiOneCenobi, welcome and thank you for your question! I have changed your post’s title to bring it in line with the [question guidelines](https://forum.typst.app/t/how-to-post-in-the-questions-category/11) and thus make it easier to understand from the title:\n\n> **Good titles are questions you would ask your friend about Typst.**\n\n---\n\nFirst of all, the basic problem you're facing is the following:\n\nhttps://forum.typst.app/t/why-is-the-value-i-receive-from-context-always-content/164/2?u=sillyfreak\n\nLinguify can't change that, but it can offer an option that requires _you_ to provide context instead of doing that itself. I also help maintain that package, so I can give a bit of insight. The `linguify()` function is defined [here](https://github.com/typst-community/linguify/blob/853be0ef1904ff9c2482c16ff52137f3124e89d0/src/linguify.typ#L154-L188), and the problematic code is the following:\n\n```typc\n  if from == auto or lang == auto {\n    // context is needed to use the default database or current language\n    context impl()\n  } else {\n    impl()\n  }\n```\n\nAs you can see, you can work around this problem by providing the config and language explicitly, but that's of course no fun. To support your use case (and have a github account), you could make a PR adding a parameter `outside-context: false` that, when set to `true` goes to the `else` branch. This enables you to get actual strings from the function, at the cost of having to call it as `context do-something(linguify(...))`.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 30,
      "score": 31.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    },
    {
      "id": 10500,
      "post_number": 3,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-04-01T12:14:56.323Z",
      "updated_at": "2025-04-01T12:14:56.323Z",
      "cooked": "<p>Context values are opaque and there’s no way to access their contents.</p>\n<p>Two options I’m thinking of</p>\n<ol>\n<li>Remove <code>context</code> inside linguify and require the user to call the function with context. Then it would be like <code>#context image(linguify(\"flag_logo\"))</code></li>\n<li>Allow an optional mapper with linguify, that you pass the result through before returning it, it could look like this:</li>\n</ol>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#linguify(\"flag_logo\", map: image.with(width: 50%))\n// just using with to show you can supply arguments in a good way\n</code></pre>",
      "raw": "Context values are opaque and there's no way to access their contents.\n\nTwo options I'm thinking of\n\n1. Remove `context` inside linguify and require the user to call the function with context. Then it would be like `#context image(linguify(\"flag_logo\"))`\n2. Allow an optional mapper with linguify, that you pass the result through before returning it, it could look like this:\n\n```typ\n#linguify(\"flag_logo\", map: image.with(width: 50%))\n// just using with to show you can supply arguments in a good way\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 26,
      "score": 20.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 10648,
      "post_number": 4,
      "username": "TobiOneCenobi",
      "name": "",
      "created_at": "2025-04-04T12:44:40.009Z",
      "updated_at": "2025-04-04T12:46:50.042Z",
      "cooked": "<p>Dear <a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a> and <a class=\"mention\" href=\"/u/bluss\">@bluss</a> ,</p>\n<p>Your suggestions about <code> #context do-something(linguify(...))</code> and <code>#context image(linguify(\"flag_logo\"))</code> were exactly what I needed to get on the right track.</p>\n<p>Building on that, I’ve created a solution by wrapping <code>linguify</code> within my own set of functions. This allows me to read the TOML file, update both my custom state database and the <code>linguify</code> database, and then call my own functions within the Typst context.</p>\n<p>Here’s the code I’ve put into <code>linguifyPicture.typ</code>:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"@preview/linguify:0.4.2\": set-database as linguify-set-database\n\n#let language-database = state(\"language-database\", none)\n\n#let set-language-database(data) = {\n  language-database.update(data)\n}\n\n#let get-current-language = () =&gt; text.lang\n\n#let load-lang(data) = {\n  linguify-set-database(data) // Set the database for the @preview/linguify package\n  set-language-database(data) // Set the database for our standalone localized-image function\n}\n\n#let get-localized-path(key, current-lang) = {\n  let lang-data = language-database.get()\n  if lang-data == none {\n    panic(\"Language database not set. Call `load-lang()` at the beginning of your document.\")\n    return none\n  }\n\n  let path = none\n  let lang-section-name = current-lang\n\n  if lang-section-name in lang-data.lang {\n    let lang-section = lang-data.lang.at(lang-section-name)\n    if key in lang-section {\n      path = lang-section.at(key)\n    }\n  }\n\n  if path == none and \"default-lang\" in lang-data.conf {\n    let default-lang = lang-data.conf.at(\"default-lang\")\n    let default-lang-section-name = \"lang.\" + default-lang\n    if default-lang-section-name in lang-data.lang {\n      let default-lang-section = lang-data.lang.at(default-lang-section-name)\n      path = default-lang-section.at(key, default: none)\n    }\n  }\n\n  path\n}\n\n#let localized-image(key, ..args) = {\n  let current-lang = get-current-language()\n  let nicePath = get-localized-path(key, current-lang)\n  if not nicePath.starts-with(\"/\") and nicePath != none {\n    nicePath = \"/\" + nicePath\n  }\n  if nicePath != \"badPath\" {\n    image(nicePath, ..args)\n  } else {\n    panic(\"Image key '\" + key + \"' not found for language '\" + current-lang + \"'.\")\n  }\n}\n</code></pre>\n<p>I am not sure the code above is bulletproof… Here’s how I’m using it in <code>main.typ</code>:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"@preview/linguify:0.4.2\": * \n#import \"Tools/linguifyPicture/linguifyPicture.typ\": load-lang, localized-image\n\n#set text(lang: \"de\")\n\n#let lang-data = toml(\"Cover/translations.toml\")\n\n#load-lang(lang-data) //updates both linguify and linguifyPicture database\n\n#context localized-image(\"flag_logo\", /*image arguments here*/)\n</code></pre>\n<p>One thing I discovered is that Typst doesn’t seem to have built-in support for <code>webp</code> images, so I had to update my TOML file to use <code>.png</code> extensions instead (e.g., <code>\"Cover/Pictures/Flag_of_Germany.webp\"</code> became <code>\"Cover/Pictures/Flag_of_Germany.png\"</code>).</p>\n<p>Thanks again for your helpful insights! This approach seems to be working for my needs.</p>",
      "raw": "Dear @SillyFreak and @bluss ,\n\nYour suggestions about ` #context do-something(linguify(...))` and `#context image(linguify(\"flag_logo\"))` were exactly what I needed to get on the right track.\n\nBuilding on that, I've created a solution by wrapping `linguify` within my own set of functions. This allows me to read the TOML file, update both my custom state database and the `linguify` database, and then call my own functions within the Typst context.\n\nHere's the code I've put into `linguifyPicture.typ`:\n\n```typst\n#import \"@preview/linguify:0.4.2\": set-database as linguify-set-database\n\n#let language-database = state(\"language-database\", none)\n\n#let set-language-database(data) = {\n  language-database.update(data)\n}\n\n#let get-current-language = () => text.lang\n\n#let load-lang(data) = {\n  linguify-set-database(data) // Set the database for the @preview/linguify package\n  set-language-database(data) // Set the database for our standalone localized-image function\n}\n\n#let get-localized-path(key, current-lang) = {\n  let lang-data = language-database.get()\n  if lang-data == none {\n    panic(\"Language database not set. Call `load-lang()` at the beginning of your document.\")\n    return none\n  }\n\n  let path = none\n  let lang-section-name = current-lang\n\n  if lang-section-name in lang-data.lang {\n    let lang-section = lang-data.lang.at(lang-section-name)\n    if key in lang-section {\n      path = lang-section.at(key)\n    }\n  }\n\n  if path == none and \"default-lang\" in lang-data.conf {\n    let default-lang = lang-data.conf.at(\"default-lang\")\n    let default-lang-section-name = \"lang.\" + default-lang\n    if default-lang-section-name in lang-data.lang {\n      let default-lang-section = lang-data.lang.at(default-lang-section-name)\n      path = default-lang-section.at(key, default: none)\n    }\n  }\n\n  path\n}\n\n#let localized-image(key, ..args) = {\n  let current-lang = get-current-language()\n  let nicePath = get-localized-path(key, current-lang)\n  if not nicePath.starts-with(\"/\") and nicePath != none {\n    nicePath = \"/\" + nicePath\n  }\n  if nicePath != \"badPath\" {\n    image(nicePath, ..args)\n  } else {\n    panic(\"Image key '\" + key + \"' not found for language '\" + current-lang + \"'.\")\n  }\n}\n```\n\nI am not sure the code above is bulletproof... Here's how I'm using it in `main.typ`:\n\n```typst\n#import \"@preview/linguify:0.4.2\": * \n#import \"Tools/linguifyPicture/linguifyPicture.typ\": load-lang, localized-image\n\n#set text(lang: \"de\")\n\n#let lang-data = toml(\"Cover/translations.toml\")\n\n#load-lang(lang-data) //updates both linguify and linguifyPicture database\n\n#context localized-image(\"flag_logo\", /*image arguments here*/)\n```\n\nOne thing I discovered is that Typst doesn't seem to have built-in support for `webp` images, so I had to update my TOML file to use `.png` extensions instead (e.g., `\"Cover/Pictures/Flag_of_Germany.webp\"` became `\"Cover/Pictures/Flag_of_Germany.png\"`).\n\nThanks again for your helpful insights! This approach seems to be working for my needs.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 22,
      "score": 74.4,
      "accepted_answer": true,
      "trust_level": 1,
      "user_id": 1405
    },
    {
      "id": 10664,
      "post_number": 5,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-04T21:59:11.687Z",
      "updated_at": "2025-04-04T21:59:11.687Z",
      "cooked": "<p>Here is a simplified version, if you want.</p>\n<details><summary>Code</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/linguify:0.4.2\": set-database as linguify-set-database\n\n#let language-database = state(\"language-database\")\n\n#let set-language-database(data) = language-database.update(data)\n#let get-current-language() = text.lang\n\n#let load-lang(data) = {\n  linguify-set-database(data) // Set the database for the @preview/linguify package\n  set-language-database(data) // Set the database for our standalone localized-image function\n}\n\n#let get-localized-path(key, current-lang) = {\n  let lang-data = language-database.get()\n  if lang-data == none {\n    panic(\"Language database not set. Call `load-lang()` at the beginning of your document.\")\n  }\n\n  let path\n  let lang-section-name = current-lang\n\n  if lang-section-name in lang-data.lang {\n    let lang-section = lang-data.lang.at(lang-section-name)\n    if key in lang-section {\n      path = lang-section.at(key)\n    }\n  }\n\n  if path == none and \"default-lang\" in lang-data.conf {\n    let default-lang = lang-data.conf.at(\"default-lang\")\n    let default-lang-section-name = \"lang.\" + default-lang\n    if default-lang-section-name in lang-data.lang {\n      let default-lang-section = lang-data.lang.at(default-lang-section-name)\n      path = default-lang-section.at(key, default: none)\n    }\n  }\n\n  path\n}\n\n#let localized-image(key, ..args) = {\n  let current-lang = get-current-language()\n  let nicePath = get-localized-path(key, current-lang)\n  if not nicePath.starts-with(\"/\") and nicePath != none {\n    nicePath = \"/\" + nicePath\n  }\n  if nicePath == \"badPath\" {\n    panic(\"Image key '\" + key + \"' not found for language '\" + current-lang + \"'.\")\n  }\n  image(nicePath, ..args)\n}\n</code></pre>\n</details>\n<p>I also see that you know how to write a proper code block for Typst snippets. Could you please fix the code block in <a href=\"https://forum.typst.app/t/how-can-i-extend-linguify-for-language-dependent-images-converting-linguify-context-to-string/3480\">the OP</a> too?</p>",
      "raw": "Here is a simplified version, if you want.\n\n<details><summary>Code</summary>\n\n```typ\n#import \"@preview/linguify:0.4.2\": set-database as linguify-set-database\n\n#let language-database = state(\"language-database\")\n\n#let set-language-database(data) = language-database.update(data)\n#let get-current-language() = text.lang\n\n#let load-lang(data) = {\n  linguify-set-database(data) // Set the database for the @preview/linguify package\n  set-language-database(data) // Set the database for our standalone localized-image function\n}\n\n#let get-localized-path(key, current-lang) = {\n  let lang-data = language-database.get()\n  if lang-data == none {\n    panic(\"Language database not set. Call `load-lang()` at the beginning of your document.\")\n  }\n\n  let path\n  let lang-section-name = current-lang\n\n  if lang-section-name in lang-data.lang {\n    let lang-section = lang-data.lang.at(lang-section-name)\n    if key in lang-section {\n      path = lang-section.at(key)\n    }\n  }\n\n  if path == none and \"default-lang\" in lang-data.conf {\n    let default-lang = lang-data.conf.at(\"default-lang\")\n    let default-lang-section-name = \"lang.\" + default-lang\n    if default-lang-section-name in lang-data.lang {\n      let default-lang-section = lang-data.lang.at(default-lang-section-name)\n      path = default-lang-section.at(key, default: none)\n    }\n  }\n\n  path\n}\n\n#let localized-image(key, ..args) = {\n  let current-lang = get-current-language()\n  let nicePath = get-localized-path(key, current-lang)\n  if not nicePath.starts-with(\"/\") and nicePath != none {\n    nicePath = \"/\" + nicePath\n  }\n  if nicePath == \"badPath\" {\n    panic(\"Image key '\" + key + \"' not found for language '\" + current-lang + \"'.\")\n  }\n  image(nicePath, ..args)\n}\n```\n\n</details>\n\nI also see that you know how to write a proper code block for Typst snippets. Could you please fix the code block in [the OP](https://forum.typst.app/t/how-can-i-extend-linguify-for-language-dependent-images-converting-linguify-context-to-string/3480) too?",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 20,
      "score": 29.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 10672,
      "post_number": 6,
      "username": "TobiOneCenobi",
      "name": "",
      "created_at": "2025-04-05T12:23:51.312Z",
      "updated_at": "2025-04-05T12:23:51.312Z",
      "cooked": "<p>That’s some really well-structured code! I seem to have lost the ability to edit my post after <a class=\"mention\" href=\"/u/sillyfreak\">@SillyFreak</a> kindly updated the title.</p>",
      "raw": "That's some really well-structured code! I seem to have lost the ability to edit my post after @SillyFreak kindly updated the title.",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 17,
      "score": 23.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1405
    },
    {
      "id": 10675,
      "post_number": 7,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2025-04-05T12:57:52.945Z",
      "updated_at": "2025-04-05T12:57:52.945Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"TobiOneCenobi\" data-post=\"6\" data-topic=\"3480\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/t/1E7C61/48.png\" class=\"avatar\"> TobiOneCenobi:</div>\n<blockquote>\n<p>I seem to have lost the ability to edit my post</p>\n</blockquote>\n</aside>\n<p>there’s a time limit for relatively new users of one day. I have fixed the syntax highlighting, which is what I think Andrew was referring to.</p>",
      "raw": "[quote=\"TobiOneCenobi, post:6, topic:3480\"]\nI seem to have lost the ability to edit my post\n[/quote]\n\nthere's a time limit for relatively new users of one day. I have fixed the syntax highlighting, which is what I think Andrew was referring to.",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 0,
      "reads": 15,
      "score": 3.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:49:49.631050"
}