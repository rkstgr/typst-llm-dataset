{
  "topic_metadata": {
    "id": 3717,
    "title": "How to magnify images in figures?",
    "slug": "how-to-magnify-images-in-figures",
    "posts_count": 4,
    "created_at": "2025-04-18T15:58:50.461Z",
    "last_posted_at": "2025-04-18T20:56:20.434Z",
    "views": 166,
    "like_count": 11,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Andrew",
    "tags": [
      "cetz",
      "figures",
      "images"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 1821
  },
  "posts": [
    {
      "id": 11290,
      "post_number": 1,
      "username": "Btjk16",
      "name": "Btjk16",
      "created_at": "2025-04-18T15:58:50.566Z",
      "updated_at": "2025-04-18T20:55:37.667Z",
      "cooked": "<p>Hi!  Newbie here, coming from LaTeX.</p>\n<p>There is a relatively common practice in GenAI literature with figures, where a magnification is applied to the images, allowing to show details or just to compare resolution. In LaTeX one can use TikZ with tikzimage  and spy/zoombox. At the end, there is a link to a post which illustrates it.</p>\n<p>But how magnification can be achieved with Typst and whether CeTZ or any other library is capable of doing it?</p>\n<p>Thanks!</p>\n<aside class=\"onebox stackexchange\" data-onebox-src=\"https://tex.stackexchange.com/questions/59705/magnifying-part-of-a-picture-similar-to-tikz-spy-library\">\n  <header class=\"source\">\n\n      <a href=\"https://tex.stackexchange.com/questions/59705/magnifying-part-of-a-picture-similar-to-tikz-spy-library\" target=\"_blank\" rel=\"noopener nofollow ugc\">tex.stackexchange.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n      <a href=\"https://tex.stackexchange.com/users/1183/ingo\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n    <img alt=\"Ingo\" src=\"https://forum.typst.app/uploads/default/original/2X/0/0d63e9a7384ae35bf269b2bda62efc0fbda26fb7.png\" class=\"thumbnail onebox-avatar\" data-dominant-color=\"424242\" width=\"256\" height=\"256\">\n  </a>\n\n<h4>\n  <a href=\"https://tex.stackexchange.com/questions/59705/magnifying-part-of-a-picture-similar-to-tikz-spy-library\" target=\"_blank\" rel=\"noopener nofollow ugc\">Magnifying part of a picture similar to TikZ spy library</a>\n</h4>\n\n<div class=\"tags\">\n  <strong>tikz-pgf, spy</strong>\n</div>\n\n<div class=\"date\">\n  asked by\n  \n  <a href=\"https://tex.stackexchange.com/users/1183/ingo\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n    Ingo\n  </a>\n  on <a href=\"https://tex.stackexchange.com/questions/59705/magnifying-part-of-a-picture-similar-to-tikz-spy-library\" target=\"_blank\" rel=\"noopener nofollow ugc\">01:44PM - 13 Jun 12 UTC</a>\n</div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
      "raw": "Hi!  Newbie here, coming from LaTeX. \n\nThere is a relatively common practice in GenAI literature with figures, where a magnification is applied to the images, allowing to show details or just to compare resolution. In LaTeX one can use TikZ with tikzimage  and spy/zoombox. At the end, there is a link to a post which illustrates it.\n\nBut how magnification can be achieved with Typst and whether CeTZ or any other library is capable of doing it?\n\nThanks!\n\nhttps://tex.stackexchange.com/questions/59705/magnifying-part-of-a-picture-similar-to-tikz-spy-library",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 55,
      "score": 96.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1480
    },
    {
      "id": 11294,
      "post_number": 2,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-18T17:13:46.970Z",
      "updated_at": "2025-04-19T13:34:10.230Z",
      "cooked": "<p>Hi. <a href=\"https://lilaq.org/docs/examples/plot-within-a-plot\" rel=\"noopener nofollow ugc\">Lilaq has something like this</a>, but it’s more of an emulation:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/lilaq:0.2.0\" as lq\n\n#let weierstrass(x, k: 8) = {\n  range(k).map(k =&gt; calc.pow(0.5, k) * calc.cos(calc.pow(5, k) * x)).sum()\n}\n\n#let xs = lq.linspace(-0.5, .5, num: 1000)\n#let xs-fine = lq.linspace(-0.05, 0, num: 1000)\n\n#show: lq.set-grid(stroke: none)\n\n#lq.diagram(\n  width: 14cm,\n  height: 7cm,\n  ylim: (0, 2),\n  margin: (x: 2%),\n  lq.plot(xs, mark: none, xs.map(weierstrass)),\n  lq.rect(-0.05, 1.5, width: .05, height: .3),\n  lq.place(\n    60%,\n    100% - 1.2em,\n    align: bottom,\n    lq.diagram(\n      width: 5.4cm,\n      height: 2cm,\n      margin: 0%,\n      ylim: (1.5, 1.8),\n      fill: white,\n      lq.plot(xs-fine, mark: none, xs-fine.map(weierstrass)),\n    ),\n  ),\n)\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/f/f88f293655ef84f439a0cae2904d1d42ab970599.png\" data-download-href=\"https://forum.typst.app/uploads/default/f88f293655ef84f439a0cae2904d1d42ab970599\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/f/f88f293655ef84f439a0cae2904d1d42ab970599_2_690x359.png\" alt=\"image\" data-base62-sha1=\"zsR8hONDfwEOiM3TrRQ3EkL8z5D\" width=\"690\" height=\"359\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/f/f88f293655ef84f439a0cae2904d1d42ab970599_2_690x359.png, https://forum.typst.app/uploads/default/original/2X/f/f88f293655ef84f439a0cae2904d1d42ab970599.png 1.5x, https://forum.typst.app/uploads/default/original/2X/f/f88f293655ef84f439a0cae2904d1d42ab970599.png 2x\" data-dominant-color=\"16191B\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">719×375 63.2 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>So we can apply the same concept with CeTZ:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n\n#let unit = 1cm\n\n// Magnify content.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - size (array): size of the area to magnify\n// - body (content): what to magnify\n#let magnify(scale, place-pos, pos, size, body) = {\n  import cetz.draw: content, rect, line\n  rect(pos, (rel: (size.first(), -1 * size.last())), name: \"a\")\n  content(\n    anchor: \"north-west\",\n    name: \"b\",\n    place-pos,\n    block(\n      stroke: 1pt,\n      width: size.first() * unit * scale,\n      height: size.last() * unit * scale,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(dx: -pos.first() * unit, dy: pos.last() * unit, body),\n      ),\n    ),\n  )\n  line(\"a\", \"b\")\n}\n</code></pre>\n<p>And then get:</p>\n<details><summary>Full example</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n#import \"@preview/lilaq:0.2.0\" as lq\n\n#let unit = 1cm\n#let canvas = cetz.canvas.with(length: unit)\n\n#let weierstrass(x, k: 8) = {\n  range(k).map(k =&gt; calc.pow(0.5, k) * calc.cos(calc.pow(5, k) * x)).sum()\n}\n\n#let xs = lq.linspace(-0.5, .5, num: 1000)\n#let xs-fine = lq.linspace(-0.05, 0, num: 1000)\n\n#show: lq.set-grid(stroke: none)\n\n#let image = box(\n  lq.diagram(\n    width: 14cm,\n    height: 7cm,\n    ylim: (0, 2),\n    margin: (x: 2%),\n    yaxis: (ticks: none),\n    xaxis: (ticks: none),\n    lq.plot(xs, mark: none, xs.map(weierstrass)),\n  ),\n)\n\n// Magnify content.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - size (array): size of the area to magnify\n// - body (content): what to magnify\n#let magnify(scale, place-pos, pos, size, body) = {\n  import cetz.draw: content, rect, line\n  rect(pos, (rel: (size.first(), -1 * size.last())), name: \"a\")\n  content(\n    anchor: \"north-west\",\n    name: \"b\",\n    place-pos,\n    block(\n      stroke: 1pt,\n      width: size.first() * unit * scale,\n      height: size.last() * unit * scale,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(dx: -pos.first() * unit, dy: pos.last() * unit, body),\n      ),\n    ),\n  )\n  line(\"a\", \"b\")\n}\n\n#canvas({\n  import cetz.draw: *\n  content((0, 0), anchor: \"north-west\", image)\n  magnify(300%, (7, -3.9), (5, -2), (1, 1), image)\n})\n</code></pre>\n</details>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/1/18ed3359d86d73aa868c454147b8130537d9b144.png\" alt=\"image\" data-base62-sha1=\"3yvES0i3anwQ3zttNByClr6rM4A\" width=\"683\" height=\"352\"></p>\n<p>There are plenty of other variations of this, but most of them are more complicated, for example, if you want to connect all 4 corners with 4 lines, or use another shape, etc.</p>\n<p>Here is the yellow circle:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Magnify content.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - diameter (int, float): size of the area to magnify\n// - body (content): what to magnify\n#let magnify(scale, place-pos, pos, diameter, body) = {\n  import cetz.draw: content, rect, line, circle, set-style\n  let color = yellow\n  set-style(stroke: color)\n  circle(pos, radius: diameter / 2 * unit, name: \"a\")\n  circle(place-pos, radius: diameter / 2 * scale * unit, name: \"b\")\n  line(\"a\", \"b\")\n  content(\n    (),\n    block(\n      stroke: 1pt + color,\n      radius: diameter / 2 * scale * unit,\n      width: diameter * scale * unit,\n      height: diameter * scale * unit,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(\n          dx: (-pos.first() + diameter / 2) * unit,\n          dy: (pos.last() + diameter / 2) * unit,\n          body,\n        ),\n      ),\n    ),\n  )\n}\n</code></pre>\n<details><summary>Full example</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n#import \"@preview/lilaq:0.2.0\" as lq\n\n#let unit = 1cm\n#let canvas = cetz.canvas.with(length: unit)\n\n#let weierstrass(x, k: 8) = {\n  range(k).map(k =&gt; calc.pow(0.5, k) * calc.cos(calc.pow(5, k) * x)).sum()\n}\n\n#let xs = lq.linspace(-0.5, .5, num: 1000)\n#let xs-fine = lq.linspace(-0.05, 0, num: 1000)\n\n#show: lq.set-grid(stroke: none)\n\n#let image = box(\n  lq.diagram(\n    width: 14cm,\n    height: 7cm,\n    ylim: (0, 2),\n    margin: (x: 2%),\n    yaxis: (ticks: none),\n    xaxis: (ticks: none),\n    lq.plot(xs, mark: none, xs.map(weierstrass)),\n  ),\n)\n\n// Magnify content.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - diameter (int, float): size of the area to magnify\n// - body (content): what to magnify\n#let magnify(scale, place-pos, pos, diameter, body) = {\n  import cetz.draw: content, rect, line, circle, set-style\n  let color = yellow\n  set-style(stroke: color)\n  circle(pos, radius: diameter / 2 * unit, name: \"a\")\n  circle(place-pos, radius: diameter / 2 * scale * unit, name: \"b\")\n  line(\"a\", \"b\")\n  content(\n    (),\n    block(\n      stroke: 1pt + color,\n      radius: diameter / 2 * scale * unit,\n      width: diameter * scale * unit,\n      height: diameter * scale * unit,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(\n          dx: (-pos.first() + diameter / 2) * unit,\n          dy: (pos.last() + diameter / 2) * unit,\n          body,\n        ),\n      ),\n    ),\n  )\n}\n\n#canvas({\n  import cetz.draw: *\n  content((0, 0), anchor: \"north-west\", image)\n  magnify(300%, (8, -5.3), (5.9, -2.5), 1, image)\n})\n</code></pre>\n</details>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/f/f61d13b66c601e183879a6eb8e77d4e95773a9d7.png\" data-download-href=\"https://forum.typst.app/uploads/default/f61d13b66c601e183879a6eb8e77d4e95773a9d7\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/f/f61d13b66c601e183879a6eb8e77d4e95773a9d7_2_690x359.png\" alt=\"image\" data-base62-sha1=\"z7dKNUIu3iK2KRlRxmMEOUqdBiL\" width=\"690\" height=\"359\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/f/f61d13b66c601e183879a6eb8e77d4e95773a9d7_2_690x359.png, https://forum.typst.app/uploads/default/original/2X/f/f61d13b66c601e183879a6eb8e77d4e95773a9d7.png 1.5x, https://forum.typst.app/uploads/default/original/2X/f/f61d13b66c601e183879a6eb8e77d4e95773a9d7.png 2x\" data-dominant-color=\"05080B\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">802×418 31.8 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p><s>Should work with raster images, but I haven’t tested that.</s></p>\n<p>Looks like it works perfectly well with images, but you do have to lock both axis, otherwise it will scale incorrectly. For this, you can do</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let image = {\n  let image = image.with(\"file.png\")\n  context image(..measure(image(width: 20cm)))\n}\n</code></pre>\n<details><summary>Raster image</summary>\n<p><a href=\"https://raw.githubusercontent.com/typst/typst-dev-assets/refs/heads/main/files/images/glacier.jpg\" rel=\"noopener nofollow ugc\">Image link</a></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n\n#let unit = 1cm\n#let canvas = cetz.canvas.with(length: unit)\n\n// Magnify content using circle.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - diameter (int, float): size of the circle area to magnify\n// - body (content): what to magnify\n#let magnify-circle(scale, place-pos, pos, diameter, body) = {\n  import cetz.draw: content, rect, line, circle, set-style\n  let color = yellow\n  set-style(stroke: color)\n  circle(pos, radius: diameter / 2 * unit, name: \"a\")\n  circle(place-pos, radius: diameter / 2 * scale * unit, name: \"b\")\n  line(\"a\", \"b\")\n  content(\n    (),\n    block(\n      stroke: 1pt + color,\n      radius: diameter / 2 * scale * unit,\n      width: diameter * scale * unit,\n      height: diameter * scale * unit,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(\n          dx: (-pos.first() + diameter / 2) * unit,\n          dy: (pos.last() + diameter / 2) * unit,\n          body,\n        ),\n      ),\n    ),\n  )\n}\n\n// Magnify content using rectangle.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - size (array): size of the rectangle area to magnify\n// - body (content): what to magnify\n#let magnify-rect(scale, place-pos, pos, size, body) = {\n  import cetz.draw: content, rect, line\n  rect(pos, (rel: (size.first(), -1 * size.last())), name: \"a\")\n  content(\n    anchor: \"north-west\",\n    name: \"b\",\n    place-pos,\n    block(\n      stroke: 1pt,\n      width: size.first() * unit * scale,\n      height: size.last() * unit * scale,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(dx: -pos.first() * unit, dy: pos.last() * unit, body),\n      ),\n    ),\n  )\n  line(\"a\", \"b\")\n}\n\n#let image = {\n  let image = image.with(\"glacier.jpg\")\n  context image(..measure(image(width: 20cm)))\n}\n\n#set page(width: auto, height: auto, margin: 0pt)\n\n#canvas({\n  import cetz.draw: *\n  content((0, 0), anchor: \"north-west\", image)\n  magnify-rect(500%, (4, -4), (12, -2.6), (1.5, 1.3), image)\n  magnify-circle(500%, (16, -8), (13, -3.2), 1.5, image)\n})\n</code></pre>\n</details>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/2/2b4f73ee8919303ab23f62f9d7b8663b31b4c565.jpeg\" data-download-href=\"https://forum.typst.app/uploads/default/2b4f73ee8919303ab23f62f9d7b8663b31b4c565\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/original/2X/2/2b4f73ee8919303ab23f62f9d7b8663b31b4c565.jpeg\" alt=\"image\" data-base62-sha1=\"6b8L0uLkpdDYzi8pno6rnEETPiR\" width=\"690\" height=\"459\" data-dominant-color=\"8B95A0\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">960×639 78.2 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Or, if you want to just edit image, without needing for canvas:</p>\n<details><summary>code</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/cetz:0.3.4\"\n\n// Magnify content using circle.\n//\n// - scale (ratio): magnification scale\n// - body (content): what to magnify\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - diameter (int, float): size of the area to magnify\n// - unit (length): unit to use to convert int/float numbers\n// - color (length): stroke color\n#let magnify-circle(\n  scale,\n  body,\n  place-pos: (0, 0),\n  pos: (0, 0),\n  diameter: 1,\n  unit: 1cm,\n  color: yellow,\n) = {\n  let canvas = cetz.canvas.with(length: unit)\n  canvas({\n    import cetz.draw: content, line, circle, set-style\n    content((0, 0), anchor: \"north-west\", body)\n    set-style(stroke: color)\n    circle(pos, radius: diameter / 2 * unit, name: \"a\")\n    circle(place-pos, radius: diameter / 2 * scale * unit, name: \"b\")\n    line(\"a\", \"b\")\n    content(\n      (),\n      block(\n        stroke: 1pt + color,\n        radius: diameter / 2 * scale * unit,\n        width: diameter * scale * unit,\n        height: diameter * scale * unit,\n        clip: true,\n        std.scale(\n          scale,\n          reflow: true,\n          move(\n            dx: (-pos.first() + diameter / 2) * unit,\n            dy: (pos.last() + diameter / 2) * unit,\n            body,\n          ),\n        ),\n      ),\n    )\n  })\n}\n\n// Magnify content using rectangle.\n//\n// - scale (ratio): magnification scale\n// - body (content): what to magnify\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - size (array): size of the area to magnify\n// - unit (length): unit to use to convert int/float numbers\n#let magnify-rect(\n  scale,\n  body,\n  place-pos: (0, 0),\n  pos: (0, 0),\n  size: (1, 1),\n  unit: 1cm,\n) = {\n  let canvas = cetz.canvas.with(length: unit)\n  canvas({\n    import cetz.draw: content, rect, line\n    content((0, 0), anchor: \"north-west\", body)\n    rect(pos, (rel: (size.first(), -1 * size.last())), name: \"a\")\n    content(\n      anchor: \"north-west\",\n      name: \"b\",\n      place-pos,\n      block(\n        stroke: 1pt,\n        width: size.first() * unit * scale,\n        height: size.last() * unit * scale,\n        clip: true,\n        std.scale(\n          scale,\n          reflow: true,\n          move(dx: -pos.first() * unit, dy: pos.last() * unit, body),\n        ),\n      ),\n    )\n    line(\"a\", \"b\")\n  })\n}\n\n#set page(width: auto, height: auto, margin: 0pt)\n\n#let image = {\n  let image = image.with(\"glacier.jpg\")\n  context image(..measure(image(width: 20cm)))\n}\n\n#magnify-circle(\n  500%,\n  image,\n  place-pos: (16, -8),\n  pos: (13, -3.2),\n  diameter: 1.5,\n)\n\n#magnify-rect(\n  500%,\n  image,\n  place-pos: (4, -4),\n  pos: (12, -2.6),\n  size: (1.5, 1.3),\n)\n</code></pre>\n</details>",
      "raw": "Hi. [Lilaq has something like this](https://lilaq.org/docs/examples/plot-within-a-plot), but it's more of an emulation:\n\n```typ\n#import \"@preview/lilaq:0.2.0\" as lq\n\n#let weierstrass(x, k: 8) = {\n  range(k).map(k => calc.pow(0.5, k) * calc.cos(calc.pow(5, k) * x)).sum()\n}\n\n#let xs = lq.linspace(-0.5, .5, num: 1000)\n#let xs-fine = lq.linspace(-0.05, 0, num: 1000)\n\n#show: lq.set-grid(stroke: none)\n\n#lq.diagram(\n  width: 14cm,\n  height: 7cm,\n  ylim: (0, 2),\n  margin: (x: 2%),\n  lq.plot(xs, mark: none, xs.map(weierstrass)),\n  lq.rect(-0.05, 1.5, width: .05, height: .3),\n  lq.place(\n    60%,\n    100% - 1.2em,\n    align: bottom,\n    lq.diagram(\n      width: 5.4cm,\n      height: 2cm,\n      margin: 0%,\n      ylim: (1.5, 1.8),\n      fill: white,\n      lq.plot(xs-fine, mark: none, xs-fine.map(weierstrass)),\n    ),\n  ),\n)\n```\n\n![image|690x359](upload://zsR8hONDfwEOiM3TrRQ3EkL8z5D.png)\n\nSo we can apply the same concept with CeTZ:\n\n```typ\n#import \"@preview/cetz:0.3.4\"\n\n#let unit = 1cm\n\n// Magnify content.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - size (array): size of the area to magnify\n// - body (content): what to magnify\n#let magnify(scale, place-pos, pos, size, body) = {\n  import cetz.draw: content, rect, line\n  rect(pos, (rel: (size.first(), -1 * size.last())), name: \"a\")\n  content(\n    anchor: \"north-west\",\n    name: \"b\",\n    place-pos,\n    block(\n      stroke: 1pt,\n      width: size.first() * unit * scale,\n      height: size.last() * unit * scale,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(dx: -pos.first() * unit, dy: pos.last() * unit, body),\n      ),\n    ),\n  )\n  line(\"a\", \"b\")\n}\n```\n\nAnd then get:\n\n<details><summary>Full example</summary>\n\n```typ\n#import \"@preview/cetz:0.3.4\"\n#import \"@preview/lilaq:0.2.0\" as lq\n\n#let unit = 1cm\n#let canvas = cetz.canvas.with(length: unit)\n\n#let weierstrass(x, k: 8) = {\n  range(k).map(k => calc.pow(0.5, k) * calc.cos(calc.pow(5, k) * x)).sum()\n}\n\n#let xs = lq.linspace(-0.5, .5, num: 1000)\n#let xs-fine = lq.linspace(-0.05, 0, num: 1000)\n\n#show: lq.set-grid(stroke: none)\n\n#let image = box(\n  lq.diagram(\n    width: 14cm,\n    height: 7cm,\n    ylim: (0, 2),\n    margin: (x: 2%),\n    yaxis: (ticks: none),\n    xaxis: (ticks: none),\n    lq.plot(xs, mark: none, xs.map(weierstrass)),\n  ),\n)\n\n// Magnify content.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - size (array): size of the area to magnify\n// - body (content): what to magnify\n#let magnify(scale, place-pos, pos, size, body) = {\n  import cetz.draw: content, rect, line\n  rect(pos, (rel: (size.first(), -1 * size.last())), name: \"a\")\n  content(\n    anchor: \"north-west\",\n    name: \"b\",\n    place-pos,\n    block(\n      stroke: 1pt,\n      width: size.first() * unit * scale,\n      height: size.last() * unit * scale,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(dx: -pos.first() * unit, dy: pos.last() * unit, body),\n      ),\n    ),\n  )\n  line(\"a\", \"b\")\n}\n\n#canvas({\n  import cetz.draw: *\n  content((0, 0), anchor: \"north-west\", image)\n  magnify(300%, (7, -3.9), (5, -2), (1, 1), image)\n})\n```\n\n</details>\n\n![image|683x352](upload://3yvES0i3anwQ3zttNByClr6rM4A.png)\n\nThere are plenty of other variations of this, but most of them are more complicated, for example, if you want to connect all 4 corners with 4 lines, or use another shape, etc.\n\nHere is the yellow circle:\n\n```typ\n// Magnify content.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - diameter (int, float): size of the area to magnify\n// - body (content): what to magnify\n#let magnify(scale, place-pos, pos, diameter, body) = {\n  import cetz.draw: content, rect, line, circle, set-style\n  let color = yellow\n  set-style(stroke: color)\n  circle(pos, radius: diameter / 2 * unit, name: \"a\")\n  circle(place-pos, radius: diameter / 2 * scale * unit, name: \"b\")\n  line(\"a\", \"b\")\n  content(\n    (),\n    block(\n      stroke: 1pt + color,\n      radius: diameter / 2 * scale * unit,\n      width: diameter * scale * unit,\n      height: diameter * scale * unit,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(\n          dx: (-pos.first() + diameter / 2) * unit,\n          dy: (pos.last() + diameter / 2) * unit,\n          body,\n        ),\n      ),\n    ),\n  )\n}\n```\n\n<details><summary>Full example</summary>\n\n```typ\n#import \"@preview/cetz:0.3.4\"\n#import \"@preview/lilaq:0.2.0\" as lq\n\n#let unit = 1cm\n#let canvas = cetz.canvas.with(length: unit)\n\n#let weierstrass(x, k: 8) = {\n  range(k).map(k => calc.pow(0.5, k) * calc.cos(calc.pow(5, k) * x)).sum()\n}\n\n#let xs = lq.linspace(-0.5, .5, num: 1000)\n#let xs-fine = lq.linspace(-0.05, 0, num: 1000)\n\n#show: lq.set-grid(stroke: none)\n\n#let image = box(\n  lq.diagram(\n    width: 14cm,\n    height: 7cm,\n    ylim: (0, 2),\n    margin: (x: 2%),\n    yaxis: (ticks: none),\n    xaxis: (ticks: none),\n    lq.plot(xs, mark: none, xs.map(weierstrass)),\n  ),\n)\n\n// Magnify content.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - diameter (int, float): size of the area to magnify\n// - body (content): what to magnify\n#let magnify(scale, place-pos, pos, diameter, body) = {\n  import cetz.draw: content, rect, line, circle, set-style\n  let color = yellow\n  set-style(stroke: color)\n  circle(pos, radius: diameter / 2 * unit, name: \"a\")\n  circle(place-pos, radius: diameter / 2 * scale * unit, name: \"b\")\n  line(\"a\", \"b\")\n  content(\n    (),\n    block(\n      stroke: 1pt + color,\n      radius: diameter / 2 * scale * unit,\n      width: diameter * scale * unit,\n      height: diameter * scale * unit,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(\n          dx: (-pos.first() + diameter / 2) * unit,\n          dy: (pos.last() + diameter / 2) * unit,\n          body,\n        ),\n      ),\n    ),\n  )\n}\n\n#canvas({\n  import cetz.draw: *\n  content((0, 0), anchor: \"north-west\", image)\n  magnify(300%, (8, -5.3), (5.9, -2.5), 1, image)\n})\n```\n\n</details>\n\n![image|690x359](upload://z7dKNUIu3iK2KRlRxmMEOUqdBiL.png)\n\n~~Should work with raster images, but I haven't tested that.~~\n\nLooks like it works perfectly well with images, but you do have to lock both axis, otherwise it will scale incorrectly. For this, you can do\n\n```typ\n#let image = {\n  let image = image.with(\"file.png\")\n  context image(..measure(image(width: 20cm)))\n}\n```\n\n<details><summary>Raster image</summary>\n\n[Image link](https://raw.githubusercontent.com/typst/typst-dev-assets/refs/heads/main/files/images/glacier.jpg)\n\n```typ\n#import \"@preview/cetz:0.3.4\"\n\n#let unit = 1cm\n#let canvas = cetz.canvas.with(length: unit)\n\n// Magnify content using circle.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - diameter (int, float): size of the circle area to magnify\n// - body (content): what to magnify\n#let magnify-circle(scale, place-pos, pos, diameter, body) = {\n  import cetz.draw: content, rect, line, circle, set-style\n  let color = yellow\n  set-style(stroke: color)\n  circle(pos, radius: diameter / 2 * unit, name: \"a\")\n  circle(place-pos, radius: diameter / 2 * scale * unit, name: \"b\")\n  line(\"a\", \"b\")\n  content(\n    (),\n    block(\n      stroke: 1pt + color,\n      radius: diameter / 2 * scale * unit,\n      width: diameter * scale * unit,\n      height: diameter * scale * unit,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(\n          dx: (-pos.first() + diameter / 2) * unit,\n          dy: (pos.last() + diameter / 2) * unit,\n          body,\n        ),\n      ),\n    ),\n  )\n}\n\n// Magnify content using rectangle.\n//\n// - scale (ratio): magnification scale\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - size (array): size of the rectangle area to magnify\n// - body (content): what to magnify\n#let magnify-rect(scale, place-pos, pos, size, body) = {\n  import cetz.draw: content, rect, line\n  rect(pos, (rel: (size.first(), -1 * size.last())), name: \"a\")\n  content(\n    anchor: \"north-west\",\n    name: \"b\",\n    place-pos,\n    block(\n      stroke: 1pt,\n      width: size.first() * unit * scale,\n      height: size.last() * unit * scale,\n      clip: true,\n      std.scale(\n        scale,\n        reflow: true,\n        move(dx: -pos.first() * unit, dy: pos.last() * unit, body),\n      ),\n    ),\n  )\n  line(\"a\", \"b\")\n}\n\n#let image = {\n  let image = image.with(\"glacier.jpg\")\n  context image(..measure(image(width: 20cm)))\n}\n\n#set page(width: auto, height: auto, margin: 0pt)\n\n#canvas({\n  import cetz.draw: *\n  content((0, 0), anchor: \"north-west\", image)\n  magnify-rect(500%, (4, -4), (12, -2.6), (1.5, 1.3), image)\n  magnify-circle(500%, (16, -8), (13, -3.2), 1.5, image)\n})\n```\n\n</details>\n\n![image|690x459](upload://6b8L0uLkpdDYzi8pno6rnEETPiR.jpeg)\n\nOr, if you want to just edit image, without needing for canvas:\n\n<details><summary>code</summary>\n\n```typ\n#import \"@preview/cetz:0.3.4\"\n\n// Magnify content using circle.\n//\n// - scale (ratio): magnification scale\n// - body (content): what to magnify\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - diameter (int, float): size of the area to magnify\n// - unit (length): unit to use to convert int/float numbers\n// - color (length): stroke color\n#let magnify-circle(\n  scale,\n  body,\n  place-pos: (0, 0),\n  pos: (0, 0),\n  diameter: 1,\n  unit: 1cm,\n  color: yellow,\n) = {\n  let canvas = cetz.canvas.with(length: unit)\n  canvas({\n    import cetz.draw: content, line, circle, set-style\n    content((0, 0), anchor: \"north-west\", body)\n    set-style(stroke: color)\n    circle(pos, radius: diameter / 2 * unit, name: \"a\")\n    circle(place-pos, radius: diameter / 2 * scale * unit, name: \"b\")\n    line(\"a\", \"b\")\n    content(\n      (),\n      block(\n        stroke: 1pt + color,\n        radius: diameter / 2 * scale * unit,\n        width: diameter * scale * unit,\n        height: diameter * scale * unit,\n        clip: true,\n        std.scale(\n          scale,\n          reflow: true,\n          move(\n            dx: (-pos.first() + diameter / 2) * unit,\n            dy: (pos.last() + diameter / 2) * unit,\n            body,\n          ),\n        ),\n      ),\n    )\n  })\n}\n\n// Magnify content using rectangle.\n//\n// - scale (ratio): magnification scale\n// - body (content): what to magnify\n// - place-pos (array): position of the magnification\n// - pos (array): where in the content to magnify\n// - size (array): size of the area to magnify\n// - unit (length): unit to use to convert int/float numbers\n#let magnify-rect(\n  scale,\n  body,\n  place-pos: (0, 0),\n  pos: (0, 0),\n  size: (1, 1),\n  unit: 1cm,\n) = {\n  let canvas = cetz.canvas.with(length: unit)\n  canvas({\n    import cetz.draw: content, rect, line\n    content((0, 0), anchor: \"north-west\", body)\n    rect(pos, (rel: (size.first(), -1 * size.last())), name: \"a\")\n    content(\n      anchor: \"north-west\",\n      name: \"b\",\n      place-pos,\n      block(\n        stroke: 1pt,\n        width: size.first() * unit * scale,\n        height: size.last() * unit * scale,\n        clip: true,\n        std.scale(\n          scale,\n          reflow: true,\n          move(dx: -pos.first() * unit, dy: pos.last() * unit, body),\n        ),\n      ),\n    )\n    line(\"a\", \"b\")\n  })\n}\n\n#set page(width: auto, height: auto, margin: 0pt)\n\n#let image = {\n  let image = image.with(\"glacier.jpg\")\n  context image(..measure(image(width: 20cm)))\n}\n\n#magnify-circle(\n  500%,\n  image,\n  place-pos: (16, -8),\n  pos: (13, -3.2),\n  diameter: 1.5,\n)\n\n#magnify-rect(\n  500%,\n  image,\n  place-pos: (4, -4),\n  pos: (12, -2.6),\n  size: (1.5, 1.3),\n)\n```\n\n</details>",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 9,
      "reads": 54,
      "score": 300.8,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 11306,
      "post_number": 3,
      "username": "Btjk16",
      "name": "Btjk16",
      "created_at": "2025-04-18T20:38:51.357Z",
      "updated_at": "2025-04-18T20:38:51.357Z",
      "cooked": "<p>Thank you very much, I’d never have come to that, it looks pretty cool!</p>",
      "raw": "Thank you very much, I'd never have come to that, it looks pretty cool!",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 48,
      "score": 24.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1480
    },
    {
      "id": 11310,
      "post_number": 4,
      "username": "PgBiel",
      "name": "",
      "created_at": "2025-04-18T20:56:20.434Z",
      "updated_at": "2025-04-18T20:56:20.434Z",
      "cooked": "<p>Hey <a class=\"mention\" href=\"/u/btjk16\">@Btjk16</a>, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: <a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11\" class=\"inline-onebox\">How to post in the Questions category</a></p>\n<p>For future posts, make sure your title is a question you’d ask to a friend about Typst. <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "Hey @Btjk16, welcome to the forum! I’ve changed your question post’s title to better fit our guidelines: https://forum.typst.app/t/how-to-post-in-the-questions-category/11\n\nFor future posts, make sure your title is a question you’d ask to a friend about Typst. :wink:",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 47,
      "score": 24.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 3
    }
  ],
  "scraped_at": "2025-06-10T09:48:59.889208"
}