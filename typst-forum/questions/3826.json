{
  "topic_metadata": {
    "id": 3826,
    "title": "How to vertically align corresponding factors in the Wallis product fraction",
    "slug": "how-to-vertically-align-corresponding-factors-in-the-wallis-product-fraction",
    "posts_count": 6,
    "created_at": "2025-04-27T16:27:59.967Z",
    "last_posted_at": "2025-04-29T18:28:15.263Z",
    "views": 76,
    "like_count": 11,
    "reply_count": 1,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "janekfleper",
    "tags": [
      "math",
      "spacing"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 907
  },
  "posts": [
    {
      "id": 11676,
      "post_number": 1,
      "username": "Roberto",
      "name": "Roberto Giacomelli",
      "created_at": "2025-04-27T16:28:00.225Z",
      "updated_at": "2025-04-27T17:01:59.668Z",
      "cooked": "<p>Hi all,<br>\nthe following image represents the Wallis product:<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/4/40a93f6ebed0037115e1478d2bcdaffc0a781561.png\" alt=\"immagine\" data-base62-sha1=\"9e1awL80SmVzf63yp28rWUnJvbP\" width=\"464\" height=\"83\"></p>\n<p>following the code in a math object I wrote to build the formula without typing manually each factor. It’s not a so annoying job anyway is interesting the proof of concept on Typst way to do so with its internal scripting language.</p>\n<details>\n<summary>\nSummary</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">$ pi/2 = #{\n  let num = () // numerator start\n  let den = () // denumerator start\n  // filling\n  for n in range(2, 12, step:2) {\n    num.push(str(n))\n    num.push(str(n))\n    den.push(str(n - 1))\n    den.push(str(n + 1))\n  }\n  // ending\n  num.push(\" dots.c\")\n  den.push(\" dots.c\")\n  // fraction output\n  eval(\n      \"(\" +\n      num.join(\" dot \") +\n      \")/(\"\n      + den.join(\" dot \") +\n      \")\",\n    mode: \"math\")\n} $\n</code></pre>\n</details>\n<p>Each factors of numerator and denominator is not vertically aligned one to one.<br>\nIs there a way to write a better code in order to generate series similar to the Wallis product?<br>\nWhich is the best way to align vertically factors?</p>\n<p>Thank you.<br>\nR.</p>",
      "raw": "Hi all,\nthe following image represents the Wallis product:\n![immagine|619x111, 75%](upload://9e1awL80SmVzf63yp28rWUnJvbP.png)\n\nfollowing the code in a math object I wrote to build the formula without typing manually each factor. It's not a so annoying job anyway is interesting the proof of concept on Typst way to do so with its internal scripting language.\n[details=\"Summary\"]\n```typ\n$ pi/2 = #{\n  let num = () // numerator start\n  let den = () // denumerator start\n  // filling\n  for n in range(2, 12, step:2) {\n    num.push(str(n))\n    num.push(str(n))\n    den.push(str(n - 1))\n    den.push(str(n + 1))\n  }\n  // ending\n  num.push(\" dots.c\")\n  den.push(\" dots.c\")\n  // fraction output\n  eval(\n      \"(\" +\n      num.join(\" dot \") +\n      \")/(\"\n      + den.join(\" dot \") +\n      \")\",\n    mode: \"math\")\n} $\n```\n[/details]\n\nEach factors of numerator and denominator is not vertically aligned one to one.\nIs there a way to write a better code in order to generate series similar to the Wallis product?\nWhich is the best way to align vertically factors?\n\nThank you.\nR.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 22,
      "score": 54.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1471
    },
    {
      "id": 11679,
      "post_number": 2,
      "username": "janekfleper",
      "name": "Janek Fleper",
      "created_at": "2025-04-27T17:21:13.638Z",
      "updated_at": "2025-04-27T17:23:43.176Z",
      "cooked": "<p>You can use <a href=\"https://typst.app/docs/reference/layout/measure/\" class=\"inline-onebox\">Measure Function – Typst Documentation</a> to figure out the (maximum) width of each pair of factors and then use <a href=\"https://typst.app/docs/reference/layout/box/\" class=\"inline-onebox\">Box Function – Typst Documentation</a> to “manually” align the factors.</p>\n<p>With the show-set rule for the box alignment you can choose the relative alignment of the individual factors.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let wallis-product(max) = context {\n  show box: set align(right)\n  \n  let num = ()\n  let den = ()\n  for n in range(1, max) {\n    let c = $#n$\n    let c-next = $#(n + 1)$\n    let width = calc.max(measure(c).width, measure(c-next).width)\n    if calc.even(n) {\n      num.push(box(width: width, c))\n      den.push(box(width: width, c-next))\n    } else {\n      den.push(box(width: width, c))\n      num.push(box(width: width, c-next))\n    }\n  }\n  num.push($...$)\n  den.push($...$)\n\n  $ pi / 2 = #num.join(math.dot) / #den.join(math.dot) $\n}\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/2/2e0d0a954f9d8dd9ddcb77f063ebcbdf77bcd334.png\" data-download-href=\"https://forum.typst.app/uploads/default/2e0d0a954f9d8dd9ddcb77f063ebcbdf77bcd334\" title=\"forum_3826_wallis-product\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/2/2e0d0a954f9d8dd9ddcb77f063ebcbdf77bcd334_2_690x105.png\" alt=\"forum_3826_wallis-product\" data-base62-sha1=\"6znU5dO3jkql89oVDK4kokVRK8A\" width=\"690\" height=\"105\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/2/2e0d0a954f9d8dd9ddcb77f063ebcbdf77bcd334_2_690x105.png, https://forum.typst.app/uploads/default/optimized/2X/2/2e0d0a954f9d8dd9ddcb77f063ebcbdf77bcd334_2_1035x157.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/2/2e0d0a954f9d8dd9ddcb77f063ebcbdf77bcd334_2_1380x210.png 2x\" data-dominant-color=\"F0F0F0\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">forum_3826_wallis-product</span><span class=\"informations\">2301×353 112 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "You can use https://typst.app/docs/reference/layout/measure/ to figure out the (maximum) width of each pair of factors and then use https://typst.app/docs/reference/layout/box/ to \"manually\" align the factors.\n\nWith the show-set rule for the box alignment you can choose the relative alignment of the individual factors.\n\n```typ\n#let wallis-product(max) = context {\n  show box: set align(right)\n  \n  let num = ()\n  let den = ()\n  for n in range(1, max) {\n    let c = $#n$\n    let c-next = $#(n + 1)$\n    let width = calc.max(measure(c).width, measure(c-next).width)\n    if calc.even(n) {\n      num.push(box(width: width, c))\n      den.push(box(width: width, c-next))\n    } else {\n      den.push(box(width: width, c))\n      num.push(box(width: width, c-next))\n    }\n  }\n  num.push($...$)\n  den.push($...$)\n\n  $ pi / 2 = #num.join(math.dot) / #den.join(math.dot) $\n}\n```\n\n![forum_3826_wallis-product|690x105](upload://6znU5dO3jkql89oVDK4kokVRK8A.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 22,
      "score": 59.4,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 69
    },
    {
      "id": 11680,
      "post_number": 3,
      "username": "vmartel08",
      "name": "Vincent Martel",
      "created_at": "2025-04-27T17:25:43.336Z",
      "updated_at": "2025-04-27T22:42:34.004Z",
      "cooked": "<p>Hi again <a class=\"mention\" href=\"/u/roberto\">@Roberto</a>,</p>\n<p>Here’s another way to do it without too much refactoring:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">$\n  pi / 2 = ( #{\n  let div = ()\n  // filling\n  for n in range(2, 12, step:2) {\n    div.push(str(n)+\"/\"+str(n - 1))\n    div.push(str(n)+\"/\"+str(n + 1))\n  }\n  // ending\n  div.push(\" dots.c\") //(\" dots.c / dots.c\")\n  // fraction output\n  eval(\n      div.join(\" dot \"),\n    mode: \"math\")\n} )\n$\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/e/e347b6632792e74b9b43fda7a0b8c9264090ddb7.png\" alt=\"image\" data-base62-sha1=\"wqC1Nvxd8u6Fsc5DVITHmeZTJDV\" width=\"466\" height=\"74\"></p>\n<p>EDIT: <a class=\"mention\" href=\"/u/janekfleper\">@janekfleper</a> sent their answer while I was still typing. A more elegant solution, which led me to streamline the code to something simpler and removing the <code>eval</code>:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let wallis-product(nb: 6) = {\n  let div = ()\n  for n in range(1, nb) {\n    div.push($( #(2*n) / #(2*n - 1) dot #(2*n) / #(2*n + 1) )$)\n  }\n  div.push($dots.c$)\n  div.join($dot$)\n}\n\n$ pi / 2 = #wallis-product() $\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/c/cc0b7b3b6d232dbad4f3113b393dd1342b156e7a.png\" data-download-href=\"https://forum.typst.app/uploads/default/cc0b7b3b6d232dbad4f3113b393dd1342b156e7a\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/c/cc0b7b3b6d232dbad4f3113b393dd1342b156e7a_2_690x143.png\" alt=\"image\" data-base62-sha1=\"t740aoJd5pfa7L7uLD3dGEBoUgG\" width=\"690\" height=\"143\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/c/cc0b7b3b6d232dbad4f3113b393dd1342b156e7a_2_690x143.png, https://forum.typst.app/uploads/default/optimized/2X/c/cc0b7b3b6d232dbad4f3113b393dd1342b156e7a_2_1035x214.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/c/cc0b7b3b6d232dbad4f3113b393dd1342b156e7a_2_1380x286.png 2x\" data-dominant-color=\"080808\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1510×313 44.5 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "Hi again @Roberto, \n\nHere's another way to do it without too much refactoring: \n\n```typ\n$\n  pi / 2 = ( #{\n  let div = ()\n  // filling\n  for n in range(2, 12, step:2) {\n    div.push(str(n)+\"/\"+str(n - 1))\n    div.push(str(n)+\"/\"+str(n + 1))\n  }\n  // ending\n  div.push(\" dots.c\") //(\" dots.c / dots.c\")\n  // fraction output\n  eval(\n      div.join(\" dot \"),\n    mode: \"math\")\n} )\n$\n```\n\n![image|466x74](upload://wqC1Nvxd8u6Fsc5DVITHmeZTJDV.png)\n\nEDIT: @janekfleper sent their answer while I was still typing. A more elegant solution, which led me to streamline the code to something simpler and removing the `eval`:\n\n```typ\n#let wallis-product(nb: 6) = {\n  let div = ()\n  for n in range(1, nb) {\n    div.push($( #(2*n) / #(2*n - 1) dot #(2*n) / #(2*n + 1) )$)\n  }\n  div.push($dots.c$)\n  div.join($dot$)\n}\n\n$ pi / 2 = #wallis-product() $\n```\n![image|690x143](upload://t740aoJd5pfa7L7uLD3dGEBoUgG.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 21,
      "score": 34.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 936
    },
    {
      "id": 11698,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-27T22:17:51.567Z",
      "updated_at": "2025-04-27T22:17:51.567Z",
      "cooked": "<p>I think the product should only produce the product, and repeating the same thing 4 times is unnecessarily excessive:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let wallis-product(max) = context {\n  show box: set align(center)\n\n  let num = ()\n  let den = ()\n  for n in range(1, max) {\n    let factors = ($#n$, $#(n + 1)$)\n    let width = calc.max(..factors.map(x =&gt; measure(x).width))\n    let (c, c-next) = factors.map(box.with(width: width))\n    if calc.odd(n) {\n      den.push(c)\n      num.push(c-next)\n    } else {\n      num.push(c)\n      den.push(c-next)\n    }\n  }\n  num.push($dots.c$)\n  den.push($dots.c$)\n\n  $num.join(dot) / den.join(dot)$\n}\n\n$ pi / 2 = #wallis-product(11) $\n</code></pre>\n<p>Though following the same principle show-set rule is not needed either:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let wallis-product(max) = context {\n  let (num, den) = ((), ())\n  for n in range(1, max) {\n    let factors = ($#n$, $#(n + 1)$)\n    let width = calc.max(..factors.map(x =&gt; measure(x).width))\n    let (c, c-next) = factors.map(x =&gt; box(width: width, align(center, x)))\n    if calc.odd(n) {\n      den.push(c)\n      num.push(c-next)\n    } else {\n      num.push(c)\n      den.push(c-next)\n    }\n  }\n  num.push($dots.c$)\n  den.push($dots.c$)\n  $num.join(dot) / den.join(dot)$\n}\n\n$ pi / 2 = #wallis-product(11) $\n</code></pre>",
      "raw": "I think the product should only produce the product, and repeating the same thing 4 times is unnecessarily excessive:\n\n```typ\n#let wallis-product(max) = context {\n  show box: set align(center)\n\n  let num = ()\n  let den = ()\n  for n in range(1, max) {\n    let factors = ($#n$, $#(n + 1)$)\n    let width = calc.max(..factors.map(x => measure(x).width))\n    let (c, c-next) = factors.map(box.with(width: width))\n    if calc.odd(n) {\n      den.push(c)\n      num.push(c-next)\n    } else {\n      num.push(c)\n      den.push(c-next)\n    }\n  }\n  num.push($dots.c$)\n  den.push($dots.c$)\n\n  $num.join(dot) / den.join(dot)$\n}\n\n$ pi / 2 = #wallis-product(11) $\n```\n\nThough following the same principle show-set rule is not needed either:\n\n```typ\n#let wallis-product(max) = context {\n  let (num, den) = ((), ())\n  for n in range(1, max) {\n    let factors = ($#n$, $#(n + 1)$)\n    let width = calc.max(..factors.map(x => measure(x).width))\n    let (c, c-next) = factors.map(x => box(width: width, align(center, x)))\n    if calc.odd(n) {\n      den.push(c)\n      num.push(c-next)\n    } else {\n      num.push(c)\n      den.push(c-next)\n    }\n  }\n  num.push($dots.c$)\n  den.push($dots.c$)\n  $num.join(dot) / den.join(dot)$\n}\n\n$ pi / 2 = #wallis-product(11) $\n```",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 21,
      "score": 19.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 11748,
      "post_number": 5,
      "username": "Roberto",
      "name": "Roberto Giacomelli",
      "created_at": "2025-04-28T18:10:12.093Z",
      "updated_at": "2025-04-28T18:10:12.093Z",
      "cooked": "<p>I really appreciate everyone’s code in the answers to the question. I’m learning something new from every bit of code you’ve shared.<br>\nTypst’s scripting language is intuitive and funny to work with, if one have in mind the syntax of modern programming languages.<br>\nThank you <a class=\"mention\" href=\"/u/andrew\">@Andrew</a> <a class=\"mention\" href=\"/u/janekfleper\">@janekfleper</a> <a class=\"mention\" href=\"/u/vmartel08\">@vmartel08</a><br>\nR.</p>",
      "raw": "I really appreciate everyone's code in the answers to the question. I'm learning something new from every bit of code you've shared.\nTypst's scripting language is intuitive and funny to work with, if one have in mind the syntax of modern programming languages.\nThank you @Andrew @janekfleper @vmartel08 \nR.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 14,
      "score": 32.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1471
    },
    {
      "id": 11806,
      "post_number": 6,
      "username": "Roberto",
      "name": "Roberto Giacomelli",
      "created_at": "2025-04-29T18:28:15.263Z",
      "updated_at": "2025-04-29T18:28:15.263Z",
      "cooked": "<p>Hey everyone,<br>\nSharing a second go at the Wallis product, and this one’s inspired by <a class=\"mention\" href=\"/u/janekfleper\">@janekfleper</a>’s work. The really interesting thing about this v2 is that it only puts a box around one integer – the one that happens to be the narrowest. And get this, the box isn’t aligned with anything on purpose.<br>\nI was under the impression that stuff in math formulas was automatically centered. Guess I was wrong!<br>\nThis new version also has a different way to create the sequences of integers. It uses two starting integers and then increases them by 2, but it alternates between the two.<br>\nThanks!</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let wallis_v2(num_of_frac: 6) = context {\n  assert(num_of_frac &gt; 0, message : \"Insert a value greater than 0 for 'num_of_frac'\")\n  let n = 2\n  let d = 1\n  let num = ()\n  let den = ()\n  for _ in range(num_of_frac) {\n    // insert the current fraction n/d\n    let n1 = $#n$\n    let d1 = $#d$\n    let n1_len = measure(n1).width\n    let d1_len = measure(d1).width\n    if n1_len &gt; d1_len {\n      num.push(n1)\n      den.push(box(d1, width:n1_len))\n    } else {\n      num.push(box(n1, width:d1_len))\n      den.push(d1)\n    }\n    // prepare the next fraction\n    if n &lt; d { n += 2 } else { d += 2 }\n  }\n  num.push($dots.c$)\n  den.push($dots.c$)\n  // output\n  $ pi/2 = #num.join($dot$) / #den.join($dot$) $\n}\n\n#wallis_v2(num_of_frac: 14)\n</code></pre>",
      "raw": "Hey everyone,\nSharing a second go at the Wallis product, and this one's inspired by @janekfleper's work. The really interesting thing about this v2 is that it only puts a box around one integer – the one that happens to be the narrowest. And get this, the box isn't aligned with anything on purpose.\nI was under the impression that stuff in math formulas was automatically centered. Guess I was wrong!\nThis new version also has a different way to create the sequences of integers. It uses two starting integers and then increases them by 2, but it alternates between the two.\nThanks!\n```typ\n#let wallis_v2(num_of_frac: 6) = context {\n  assert(num_of_frac > 0, message : \"Insert a value greater than 0 for 'num_of_frac'\")\n  let n = 2\n  let d = 1\n  let num = ()\n  let den = ()\n  for _ in range(num_of_frac) {\n    // insert the current fraction n/d\n    let n1 = $#n$\n    let d1 = $#d$\n    let n1_len = measure(n1).width\n    let d1_len = measure(d1).width\n    if n1_len > d1_len {\n      num.push(n1)\n      den.push(box(d1, width:n1_len))\n    } else {\n      num.push(box(n1, width:d1_len))\n      den.push(d1)\n    }\n    // prepare the next fraction\n    if n < d { n += 2 } else { d += 2 }\n  }\n  num.push($dots.c$)\n  den.push($dots.c$)\n  // output\n  $ pi/2 = #num.join($dot$) / #den.join($dot$) $\n}\n\n#wallis_v2(num_of_frac: 14)\n```",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 12,
      "score": 37.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1471
    }
  ],
  "scraped_at": "2025-06-10T09:48:38.136435"
}