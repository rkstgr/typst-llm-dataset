{
  "topic_metadata": {
    "id": 4076,
    "title": "How to properly align symbols in math mode When limits() function is used?",
    "slug": "how-to-properly-align-symbols-in-math-mode-when-limits-function-is-used",
    "posts_count": 5,
    "created_at": "2025-05-13T20:49:38.487Z",
    "last_posted_at": "2025-05-14T18:15:03.797Z",
    "views": 49,
    "like_count": 1,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "Andrew",
    "tags": [
      "math",
      "text-formatting"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 653
  },
  "posts": [
    {
      "id": 12414,
      "post_number": 1,
      "username": "Paul744",
      "name": "Paul",
      "created_at": "2025-05-13T20:49:38.625Z",
      "updated_at": "2025-05-14T17:01:55.463Z",
      "cooked": "<p>As a minimal example of what I’m referring to, consider:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let dd = math.upright(\"d\")\n#let Re = math.upright(\"Re\")\n\n#math.equation(block: true, numbering: none, $\n    integral_(RR^(1, d - 1)) frac(1, (l_(E)^(2) + m^(2))^(A)) frac(dd^(d) l_(E), (2 pi)^(d)) &amp;= 1/(Gamma(A)) integral_(RR^(1, d - 1)) integral_(0)^(infinity) s^(A - 1) e^(-s(l_(E)^(2) + m^(2))) dd s thin frac(dd^(d) l_(E), (2 pi)^(d)) \\\n    &amp;limits(=)^(Re(d) &gt; 0) (2 pi^(d/2))/(Gamma(A) (2 pi)^(d) thin Gamma(d/2)) Gamma(d/2)/2 integral_(0)^(infinity) s^(A - 1) e^(-s m^(2)) s^(-d/2) dd s \\\n$)\n</code></pre>\n<p>If one renders this example calculation, one will find that the alignment in the line with “&amp;limits(=)^(Re(d) &gt; 0)” will align the start of the text with the start of the other equalities, and similarly for the next line. Is there a way to ensure the alignment always works with the equality and not the superscripts?</p>\n<p>I tried moving the “&amp;” inside the limits(), but that didn’t work for me.</p>",
      "raw": "As a minimal example of what I'm referring to, consider:\n\n```typst\n#let dd = math.upright(\"d\")\n#let Re = math.upright(\"Re\")\n\n#math.equation(block: true, numbering: none, $\n    integral_(RR^(1, d - 1)) frac(1, (l_(E)^(2) + m^(2))^(A)) frac(dd^(d) l_(E), (2 pi)^(d)) &= 1/(Gamma(A)) integral_(RR^(1, d - 1)) integral_(0)^(infinity) s^(A - 1) e^(-s(l_(E)^(2) + m^(2))) dd s thin frac(dd^(d) l_(E), (2 pi)^(d)) \\\n    &limits(=)^(Re(d) > 0) (2 pi^(d/2))/(Gamma(A) (2 pi)^(d) thin Gamma(d/2)) Gamma(d/2)/2 integral_(0)^(infinity) s^(A - 1) e^(-s m^(2)) s^(-d/2) dd s \\\n$)\n```\n\nIf one renders this example calculation, one will find that the alignment in the line with \"&limits(=)^(Re(d) > 0)\" will align the start of the text with the start of the other equalities, and similarly for the next line. Is there a way to ensure the alignment always works with the equality and not the superscripts?\n\nI tried moving the \"&\" inside the limits(), but that didn't work for me.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 24.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 788
    },
    {
      "id": 12417,
      "post_number": 2,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-13T22:22:31.023Z",
      "updated_at": "2025-05-14T17:40:45.187Z",
      "cooked": "<p>Your minimal example doesn’t compile, it’s also very big for what you are asking. See <a href=\"https://sscce.org/\">https://sscce.org/</a>. And you don’t need the <code>limits</code> call. You can open an issue for this, as I don’t see any native solution.</p>\n<p>Here is a hack:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show math.attach: it =&gt; {\n  let attachments = it.fields()\n  let base = attachments.remove(\"base\")\n  if base != $=$.body { return it }\n  let top = attachments.remove(\"t\")\n  if not attachments.values().all(x =&gt; x == none) { return it }\n  top = $script(top)$\n  base\n  context {\n    let width = measure(top).width\n    let space = measure(\" \").width\n\n    // place(dx: -space * 2 - width / 2, dy: -1.15em, top)\n\n    place(dx: -space - width / 2, dy: -1.15em, top)\n    h(width / 2)\n  }\n}\n</code></pre>\n<details><summary>Full example</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set math.equation(numbering: \"(1)\")\n\n#let dd = math.upright(\"d\")\n#let Re = $upright(\"Re\")$\n\n#show math.attach: it =&gt; {\n  let attachments = it.fields()\n  let base = attachments.remove(\"base\")\n  if base != $=$.body { return it }\n  let top = attachments.remove(\"t\")\n  if not attachments.values().all(x =&gt; x == none) { return it }\n  base\n  top = $script(top)$\n  context {\n    let width = measure(top).width\n    let w = measure(\" \").width\n\n    // place(dx: -w * 2 - width / 2, dy: -1.15em, top)\n\n    place(dx: -w - width / 2, dy: -1.15em, top)\n    h(width / 2)\n  }\n}\n\n#[\n  #set math.equation(numbering: none)\n  $\n    integral_(RR^(1, d - 1)) frac(1, (l_E^2 + m^2)^A) frac(dd^d l_E, (2 pi)^d)\n    &amp;= 1 / Gamma(A) integral_(RR^(1, d - 1)) integral_0^oo s^(A - 1) e^(-s(l_E^2 + m^2)) dd s thin frac(dd^d l_E, (2 pi)^d) \\\n    &amp;=^(Re(d) &gt; 0) (2 pi^(d / 2)) / (Gamma(A) (2 pi)^d thin Gamma(d / 2)) Gamma(d / 2) / 2 integral_0^oo s^(A - 1) e^(-s m^2) s^(-d / 2) dd s \\\n  $\n]\n</code></pre>\n</details>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/c/c7dcd4026cac022c56b2af9b1a4be0d282b46e96.png\" alt=\"image\" data-base62-sha1=\"sw48BrPs7vwJS5xy1lcs1KLk9ro\" width=\"449\" height=\"99\"></p>\n<hr>\n<aside class=\"quote no-group\" data-username=\"reknih\" data-post=\"1\" data-topic=\"11\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/reknih/48/3_2.png\" class=\"avatar\"><a href=\"https://forum.typst.app/t/how-to-post-in-the-questions-category/11/1\">How to post in the Questions category</a></div>\n<blockquote>\n<p>It would be great if you could post the <strong>smallest possible code samples</strong> that allow people to see what your problem is.</p>\n</blockquote>\n</aside>",
      "raw": "Your minimal example doesn't compile, it's also very big for what you are asking. See https://sscce.org/. And you don't need the `limits` call. You can open an issue for this, as I don't see any native solution.\n\nHere is a hack:\n\n```typ\n#show math.attach: it => {\n  let attachments = it.fields()\n  let base = attachments.remove(\"base\")\n  if base != $=$.body { return it }\n  let top = attachments.remove(\"t\")\n  if not attachments.values().all(x => x == none) { return it }\n  top = $script(top)$\n  base\n  context {\n    let width = measure(top).width\n    let space = measure(\" \").width\n\n    // place(dx: -space * 2 - width / 2, dy: -1.15em, top)\n\n    place(dx: -space - width / 2, dy: -1.15em, top)\n    h(width / 2)\n  }\n}\n```\n\n<details><summary>Full example</summary>\n\n```typ\n#set math.equation(numbering: \"(1)\")\n\n#let dd = math.upright(\"d\")\n#let Re = $upright(\"Re\")$\n\n#show math.attach: it => {\n  let attachments = it.fields()\n  let base = attachments.remove(\"base\")\n  if base != $=$.body { return it }\n  let top = attachments.remove(\"t\")\n  if not attachments.values().all(x => x == none) { return it }\n  base\n  top = $script(top)$\n  context {\n    let width = measure(top).width\n    let w = measure(\" \").width\n\n    // place(dx: -w * 2 - width / 2, dy: -1.15em, top)\n\n    place(dx: -w - width / 2, dy: -1.15em, top)\n    h(width / 2)\n  }\n}\n\n#[\n  #set math.equation(numbering: none)\n  $\n    integral_(RR^(1, d - 1)) frac(1, (l_E^2 + m^2)^A) frac(dd^d l_E, (2 pi)^d)\n    &= 1 / Gamma(A) integral_(RR^(1, d - 1)) integral_0^oo s^(A - 1) e^(-s(l_E^2 + m^2)) dd s thin frac(dd^d l_E, (2 pi)^d) \\\n    &=^(Re(d) > 0) (2 pi^(d / 2)) / (Gamma(A) (2 pi)^d thin Gamma(d / 2)) Gamma(d / 2) / 2 integral_0^oo s^(A - 1) e^(-s m^2) s^(-d / 2) dd s \\\n  $\n]\n```\n\n</details>\n\n![image|449x99](upload://sw48BrPs7vwJS5xy1lcs1KLk9ro.png)\n\n---\n\n[quote=\"reknih, post:1, topic:11\"]\nIt would be great if you could post the **smallest possible code samples** that allow people to see what your problem is.\n[/quote]",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 14.2,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12459,
      "post_number": 3,
      "username": "Paul744",
      "name": "Paul",
      "created_at": "2025-05-14T17:02:50.274Z",
      "updated_at": "2025-05-14T17:02:50.274Z",
      "cooked": "<p>Thank you. And I fixed the original post, including the missing <span class=\"hashtag-raw\">#let</span> dd command and cutting down on the example size.</p>",
      "raw": "Thank you. And I fixed the original post, including the missing #let dd command and cutting down on the example size.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 18,
      "score": 23.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 788
    },
    {
      "id": 12462,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-14T17:43:53.295Z",
      "updated_at": "2025-05-14T17:43:53.295Z",
      "cooked": "<p>Nice. I don’t know if you’ve noticed it, but you also don’t need the countless parentheses around simple super-/subscript values. You shouldn’t overcomplicate an already complex expression. You can also move out repetitive chunks and name them. If the name is short and descriptive, then it should improve overall readability.</p>",
      "raw": "Nice. I don't know if you've noticed it, but you also don't need the countless parentheses around simple super-/subscript values. You shouldn't overcomplicate an already complex expression. You can also move out repetitive chunks and name them. If the name is short and descriptive, then it should improve overall readability.",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 16,
      "score": 8.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12467,
      "post_number": 5,
      "username": "Paul744",
      "name": "Paul",
      "created_at": "2025-05-14T18:15:03.797Z",
      "updated_at": "2025-05-14T18:15:03.797Z",
      "cooked": "<p>I am aware regarding the parentheses. I’ve always just included the extra from the outset, since I find myself regularly enough needing to go back and add more to the subscripts, requiring the parentheses anyways. I think of it as saving time up front, but as I get better, I’ll probably work on anticipating when I really need them.</p>",
      "raw": "I am aware regarding the parentheses. I've always just included the extra from the outset, since I find myself regularly enough needing to go back and add more to the subscripts, requiring the parentheses anyways. I think of it as saving time up front, but as I get better, I'll probably work on anticipating when I really need them.",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 15,
      "score": 3.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 788
    }
  ],
  "scraped_at": "2025-06-10T09:47:52.046575"
}