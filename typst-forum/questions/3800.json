{
  "topic_metadata": {
    "id": 3800,
    "title": "How to create an adaptive vertical line that dynamically spans the height of its containing box/block",
    "slug": "how-to-create-an-adaptive-vertical-line-that-dynamically-spans-the-height-of-its-containing-box-block",
    "posts_count": 13,
    "created_at": "2025-04-25T01:06:15.810Z",
    "last_posted_at": "2025-04-27T11:12:08.135Z",
    "views": 188,
    "like_count": 15,
    "reply_count": 9,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 7,
    "accepted_answer_username": "bluss",
    "tags": [
      "layout",
      "context",
      "layout-containers"
    ],
    "category_id": 5,
    "participant_count": 5,
    "word_count": 1901
  },
  "posts": [
    {
      "id": 11592,
      "post_number": 1,
      "username": "MJ.0",
      "name": "MJ",
      "created_at": "2025-04-25T01:06:15.932Z",
      "updated_at": "2025-04-25T17:36:32.351Z",
      "cooked": "<p>Hello everyone!</p>\n<p>I am trying to create a vertical line that serves as a running rule along the content of a box/block. I am using <code>place()</code> to attach it to the box, but I can’t get the automatic height adjusting for the line.</p>\n<p>My first attempt was</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set page(height: 8cm, width: 8cm, margin: 1em)\n\n#box(\n    width: 4cm,\n    inset: (left: 1.4em, bottom: 1.4em, rest: 1em),\n    radius: 0.4em,\n    fill: blue.lighten(85%)\n    )[\n      #place(\n        horizon + left,\n        dx: -0.4em,\n        // failed vertical line\n        line(\n          angle: 90deg,\n          length: 100%,\n          // start:(0%,0%), // similar approach, same result\n          // end:(0%,100%)\n          )\n        )\n      #lorem(15)\n      ]\n</code></pre>\n<p>Which has output (1) in the photo:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/8/85d5ce0427fba4b20b1961150b37acf0fb7f33ff.png\" data-download-href=\"https://forum.typst.app/uploads/default/85d5ce0427fba4b20b1961150b37acf0fb7f33ff\" title=\"New Project\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/8/85d5ce0427fba4b20b1961150b37acf0fb7f33ff_2_517x255.png\" alt=\"New Project\" data-base62-sha1=\"j5XzQlZ2wXJnZn8wHlVT6G75U0n\" width=\"517\" height=\"255\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/8/85d5ce0427fba4b20b1961150b37acf0fb7f33ff_2_517x255.png, https://forum.typst.app/uploads/default/optimized/2X/8/85d5ce0427fba4b20b1961150b37acf0fb7f33ff_2_775x382.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/8/85d5ce0427fba4b20b1961150b37acf0fb7f33ff_2_1034x510.png 2x\" data-dominant-color=\"D4D5DA\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">New Project</span><span class=\"informations\">1280×631 251 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>I thought it was easily achievable via relative lengths for example (like <code>1fr</code> or <code>100%</code>), thinking that these lengths adapt as the content is within a container and not simply in the page.</p>\n<p>Which they partially do, only adapting to horizontal width of a container, but not vertical. As I tested the dynamic horizontal length by placing another horizontal line as evident from (2) in the picture above.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// added the following to the content of the box\n// to test horizontal dynamic length\n#place(\n        bottom + center,\n        dy: 0.4em,\n        // successful horizontal line\n        line(\n          angle: 0deg,\n          length: 100%,\n          // start:(0%,0%), // similar approach\n          // end:(100%,0%)\n          )\n        )\n</code></pre>\n<hr>\n<p>My next attempt was  to attempt utilizing either <code>measure()</code> or <code>layout()</code> but I can’t seem to get what I am doing wrong, maybe implementing <code>context</code> related ideas is a bit tricky for me.</p>\n<p>My last attempt was to try the create everything in a context block and make a measuring function that I can access from withing the box/block but ended up failing.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let mes(body) = context{\n  let bsize = measure(body)\n  [#bsize #body]\n}\n</code></pre>\n<p>trying to access the value of <code>bsize.height</code> from within the box as it is wrapped in <code>mes()</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#mes[\n  #box(\n    width: 4cm,\n    inset: (left: 1.4em, bottom: 1.4em, rest: 1em),\n    radius: 0.4em,\n    fill: blue.lighten(85%)\n    )[\n      #place(\n        horizon + left,\n        dx: -0.4em,\n        // failed vertical line\n        line(\n          angle: 90deg,\n          length: 100%, // cannot use `#bsize.height`\n          // start:(0%,0%), // similar approach\n          // end:(0%,100%)\n          )\n        )\n      #place(\n        bottom + center,\n        dy: 0.4em,\n        // successful horizontal line\n        line(\n          angle: 0deg,\n          length: 100%,\n          // start:(0%,0%), // similar approach\n          // end:(100%,0%)\n          )\n        )\n      #lorem(15)\n      ]\n]\n</code></pre>\n<p>Which gave:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/7/7bde040876051951e923c669e1da04bd1f75d591.png\" data-download-href=\"https://forum.typst.app/uploads/default/7bde040876051951e923c669e1da04bd1f75d591\" title=\"vh+mes\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/7/7bde040876051951e923c669e1da04bd1f75d591_2_374x375.png\" alt=\"vh+mes\" data-base62-sha1=\"hFMow0LwKe8ZAL6WuxKNu8ie4QV\" width=\"374\" height=\"375\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/7/7bde040876051951e923c669e1da04bd1f75d591_2_374x375.png, https://forum.typst.app/uploads/default/optimized/2X/7/7bde040876051951e923c669e1da04bd1f75d591_2_561x562.png 1.5x, https://forum.typst.app/uploads/default/original/2X/7/7bde040876051951e923c669e1da04bd1f75d591.png 2x\" data-dominant-color=\"D2D4D9\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">vh+mes</span><span class=\"informations\">632×633 213 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>I would like a way to make the vertical line adapt to the size of the container.</p>\n<p>I apologize in advance if I am missing something obvious.</p>",
      "raw": "Hello everyone!\n\nI am trying to create a vertical line that serves as a running rule along the content of a box/block. I am using `place()` to attach it to the box, but I can't get the automatic height adjusting for the line.\n\nMy first attempt was\n```typ\n#set page(height: 8cm, width: 8cm, margin: 1em)\n\n#box(\n    width: 4cm,\n    inset: (left: 1.4em, bottom: 1.4em, rest: 1em),\n    radius: 0.4em,\n    fill: blue.lighten(85%)\n    )[\n      #place(\n        horizon + left,\n        dx: -0.4em,\n        // failed vertical line\n        line(\n          angle: 90deg,\n          length: 100%,\n          // start:(0%,0%), // similar approach, same result\n          // end:(0%,100%)\n          )\n        )\n      #lorem(15)\n      ]\n```\nWhich has output (1) in the photo:\n\n![New Project|690x340, 75%](upload://j5XzQlZ2wXJnZn8wHlVT6G75U0n.png)\n\n\nI thought it was easily achievable via relative lengths for example (like `1fr` or `100%`), thinking that these lengths adapt as the content is within a container and not simply in the page.\n\nWhich they partially do, only adapting to horizontal width of a container, but not vertical. As I tested the dynamic horizontal length by placing another horizontal line as evident from (2) in the picture above.\n\n```typ\n// added the following to the content of the box\n// to test horizontal dynamic length\n#place(\n        bottom + center,\n        dy: 0.4em,\n        // successful horizontal line\n        line(\n          angle: 0deg,\n          length: 100%,\n          // start:(0%,0%), // similar approach\n          // end:(100%,0%)\n          )\n        )\n``` \n\n---\nMy next attempt was  to attempt utilizing either `measure()` or `layout()` but I can't seem to get what I am doing wrong, maybe implementing `context` related ideas is a bit tricky for me.\n\nMy last attempt was to try the create everything in a context block and make a measuring function that I can access from withing the box/block but ended up failing.\n\n```typ\n#let mes(body) = context{\n  let bsize = measure(body)\n  [#bsize #body]\n}\n```\ntrying to access the value of `bsize.height` from within the box as it is wrapped in `mes()`\n\n```typ\n#mes[\n  #box(\n    width: 4cm,\n    inset: (left: 1.4em, bottom: 1.4em, rest: 1em),\n    radius: 0.4em,\n    fill: blue.lighten(85%)\n    )[\n      #place(\n        horizon + left,\n        dx: -0.4em,\n        // failed vertical line\n        line(\n          angle: 90deg,\n          length: 100%, // cannot use `#bsize.height`\n          // start:(0%,0%), // similar approach\n          // end:(0%,100%)\n          )\n        )\n      #place(\n        bottom + center,\n        dy: 0.4em,\n        // successful horizontal line\n        line(\n          angle: 0deg,\n          length: 100%,\n          // start:(0%,0%), // similar approach\n          // end:(100%,0%)\n          )\n        )\n      #lorem(15)\n      ]\n]\n```\nWhich gave:\n\n![vh+mes|499x500, 75%](upload://hFMow0LwKe8ZAL6WuxKNu8ie4QV.png)\n\n\nI would like a way to make the vertical line adapt to the size of the container.\n\nI apologize in advance if I am missing something obvious.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 40,
      "score": 263.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1455
    },
    {
      "id": 11598,
      "post_number": 2,
      "username": "gezepi",
      "name": "",
      "created_at": "2025-04-25T05:54:11.205Z",
      "updated_at": "2025-04-25T05:54:11.205Z",
      "cooked": "<p>Should the line extend to the edges of the blue box?  If it’s ok to only follow the content itself, this is an option:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let distanceToLine = 0.2em\n\n#box(\n  width: 4cm,\n  inset: (left: 1.4em - distanceToLine, bottom: 1.4em, rest: 1em),\n  radius: 0.4em,\n  fill: blue.lighten(85%),\n\n  box(\n    inset: (left: distanceToLine, rest: 0pt),\n    stroke: (left: 1pt),\n    lorem(15)\n  )\n)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/f/ff97cb5202861a682e9ec6283e24fa6c0600557e.png\" alt=\"image\" data-base62-sha1=\"At4YiBl30KoAK8BKL4B1ar62n94\" width=\"203\" height=\"219\"></p>",
      "raw": "Should the line extend to the edges of the blue box?  If it's ok to only follow the content itself, this is an option:\n\n```typ\n#let distanceToLine = 0.2em\n\n#box(\n  width: 4cm,\n  inset: (left: 1.4em - distanceToLine, bottom: 1.4em, rest: 1em),\n  radius: 0.4em,\n  fill: blue.lighten(85%),\n\n  box(\n    inset: (left: distanceToLine, rest: 0pt),\n    stroke: (left: 1pt),\n    lorem(15)\n  )\n)\n```\n![image|203x219](upload://At4YiBl30KoAK8BKL4B1ar62n94.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 37,
      "score": 32.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 11603,
      "post_number": 3,
      "username": "wisperwind",
      "name": "",
      "created_at": "2025-04-25T09:57:44.735Z",
      "updated_at": "2025-04-25T09:57:44.735Z",
      "cooked": "<p>I just played around with this a bit, and it seems that your original example does work when you explicitly specify the <code>height</code> of the box.</p>\n<p>So maybe this is actually a bug where typst does not correctly resolve the box height and falls back to the height of the outer container (the page in this case)?</p>",
      "raw": "I just played around with this a bit, and it seems that your original example does work when you explicitly specify the `height` of the box.\n\nSo maybe this is actually a bug where typst does not correctly resolve the box height and falls back to the height of the outer container (the page in this case)?",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 35,
      "score": 42.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 750
    },
    {
      "id": 11613,
      "post_number": 4,
      "username": "MJ.0",
      "name": "MJ",
      "created_at": "2025-04-25T17:35:05.340Z",
      "updated_at": "2025-04-25T17:35:05.340Z",
      "cooked": "<p>Thanks for your input, it is effective and less cluttery, and avoids the current possible blind spot of Typst’s automatic height resizing.</p>\n<p>but as I played around with the proposed solution…</p>\n<ul>\n<li>I found that adjusting the spacing/padding between the line and and the text is tricky.  I figured out how to change it in hacky way, by changing the <code>outset: (left: length)</code> of the most inner box, which works, but feels inconvenient modifying the in(out)sets of nested boxes.</li>\n<li>I was looking for an extendable solution to tackle sizing the height of lines (as in <code>#line()</code>), or potentially any similar object I can attach to a container, as actual lines or shapes can be combined and be more customizable.<br>\nFor example I was actually working towards something like this:<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/b/bab8d6bef811fd412e030bcca14125ac361f59ac.png\" alt=\"pic\" data-base62-sha1=\"qDOP8YFnAVC6SgMlzcGpsLajLyc\" width=\"443\" height=\"214\"><br>\n(achieved similar results using LaTeX, using concepts like <code>frame.northwest</code> for top left coordinate)</li>\n</ul>\n<p>best I could achieve in Typst so far was:<br>\n<img src=\"https://forum.typst.app/uploads/default/original/2X/f/fbba9112dceba6f6589f7b35837e5acdabb6d8dd.png\" alt=\"Typst_best\" data-base62-sha1=\"zUTyRNcXrqw3xUHURgvFyUrWNdj\" width=\"204\" height=\"193\"></p>\n<p>using the following code:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#set  page(width: 10cm, height: 10cm)\n#set text(size:13pt)\n\n#let distanceToLine = 0.2em\n#box(\n  width: 4cm,\n  inset: (left: 1.4em - distanceToLine, bottom: 1.4em, rest: 1em),\n  radius: 0.4em,\n  fill: blue.lighten(85%),\n\n  box(\n    inset: (left: distanceToLine, rest: 0pt),\n    outset: (left:0.5em),  // to nudge the line \n    stroke: (left: (\n            thickness: 0.3em,\n            paint: blue,\n            cap: \"round\",  // not applying? \n            )\n            ),\n    lorem(10)\n  )\n)\n\n</code></pre>\n<p>I am trying to learn the software, and such cases push me to try understand how to implement a solution using the native tools.</p>\n<p>It is weird that auto-adjust v-length doesn’t work consistently as auto-adjusting h-length inside containers. But if it boils down to a hack or a package (maybe there is a packages that tackles this technicality?) that’s still a win.</p>",
      "raw": "Thanks for your input, it is effective and less cluttery, and avoids the current possible blind spot of Typst's automatic height resizing.\n\nbut as I played around with the proposed solution...\n\n- I found that adjusting the spacing/padding between the line and and the text is tricky.  I figured out how to change it in hacky way, by changing the `outset: (left: length)` of the most inner box, which works, but feels inconvenient modifying the in(out)sets of nested boxes.\n- I was looking for an extendable solution to tackle sizing the height of lines (as in `#line()`), or potentially any similar object I can attach to a container, as actual lines or shapes can be combined and be more customizable.\nFor example I was actually working towards something like this:\n![pic|591x286, 75%](upload://qDOP8YFnAVC6SgMlzcGpsLajLyc.png)\n(achieved similar results using LaTeX, using concepts like `frame.northwest` for top left coordinate)\n\nbest I could achieve in Typst so far was:\n![Typst_best|272x258, 75%](upload://zUTyRNcXrqw3xUHURgvFyUrWNdj.png)\n\n\nusing the following code:\n```typ\n#set  page(width: 10cm, height: 10cm)\n#set text(size:13pt)\n\n#let distanceToLine = 0.2em\n#box(\n  width: 4cm,\n  inset: (left: 1.4em - distanceToLine, bottom: 1.4em, rest: 1em),\n  radius: 0.4em,\n  fill: blue.lighten(85%),\n\n  box(\n    inset: (left: distanceToLine, rest: 0pt),\n    outset: (left:0.5em),  // to nudge the line \n    stroke: (left: (\n            thickness: 0.3em,\n            paint: blue,\n            cap: \"round\",  // not applying? \n            )\n            ),\n    lorem(10)\n  )\n)\n\n``` \n\nI am trying to learn the software, and such cases push me to try understand how to implement a solution using the native tools.\n\nIt is weird that auto-adjust v-length doesn't work consistently as auto-adjusting h-length inside containers. But if it boils down to a hack or a package (maybe there is a packages that tackles this technicality?) that's still a win.",
      "reply_to_post_number": 2,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 1,
      "reads": 34,
      "score": 36.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1455
    },
    {
      "id": 11614,
      "post_number": 5,
      "username": "MJ.0",
      "name": "MJ",
      "created_at": "2025-04-25T17:53:00.537Z",
      "updated_at": "2025-04-25T17:53:00.537Z",
      "cooked": "<p>Oh good find!, I confirmed it,</p>\n<p>and it seems like the height (unless specified) is treated like an open-ended quantity; as you can always add/remove more text, hence changing the height constantly, unlike the width which is either page’s width or specified explicitly.</p>\n<p>whether this is intentional or not, we’d love to have a way to choose one behavior over the other.</p>\n<p>One way this can be bypassed, is to add an option to functions like <code>#line()</code> to explicitly calculate the height of its container rather than falling back to the page’s height.</p>\n<p>Or introduce more location tools like a way to query for <code>frame.topleft</code>.</p>",
      "raw": "Oh good find!, I confirmed it,\n\nand it seems like the height (unless specified) is treated like an open-ended quantity; as you can always add/remove more text, hence changing the height constantly, unlike the width which is either page's width or specified explicitly.\n\nwhether this is intentional or not, we'd love to have a way to choose one behavior over the other.\n\nOne way this can be bypassed, is to add an option to functions like `#line()` to explicitly calculate the height of its container rather than falling back to the page's height.\n\nOr introduce more location tools like a way to query for `frame.topleft`.",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 31,
      "score": 6.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1455
    },
    {
      "id": 11622,
      "post_number": 6,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-04-26T14:31:23.929Z",
      "updated_at": "2025-04-26T14:31:23.929Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"MJ.0\" data-post=\"4\" data-topic=\"3800\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/mj.0/48/2506_2.png\" class=\"avatar\"> MJ.0:</div>\n<blockquote>\n<p>It is weird that auto-adjust v-length doesn’t work consistently as auto-adjusting h-length inside containers.</p>\n</blockquote>\n</aside>\n<p>There is no difference between height and width I don’t think. Your original box - in the first post has a fixed width of 4cm, and that’s why the sizing was ok for the horizontal line and not the vertical line. In the same circumstances (no fixed width/height) horizontal and vertical lines of 100% length behave the same way, which is, filling to page size minus margins.</p>",
      "raw": "[quote=\"MJ.0, post:4, topic:3800\"]\nIt is weird that auto-adjust v-length doesn’t work consistently as auto-adjusting h-length inside containers.\n[/quote]\n\nThere is no difference between height and width I don't think. Your original box - in the first post has a fixed width of 4cm, and that's why the sizing was ok for the horizontal line and not the vertical line. In the same circumstances (no fixed width/height) horizontal and vertical lines of 100% length behave the same way, which is, filling to page size minus margins.",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 1,
      "reads": 29,
      "score": 25.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 11623,
      "post_number": 7,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-04-26T14:42:15.730Z",
      "updated_at": "2025-04-26T14:50:49.557Z",
      "cooked": "<p>Here’s a demo of <code>layout</code> + <code>measure</code> which can sometimes be used to measure size of a part of the document and adapt size of things - like the length of the line. I think it works well in this case. In this case though I would prefer to use block border because it’s a simpler solution. But there are other examples where one has to use layout/measure.</p>\n<p>This takes the code from the first post and adapts it to use layout/measure</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#set page(height: 8cm, width: 8cm, margin: 1em)\n\n/// Call with content to be laid out and a function that will draw the line and the content\n/// the function receives a (width, height) dictionary from layout as its only argument\n#let size-my-line(content, line-func) = {\n  layout(layout-size =&gt; {\n    let laid-out-size = measure(content, ..layout-size)\n    line-func(laid-out-size)\n  })\n}\n\n#box(\n    width: 4cm,\n    inset: (left: 1.4em, bottom: 1.4em, rest: 1em),\n    radius: 0.4em,\n    fill: blue.lighten(85%)\n    )[\n      #let the-text = lorem(15)\n      #size-my-line(the-text, size =&gt; {\n        place(\n          horizon + left,\n          dx: -0.4em,\n          line(\n            angle: 90deg,\n            length: size.height,\n            )\n          )\n        the-text\n        // alternate way (with slightly different spacing by default)\n        /*stack(dir: ltr, spacing: 0.4em)[\n          #line(angle: 90deg, length: size.height)\n        ][#the-text]*/\n      })\n    ]\n\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/3/366743930505087fe3f6059db0cf7c8a15938f49.png\" alt=\"bild\" data-base62-sha1=\"7Lh1zIVWtTrRHxxx90eWfyHHqFr\" width=\"207\" height=\"218\"></p>\n<p>And yes - this solution is still not something that measures the box itself. It just measures the text we want to layout inside the current layout context - remember that’s a box with fixed width 4cm. The layout computation produces a real height as a product of the context with fixed width. Then we size the line according to the text.</p>\n<p>Typst app hover picture: this is the input to the layout, the space <em>available</em>. Note how all the page height minus margin is available more or less.</p>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/1/138cc717229becf9d89a7c27e248b868d11853ec.png\" alt=\"bild\" data-base62-sha1=\"2MWGzUO9JlVMXvEonz9cXKEICG8\" width=\"515\" height=\"195\"></p>",
      "raw": "Here's a demo of `layout` + `measure` which can sometimes be used to measure size of a part of the document and adapt size of things - like the length of the line. I think it works well in this case. In this case though I would prefer to use block border because it's a simpler solution. But there are other examples where one has to use layout/measure.\n\nThis takes the code from the first post and adapts it to use layout/measure\n\n```typst\n#set page(height: 8cm, width: 8cm, margin: 1em)\n\n/// Call with content to be laid out and a function that will draw the line and the content\n/// the function receives a (width, height) dictionary from layout as its only argument\n#let size-my-line(content, line-func) = {\n  layout(layout-size => {\n    let laid-out-size = measure(content, ..layout-size)\n    line-func(laid-out-size)\n  })\n}\n\n#box(\n    width: 4cm,\n    inset: (left: 1.4em, bottom: 1.4em, rest: 1em),\n    radius: 0.4em,\n    fill: blue.lighten(85%)\n    )[\n      #let the-text = lorem(15)\n      #size-my-line(the-text, size => {\n        place(\n          horizon + left,\n          dx: -0.4em,\n          line(\n            angle: 90deg,\n            length: size.height,\n            )\n          )\n        the-text\n        // alternate way (with slightly different spacing by default)\n        /*stack(dir: ltr, spacing: 0.4em)[\n          #line(angle: 90deg, length: size.height)\n        ][#the-text]*/\n      })\n    ]\n\n```\n\n![bild|207x218](upload://7Lh1zIVWtTrRHxxx90eWfyHHqFr.png)\n\nAnd yes - this solution is still not something that measures the box itself. It just measures the text we want to layout inside the current layout context - remember that's a box with fixed width 4cm. The layout computation produces a real height as a product of the context with fixed width. Then we size the line according to the text.\n\nTypst app hover picture: this is the input to the layout, the space *available*. Note how all the page height minus margin is available more or less.\n\n![bild|515x195](upload://2MWGzUO9JlVMXvEonz9cXKEICG8.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 28,
      "score": 55.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 11625,
      "post_number": 8,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-26T22:07:34.735Z",
      "updated_at": "2025-04-26T22:13:23.354Z",
      "cooked": "<p>Here is the styling:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let custom-line(stroke) = line(length: 100%, angle: 90deg, stroke: stroke)\n#let custom-block = block.with(\n  width: 8cm,\n  height: 5.1cm,\n  inset: (left: 2.5em, rest: 1em),\n  radius: 1em,\n  fill: blue.transparentize(70%),\n)\n\n#let block1(body) = custom-block({\n  let line-blue = custom-line((cap: \"round\", thickness: 5pt, paint: blue))\n  place(dx: -1.25em, line-blue)\n  body\n})\n\n#let block2(body) = custom-block({\n  let stroke = (cap: \"round\", thickness: 5pt, paint: red)\n  let line-red-with-square = grid(\n    rows: (1fr, auto, 1fr),\n    row-gutter: 10pt,\n    align: center,\n    custom-line(stroke),\n    square(size: 5pt, stroke: stroke, radius: 3pt),\n    custom-line(stroke),\n  )\n  place(dx: -1.25em - 2.5pt, line-red-with-square)\n  body\n})\n\n#set par(justify: true)\n\n#block1[\n  #lorem(52)\n]\n\n#block2[\n  #lorem(52)\n]\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/0/0686e5ae870bfc75e73a172f006a1378bc699f38.png\" data-download-href=\"https://forum.typst.app/uploads/default/0686e5ae870bfc75e73a172f006a1378bc699f38\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/0/0686e5ae870bfc75e73a172f006a1378bc699f38_2_379x500.png\" alt=\"image\" data-base62-sha1=\"VJSBwhXGKEMpbqUYoun2AyHleU\" width=\"379\" height=\"500\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/0/0686e5ae870bfc75e73a172f006a1378bc699f38_2_379x500.png, https://forum.typst.app/uploads/default/original/2X/0/0686e5ae870bfc75e73a172f006a1378bc699f38.png 1.5x, https://forum.typst.app/uploads/default/original/2X/0/0686e5ae870bfc75e73a172f006a1378bc699f38.png 2x\" data-dominant-color=\"1F3B54\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">465×612 114 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/typst/typst/issues/5741\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/typst/typst/issues/5741\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/typst/typst</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\" data-github-private-repo=\"false\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/typst/typst/issues/5741\" target=\"_blank\" rel=\"noopener nofollow ugc\">Add support for inside/center/outside strokes (change stroke bounding box)</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2025-01-23\" data-time=\"12:32:56\" data-timezone=\"UTC\">12:32PM - 23 Jan 25 UTC</span>\n      </div>\n\n\n      <div class=\"user\">\n        <a href=\"https://github.com/Andrew15-5\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n          <img alt=\"Andrew15-5\" src=\"https://forum.typst.app/uploads/default/original/1X/8c66fc8b1c207ba90488266df18b206a61b1fc49.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"707C3A\">\n          Andrew15-5\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          feature request\n        </span>\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          visualize\n        </span>\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">### Description\n\nCurrently, removing page margin while drawing thicc stroke on i<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">ts border results in a cut-off line. As a result, when you want to leave just the actual content, you must either deal with some blank padding around your figure or whatever, or you must pixel peep the perfect amount of margin to completely remove the emptiness around.\n\n```typ\n#set page(width: auto, height: auto)\n#table(stroke: 5pt, rows: 1cm, columns: 1cm)[][][][][][]\n```\n\n![Image](https://github.com/user-attachments/assets/7bf0f96c-5cc2-4109-82d4-11c2218ed6bb)\n\n```typ\n#set page(width: auto, height: auto, margin: 0pt)\n#table(stroke: 5pt, rows: 1cm, columns: 1cm)[][][][][][]\n```\n\n![Image](https://github.com/user-attachments/assets/aa877962-c2c2-4b9c-b367-abce1c14cc12)\n\nFor a simple example like this, you can just do `margin: 5pt / 2` and be done with it, but it's not always that obvious (maybe).\n\nMaybe this should be a bug report, IDK.\n\n### Use Case\n\nPrimarily when dealing with figures or anything that has a line on the page border, and you want to remove any unnecessary spacing.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
      "raw": "Here is the styling:\n\n```typ\n#let custom-line(stroke) = line(length: 100%, angle: 90deg, stroke: stroke)\n#let custom-block = block.with(\n  width: 8cm,\n  height: 5.1cm,\n  inset: (left: 2.5em, rest: 1em),\n  radius: 1em,\n  fill: blue.transparentize(70%),\n)\n\n#let block1(body) = custom-block({\n  let line-blue = custom-line((cap: \"round\", thickness: 5pt, paint: blue))\n  place(dx: -1.25em, line-blue)\n  body\n})\n\n#let block2(body) = custom-block({\n  let stroke = (cap: \"round\", thickness: 5pt, paint: red)\n  let line-red-with-square = grid(\n    rows: (1fr, auto, 1fr),\n    row-gutter: 10pt,\n    align: center,\n    custom-line(stroke),\n    square(size: 5pt, stroke: stroke, radius: 3pt),\n    custom-line(stroke),\n  )\n  place(dx: -1.25em - 2.5pt, line-red-with-square)\n  body\n})\n\n#set par(justify: true)\n\n#block1[\n  #lorem(52)\n]\n\n#block2[\n  #lorem(52)\n]\n```\n\n![image|379x500](upload://VJSBwhXGKEMpbqUYoun2AyHleU.png)\n\nhttps://github.com/typst/typst/issues/5741",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 5,
      "reads": 26,
      "score": 85.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 11627,
      "post_number": 9,
      "username": "MJ.0",
      "name": "MJ",
      "created_at": "2025-04-26T23:59:28.932Z",
      "updated_at": "2025-04-26T23:59:28.932Z",
      "cooked": "<p>Thank you for the insight, you are right, I stand corrected.</p>\n<p>Playing with containers that have an automatic width yields the same result when creating a <code>100%</code> long line within them!</p>\n<p>I admit that, the correct statement was not that it was inconsistent, but rather, it felt unnatural albeit fair and consistent.</p>",
      "raw": "Thank you for the insight, you are right, I stand corrected.\n\nPlaying with containers that have an automatic width yields the same result when creating a `100%` long line within them!\n\nI admit that, the correct statement was not that it was inconsistent, but rather, it felt unnatural albeit fair and consistent.",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 4.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1455
    },
    {
      "id": 11629,
      "post_number": 10,
      "username": "MJ.0",
      "name": "MJ",
      "created_at": "2025-04-27T00:16:15.006Z",
      "updated_at": "2025-04-27T00:16:15.006Z",
      "cooked": "<p>Brilliant solution, thank you so much. for your time and effort.</p>\n<p>I was fixated on solving things in terms of the box, and not the height of its content.</p>\n<p>just to make sure I benefited from your answer…<br>\nIf I understand correctly, the <code>line-func</code> is a place holder for a function-type input (to abstract the object that will benefit from the size measurement?) for when we called the <code>#size-my-line</code> actually inside the box?</p>",
      "raw": "Brilliant solution, thank you so much. for your time and effort. \n\nI was fixated on solving things in terms of the box, and not the height of its content.\n\njust to make sure I benefited from your answer...\nIf I understand correctly, the `line-func` is a place holder for a function-type input (to abstract the object that will benefit from the size measurement?) for when we called the `#size-my-line` actually inside the box?",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 23,
      "score": 9.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1455
    },
    {
      "id": 11630,
      "post_number": 11,
      "username": "MJ.0",
      "name": "MJ",
      "created_at": "2025-04-27T00:24:02.871Z",
      "updated_at": "2025-04-27T00:24:02.871Z",
      "cooked": "<p>Beautiful work, thanks a lot. I managed to cobble something for the first style, but didn’t know whether to use stack or grid for the compound red line.</p>\n<p>I didn’t know about the stroke issue you pointed out on GitHub. thank you for your efforts.</p>",
      "raw": "Beautiful work, thanks a lot. I managed to cobble something for the first style, but didn't know whether to use stack or grid for the compound red line.\n \nI didn't know about the stroke issue you pointed out on GitHub. thank you for your efforts.",
      "reply_to_post_number": 8,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 23,
      "score": 24.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1455
    },
    {
      "id": 11656,
      "post_number": 12,
      "username": "bluss",
      "name": "Ulrik",
      "created_at": "2025-04-27T09:23:55.203Z",
      "updated_at": "2025-04-27T09:23:55.203Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"MJ.0\" data-post=\"10\" data-topic=\"3800\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/mj.0/48/2506_2.png\" class=\"avatar\"> MJ.0:</div>\n<blockquote>\n<p>If I understand correctly, the <code>line-func</code> is a place holder</p>\n</blockquote>\n</aside>\n<p>Not sure how to explain this best, but line-func is a callback to get the computed size value. We can’t extract this value any other way, can’t return it out of the layout function, so we use a callback. So anything that uses the size value needs to be drawn inside the callback I think.</p>",
      "raw": "[quote=\"MJ.0, post:10, topic:3800\"]\nIf I understand correctly, the `line-func` is a place holder\n[/quote]\n\nNot sure how to explain this best, but line-func is a callback to get the computed size value. We can't extract this value any other way, can't return it out of the layout function, so we use a callback. So anything that uses the size value needs to be drawn inside the callback I think.",
      "reply_to_post_number": 10,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 23,
      "score": 19.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 1272
    },
    {
      "id": 11661,
      "post_number": 13,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-27T11:12:08.135Z",
      "updated_at": "2025-04-27T11:14:35.153Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"MJ.0\" data-post=\"11\" data-topic=\"3800\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/mj.0/48/2506_2.png\" class=\"avatar\"> MJ.0:</div>\n<blockquote>\n<p>didn’t know whether to use stack or grid for the compound red line.</p>\n</blockquote>\n</aside>\n<p>You can use whatever, just need to weigh all pros and cons. I started with <code>stack</code>, because it looks like the perfect contender, and the default <code>dir</code> is already correct, but when I realized the alignment problem (and also the 100% x2), I switched to <code>grid</code>. And because of the stroke not being counted into any bounding box, you need to compensate for half of its thickness in <code>place()</code>. You can automate a lot of it, so you don’t have to manually calculate everything.</p>\n<p>Also, a good tool for working with stroke is</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/t4t:0.4.2\": get\n#get.stroke-dict(red + 5pt)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/2/2a2c895c38449395a756734e6a9d7215cd171fa7.png\" alt=\"image\" data-base62-sha1=\"615tjQIw8uLcIbvMRz7b6oDt7x5\" width=\"222\" height=\"156\"></p>\n<p>But since you’ve mentioned a native way, I didn’t use it.</p>",
      "raw": "[quote=\"MJ.0, post:11, topic:3800\"]\ndidn’t know whether to use stack or grid for the compound red line.\n[/quote]\n\nYou can use whatever, just need to weigh all pros and cons. I started with `stack`, because it looks like the perfect contender, and the default `dir` is already correct, but when I realized the alignment problem (and also the 100% x2), I switched to `grid`. And because of the stroke not being counted into any bounding box, you need to compensate for half of its thickness in `place()`. You can automate a lot of it, so you don't have to manually calculate everything.\n\nAlso, a good tool for working with stroke is\n\n```typ\n#import \"@preview/t4t:0.4.2\": get\n#get.stroke-dict(red + 5pt)\n```\n\n![image|444x313, 50%](upload://615tjQIw8uLcIbvMRz7b6oDt7x5.png)\n\nBut since you've mentioned a native way, I didn't use it.",
      "reply_to_post_number": 11,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 22,
      "score": 19.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:48:42.407028"
}