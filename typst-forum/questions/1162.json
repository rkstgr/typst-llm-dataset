{
  "topic_metadata": {
    "id": 1162,
    "title": "Which parts of syntax can be omitted?",
    "slug": "which-parts-of-syntax-can-be-omitted",
    "posts_count": 4,
    "created_at": "2024-10-17T11:00:37.325Z",
    "last_posted_at": "2024-10-17T13:36:09.114Z",
    "views": 52,
    "like_count": 1,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 3,
    "accepted_answer_username": "sijo",
    "tags": [
      "syntax"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 324
  },
  "posts": [
    {
      "id": 4087,
      "post_number": 1,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-17T11:00:37.500Z",
      "updated_at": "2024-10-17T11:00:37.500Z",
      "cooked": "<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let run-in-head(body) = { text(strong(body)) }\n\n// or\n#let run-in-head(body) = { strong(body) }\n\n\n\n#run-in-head[Lorem ipsum.] Lorem ipsum dolor #text(size: 2em)[sit] amet.\n\n// or\n#run-in-head[Lorem ipsum.] Lorem ipsum dolor #text(2em)[sit] amet.\n</code></pre>\n<p>It seems that all the 4 variations from the example above produce the same output.</p>\n<p>Hence the question, which consists of multiple parts:</p>\n<ul>\n<li>\n<p>Is it really so? That is, is it true that all the 4 variations above are really the same? Or maybe there are some differences between them that will affect the output under some circumstances?</p>\n</li>\n<li>\n<p>What other parts of syntax can be omitted? Is it mentioned somewhere in Typst documentation?</p>\n</li>\n</ul>",
      "raw": "```typ\n#let run-in-head(body) = { text(strong(body)) }\n\n// or\n#let run-in-head(body) = { strong(body) }\n\n\n\n#run-in-head[Lorem ipsum.] Lorem ipsum dolor #text(size: 2em)[sit] amet.\n\n// or\n#run-in-head[Lorem ipsum.] Lorem ipsum dolor #text(2em)[sit] amet.\n```\n\nIt seems that all the 4 variations from the example above produce the same output.\n\nHence the question, which consists of multiple parts:\n\n- Is it really so? That is, is it true that all the 4 variations above are really the same? Or maybe there are some differences between them that will affect the output under some circumstances?\n\n- What other parts of syntax can be omitted? Is it mentioned somewhere in Typst documentation?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 27,
      "score": 80.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 4089,
      "post_number": 3,
      "username": "sijo",
      "name": "",
      "created_at": "2024-10-17T11:10:04.527Z",
      "updated_at": "2024-10-17T11:10:04.527Z",
      "cooked": "<p>I see only two variations in your example:</p>\n<ol>\n<li><code>text(strong(body))</code> vs <code>strong(body)</code></li>\n<li><code>text(size: 2em)</code> vs <code>text(2em)</code>.</li>\n</ol>\n<p>I think both cases are because the <code>text</code> function is a bit special as described <a href=\"https://forum.typst.app/t/how-do-i-read-the-api-documentation-in-regards-to-named-parameters-that-act-positionally/1148/3\">here</a>.</p>\n<p>I don’t know which other functions allow some named arguments to be passed positionally, and how to find out what these arguments are… Probably something that could be better documented.</p>",
      "raw": "I see only two variations in your example:\n\n1. `text(strong(body))` vs `strong(body)`\n2. `text(size: 2em)` vs `text(2em)`.\n\nI think both cases are because the `text` function is a bit special as described [here](https://forum.typst.app/t/how-do-i-read-the-api-documentation-in-regards-to-named-parameters-that-act-positionally/1148/3).\n\nI don't know which other functions allow some named arguments to be passed positionally, and how to find out what these arguments are... Probably something that could be better documented.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 25,
      "score": 25.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 4090,
      "post_number": 4,
      "username": "jsx97",
      "name": "jsx97",
      "created_at": "2024-10-17T11:14:58.763Z",
      "updated_at": "2024-10-17T11:15:26.583Z",
      "cooked": "<p>Thanks, this answers my qustion.</p>\n<p>The “4 variations” I meant are as follows:</p>\n<ol>\n<li><code>text(strong(body))</code> + <code>text(size: 2em)</code></li>\n<li><code>text(strong(body))</code> + <code>text(2em)</code></li>\n<li><code>strong(body)</code> + <code>text(size: 2em)</code></li>\n<li><code>strong(body)</code> + <code>text(2em)</code></li>\n</ol>",
      "raw": "Thanks, this answers my qustion.\n\nThe \"4 variations\" I meant are as follows:\n\n1. `text(strong(body))` + `text(size: 2em)`\n2. `text(strong(body))` + `text(2em)`\n3. `strong(body)` + `text(size: 2em)`\n3. `strong(body)` + `text(2em)`",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 9.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 477
    },
    {
      "id": 4102,
      "post_number": 5,
      "username": "SillyFreak",
      "name": "SillyFreak",
      "created_at": "2024-10-17T13:36:09.114Z",
      "updated_at": "2024-10-17T13:36:09.114Z",
      "cooked": "<p>That you can view the two different variations separately and don’t have to consider all possible combinations is btw called <a href=\"https://en.wikipedia.org/wiki/Orthogonality_(programming)\">orthogonality</a> <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> it’s an important property and desirable design characteristic that lets you keep a good overview of your code, because you don’t need to have all parts in your head in the same time.</p>\n<p>Both separate parts each mean the same, so also the combinations mean the same <img src=\"https://forum.typst.app/images/emoji/apple/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "That you can view the two different variations separately and don't have to consider all possible combinations is btw called [orthogonality](https://en.wikipedia.org/wiki/Orthogonality_(programming)) :slight_smile: it's an important property and desirable design characteristic that lets you keep a good overview of your code, because you don't need to have all parts in your head in the same time. \n\nBoth separate parts each mean the same, so also the combinations mean the same :slight_smile:",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 21,
      "score": 4.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 32
    }
  ],
  "scraped_at": "2025-06-10T09:56:37.873289"
}