{
  "topic_metadata": {
    "id": 3812,
    "title": "How to add a custom array-like field to a custom theorion box?",
    "slug": "how-to-add-a-custom-array-like-field-to-a-custom-theorion-box",
    "posts_count": 5,
    "created_at": "2025-04-26T23:52:03.693Z",
    "last_posted_at": "2025-04-27T17:59:22.044Z",
    "views": 64,
    "like_count": 3,
    "reply_count": 2,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 4,
    "accepted_answer_username": "Andrew",
    "tags": [
      "scripting",
      "packages"
    ],
    "category_id": 5,
    "participant_count": 3,
    "word_count": 1146
  },
  "posts": [
    {
      "id": 11626,
      "post_number": 1,
      "username": "MJ.0",
      "name": "MJ",
      "created_at": "2025-04-26T23:52:03.876Z",
      "updated_at": "2025-04-26T23:52:03.876Z",
      "cooked": "<p>Hello there everyone, I’m trying to learn the software and  explore making &amp; customizing things to learn, and I came across this use case:</p>\n<p>I made a simple custom theorem from the provided template from <code>theorion</code> package.</p>\n<p>I wanted to add some sort of marker I called it <code>suffix</code> (an optional tag for the theorem). Ideally expecting it to have a flexibility when dealing with specifying the arguments like in <code>stroke</code>, or <code>radius</code> for example.</p>\n<p>The goal was to achieve the look in the attached photo.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/5/50b0701c90dae7d09ef18443e4834eeb964cff32.png\" data-download-href=\"https://forum.typst.app/uploads/default/50b0701c90dae7d09ef18443e4834eeb964cff32\" title=\"thm_suffix\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/5/50b0701c90dae7d09ef18443e4834eeb964cff32_2_517x149.png\" alt=\"thm_suffix\" data-base62-sha1=\"bvOdhgK9Arb6rUYbk1BtZzV9KbE\" width=\"517\" height=\"149\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/5/50b0701c90dae7d09ef18443e4834eeb964cff32_2_517x149.png, https://forum.typst.app/uploads/default/optimized/2X/5/50b0701c90dae7d09ef18443e4834eeb964cff32_2_775x223.png 1.5x, https://forum.typst.app/uploads/default/optimized/2X/5/50b0701c90dae7d09ef18443e4834eeb964cff32_2_1034x298.png 2x\" data-dominant-color=\"EAF0F6\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">thm_suffix</span><span class=\"informations\">1185×343 23 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>which I did using the following code:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">/// page setup\n#set page(height: auto, width: 10cm)\n\n#import \"@preview/theorion:0.3.3\": *\n#import cosmos.clouds: *\n\n// tag fnc to define the style\n#let tag(fill: blue, body) = box(\n            radius:0.20em,\n            fill: fill.lighten(80%),\n            inset: (x:0.25em),\n            outset: (y:0.15em)\n            )[\n              #text(size:0.6em)[#body]\n              ]\n\n#show: show-theorion\n\n#let (mytheo-counter, mytheo-box, mytheo, show-mytheo) = make-frame(\n  \"theorem\",\n  \"Theorem\",\n  counter: theorem-counter,\n  inherited-levels: 2,\n  inherited-from: heading,\n  render: (\n    prefix: auto,\n    title: \"\",\n    full-title: auto,\n    suffix: (text:auto,fill: blue), /* // need it to behave like `stroke`  or `radius` */\n    body) =&gt; [\n    #block(\n      fill:blue.lighten(85%),\n      inset: 0.5em,\n      radius: 0.4em,\n      )[\n        *#full-title*\n        #h(1fr)\n        #{  \n          if suffix.text != auto {\n            tag(fill: suffix.fill)[#suffix.text]\n            }\n        }\n        #linebreak()\n        #body\n      ]\n    ]\n)\n\n#show: show-mytheo\n    #mytheo(\n      suffix:(text:\"important\", fill:red) //  both specified, works fine\n      )[\n      #lorem(5)\n      ]\n</code></pre>\n<p>My attempt at implementing <code>suffix</code> was bad but I don’t know how to fix it, it worked in the example above but only because both <code>suffix.text</code> and <code>suffix.fill</code> are explicitly specified.</p>\n<p>But whenever I attempt not specifying at least one of the keys, it no longer renders, and gives the following error as shown below:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#mytheo(\n      suffix:(text:\"important\") //  error: \"dictionary does not contain key \"fill\"\"\n      )[\n      #lorem(5)\n      ]\n</code></pre>\n<ol>\n<li>When I don’t specify the fill arg, I need it to fall back to the default.<br>\nI expect <code>suffix</code> to handle its arguments/parameters with flexibility,  like <code>stroke</code> for example, specifying <code>stroke: 2pt + red</code> is equivalent to <code>stroke: (paint: red, thickness: 2pt)</code>. Any parameter (from the rest) that is not specified, doesn’t fail to return a value, it gives the defaults.</li>\n</ol>\n<p>It doesn’t need to be the same level of flexibility, as this may be reserved to Typst’s native types, but any correction to my current understanding to how to implement this is most welcome.</p>",
      "raw": "Hello there everyone, I'm trying to learn the software and  explore making & customizing things to learn, and I came across this use case:\n\nI made a simple custom theorem from the provided template from `theorion` package.\n\nI wanted to add some sort of marker I called it `suffix` (an optional tag for the theorem). Ideally expecting it to have a flexibility when dealing with specifying the arguments like in `stroke`, or `radius` for example.\n\nThe goal was to achieve the look in the attached photo.\n\n![thm_suffix|690x199, 75%](upload://bvOdhgK9Arb6rUYbk1BtZzV9KbE.png)\n\n\nwhich I did using the following code:\n\n```typ\n/// page setup\n#set page(height: auto, width: 10cm)\n\n#import \"@preview/theorion:0.3.3\": *\n#import cosmos.clouds: *\n\n// tag fnc to define the style\n#let tag(fill: blue, body) = box(\n            radius:0.20em,\n            fill: fill.lighten(80%),\n            inset: (x:0.25em),\n            outset: (y:0.15em)\n            )[\n              #text(size:0.6em)[#body]\n              ]\n\n#show: show-theorion\n\n#let (mytheo-counter, mytheo-box, mytheo, show-mytheo) = make-frame(\n  \"theorem\",\n  \"Theorem\",\n  counter: theorem-counter,\n  inherited-levels: 2,\n  inherited-from: heading,\n  render: (\n    prefix: auto,\n    title: \"\",\n    full-title: auto,\n    suffix: (text:auto,fill: blue), /* // need it to behave like `stroke`  or `radius` */\n    body) => [\n    #block(\n      fill:blue.lighten(85%),\n      inset: 0.5em,\n      radius: 0.4em,\n      )[\n        *#full-title*\n        #h(1fr)\n        #{  \n          if suffix.text != auto {\n            tag(fill: suffix.fill)[#suffix.text]\n            }\n        }\n        #linebreak()\n        #body\n      ]\n    ]\n)\n\n#show: show-mytheo\n    #mytheo(\n      suffix:(text:\"important\", fill:red) //  both specified, works fine\n      )[\n      #lorem(5)\n      ]\n```\nMy attempt at implementing `suffix` was bad but I don't know how to fix it, it worked in the example above but only because both `suffix.text` and `suffix.fill` are explicitly specified.\n\nBut whenever I attempt not specifying at least one of the keys, it no longer renders, and gives the following error as shown below:\n\n```typ\n#mytheo(\n      suffix:(text:\"important\") //  error: \"dictionary does not contain key \"fill\"\"\n      )[\n      #lorem(5)\n      ]\n```\n\n1. When I don't specify the fill arg, I need it to fall back to the default.\n    I expect `suffix` to handle its arguments/parameters with flexibility,  like `stroke` for example, specifying `stroke: 2pt + red` is equivalent to `stroke: (paint: red, thickness: 2pt)`. Any parameter (from the rest) that is not specified, doesn't fail to return a value, it gives the defaults.\n\nIt doesn't need to be the same level of flexibility, as this may be reserved to Typst's native types, but any correction to my current understanding to how to implement this is most welcome.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 99.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1455
    },
    {
      "id": 11628,
      "post_number": 2,
      "username": "vmartel08",
      "name": "Vincent Martel",
      "created_at": "2025-04-27T00:03:13.828Z",
      "updated_at": "2025-04-27T00:03:13.828Z",
      "cooked": "<p>Hi <a class=\"mention\" href=\"/u/mj.0\">@MJ.0</a>, try using an argument sink: <a href=\"https://typst.app/docs/reference/foundations/arguments/\" class=\"inline-onebox\">Arguments Type – Typst Documentation</a></p>",
      "raw": "Hi @MJ.0, try using an argument sink: https://typst.app/docs/reference/foundations/arguments/",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 22,
      "score": 24.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 936
    },
    {
      "id": 11632,
      "post_number": 3,
      "username": "MJ.0",
      "name": "MJ",
      "created_at": "2025-04-27T01:49:07.084Z",
      "updated_at": "2025-04-27T01:49:07.084Z",
      "cooked": "<p>Thank you <a class=\"mention\" href=\"/u/vmartel08\">@vmartel08</a> for the nudge in the right direction, I knew of sink arguments but couldn’t get it right the first time, so I did give it a second more careful try and ended up with a better result!</p>\n<p>I replaced the <code>suffix: (text:auto,fill: blue)</code> with <code>...suffix</code> I knew that from previous attempts,</p>\n<p>yet I didn’t know how to set the defaults for the keys so I assumed I needed a lower level approach. But thanks to your insight, I realized that I missed the option <code>default</code> in definitions/methods like <code>at()</code> which allowed me to set keys with defaults, and now works as expected.</p>\n<p>my latest attempt:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let (mytheo-counter, mytheo-box, mytheo, show-mytheo) = make-frame(\n  \"theorem\",\n  \"Theorem\",\n  counter: theorem-counter,\n  inherited-levels: 2,\n  inherited-from: heading,\n  render: (\n    prefix: auto,\n    title: \"\",\n    full-title: auto,\n    ..suffix,\n    body) =&gt; [\n    #block(\n      fill:blue.lighten(85%),\n      inset: 0.5em,\n      radius: 0.4em,\n      )[\n        *#full-title*\n        #h(1fr)\n        #{  \n          if suffix.at(\"suffix\", default: \"\") != \"\" {\n            tag(fill: suffix.at(\"suffill\", default: blue))[#suffix.at(\"suffix\", default: \"\")]\n            }\n        }\n        #linebreak()\n        #body\n      ]\n    ]\n)\n\n#show: show-mytheo\n    #mytheo(\n      suffix:\"important\",\n      suffill:red, //works as expected\n      )[\n      #lorem(5)\n      ]\n</code></pre>\n<p>This for is more than acceptable, both the text are independent and fall back to defaults. But If you don’t mind me asking, what else do I need to utilize to approach the form <code>suffix:(text:\"important\",)</code> without triggering errors for not specifying the other key?</p>",
      "raw": "Thank you @vmartel08 for the nudge in the right direction, I knew of sink arguments but couldn't get it right the first time, so I did give it a second more careful try and ended up with a better result!\n\nI replaced the `suffix: (text:auto,fill: blue)` with `...suffix` I knew that from previous attempts,\n\nyet I didn't know how to set the defaults for the keys so I assumed I needed a lower level approach. But thanks to your insight, I realized that I missed the option `default` in definitions/methods like `at()` which allowed me to set keys with defaults, and now works as expected.\n\nmy latest attempt:\n```typ\n#let (mytheo-counter, mytheo-box, mytheo, show-mytheo) = make-frame(\n  \"theorem\",\n  \"Theorem\",\n  counter: theorem-counter,\n  inherited-levels: 2,\n  inherited-from: heading,\n  render: (\n    prefix: auto,\n    title: \"\",\n    full-title: auto,\n    ..suffix,\n    body) => [\n    #block(\n      fill:blue.lighten(85%),\n      inset: 0.5em,\n      radius: 0.4em,\n      )[\n        *#full-title*\n        #h(1fr)\n        #{  \n          if suffix.at(\"suffix\", default: \"\") != \"\" {\n            tag(fill: suffix.at(\"suffill\", default: blue))[#suffix.at(\"suffix\", default: \"\")]\n            }\n        }\n        #linebreak()\n        #body\n      ]\n    ]\n)\n\n#show: show-mytheo\n    #mytheo(\n      suffix:\"important\",\n      suffill:red, //works as expected\n      )[\n      #lorem(5)\n      ]\n```\n\nThis for is more than acceptable, both the text are independent and fall back to defaults. But If you don't mind me asking, what else do I need to utilize to approach the form `suffix:(text:\"important\",)` without triggering errors for not specifying the other key?",
      "reply_to_post_number": 2,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 14.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1455
    },
    {
      "id": 11660,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-27T11:04:10.775Z",
      "updated_at": "2025-04-27T22:25:12.861Z",
      "cooked": "<p>I don’t understand where the source of truth is for default values — in <code>tag()</code> or in <code>render: () =&gt; {}</code>. You can define default values inside the closure.</p>\n<p>You can’t get default value automatically by not specifying arguments, because <code>suffix</code> is a named argument. The only way is to provide named arguments separately, like Codly does with <code>codly()</code>.</p>\n<details><summary>Separate arguments approach</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/theorion:0.3.3\": make-frame, theorem-counter\n\n/// Tag function to define the style.\n#let tag(fill: blue, body, ..args) = box(\n  radius: 0.20em,\n  fill: fill.lighten(80%),\n  inset: (x: 0.25em),\n  outset: (y: 0.15em),\n  text(size: 0.6em)[#body],\n  ..args,\n)\n\n/// Tag function to define the style.\n#let render(\n  prefix: auto,\n  title: \"\",\n  full-title: auto,\n  suffix-text: none,\n  suffix-fill: blue,\n  suffix-stroke: 2pt + red,\n  suffix-radius: 0.2em,\n  body,\n) = {\n  let content = {\n    strong(full-title)\n    h(1fr)\n    if suffix-text != none {\n      tag(\n        fill: suffix-fill,\n        stroke: suffix-stroke,\n        radius: suffix-radius,\n      )[#suffix-text]\n    }\n    linebreak()\n    body\n  }\n  block(fill: blue.lighten(85%), inset: 0.5em, radius: 0.4em, content)\n}\n\n#let (mytheo-counter, mytheo-box, mytheo, show-mytheo) = make-frame(\n  \"theorem\",\n  \"Theorem\",\n  counter: theorem-counter,\n  inherited-levels: 2,\n  inherited-from: heading,\n  render: render,\n)\n\n#set page(height: auto, width: 10cm)\n#show: show-mytheo\n\n#mytheo(\n  suffix-text: \"important\",\n  // suffix-fill: red,\n)[\n  #lorem(5)\n]\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/8/8a889db2f2f52d85149e39c3561a415cda58d628.png\" data-download-href=\"https://forum.typst.app/uploads/default/8a889db2f2f52d85149e39c3561a415cda58d628\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/2X/8/8a889db2f2f52d85149e39c3561a415cda58d628_2_690x117.png\" alt=\"image\" data-base62-sha1=\"jLwAxz7tuCrGKU2KtrstUkhNaXK\" width=\"690\" height=\"117\" srcset=\"https://forum.typst.app/uploads/default/optimized/2X/8/8a889db2f2f52d85149e39c3561a415cda58d628_2_690x117.png, https://forum.typst.app/uploads/default/original/2X/8/8a889db2f2f52d85149e39c3561a415cda58d628.png 1.5x, https://forum.typst.app/uploads/default/original/2X/8/8a889db2f2f52d85149e39c3561a415cda58d628.png 2x\" data-dominant-color=\"2C3E4D\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">759×129 15.4 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>\n<p>A less elegant way it to use <code>dictionary</code> (or <code>arguments</code>/<code>sink</code>) and probe for passed argument or specify the default value, which is what you do in <a href=\"https://forum.typst.app/t/how-to-add-a-custom-array-like-field-to-a-custom-theorion-box/3812/3\" class=\"inline-onebox\">How to add a custom array-like field to a custom theorion box? - #3 by MJ.0</a>.</p>\n<details><summary>Dictionary approach</summary>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/theorion:0.3.3\": make-frame, theorem-counter\n\n/// Tag function to define the style.\n#let tag(fill: blue, body, ..args) = box(\n  radius: 0.20em,\n  fill: fill.lighten(80%),\n  inset: (x: 0.25em),\n  outset: (y: 0.15em),\n  text(size: 0.6em)[#body],\n  ..args,\n)\n\n/// Tag function to define the style.\n#let render(prefix: auto, title: \"\", full-title: auto, suffix: none, body) = {\n  let content = {\n    strong(full-title)\n    h(1fr)\n    if type(suffix) == dictionary and suffix.at(\"text\", default: none) != none {\n      let fill = suffix.at(\"fill\", default: blue)\n      let stroke = suffix.at(\"stroke\", default: 2pt + red)\n      let radius = suffix.at(\"radius\", default: 0.2em)\n      tag(fill: fill, stroke: stroke, radius: radius, suffix.text)\n    }\n    linebreak()\n    body\n  }\n  block(fill: blue.lighten(85%), inset: 0.5em, radius: 0.4em, content)\n}\n\n#let (mytheo-counter, mytheo-box, mytheo, show-mytheo) = make-frame(\n  \"theorem\",\n  \"Theorem\",\n  counter: theorem-counter,\n  inherited-levels: 2,\n  inherited-from: heading,\n  render: render,\n)\n\n#set page(height: auto, width: 10cm)\n#show: show-mytheo\n\n#mytheo(suffix: (text: \"important\"))[\n  #lorem(5)\n]\n</code></pre>\n</details>",
      "raw": "I don't understand where the source of truth is for default values — in `tag()` or in `render: () => {}`. You can define default values inside the closure.\n\nYou can't get default value automatically by not specifying arguments, because `suffix` is a named argument. The only way is to provide named arguments separately, like Codly does with `codly()`.\n\n<details><summary>Separate arguments approach</summary>\n\n```typ\n#import \"@preview/theorion:0.3.3\": make-frame, theorem-counter\n\n/// Tag function to define the style.\n#let tag(fill: blue, body, ..args) = box(\n  radius: 0.20em,\n  fill: fill.lighten(80%),\n  inset: (x: 0.25em),\n  outset: (y: 0.15em),\n  text(size: 0.6em)[#body],\n  ..args,\n)\n\n/// Tag function to define the style.\n#let render(\n  prefix: auto,\n  title: \"\",\n  full-title: auto,\n  suffix-text: none,\n  suffix-fill: blue,\n  suffix-stroke: 2pt + red,\n  suffix-radius: 0.2em,\n  body,\n) = {\n  let content = {\n    strong(full-title)\n    h(1fr)\n    if suffix-text != none {\n      tag(\n        fill: suffix-fill,\n        stroke: suffix-stroke,\n        radius: suffix-radius,\n      )[#suffix-text]\n    }\n    linebreak()\n    body\n  }\n  block(fill: blue.lighten(85%), inset: 0.5em, radius: 0.4em, content)\n}\n\n#let (mytheo-counter, mytheo-box, mytheo, show-mytheo) = make-frame(\n  \"theorem\",\n  \"Theorem\",\n  counter: theorem-counter,\n  inherited-levels: 2,\n  inherited-from: heading,\n  render: render,\n)\n\n#set page(height: auto, width: 10cm)\n#show: show-mytheo\n\n#mytheo(\n  suffix-text: \"important\",\n  // suffix-fill: red,\n)[\n  #lorem(5)\n]\n```\n\n![image|690x117](upload://jLwAxz7tuCrGKU2KtrstUkhNaXK.png)\n\n</details>\n\nA less elegant way it to use `dictionary` (or `arguments`/`sink`) and probe for passed argument or specify the default value, which is what you do in https://forum.typst.app/t/how-to-add-a-custom-array-like-field-to-a-custom-theorion-box/3812/3?u=andrew.\n\n<details><summary>Dictionary approach</summary>\n\n```typ\n#import \"@preview/theorion:0.3.3\": make-frame, theorem-counter\n\n/// Tag function to define the style.\n#let tag(fill: blue, body, ..args) = box(\n  radius: 0.20em,\n  fill: fill.lighten(80%),\n  inset: (x: 0.25em),\n  outset: (y: 0.15em),\n  text(size: 0.6em)[#body],\n  ..args,\n)\n\n/// Tag function to define the style.\n#let render(prefix: auto, title: \"\", full-title: auto, suffix: none, body) = {\n  let content = {\n    strong(full-title)\n    h(1fr)\n    if type(suffix) == dictionary and suffix.at(\"text\", default: none) != none {\n      let fill = suffix.at(\"fill\", default: blue)\n      let stroke = suffix.at(\"stroke\", default: 2pt + red)\n      let radius = suffix.at(\"radius\", default: 0.2em)\n      tag(fill: fill, stroke: stroke, radius: radius, suffix.text)\n    }\n    linebreak()\n    body\n  }\n  block(fill: blue.lighten(85%), inset: 0.5em, radius: 0.4em, content)\n}\n\n#let (mytheo-counter, mytheo-box, mytheo, show-mytheo) = make-frame(\n  \"theorem\",\n  \"Theorem\",\n  counter: theorem-counter,\n  inherited-levels: 2,\n  inherited-from: heading,\n  render: render,\n)\n\n#set page(height: auto, width: 10cm)\n#show: show-mytheo\n\n#mytheo(suffix: (text: \"important\"))[\n  #lorem(5)\n]\n```\n\n</details>",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 16,
      "score": 38.0,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 11685,
      "post_number": 5,
      "username": "MJ.0",
      "name": "MJ",
      "created_at": "2025-04-27T17:59:22.044Z",
      "updated_at": "2025-04-27T17:59:22.044Z",
      "cooked": "<p>This was the comprehensive answer I was looking for. Thanks for sharing.<br>\nEspecially the following approach is insightful to me:</p>\n<aside class=\"quote no-group\" data-username=\"Andrew\" data-post=\"4\" data-topic=\"3812\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<p><code>if type(suffix) == dictionary</code></p>\n</blockquote>\n</aside>\n<p>Whether I opt for either method, I managed to learn to ways to do it.</p>",
      "raw": "This was the comprehensive answer I was looking for. Thanks for sharing.\nEspecially the following approach is insightful to me:\n[quote=\"Andrew, post:4, topic:3812\"]\n`if type(suffix) == dictionary`\n[/quote]\n\nWhether I opt for either method, I managed to learn to ways to do it.",
      "reply_to_post_number": 4,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 12,
      "score": 17.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1455
    }
  ],
  "scraped_at": "2025-06-10T09:48:39.596255"
}