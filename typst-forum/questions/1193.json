{
  "topic_metadata": {
    "id": 1193,
    "title": "Is there any simple way of creating a three-line table like Latex?",
    "slug": "is-there-any-simple-way-of-creating-a-three-line-table-like-latex",
    "posts_count": 8,
    "created_at": "2024-10-19T03:27:45.896Z",
    "last_posted_at": "2025-06-04T11:23:55.320Z",
    "views": 627,
    "like_count": 17,
    "reply_count": 3,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 2,
    "accepted_answer_username": "afiaith",
    "tags": [
      "tables",
      "latex-migration"
    ],
    "category_id": 5,
    "participant_count": 6,
    "word_count": 642
  },
  "posts": [
    {
      "id": 4199,
      "post_number": 1,
      "username": "shhuang",
      "name": "",
      "created_at": "2024-10-19T03:27:46.005Z",
      "updated_at": "2024-10-19T11:18:41.246Z",
      "cooked": "<p>In Latex, a three-line table can be created by \\toprule, \\midrule and \\bottomrule. Is there any similar solution in Typst?</p>",
      "raw": "In Latex, a three-line table can be created by \\toprule, \\midrule and \\bottomrule. Is there any similar solution in Typst?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 78,
      "score": 3245.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 556
    },
    {
      "id": 4202,
      "post_number": 2,
      "username": "afiaith",
      "name": "Maja Abramski-Kronenberg",
      "created_at": "2024-10-19T04:14:20.519Z",
      "updated_at": "2024-10-19T04:14:20.519Z",
      "cooked": "<p>Sure. If you look at the documentation of the <a href=\"https://ctan.org/pkg/booktabs/\" rel=\"noopener nofollow ugc\"><code>booktab</code></a> package for LaTeX, you will find these two lengths:</p>\n<pre data-code-wrap=\"tex\"><code class=\"lang-tex\">\\heavyrulewidth=.08em\n\\lightrulewidth=.05em\n</code></pre>\n<p>So we can use them to mimic the <code>booktab</code> look, like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/metalogo:1.0.2\": TeX, LaTeX\n\n#set table(stroke: none)\n\n#let toprule = table.hline(stroke: 0.08em)\n#let bottomrule = toprule\n#let midrule = table.hline(stroke: 0.05em)\n\n#table(\n  columns: 2,\n  toprule,\n  table.header(\n    [Name],\n    [Made public]\n  ),\n  midrule,\n  [Typst], [2023],\n  LaTeX, [1984],\n  TeX, [1978],\n  bottomrule\n)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/5213b63feabbdf0ca8f78eba8edb803ac1fc9b91.png\" alt=\"a\" data-base62-sha1=\"bI5nSxgO9m6jc7kcvwQ0T4QRXwd\" width=\"291\" height=\"236\"></p>",
      "raw": "Sure. If you look at the documentation of the [`booktab`](https://ctan.org/pkg/booktabs/) package for LaTeX, you will find these two lengths:\n```tex\n\\heavyrulewidth=.08em\n\\lightrulewidth=.05em\n```\n\nSo we can use them to mimic the `booktab` look, like this:\n\n```typ\n#import \"@preview/metalogo:1.0.2\": TeX, LaTeX\n\n#set table(stroke: none)\n\n#let toprule = table.hline(stroke: 0.08em)\n#let bottomrule = toprule\n#let midrule = table.hline(stroke: 0.05em)\n\n#table(\n  columns: 2,\n  toprule,\n  table.header(\n    [Name],\n    [Made public]\n  ),\n  midrule,\n  [Typst], [2023],\n  LaTeX, [1984],\n  TeX, [1978],\n  bottomrule\n)\n```\n\n![a|291x236](upload://bI5nSxgO9m6jc7kcvwQ0T4QRXwd.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 3,
      "reads": 77,
      "score": 150.2,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 91
    },
    {
      "id": 4287,
      "post_number": 3,
      "username": "shhuang",
      "name": "",
      "created_at": "2024-10-20T07:47:59.358Z",
      "updated_at": "2024-10-20T07:47:59.358Z",
      "cooked": "<p>Thank you very much!</p>",
      "raw": "Thank you very much!",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 71,
      "score": 19.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 556
    },
    {
      "id": 6275,
      "post_number": 4,
      "username": "meuhor",
      "name": "meuhor",
      "created_at": "2024-12-03T09:41:55.660Z",
      "updated_at": "2024-12-03T09:41:55.660Z",
      "cooked": "<p>Thanks a lot for your answer. How can I make a “three-line table” template or somethings, while there are a lot of tables in a document, and it’s kind of tiring to write “toprule”/“midrule”/“bottomrule” in every table instance.</p>",
      "raw": "Thanks a lot for your answer. How can I make a \"three-line table\" template or somethings, while there are a lot of tables in a document, and it's kind of tiring to write \"toprule\"/\"midrule\"/\"bottomrule\" in every table instance.",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 61,
      "score": 77.0,
      "accepted_answer": false,
      "trust_level": 0,
      "user_id": 883
    },
    {
      "id": 6277,
      "post_number": 5,
      "username": "gezepi",
      "name": "",
      "created_at": "2024-12-03T10:24:22.792Z",
      "updated_at": "2024-12-03T10:24:22.792Z",
      "cooked": "<p>You can create a function that does this for you.  This example takes a list of values as its only argument:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/metalogo:1.0.2\": TeX, LaTeX\n\n#let three-line-table(cells) = {\n  let toprule = table.hline(stroke: 0.08em)\n  let bottomrule = toprule\n  let midrule = table.hline(stroke: 0.05em)\n  table(\n    columns: 2,\n    stroke: none,\n    toprule,\n    table.header(..cells.slice(0, count: 2)),\n    midrule,\n    ..cells.slice(2),\n    bottomrule\n  )\n}\n\n#three-line-table(\n  (\n    [Name], [Made public],\n    [Typst], [2023],\n    LaTeX, [1984],\n    TeX, [1978],\n  )\n)\n</code></pre>\n<details>\n<summary>\nResult</summary>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/8/8e061b44f47385d5306ef5be80c1c60354c8592c.png\" alt=\"image\" data-base62-sha1=\"kgoSNXumVmjyrp2azHm5HG718Ys\" width=\"191\" height=\"149\"></p>\n</details>",
      "raw": "You can create a function that does this for you.  This example takes a list of values as its only argument:\n```typ\n#import \"@preview/metalogo:1.0.2\": TeX, LaTeX\n\n#let three-line-table(cells) = {\n  let toprule = table.hline(stroke: 0.08em)\n  let bottomrule = toprule\n  let midrule = table.hline(stroke: 0.05em)\n  table(\n    columns: 2,\n    stroke: none,\n    toprule,\n    table.header(..cells.slice(0, count: 2)),\n    midrule,\n    ..cells.slice(2),\n    bottomrule\n  )\n}\n\n#three-line-table(\n  (\n    [Name], [Made public],\n    [Typst], [2023],\n    LaTeX, [1984],\n    TeX, [1978],\n  )\n)\n```\n\n[details=\"Result\"]\n![image|191x149](upload://kgoSNXumVmjyrp2azHm5HG718Ys.png)\n[/details]",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 55,
      "score": 65.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 326
    },
    {
      "id": 11616,
      "post_number": 6,
      "username": "afiaith",
      "name": "Maja Abramski-Kronenberg",
      "created_at": "2025-04-25T19:19:01.770Z",
      "updated_at": "2025-04-25T19:19:01.770Z",
      "cooked": "<p>Nice, but the solution you proposed is hard-coded to <code>columns: 2</code>. Here is a more general solution using <a href=\"https://typst.app/docs/reference/foundations/arguments/\"><code>arguments</code></a>; it uses the same arguments as a normal <code>table</code>, but adds another named one called <code>header</code>, which is an array of cells (I don’t know how to extract <code>table.header</code> from the arguments, so I put its content aside as an additional argument).</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/metalogo:1.0.2\": TeX, LaTeX\n\n#set page(\n  width: auto,\n  height: auto,\n  margin: 3em,\n)\n\n#set table(stroke: none)\n\n#let toprule = table.hline(stroke: 0.08em)\n#let bottomrule = toprule\n#let midrule = table.hline(stroke: 0.05em)\n\n#let booktab(..args) = {\n  let named = args.named()\n  let header = named.remove(\"header\")\n  table(\n    ..named,\n    toprule,\n    ..header,\n    midrule,\n    ..args.pos(),\n    bottomrule\n  )\n}\n\n#booktab(\n  columns: 2,\n  header: (\n    [Name],\n    [Made public],\n  ),\n  [Typst], [2023],\n  LaTeX, [1984],\n  TeX, [1978],\n)\n</code></pre>",
      "raw": "Nice, but the solution you proposed is hard-coded to `columns: 2`. Here is a more general solution using [`arguments`](https://typst.app/docs/reference/foundations/arguments/); it uses the same arguments as a normal `table`, but adds another named one called `header`, which is an array of cells (I don’t know how to extract `table.header` from the arguments, so I put its content aside as an additional argument).\n\n```typ\n#import \"@preview/metalogo:1.0.2\": TeX, LaTeX\n\n#set page(\n  width: auto,\n  height: auto,\n  margin: 3em,\n)\n\n#set table(stroke: none)\n\n#let toprule = table.hline(stroke: 0.08em)\n#let bottomrule = toprule\n#let midrule = table.hline(stroke: 0.05em)\n\n#let booktab(..args) = {\n  let named = args.named()\n  let header = named.remove(\"header\")\n  table(\n    ..named,\n    toprule,\n    ..header,\n    midrule,\n    ..args.pos(),\n    bottomrule\n  )\n}\n\n#booktab(\n  columns: 2,\n  header: (\n    [Name],\n    [Made public],\n  ),\n  [Typst], [2023],\n  LaTeX, [1984],\n  TeX, [1978],\n)\n```",
      "reply_to_post_number": 5,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 38,
      "score": 72.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 91
    },
    {
      "id": 11621,
      "post_number": 7,
      "username": "vmartel08",
      "name": "Vincent Martel",
      "created_at": "2025-04-26T13:09:30.459Z",
      "updated_at": "2025-04-26T13:10:26.931Z",
      "cooked": "<p>The <a href=\"https://typst.app/universe/package/rubber-article/\" class=\"inline-onebox\">rubber-article – Typst Universe</a> has a nice and easy way to do it, using <code>ctable</code>:</p>\n<blockquote>\n<p>This function will display a custom table. The table uses the <code>pillar</code> package under the hood to interact with the table in a similar manner as in Latex. This means, that the columns and vertical lines can be defined with a string. Furthermore, the table automatically adds 3 horizontal lines.</p>\n</blockquote>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/rubber-article:0.4.0\": ctable\n\n#ctable(\n  cols:\"l|cr\",\n  [A], [B], [C],\n ..range(1,16).map(str),\n)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/2X/8/8ec87d01c426b2f30ca94c5682c850ec93fecba8.png\" alt=\"image\" data-base62-sha1=\"kn7logEu3LIFFCaY7l69FabtjJK\" width=\"117\" height=\"176\"></p>",
      "raw": "The https://typst.app/universe/package/rubber-article/ has a nice and easy way to do it, using `ctable`: \n\n> This function will display a custom table. The table uses the `pillar` package under the hood to interact with the table in a similar manner as in Latex. This means, that the columns and vertical lines can be defined with a string. Furthermore, the table automatically adds 3 horizontal lines.\n\n```typ\n#import \"@preview/rubber-article:0.4.0\": ctable\n\n#ctable(\n  cols:\"l|cr\",\n  [A], [B], [C],\n ..range(1,16).map(str),\n)\n```\n\n![image|117x176](upload://kn7logEu3LIFFCaY7l69FabtjJK.png)",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 4,
      "reads": 34,
      "score": 76.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 936
    },
    {
      "id": 13682,
      "post_number": 8,
      "username": "Dawnfz",
      "name": "Lingfeng Xiong",
      "created_at": "2025-06-04T11:23:55.320Z",
      "updated_at": "2025-06-04T13:07:55.526Z",
      "cooked": "<p>Actually, a more applicable method is to define a style:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#let three-line-table = it =&gt; {\n  if it.children.any(c =&gt; c.func() == table.hline) {\n    return it\n  }\n\n  let toprule = table.hline(stroke: 0.08em)\n  let bottomrule = toprule\n  let midrule = table.hline(stroke: 0.05em)\n\n  let meta = it.fields()\n  meta.stroke = none\n  meta.remove(\"children\")\n\n  let header = it.children.find(c =&gt; c.func() == table.header)\n  let cells = it.children.filter(c =&gt; c.func() == table.cell)\n  if header == none {\n    let columns = meta.columns.len()\n    header = table.header(..cells.slice(0, columns))\n    cells = cells.slice(columns)\n  }\n\n  return table(\n    ..meta,\n    toprule,\n    header,\n    midrule,\n    ..cells,\n    bottomrule,\n  )\n}\n</code></pre>\n<p>And you can use it as:</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show table: three-line-table\n\n#table(\n  columns: 2,\n  align: center,\n  table.header([*Name*], [*Made public*]),\n  [Typst], [2023],\n  [LaTeX], [1984],\n  [TeX], [1978]\n)\n</code></pre>\n<p>In that way, you don’t need to define additional functions and can use all parameters of table.</p>\n<details>\n<summary>\nResult</summary>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/2X/0/0fa489a9f703f0ab7f4c9d6bc82dad7477b2f130.png\" data-download-href=\"https://forum.typst.app/uploads/default/0fa489a9f703f0ab7f4c9d6bc82dad7477b2f130\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/original/2X/0/0fa489a9f703f0ab7f4c9d6bc82dad7477b2f130.png\" alt=\"image\" data-base62-sha1=\"2enGjL5a5zayBMG2zthMerrBf5m\" width=\"325\" height=\"186\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">325×186 4.71 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n</details>",
      "raw": "Actually, a more applicable method is to define a style:\n```typst\n#let three-line-table = it => {\n  if it.children.any(c => c.func() == table.hline) {\n    return it\n  }\n\n  let toprule = table.hline(stroke: 0.08em)\n  let bottomrule = toprule\n  let midrule = table.hline(stroke: 0.05em)\n\n  let meta = it.fields()\n  meta.stroke = none\n  meta.remove(\"children\")\n\n  let header = it.children.find(c => c.func() == table.header)\n  let cells = it.children.filter(c => c.func() == table.cell)\n  if header == none {\n    let columns = meta.columns.len()\n    header = table.header(..cells.slice(0, columns))\n    cells = cells.slice(columns)\n  }\n\n  return table(\n    ..meta,\n    toprule,\n    header,\n    midrule,\n    ..cells,\n    bottomrule,\n  )\n}\n```\n\nAnd you can use it as:\n```typst\n#show table: three-line-table\n\n#table(\n  columns: 2,\n  align: center,\n  table.header([*Name*], [*Made public*]),\n  [Typst], [2023],\n  [LaTeX], [1984],\n  [TeX], [1978]\n)\n```\nIn that way, you don't need to define additional functions and can use all parameters of table.\n\n[details=\"Result\"]\n![image|325x186](upload://2enGjL5a5zayBMG2zthMerrBf5m.png)\n[/details]",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 3,
      "reads": 16,
      "score": 53.0,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1703
    }
  ],
  "scraped_at": "2025-06-10T09:56:29.693079"
}