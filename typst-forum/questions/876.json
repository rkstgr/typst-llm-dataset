{
  "topic_metadata": {
    "id": 876,
    "title": "How can i display rounded numbers with a specific number of digits in a table? Or, how to turn content into numbers?",
    "slug": "how-can-i-display-rounded-numbers-with-a-specific-number-of-digits-in-a-table-or-how-to-turn-content-into-numbers",
    "posts_count": 7,
    "created_at": "2024-10-02T15:22:43.732Z",
    "last_posted_at": "2024-10-03T19:55:31.474Z",
    "views": 596,
    "like_count": 9,
    "reply_count": 5,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 6,
    "accepted_answer_username": "PgBiel",
    "tags": [
      "tables",
      "text-formatting"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1183
  },
  "posts": [
    {
      "id": 3226,
      "post_number": 1,
      "username": "kescobo",
      "name": "Kevin Bonham",
      "created_at": "2024-10-02T15:22:43.856Z",
      "updated_at": "2024-10-03T19:19:18.382Z",
      "cooked": "<p>I’m on the latest development version of typst</p>\n<pre><code class=\"lang-auto\">❯ typst --version\ntypst 0.11.0 (fcdccc9c)\n</code></pre>\n<p>I have a table with numbers generated by another program, and I’d like to get them all to display as float values with 4 decimal places. For example</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#table(columns:2,\n[Thing], [number],\n[a],     [0.01],\n[b],     [0],\n[c],     [-0.005],\n[d],     [-0.0000001])\n</code></pre>\n<p>I would like to display the same as</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#table(columns:2,\n[Thing], [number],\n[a],     [0.0100],\n[b],     [0.0000],\n[c],     [-0.0050],\n[d],     [-0.0000])\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/9f181bf8435047c709ef62c5e2f971c2ab193ae9.png\" alt=\"image\" data-base62-sha1=\"mHpzrphUQGzQvd1rRidOJQjD8kV\" width=\"258\" height=\"275\"></p>\n<p>At first, I thought I wanted the <code>#calc.round()</code> function and was trying to make some <code>#show</code> rules, but having a couple of problems. The first is that, even if I add the function manually, <code>#calc.round()</code> doesn’t do exactly what I want</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#table(columns:2,\n[Thing], [number],\n[a],     [#calc.round(0.01, digits:4)],\n[b],     [#calc.round(0, digits:4)],\n[c],     [#calc.round(-0.005, digits:4)],\n[d],     [#calc.round(-0.0000001, digits:4)])\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/770006bf8284729e83b2c7c7703aa9a18e3b8003.png\" alt=\"image\" data-base62-sha1=\"gYIShgm8XT0qTeifMK5c8SVm4Ar\" width=\"246\" height=\"285\"></p>\n<p>The second is that I can’t figure out how to get this via a show rule. The closest I got (I think) is something like</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#show table.cell: it =&gt; {\n    if it.x == 1 and it.y != 0 {\n        calc.round(float(it))\n    }\n    else {\n        it\n    }\n}\n</code></pre>\n<p>or the same without the call to <code>float()</code>, and i get</p>\n<pre><code class=\"lang-auto\">error: expected float, boolean, integer, decimal, ratio, or string, found content\n     ┌─ manuscript/main.typ:1076:25\n     │\n1076 │         calc.round(float(it))\n     │                          ^^\n</code></pre>\n<p>My lack of understanding clearly goes deeper, because I also attempted to use the <a href=\"https://github.com/PgBiel/typst-oxifmt\" rel=\"noopener nofollow ugc\">Oxifmt package</a> and</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#import \"@preview/oxifmt:0.2.1\": strfmt\n#table(columns:2,\n[Thing], [number],\n[a],     [#strfmt(\"{0:.4}\", 0.01)],\n[b],     [#strfmt(\"{0:.4}\", 0)],\n[c],     [#strfmt(\"{0:.4}\", -0.005)],\n[d],     [#strfmt(\"{0:.4}\", -0.000001)])\n</code></pre>\n<p>Does the right thing (other than the integer 0, but I can get around that), but when I tried it in a show rule it didn’t work.</p>",
      "raw": "I'm on the latest development version of typst\n\n```\n❯ typst --version\ntypst 0.11.0 (fcdccc9c)\n```\n\nI have a table with numbers generated by another program, and I'd like to get them all to display as float values with 4 decimal places. For example\n\n```typst\n#table(columns:2,\n[Thing], [number],\n[a],     [0.01],\n[b],     [0],\n[c],     [-0.005],\n[d],     [-0.0000001])\n```\n\nI would like to display the same as\n\n```typst\n#table(columns:2,\n[Thing], [number],\n[a],     [0.0100],\n[b],     [0.0000],\n[c],     [-0.0050],\n[d],     [-0.0000])\n```\n\n![image|258x275](upload://mHpzrphUQGzQvd1rRidOJQjD8kV.png)\n\nAt first, I thought I wanted the `#calc.round()` function and was trying to make some `#show` rules, but having a couple of problems. The first is that, even if I add the function manually, `#calc.round()` doesn't do exactly what I want\n\n```typst\n#table(columns:2,\n[Thing], [number],\n[a],     [#calc.round(0.01, digits:4)],\n[b],     [#calc.round(0, digits:4)],\n[c],     [#calc.round(-0.005, digits:4)],\n[d],     [#calc.round(-0.0000001, digits:4)])\n```\n\n![image|246x285](upload://gYIShgm8XT0qTeifMK5c8SVm4Ar.png)\n\nThe second is that I can't figure out how to get this via a show rule. The closest I got (I think) is something like \n\n```typst\n#show table.cell: it => {\n    if it.x == 1 and it.y != 0 {\n        calc.round(float(it))\n    }\n    else {\n        it\n    }\n}\n```\n\nor the same without the call to `float()`, and i get \n\n```\nerror: expected float, boolean, integer, decimal, ratio, or string, found content\n     ┌─ manuscript/main.typ:1076:25\n     │\n1076 │         calc.round(float(it))\n     │                          ^^\n```\n\nMy lack of understanding clearly goes deeper, because I also attempted to use the [Oxifmt package](https://github.com/PgBiel/typst-oxifmt) and\n\n```typst\n#import \"@preview/oxifmt:0.2.1\": strfmt\n#table(columns:2,\n[Thing], [number],\n[a],     [#strfmt(\"{0:.4}\", 0.01)],\n[b],     [#strfmt(\"{0:.4}\", 0)],\n[c],     [#strfmt(\"{0:.4}\", -0.005)],\n[d],     [#strfmt(\"{0:.4}\", -0.000001)])\n```\n\nDoes the right thing (other than the integer 0, but I can get around that), but when I tried it in a show rule it didn't work.",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 58,
      "score": 2946.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 508
    },
    {
      "id": 3240,
      "post_number": 2,
      "username": "ludwig",
      "name": "",
      "created_at": "2024-10-02T17:07:42.709Z",
      "updated_at": "2024-10-02T17:07:42.709Z",
      "cooked": "<p>I advice to do it differently. It seems that you know exactly the structure of the tables you want to create. If you succeed to create the table-show-rule, you would have problems to create other tables. Furthermore, working with the content type can be challenging.</p>\n<p>I would create a function, which gets the data in the structure and <strong>type</strong> you want it to. I.e.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let num-table(..args) = {\n  let header = args.pos().slice(0, 2)\n  let body = args.pos().slice(2)\n  \n  table(\n    columns: 2,\n    table.header(..header),\n    ..body.chunks(2).map(((t, n)) =&gt; (\n      t, str(calc.round(n, digits: 4))\n    )).flatten()\n  )\n}\n\n#num-table(\n[Thing], [number],\n[a],     0.0100,\n[b],     0.0000,\n[c],     -0.0050,\n[d],     -0.0000)\n</code></pre>",
      "raw": "I advice to do it differently. It seems that you know exactly the structure of the tables you want to create. If you succeed to create the table-show-rule, you would have problems to create other tables. Furthermore, working with the content type can be challenging.\n\nI would create a function, which gets the data in the structure and **type** you want it to. I.e.\n\n```typ\n#let num-table(..args) = {\n  let header = args.pos().slice(0, 2)\n  let body = args.pos().slice(2)\n  \n  table(\n    columns: 2,\n    table.header(..header),\n    ..body.chunks(2).map(((t, n)) => (\n      t, str(calc.round(n, digits: 4))\n    )).flatten()\n  )\n}\n\n#num-table(\n[Thing], [number],\n[a],     0.0100,\n[b],     0.0000,\n[c],     -0.0050,\n[d],     -0.0000)\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 51,
      "score": 24.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 300
    },
    {
      "id": 3250,
      "post_number": 3,
      "username": "kescobo",
      "name": "Kevin Bonham",
      "created_at": "2024-10-02T19:13:16.976Z",
      "updated_at": "2024-10-02T19:13:16.976Z",
      "cooked": "<p>Definitely could do this, but in my actual use-case, I have multiple tables with slightly different (and much more complicated) structure, eg</p>\n<pre data-code-wrap=\"typst\"><code class=\"lang-typst\">#figure(\n    caption:[*Longitudinal FSEA, visit 2 stool -&gt; visit 3 VEP*],\n    table(\n        columns: 5,\n        stroke: 0.5pt,\n        table.hline(stroke: 2pt),\n    [Gene set], [Feature], [Component], [Enrichment], [Q value],\n    table.cell(fill: rgb(\"#89CDD8\"))[GABA synthesis],\n        [latency],\n            [N1], [-0.376215897], [0.107325],\n    table.cell(rowspan:3, fill: rgb(\"#89CDD8\"))[Glutamate synthesis],\n        table.cell(rowspan:2)[latency],\n            [N1], [-0.16762197], [0.160915663],\n            [P1], [0.297968912], [0.0159],\n        [amplitude],\n            [P1], [0.23424529], [0.03816],\n    table.cell(rowspan:2, fill: rgb(\"#89CDD8\"))[Glutamate degradation],\n        [latency],\n            [P1], [0.317418013], [0.14045],\n        [amplitude],\n            [N2], [0.282946442], [0.187555102],\n    table.cell(rowspan:2, fill: rgb(\"#82B574\"))[Tryptophan synthesis],\n        table.cell(rowspan:2)[amplitude],\n            [N1], [-0.155489037], [0.060834783],\n            [P1], [0.186539112], [0.029353846],\n//...\n))\n</code></pre>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://forum.typst.app/uploads/default/original/1X/01faad0d88a1299b1223398f241845d149c9211a.png\" data-download-href=\"https://forum.typst.app/uploads/default/01faad0d88a1299b1223398f241845d149c9211a\" title=\"image\"><img src=\"https://forum.typst.app/uploads/default/optimized/1X/01faad0d88a1299b1223398f241845d149c9211a_2_690x287.png\" alt=\"image\" data-base62-sha1=\"hvxZEAMIEVJwC2ekM3XGqf3wFk\" width=\"690\" height=\"287\" srcset=\"https://forum.typst.app/uploads/default/optimized/1X/01faad0d88a1299b1223398f241845d149c9211a_2_690x287.png, https://forum.typst.app/uploads/default/optimized/1X/01faad0d88a1299b1223398f241845d149c9211a_2_1035x430.png 1.5x, https://forum.typst.app/uploads/default/original/1X/01faad0d88a1299b1223398f241845d149c9211a.png 2x\" data-dominant-color=\"C6D8D7\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">1071×446 90.1 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>",
      "raw": "Definitely could do this, but in my actual use-case, I have multiple tables with slightly different (and much more complicated) structure, eg\n\n```typst\n#figure(\n    caption:[*Longitudinal FSEA, visit 2 stool -> visit 3 VEP*],\n    table(\n        columns: 5,\n        stroke: 0.5pt,\n        table.hline(stroke: 2pt),\n    [Gene set], [Feature], [Component], [Enrichment], [Q value],\n    table.cell(fill: rgb(\"#89CDD8\"))[GABA synthesis],\n        [latency],\n            [N1], [-0.376215897], [0.107325],\n    table.cell(rowspan:3, fill: rgb(\"#89CDD8\"))[Glutamate synthesis],\n        table.cell(rowspan:2)[latency],\n            [N1], [-0.16762197], [0.160915663],\n            [P1], [0.297968912], [0.0159],\n        [amplitude],\n            [P1], [0.23424529], [0.03816],\n    table.cell(rowspan:2, fill: rgb(\"#89CDD8\"))[Glutamate degradation],\n        [latency],\n            [P1], [0.317418013], [0.14045],\n        [amplitude],\n            [N2], [0.282946442], [0.187555102],\n    table.cell(rowspan:2, fill: rgb(\"#82B574\"))[Tryptophan synthesis],\n        table.cell(rowspan:2)[amplitude],\n            [N1], [-0.155489037], [0.060834783],\n            [P1], [0.186539112], [0.029353846],\n//...\n))\n```\n\n![image|690x287](upload://hvxZEAMIEVJwC2ekM3XGqf3wFk.png)",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 50,
      "score": 24.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 508
    },
    {
      "id": 3259,
      "post_number": 6,
      "username": "PgBiel",
      "name": "",
      "created_at": "2024-10-03T03:22:43.508Z",
      "updated_at": "2024-10-03T03:23:22.375Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"kescobo\" data-post=\"3\" data-topic=\"876\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/letter_avatar_proxy/v4/letter/k/19798D/48.png\" class=\"avatar\"> kescobo:</div>\n<blockquote>\n<p>Definitely could do this, but in my actual use-case, I have multiple tables with slightly different (and much more complicated) structure</p>\n</blockquote>\n</aside>\n<p>Relating to this, and also tying into your title (“Or, how to turn content into numbers?”): don’t specify your data as content (i.e. with <code>[ ]</code>) directly, only convert it to content when it’s fully processed. <a class=\"mention\" href=\"/u/ludwig\">@ludwig</a>’s suggestion was in the right direction: you’d specify your data as a float (which can be rounded), use oxifmt’s <code>strfmt</code> function to round it to a certain amount of decimals, and only then you convert it to content (by just passing the final string to the table).<br>\nTheir suggested <code>num-table</code> function would only apply this to the second column, but it should be easy enough to generalize this to all floats (or even integers) you specify to the table, regardless of the table’s structure:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/oxifmt:0.2.1\": strfmt\n\n#let num-table(..args) = {\n  table(\n    ..args.pos().map(n =&gt; {\n        if type(n) == float or type(n) == int {\n          // float(n) to ensure integers like '0' are also formatted\n          strfmt(\"{:.4}\", float(n))\n        } else {\n          // Not a number, don't format\n          n\n        }\n      }),\n\n    ..args.named()\n  )\n}\n\n#num-table(\n  columns: 3,\n  table.header([Thing], [number], [other]),\n  [a],     0.0100,  0.5,\n  [b],     0.0000,  0.6,\n  [c],     -0.0050, 0.7,\n  [d],     -0.0000, 0\n)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/fa02c8af820e817fc0d4828098c7880ada157baa.png\" alt=\"output: every number is formatted\" data-base62-sha1=\"zFHkAMMAkFVjG34yyA4BQbsSrJE\" width=\"271\" height=\"197\"></p>",
      "raw": "[quote=\"kescobo, post:3, topic:876\"]\nDefinitely could do this, but in my actual use-case, I have multiple tables with slightly different (and much more complicated) structure\n[/quote]\n\nRelating to this, and also tying into your title (\"Or, how to turn content into numbers?\"): don't specify your data as content (i.e. with `[ ]`) directly, only convert it to content when it's fully processed. @ludwig's suggestion was in the right direction: you'd specify your data as a float (which can be rounded), use oxifmt's `strfmt` function to round it to a certain amount of decimals, and only then you convert it to content (by just passing the final string to the table).\nTheir suggested `num-table` function would only apply this to the second column, but it should be easy enough to generalize this to all floats (or even integers) you specify to the table, regardless of the table's structure:\n\n```typ\n#import \"@preview/oxifmt:0.2.1\": strfmt\n\n#let num-table(..args) = {\n  table(\n    ..args.pos().map(n => {\n        if type(n) == float or type(n) == int {\n          // float(n) to ensure integers like '0' are also formatted\n          strfmt(\"{:.4}\", float(n))\n        } else {\n          // Not a number, don't format\n          n\n        }\n      }),\n\n    ..args.named()\n  )\n}\n\n#num-table(\n  columns: 3,\n  table.header([Thing], [number], [other]),\n  [a],     0.0100,  0.5,\n  [b],     0.0000,  0.6,\n  [c],     -0.0050, 0.7,\n  [d],     -0.0000, 0\n)\n```\n![output: every number is formatted|271x197](upload://zFHkAMMAkFVjG34yyA4BQbsSrJE.png)",
      "reply_to_post_number": 3,
      "reply_count": 0,
      "quote_count": 1,
      "like_count": 1,
      "reads": 44,
      "score": 188.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 3
    },
    {
      "id": 3261,
      "post_number": 7,
      "username": "Mc-Zen",
      "name": "Mc-Zen",
      "created_at": "2024-10-03T06:18:06.550Z",
      "updated_at": "2024-10-03T06:18:06.550Z",
      "cooked": "<p>Hi, this also sounds like something that <a href=\"https://github.com/Mc-Zen/zero\" rel=\"noopener nofollow ugc\">Zero</a> can do for you.</p>\n<h2><a name=\"p-3261-roundtruncate-and-pad-numbers-1\" class=\"anchor\" href=\"#p-3261-roundtruncate-and-pad-numbers-1\"></a>Round/truncate and pad numbers</h2>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"@preview/zero:0.1.0\": ztable\n\n#ztable(\n  columns:2,\n  format: (none, (digits: 4)),\n  [Thing], [number ],\n  [a],     [0.01],\n  [b],     [0],\n  [c],     [-0.005],\n  [d],     [-0.0000001]\n)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/d6b493dbd5b922b7cf428b20b4380c1c9fae8b00.png\" alt=\"image\" data-base62-sha1=\"uDn3Zkzug4iVMq7rOUqX7IHp6dq\" width=\"175\" height=\"175\"></p>\n<p>This will set the number of digits for all numbers in the second column. Note that no rounding but just truncation is performed here. You can additionally configure rounding by passing <code>(round: (mode: \"places\", precision: 4))</code> instead of <code>(digits: 4)</code>.</p>\n<p>Note that this also aligns all numbers at the decimal point, so the minus sign won’t become a problem.</p>\n<p><em>On a side note: I don’t know your precise use-case but if you add trailing 0’s to a value in a scientific context of measured quantities, it suggests that your measurement precision is higher (than it maybe was). You might want to be aware of this in that case.</em></p>\n<h2><a name=\"p-3261-just-align-the-numbers-2\" class=\"anchor\" href=\"#p-3261-just-align-the-numbers-2\"></a>Just align the numbers</h2>\n<p>If you just want the alignment, then</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#ztable(\n  columns: 2,\n  format: (none, auto),\n  [Thing], [number ],\n  [a],     [0.01],\n ...\n)\n</code></pre>\n<p>will do the trick.<br>\n<img src=\"https://forum.typst.app/uploads/default/original/1X/919dbb3d300ae4fb95734b48e2a7aca90e050994.png\" alt=\"image\" data-base62-sha1=\"kMbaC2sOWFTg4rsTWcKxgoOTbuY\" width=\"210\" height=\"167\"><br>\nOr if you still want to round the numbers that are too long:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#ztable(\n  columns: 2,\n  format: (none, (round: (mode: \"places\", precision: 4, pad: false))),\n  [Thing], [number ],\n  [a],     [0.01],\n ...\n)\n</code></pre>\n<p><img src=\"https://forum.typst.app/uploads/default/original/1X/918a58e0a2e0ffb976c56913f8da130c0f42c616.png\" alt=\"image\" data-base62-sha1=\"kLvDIL5OYCDa3C2gvGOYurmgRSK\" width=\"162\" height=\"167\"></p>",
      "raw": "Hi, this also sounds like something that [Zero](https://github.com/Mc-Zen/zero) can do for you. \n\n## Round/truncate and pad numbers\n\n```typ\n#import \"@preview/zero:0.1.0\": ztable\n\n#ztable(\n  columns:2,\n  format: (none, (digits: 4)),\n  [Thing], [number ],\n  [a],     [0.01],\n  [b],     [0],\n  [c],     [-0.005],\n  [d],     [-0.0000001]\n)\n```\n![image|234x234, 75%](upload://uDn3Zkzug4iVMq7rOUqX7IHp6dq.png)\n\nThis will set the number of digits for all numbers in the second column. Note that no rounding but just truncation is performed here. You can additionally configure rounding by passing `(round: (mode: \"places\", precision: 4))` instead of `(digits: 4)`. \n\nNote that this also aligns all numbers at the decimal point, so the minus sign won't become a problem. \n\n_On a side note: I don't know your precise use-case but if you add trailing 0's to a value in a scientific context of measured quantities, it suggests that your measurement precision is higher (than it maybe was). You might want to be aware of this in that case._\n\n## Just align the numbers\n\nIf you just want the alignment, then\n```typ\n#ztable(\n  columns: 2,\n  format: (none, auto),\n  [Thing], [number ],\n  [a],     [0.01],\n ...\n)\n```\nwill do the trick. \n![image|281x223, 75%](upload://kMbaC2sOWFTg4rsTWcKxgoOTbuY.png)\nOr if you still want to round the numbers that are too long:\n```typ\n#ztable(\n  columns: 2,\n  format: (none, (round: (mode: \"places\", precision: 4, pad: false))),\n  [Thing], [number ],\n  [a],     [0.01],\n ...\n)\n```\n![image|217x223, 75%](upload://kLvDIL5OYCDa3C2gvGOYurmgRSK.png)",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 5,
      "reads": 36,
      "score": 141.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 9
    },
    {
      "id": 3356,
      "post_number": 8,
      "username": "kescobo",
      "name": "Kevin Bonham",
      "created_at": "2024-10-03T19:33:47.001Z",
      "updated_at": "2024-10-03T19:33:47.001Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Mc-Zen\" data-post=\"7\" data-topic=\"876\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/mc-zen/48/234_2.png\" class=\"avatar\"> Mc-Zen:</div>\n<blockquote>\n<p>something that Zero can do for you.</p>\n</blockquote>\n</aside>\n<p>Oh, this looks great, thanks! I decided to flag the previous post as the answer, because it answers the question I asked a bit more directly, but I definitely think I will use Zero in my actual document <img src=\"https://forum.typst.app/images/emoji/apple/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
      "raw": "[quote=\"Mc-Zen, post:7, topic:876\"]\nsomething that Zero can do for you.\n[/quote]\n\nOh, this looks great, thanks! I decided to flag the previous post as the answer, because it answers the question I asked a bit more directly, but I definitely think I will use Zero in my actual document :wink:",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 1,
      "reads": 27,
      "score": 35.2,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 508
    },
    {
      "id": 3359,
      "post_number": 9,
      "username": "Mc-Zen",
      "name": "Mc-Zen",
      "created_at": "2024-10-03T19:55:31.474Z",
      "updated_at": "2024-10-03T19:55:31.474Z",
      "cooked": "<p>Sure :)</p>\n<p>By the way, starting tomorrow (or the day after), I recommend using <code>zero:0.2.0</code> which features significant performance upgrades. I released the new version today and presumably it will be merged to the package manager in a day or so.</p>",
      "raw": "Sure :) \n\nBy the way, starting tomorrow (or the day after), I recommend using `zero:0.2.0` which features significant performance upgrades. I released the new version today and presumably it will be merged to the package manager in a day or so.",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 2,
      "reads": 27,
      "score": 35.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 9
    }
  ],
  "scraped_at": "2025-06-10T09:57:31.214495"
}