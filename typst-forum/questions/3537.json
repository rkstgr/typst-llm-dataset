{
  "topic_metadata": {
    "id": 3537,
    "title": "What is the \"Typst-way\" mental model around templates with shared logic and defaults?",
    "slug": "what-is-the-typst-way-mental-model-around-templates-with-shared-logic-and-defaults",
    "posts_count": 10,
    "created_at": "2025-04-07T11:16:48.833Z",
    "last_posted_at": "2025-04-08T18:45:50.195Z",
    "views": 189,
    "like_count": 3,
    "reply_count": 8,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 8,
    "accepted_answer_username": "Andrew",
    "tags": [
      "scripting",
      "layout",
      "templates"
    ],
    "category_id": 5,
    "participant_count": 2,
    "word_count": 1849
  },
  "posts": [
    {
      "id": 10711,
      "post_number": 1,
      "username": "a_w",
      "name": "Alex",
      "created_at": "2025-04-07T11:16:48.993Z",
      "updated_at": "2025-04-07T13:43:45.340Z",
      "cooked": "<p>I know the official “Making a Template” tutorial and I’ve looked at <a href=\"https://forum.typst.app/t/1042\" class=\"inline-onebox\">Why is the template function I wrote not working properly?</a> as well as <a href=\"https://forum.typst.app/t/2967\" class=\"inline-onebox\">How can I load configuration and defined in another .typ file?</a> who had somewhat similiar questions. I sense that more people have problems with the mental model around templates and Typst, and so do I. Therefore I wanted to “update” my understanding, to get it right.</p>\n<p>Say you <strong>don’t</strong> want a “template” in the sense that the same document should be reproduced in version A and B e.g. a report that follows the same exact structure with slight differences.</p>\n<p><strong>But</strong> say a slide deck and a handout that share common logic (e.g. helper functions of some kind) and elements (e.g. headlines styled a certain way). What is the state of play or mental model to achieve this?</p>\n<p>To showcase what I mean, say you have a…</p>\n<p><code>main.typ</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"template.typ\": *\n#show: template\n\n// This doesn't work, but should show the \"idea\":\n// ↓ how to \"override\" this in a way that actually works\n#let highlight-color = blue\n\nThis should be #colorize(\"red\") by default, but #colorize(\"blue\") in after setting the `highlight-color` to blue. As should #colorbox(\"this\").\n</code></pre>\n<p>and a…</p>\n<p><code>template.typ</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">// Setting defaults\n#let highlight-color = red\n\n// Common logic/functions\n#let colorize(body) = {\n  set text(highlight-color)\n  body\n}\n\n#let colorbox(body) = {\n  box(fill: highlight-color, body)\n}\n\n#let template(doc) = {\n  doc\n}\n</code></pre>\n<p>What my example should showcase is what “my” understanding (and as it seems it is a quite common question or confusion) of what I would like to do with a template and the way Typst handles templates, includes and imports are still a bit at odds.</p>\n<p>There is <code>.with()</code> but as I understand it this requires a function that produces “the same” document, just with different arguments.</p>\n<p>What I would want to achieve is “just” shared logic and defaults for related documents. Is this possible too and just a matter of scope and wrapping everything in a function that does nothing further or not possible at all?</p>",
      "raw": "I know the official \"Making a Template\" tutorial and I've looked at https://forum.typst.app/t/1042 as well as https://forum.typst.app/t/2967 who had somewhat similiar questions. I sense that more people have problems with the mental model around templates and Typst, and so do I. Therefore I wanted to \"update\" my understanding, to get it right.\n\nSay you **don't** want a \"template\" in the sense that the same document should be reproduced in version A and B e.g. a report that follows the same exact structure with slight differences.\n\n**But** say a slide deck and a handout that share common logic (e.g. helper functions of some kind) and elements (e.g. headlines styled a certain way). What is the state of play or mental model to achieve this?\n\nTo showcase what I mean, say you have a…\n\n`main.typ`\n```typ\n#import \"template.typ\": *\n#show: template\n\n// This doesn't work, but should show the \"idea\":\n// ↓ how to \"override\" this in a way that actually works\n#let highlight-color = blue\n\nThis should be #colorize(\"red\") by default, but #colorize(\"blue\") in after setting the `highlight-color` to blue. As should #colorbox(\"this\").\n```\n\nand a…\n\n`template.typ`\n```typ\n// Setting defaults\n#let highlight-color = red\n\n// Common logic/functions\n#let colorize(body) = {\n  set text(highlight-color)\n  body\n}\n\n#let colorbox(body) = {\n  box(fill: highlight-color, body)\n}\n\n#let template(doc) = {\n  doc\n}\n```\n\nWhat my example should showcase is what \"my\" understanding (and as it seems it is a quite common question or confusion) of what I would like to do with a template and the way Typst handles templates, includes and imports are still a bit at odds.\n\nThere is `.with()` but as I understand it this requires a function that produces \"the same\" document, just with different arguments.\n\nWhat I would want to achieve is \"just\" shared logic and defaults for related documents. Is this possible too and just a matter of scope and wrapping everything in a function that does nothing further or not possible at all?",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 51,
      "score": 180.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 566
    },
    {
      "id": 10721,
      "post_number": 2,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-07T14:04:26.376Z",
      "updated_at": "2025-04-07T14:07:15.399Z",
      "cooked": "<p>This is very close to what was discussed in <a href=\"https://forum.typst.app/t/how-can-i-have-global-configuration-parameters-for-a-module-package/3365\" class=\"inline-onebox\">How can I have global configuration parameters for a module/package?</a>.</p>\n<p>It’s not a mental model, it’s the definition of the language, more specifically — Typst is based on pure functions because it can cache the function input &amp; output and later reuse the output if the cache hit occurs. Hence why the fast incremental compilation exists. It’s a mix of procedural and functional programming, so it can be hard to grasp without any practice.</p>\n<p>Basically, because all user functions are pure, you have to change their input to get a different output. Which is why you can’t change a default value simply by creating a same-name variable in a file where you import an already baked function and then expect that function to use the new local variable to change its behavior. You either:</p>\n<ul>\n<li>change function’s named argument directly or through <code>.with()</code> (<code>#let a-thing = a-thing.with(a: 5)</code>),</li>\n<li>change function’s positional arguments when used (can be also set + consumed via <code>.with()</code>),</li>\n<li>change a state that the function uses to retrieve a value (need to use <code>context</code> outside or internally).</li>\n</ul>\n<p>Same with show rule functions, but instead of using it in-place, you use it on the right side of a show rule.</p>",
      "raw": "This is very close to what was discussed in https://forum.typst.app/t/how-can-i-have-global-configuration-parameters-for-a-module-package/3365.\n\nIt's not a mental model, it's the definition of the language, more specifically --- Typst is based on pure functions because it can cache the function input & output and later reuse the output if the cache hit occurs. Hence why the fast incremental compilation exists. It's a mix of procedural and functional programming, so it can be hard to grasp without any practice.\n\nBasically, because all user functions are pure, you have to change their input to get a different output. Which is why you can't change a default value simply by creating a same-name variable in a file where you import an already baked function and then expect that function to use the new local variable to change its behavior. You either:\n- change function's named argument directly or through `.with()` (`#let a-thing = a-thing.with(a: 5)`),\n- change function's positional arguments when used (can be also set + consumed via `.with()`),\n- change a state that the function uses to retrieve a value (need to use `context` outside or internally).\n\nSame with show rule functions, but instead of using it in-place, you use it on the right side of a show rule.",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 47,
      "score": 14.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 10722,
      "post_number": 3,
      "username": "a_w",
      "name": "Alex",
      "created_at": "2025-04-07T14:24:06.762Z",
      "updated_at": "2025-04-07T14:30:12.499Z",
      "cooked": "<p>Ah! Thank you, I didn’t find that question, maybe because it was framed a little different in terms focus on modules/packages. The mentioned <a href=\"https://forum.typst.app/t/228\" class=\"inline-onebox\">What is the best way to retrieve template argument outside the template?</a> is another one. Funny how users, myself included, chose very similar ways of showcasing independent from each other.</p>\n<p>In your answer in the other thread, you gave a couple of examples, out of the variants not relying on <code>state</code> did or do you use one of the approaches yourself and would recommend it based on your experiences?</p>",
      "raw": "Ah! Thank you, I didn't find that question, maybe because it was framed a little different in terms focus on modules/packages. The mentioned https://forum.typst.app/t/228 is another one. Funny how users, myself included, chose very similar ways of showcasing independent from each other.\n\nIn your answer in the other thread, you gave a couple of examples, out of the variants not relying on `state` did or do you use one of the approaches yourself and would recommend it based on your experiences?",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 45,
      "score": 14.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 566
    },
    {
      "id": 10723,
      "post_number": 4,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-07T14:37:58.715Z",
      "updated_at": "2025-04-07T14:37:58.715Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"a_w\" data-post=\"3\" data-topic=\"3537\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/a_w/48/1206_2.png\" class=\"avatar\"> a_w:</div>\n<blockquote>\n<p>In your answer in the other thread, you gave a couple of examples, out of the variants not relying on <code>state</code> did or do you use one of the approaches yourself and would recommend it based on your experiences?</p>\n</blockquote>\n</aside>\n<p>Can you list the approaches in question?</p>",
      "raw": "[quote=\"a_w, post:3, topic:3537\"]\nIn your answer in the other thread, you gave a couple of examples, out of the variants not relying on `state` did or do you use one of the approaches yourself and would recommend it based on your experiences?\n[/quote]\n\nCan you list the approaches in question?",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 44,
      "score": 13.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 10724,
      "post_number": 5,
      "username": "a_w",
      "name": "Alex",
      "created_at": "2025-04-07T14:55:50.851Z",
      "updated_at": "2025-04-07T15:01:13.685Z",
      "cooked": "<p>You mentioned using an <code>init</code> function for rubby and I guess the other approach I would find the most accessible (in terms of “looks”) would be the <code>colorize.with(color: blue)</code>, but I wonder what I “should” use (I know of course it is depending on what <em>should</em> be achieved), but taking my example for a basic case for two somewhat related documents and wanting to switch things like font sizes, colors, page margins, what is most maintainable in your opinion and/or experience?</p>",
      "raw": "You mentioned using an `init` function for rubby and I guess the other approach I would find the most accessible (in terms of \"looks\") would be the `colorize.with(color: blue)`, but I wonder what I \"should\" use (I know of course it is depending on what *should* be achieved), but taking my example for a basic case for two somewhat related documents and wanting to switch things like font sizes, colors, page margins, what is most maintainable in your opinion and/or experience?",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 40,
      "score": 18.0,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 566
    },
    {
      "id": 10725,
      "post_number": 6,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-07T15:16:09.018Z",
      "updated_at": "2025-04-07T15:22:55.911Z",
      "cooked": "<p>I think currently the most maintainable approach is to put all generic document styling into a single template function with some optional arguments for use with <code>.with()</code>. So things like <code>title</code> and <code>author</code> can be added as named arguments to the <code>template()</code> function. You can put the font size and page margins there as well, but you can also just set them separately after applying the template</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show: template\n#set page(margin: 1.11cm)\n#set text(14pt)\n</code></pre>\n<p>if template doesn’t set them or doesn’t use the needed values. This is the preferred or the only way when using someone’s template, since it can be not as customizable via its template function. But sometimes neither will work, in which case you would have to ask for a feature request or patch it yourself.</p>\n<p>A standalone function should use named arguments that can be overridden at the call site or via <code>.with()</code>. But sometimes a <code>let colorize(color, body)</code> is better suited as you can shorten the call statement by not using a named argument, though the <code>.with()</code> will be the same with an exception that it can only be used once.</p>\n<p>The init function I thing is pretty niche and in case with rubby, it can be avoided by just changing the arguments, so that you can just do <code>#let r = ruby.with(dy: 1pt)</code>.</p>\n<p>This is a general adivice, so the use of <code>state</code> might be better in a specific cituation. As with everything, the 6th sense comes with practice. Just try to make things as simple as possible without too much abstractions, if you can. With practice you will be able to know which approach is better suited for which use case. Sometimes (or maybe almost always) it’s just not worth it building a super complex logic just to not write a couple of characters, or something. Been there, done that.</p>",
      "raw": "I think currently the most maintainable approach is to put all generic document styling into a single template function with some optional arguments for use with `.with()`. So things like `title` and `author` can be added as named arguments to the `template()` function. You can put the font size and page margins there as well, but you can also just set them separately after applying the template\n\n```typ\n#show: template\n#set page(margin: 1.11cm)\n#set text(14pt)\n```\n\nif template doesn't set them or doesn't use the needed values. This is the preferred or the only way when using someone's template, since it can be not as customizable via its template function. But sometimes neither will work, in which case you would have to ask for a feature request or patch it yourself.\n\nA standalone function should use named arguments that can be overridden at the call site or via `.with()`. But sometimes a `let colorize(color, body)` is better suited as you can shorten the call statement by not using a named argument, though the `.with()` will be the same with an exception that it can only be used once.\n\nThe init function I thing is pretty niche and in case with rubby, it can be avoided by just changing the arguments, so that you can just do `#let r = ruby.with(dy: 1pt)`.\n\nThis is a general adivice, so the use of `state` might be better in a specific cituation. As with everything, the 6th sense comes with practice. Just try to make things as simple as possible without too much abstractions, if you can. With practice you will be able to know which approach is better suited for which use case. Sometimes (or maybe almost always) it's just not worth it building a super complex logic just to not write a couple of characters, or something. Been there, done that.",
      "reply_to_post_number": 5,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 1,
      "reads": 38,
      "score": 42.6,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 10726,
      "post_number": 7,
      "username": "a_w",
      "name": "Alex",
      "created_at": "2025-04-07T17:18:01.750Z",
      "updated_at": "2025-04-07T17:20:23.401Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Andrew\" data-post=\"6\" data-topic=\"3537\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<p>I think currently the most maintainable approach is to put all generic document styling into a single template function with some optional arguments for use with <code>.with()</code>.</p>\n</blockquote>\n</aside>\n<p>So do I understand you correctly that this would turn my example into something like this:</p>\n<p><code>main.typ</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"template.typ\": *\n#show: template.with(headline-size: 18pt)\n\n#set page(margin: (top: 10%))\n#set text(size: 12pt, font: \"Libertinus Sans\")\n\n#let colorize = colorize.with(color: blue)\n#let colorbox = colorbox.with(color: blue)\n\n= Headline\n\nThis should be #colorize(\"red\") by default, but #colorize(\"blue\") in after setting the `highlight-color` to blue. As should #colorbox(\"this\").\n</code></pre>\n<p>and</p>\n<p><code>template.typ</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let colorize(body, color: red) = {\n  set text(color)\n  body\n}\n\n#let colorbox(body, color: red) = {\n  box(fill: color, body)\n}\n\n#let template(doc, headline-size: 12pt) = {\n \n  set page(margin: (top: 5%))\n  set text(size: 12pt, font: \"Comic Neue\")\n\n  show heading: set text(size: headline-size)\n  \n  doc\n}\n</code></pre>\n<p>Would you say this means… in terms of rules (for myself!):</p>\n<ul>\n<li>Just leave everything that can be <code>set</code> and is “procedural” so to speak as is in the template (meaning no further adaption for a template/variation setup needed)</li>\n<li>Standalone functions get named arguments that can be directly modified using <code>.with</code></li>\n<li>Show-Rules are either left out of the template (and stay in each seperate file) altogether or get arguments on the template function if they really should be shared</li>\n<li>… missing something?</li>\n</ul>\n<p>(Mind that I’m controlling both ends here, the templates as well as the file for the specific case/output in my example slide deck vs. handout or whatever.)</p>",
      "raw": "[quote=\"Andrew, post:6, topic:3537\"]\nI think currently the most maintainable approach is to put all generic document styling into a single template function with some optional arguments for use with `.with()`.\n[/quote]\n\nSo do I understand you correctly that this would turn my example into something like this:\n\n`main.typ`\n```typ\n#import \"template.typ\": *\n#show: template.with(headline-size: 18pt)\n\n#set page(margin: (top: 10%))\n#set text(size: 12pt, font: \"Libertinus Sans\")\n\n#let colorize = colorize.with(color: blue)\n#let colorbox = colorbox.with(color: blue)\n\n= Headline\n\nThis should be #colorize(\"red\") by default, but #colorize(\"blue\") in after setting the `highlight-color` to blue. As should #colorbox(\"this\").\n```\n\nand\n\n`template.typ`\n```typ\n#let colorize(body, color: red) = {\n  set text(color)\n  body\n}\n\n#let colorbox(body, color: red) = {\n  box(fill: color, body)\n}\n\n#let template(doc, headline-size: 12pt) = {\n \n  set page(margin: (top: 5%))\n  set text(size: 12pt, font: \"Comic Neue\")\n\n  show heading: set text(size: headline-size)\n  \n  doc\n}\n```\n\nWould you say this means… in terms of rules (for myself!):\n- Just leave everything that can be `set` and is \"procedural\" so to speak as is in the template (meaning no further adaption for a template/variation setup needed)\n- Standalone functions get named arguments that can be directly modified using `.with`\n- Show-Rules are either left out of the template (and stay in each seperate file) altogether or get arguments on the template function if they really should be shared\n- … missing something?\n\n(Mind that I'm controlling both ends here, the templates as well as the file for the specific case/output in my example slide deck vs. handout or whatever.)",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 34,
      "score": 11.8,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 566
    },
    {
      "id": 10737,
      "post_number": 8,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-07T20:41:54.946Z",
      "updated_at": "2025-04-07T20:42:41.123Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"a_w\" data-post=\"7\" data-topic=\"3537\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/a_w/48/1206_2.png\" class=\"avatar\"> a_w:</div>\n<blockquote>\n<p>So do I understand you correctly that this would turn my example into something like this:</p>\n<p><code>main.typ</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#import \"template.typ\": *\n#show: template.with(headline-size: 18pt)\n\n#set page(margin: (top: 10%))\n#set text(size: 12pt, font: \"Libertinus Sans\")\n\n#let colorize = colorize.with(color: blue)\n#let colorbox = colorbox.with(color: blue)\n\n= Headline\n\nThis should be #colorize(\"red\") by default, but #colorize(\"blue\") in after setting the `highlight-color` to blue. As should #colorbox(\"this\").\n</code></pre>\n<p>and</p>\n<p><code>template.typ</code></p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let colorize(body, color: red) = {\n  set text(color)\n  body\n}\n\n#let colorbox(body, color: red) = {\n  box(fill: color, body)\n}\n\n#let template(doc, headline-size: 12pt) = {\n\n  set page(margin: (top: 5%))\n  set text(size: 12pt, font: \"Comic Neue\")\n\n  show heading: set text(size: headline-size)\n\n  doc\n}\n</code></pre>\n</blockquote>\n</aside>\n<p>Well, mostly yes, but if you want, you can add the font and margin parameters to the <code>template()</code> and just use one global show rule. But also this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let colorize(body, color: red) = text(color, body)\n\n#let colorbox(body, color: red) = box(fill: color, body)\n</code></pre>\n<p>I think I remember that in some rare cases <code>set text(color)</code> would work better, but if you just apply this directly on a normal text, then you can use a shorter version.</p>\n<hr>\n<aside class=\"quote no-group\" data-username=\"a_w\" data-post=\"7\" data-topic=\"3537\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/a_w/48/1206_2.png\" class=\"avatar\"> a_w:</div>\n<blockquote>\n<p>Would you say this means… in terms of rules (for myself!):</p>\n<ul>\n<li>Just leave everything that can be <code>set</code> and is “procedural” so to speak as is in the template (meaning no further adaption for a template/variation setup needed)</li>\n</ul>\n</blockquote>\n</aside>\n<p>Not sure what procedural means here, but the majority of set and show-set rules supposed to be in a template function, this is literally what it’s for, generally speaking.</p>\n<hr>\n<aside class=\"quote no-group\" data-username=\"a_w\" data-post=\"7\" data-topic=\"3537\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/a_w/48/1206_2.png\" class=\"avatar\"> a_w:</div>\n<blockquote>\n<ul>\n<li>Standalone functions get named arguments that can be directly modified using <code>.with</code></li>\n<li>Show-Rules are either left out of the template (and stay in each seperate file) altogether or get arguments on the template function if they really should be shared</li>\n</ul>\n</blockquote>\n</aside>\n<p>Yes.</p>\n<hr>\n<aside class=\"quote no-group\" data-username=\"a_w\" data-post=\"7\" data-topic=\"3537\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/a_w/48/1206_2.png\" class=\"avatar\"> a_w:</div>\n<blockquote>\n<ul>\n<li>… missing something?</li>\n</ul>\n</blockquote>\n</aside>\n<p>Well, the <code>state</code> thing, I guess, but that’s about it.</p>",
      "raw": "[quote=\"a_w, post:7, topic:3537\"]\nSo do I understand you correctly that this would turn my example into something like this:\n\n`main.typ`\n\n```typ\n#import \"template.typ\": *\n#show: template.with(headline-size: 18pt)\n\n#set page(margin: (top: 10%))\n#set text(size: 12pt, font: \"Libertinus Sans\")\n\n#let colorize = colorize.with(color: blue)\n#let colorbox = colorbox.with(color: blue)\n\n= Headline\n\nThis should be #colorize(\"red\") by default, but #colorize(\"blue\") in after setting the `highlight-color` to blue. As should #colorbox(\"this\").\n```\n\nand\n\n`template.typ`\n\n```typ\n#let colorize(body, color: red) = {\n  set text(color)\n  body\n}\n\n#let colorbox(body, color: red) = {\n  box(fill: color, body)\n}\n\n#let template(doc, headline-size: 12pt) = {\n\n  set page(margin: (top: 5%))\n  set text(size: 12pt, font: \"Comic Neue\")\n\n  show heading: set text(size: headline-size)\n\n  doc\n}\n```\n[/quote]\n\nWell, mostly yes, but if you want, you can add the font and margin parameters to the `template()` and just use one global show rule. But also this:\n\n```typ\n#let colorize(body, color: red) = text(color, body)\n\n#let colorbox(body, color: red) = box(fill: color, body)\n```\n\nI think I remember that in some rare cases `set text(color)` would work better, but if you just apply this directly on a normal text, then you can use a shorter version.\n\n---\n\n[quote=\"a_w, post:7, topic:3537\"]\nWould you say this means… in terms of rules (for myself!):\n\n* Just leave everything that can be `set` and is “procedural” so to speak as is in the template (meaning no further adaption for a template/variation setup needed)\n[/quote]\n\nNot sure what procedural means here, but the majority of set and show-set rules supposed to be in a template function, this is literally what it's for, generally speaking.\n\n---\n\n[quote=\"a_w, post:7, topic:3537\"]\n* Standalone functions get named arguments that can be directly modified using `.with`\n* Show-Rules are either left out of the template (and stay in each seperate file) altogether or get arguments on the template function if they really should be shared\n[/quote]\n\nYes.\n\n---\n\n[quote=\"a_w, post:7, topic:3537\"]\n* … missing something?\n[/quote]\n\nWell, the `state` thing, I guess, but that's about it.",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 0,
      "reads": 33,
      "score": 36.6,
      "accepted_answer": true,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 10808,
      "post_number": 9,
      "username": "a_w",
      "name": "Alex",
      "created_at": "2025-04-08T18:39:21.520Z",
      "updated_at": "2025-04-08T18:39:21.520Z",
      "cooked": "<aside class=\"quote no-group\" data-username=\"Andrew\" data-post=\"8\" data-topic=\"3537\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://forum.typst.app/user_avatar/forum.typst.app/andrew/48/62_2.png\" class=\"avatar\"> Andrew:</div>\n<blockquote>\n<p>Not sure what procedural means here, but the majority of set and show-set rules supposed to be in a template function, this is literally what it’s for, generally speaking.</p>\n</blockquote>\n</aside>\n<p>By “procedural,” I meant that, as I understand it (Disclaimer!), <code>set</code> rules get processed as they occur and can be reset in the following flow of the document at any time, but since the same is true for <code>show</code>… maybe it isn’t an accurate description.</p>\n<p>I will try to experiment with state as well. Thank you for your answers!</p>",
      "raw": "[quote=\"Andrew, post:8, topic:3537\"]\nNot sure what procedural means here, but the majority of set and show-set rules supposed to be in a template function, this is literally what it’s for, generally speaking.\n[/quote]\n\nBy \"procedural,\" I meant that, as I understand it (Disclaimer!), `set` rules get processed as they occur and can be reset in the following flow of the document at any time, but since the same is true for `show`… maybe it isn't an accurate description.\n\nI will try to experiment with state as well. Thank you for your answers!",
      "reply_to_post_number": 8,
      "reply_count": 1,
      "quote_count": 1,
      "like_count": 1,
      "reads": 21,
      "score": 24.2,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 566
    },
    {
      "id": 10809,
      "post_number": 10,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-04-08T18:45:50.195Z",
      "updated_at": "2025-04-08T18:45:50.195Z",
      "cooked": "<p>For the rules, you can check out <a href=\"https://typst.app/docs/reference/styling/\" class=\"inline-onebox\">Styling – Typst Documentation</a> and <a href=\"https://typst.app/docs/tutorial/formatting/\" class=\"inline-onebox\">Formatting – Typst Documentation</a>.</p>",
      "raw": "For the rules, you can check out https://typst.app/docs/reference/styling/ and https://typst.app/docs/tutorial/formatting/.",
      "reply_to_post_number": 9,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 22,
      "score": 4.4,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    }
  ],
  "scraped_at": "2025-06-10T09:49:38.137662"
}