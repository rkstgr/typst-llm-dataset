{
  "topic_metadata": {
    "id": 3987,
    "title": "How to create something like #emph, but it jumps to a certain place in the pdf?",
    "slug": "how-to-create-something-like-emph-but-it-jumps-to-a-certain-place-in-the-pdf",
    "posts_count": 15,
    "created_at": "2025-05-08T08:04:17.026Z",
    "last_posted_at": "2025-05-12T09:39:53.590Z",
    "views": 141,
    "like_count": 5,
    "reply_count": 13,
    "has_accepted_answer": true,
    "accepted_answer_post_number": 13,
    "accepted_answer_username": "Eric",
    "tags": [
      "scripting",
      "referencing"
    ],
    "category_id": 5,
    "participant_count": 4,
    "word_count": 1034
  },
  "posts": [
    {
      "id": 12115,
      "post_number": 1,
      "username": "Amasica",
      "name": "Erik Oberländer",
      "created_at": "2025-05-08T08:04:17.173Z",
      "updated_at": "2025-05-13T19:18:08.656Z",
      "cooked": "<p>How can I create something like <span class=\"hashtag-raw\">#emph</span>, where, when I press on it in the final pdf, it jumps to where it was mentioned first in maybe a <span class=\"hashtag-raw\">#define</span> thing in the pdf?</p>\n<p>Kinda like refs, but a little different</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">== Definition (strict)\nA function is called #define[strict], if $epi(f)$ is a strict set\n\n== Example\n$f(x) := x^2$ is a #word[strict] function</code></pre>",
      "raw": "How can I create something like #emph, where, when I press on it in the final pdf, it jumps to where it was mentioned first in maybe a #define thing in the pdf?\n\nKinda like refs, but a little different\n\n```typ\n== Definition (strict)\nA function is called #define[strict], if $epi(f)$ is a strict set\n\n== Example\n$f(x) := x^2$ is a #word[strict] function",
      "reply_to_post_number": null,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 1,
      "reads": 49,
      "score": 54.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1438
    },
    {
      "id": 12116,
      "post_number": 2,
      "username": "sijo",
      "name": "",
      "created_at": "2025-05-08T08:19:34.235Z",
      "updated_at": "2025-05-08T08:19:34.235Z",
      "cooked": "<p>You can create links with the <code>link</code> function, and generate a label for each definition using the <code>label</code> function:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let define(it) = [#emph(it)#label(\"define:\" + it.text)]\n#let word(it) = link(label(\"define:\" + it.text), emph(it))\n\n#let epi = math.op(\"epi\")\n\n== Definition (strict)\nA function is called #define[strict], if $epi(f)$ is a strict set\n\n#pagebreak()\n\n== Example\n$f(x) := x^2$ is a #word[strict] function\n</code></pre>",
      "raw": "You can create links with the `link` function, and generate a label for each definition using the `label` function:\n\n```typ\n#let define(it) = [#emph(it)#label(\"define:\" + it.text)]\n#let word(it) = link(label(\"define:\" + it.text), emph(it))\n\n#let epi = math.op(\"epi\")\n\n== Definition (strict)\nA function is called #define[strict], if $epi(f)$ is a strict set\n\n#pagebreak()\n\n== Example\n$f(x) := x^2$ is a #word[strict] function\n```",
      "reply_to_post_number": null,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 49,
      "score": 14.8,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 12124,
      "post_number": 3,
      "username": "Amasica",
      "name": "Erik Oberländer",
      "created_at": "2025-05-08T16:26:40.168Z",
      "updated_at": "2025-05-08T16:26:40.168Z",
      "cooked": "<p>Ok that works pretty well, but could you also somehow just make a function which creates a label and then just reference it normally?</p>\n<p>I tried ti do it myself, but I can’t get around the limit that you can’t label text<br>\nIs there something invisible you can reference? That would be extremely helpful</p>",
      "raw": "Ok that works pretty well, but could you also somehow just make a function which creates a label and then just reference it normally?\n\nI tried ti do it myself, but I can't get around the limit that you can't label text\nIs there something invisible you can reference? That would be extremely helpful",
      "reply_to_post_number": 2,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 42,
      "score": 13.4,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1438
    },
    {
      "id": 12129,
      "post_number": 4,
      "username": "sijo",
      "name": "",
      "created_at": "2025-05-08T18:32:30.048Z",
      "updated_at": "2025-05-08T18:32:30.048Z",
      "cooked": "<p>Can you show a minimal example of what you tried that doesn’t work?</p>",
      "raw": "Can you show a minimal example of what you tried that doesn't work?",
      "reply_to_post_number": 3,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 41,
      "score": 13.2,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 332
    },
    {
      "id": 12130,
      "post_number": 5,
      "username": "Amasica",
      "name": "Erik Oberländer",
      "created_at": "2025-05-08T18:49:40.154Z",
      "updated_at": "2025-05-08T18:49:40.154Z",
      "cooked": "<p>I tried a lot of things, but mainly just figures (I sadly don’t have the code anymore as it was very frustrating), but these had the problem that they caused newlines and when I hid them, the reference didn’t work because it was attached to nothing.</p>\n<p>I also prompted ChatGPT and Gemini, but they tried to use metadata(), but this also can’t be referenced.</p>\n<p>Basically the only thing I need is either an invisible figure I can reference and then actually use the reference or the ability to reference words.</p>",
      "raw": "I tried a lot of things, but mainly just figures (I sadly don't have the code anymore as it was very frustrating), but these had the problem that they caused newlines and when I hid them, the reference didn't work because it was attached to nothing.\n\nI also prompted ChatGPT and Gemini, but they tried to use metadata(), but this also can't be referenced.\n\nBasically the only thing I need is either an invisible figure I can reference and then actually use the reference or the ability to reference words.",
      "reply_to_post_number": 4,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 39,
      "score": 17.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1438
    },
    {
      "id": 12131,
      "post_number": 6,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-05-08T19:12:01.391Z",
      "updated_at": "2025-05-08T19:12:01.391Z",
      "cooked": "<p>With a show rule on <code>ref</code>, you can allow references on all kinds of elements, so you can do something like this.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let define(word) = emph[#word#label(word.text)]\n\n#show ref: it =&gt; {\n  if query(it.target) == ([#str(it.target)],) {\n    // The only element with the target label is the\n    // definition text containing the label name, so\n    // just show and link to that definition.\n    emph(link(it.target, str(it.target)))\n  } else {\n    it\n  }\n}\n</code></pre>\n<p>Then, you can combine the <code>#define[..]</code> function call with normal references like this:</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">== Definition (strict)\nA function is called #define[strict], if $epi(f)$ is a strict set\n\n== Example\n$f(x) := x^2$ is a @strict function\n</code></pre>",
      "raw": "With a show rule on `ref`, you can allow references on all kinds of elements, so you can do something like this.\n\n```typ\n#let define(word) = emph[#word#label(word.text)]\n\n#show ref: it => {\n  if query(it.target) == ([#str(it.target)],) {\n    // The only element with the target label is the\n    // definition text containing the label name, so\n    // just show and link to that definition.\n    emph(link(it.target, str(it.target)))\n  } else {\n    it\n  }\n}\n```\n\nThen, you can combine the `#define[..]` function call with normal references like this:\n```typ\n== Definition (strict)\nA function is called #define[strict], if $epi(f)$ is a strict set\n\n== Example\n$f(x) := x^2$ is a @strict function\n```",
      "reply_to_post_number": 5,
      "reply_count": 3,
      "quote_count": 0,
      "like_count": 2,
      "reads": 37,
      "score": 52.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 12133,
      "post_number": 7,
      "username": "Amasica",
      "name": "Erik Oberländer",
      "created_at": "2025-05-08T19:30:59.834Z",
      "updated_at": "2025-05-08T19:30:59.834Z",
      "cooked": "<p>Thanks that works great, now how can I add something like an empty reference? I tried to add an input parameter and that worked, but if I understand your logic correctly, it won’t work when every invisible Label has the same invisible character</p>",
      "raw": "Thanks that works great, now how can I add something like an empty reference? I tried to add an input parameter and that worked, but if I understand your logic correctly, it won't work when every invisible Label has the same invisible character",
      "reply_to_post_number": 6,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 33,
      "score": 11.6,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1438
    },
    {
      "id": 12134,
      "post_number": 8,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-05-08T19:44:48.653Z",
      "updated_at": "2025-05-08T19:44:48.653Z",
      "cooked": "<p>I’m not sure what to imagine by an empty reference, as there has to be some way you want to identify what to link to.</p>",
      "raw": "I'm not sure what to imagine by an empty reference, as there has to be some way you want to identify what to link to.",
      "reply_to_post_number": 7,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 32,
      "score": 11.4,
      "accepted_answer": false,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 12138,
      "post_number": 9,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-08T20:43:35.755Z",
      "updated_at": "2025-05-08T20:43:35.755Z",
      "cooked": "<p>Inversion condition makes it shorter and easier to read (well, not the <code>([#str(it.target)],)</code> part):</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#show ref: it =&gt; {\n  if query(it.target) != ([#str(it.target)],) { return it }\n  // The only element with the target label is the\n  // definition text containing the label name, so\n  // just show and link to that definition.\n  emph(link(it.target, str(it.target)))\n}\n</code></pre>",
      "raw": "Inversion condition makes it shorter and easier to read (well, not the `([#str(it.target)],)` part):\n\n```typ\n#show ref: it => {\n  if query(it.target) != ([#str(it.target)],) { return it }\n  // The only element with the target label is the\n  // definition text containing the label name, so\n  // just show and link to that definition.\n  emph(link(it.target, str(it.target)))\n}\n```",
      "reply_to_post_number": 6,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 30,
      "score": 6.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12161,
      "post_number": 10,
      "username": "Amasica",
      "name": "Erik Oberländer",
      "created_at": "2025-05-09T05:42:24.332Z",
      "updated_at": "2025-05-09T05:42:24.332Z",
      "cooked": "<p>Like an empty character I can put somewhere with a reference</p>",
      "raw": "Like an empty character I can put somewhere with a reference",
      "reply_to_post_number": 8,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 5.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1438
    },
    {
      "id": 12163,
      "post_number": 11,
      "username": "Amasica",
      "name": "Erik Oberländer",
      "created_at": "2025-05-09T06:13:57.399Z",
      "updated_at": "2025-05-09T06:13:57.399Z",
      "cooked": "<p>Actually, how could you make this work with stuff with space in them (for example in my case “strict convex”), I tried replacing \" \" with “-” and then converting it back but I’m not sure how to implement that logic</p>",
      "raw": "Actually, how could you make this work with stuff with space in them (for example in my case \"strict convex\"), I tried replacing \" \" with \"-\" and then converting it back but I'm not sure how to implement that logic",
      "reply_to_post_number": 6,
      "reply_count": 2,
      "quote_count": 0,
      "like_count": 0,
      "reads": 29,
      "score": 15.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1438
    },
    {
      "id": 12180,
      "post_number": 12,
      "username": "Andrew",
      "name": "",
      "created_at": "2025-05-09T11:01:23.670Z",
      "updated_at": "2025-05-09T11:01:23.670Z",
      "cooked": "<p>You can’t use sugar syntax for referencing such labels.</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#figure[] #label(\" \")\n#ref(label(\" \"))\n</code></pre>\n<aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/typst/typst/issues/5776#issuecomment-2629114366\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/typst/typst/issues/5776#issuecomment-2629114366\" target=\"_blank\" rel=\"noopener\">github.com/typst/typst</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\" data-github-private-repo=\"false\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/typst/typst/issues/5776#issuecomment-2629114366\" target=\"_blank\" rel=\"noopener\">Empty labels should not be allowed</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2025-01-29\" data-time=\"11:23:30\" data-timezone=\"UTC\">11:23AM - 29 Jan 25 UTC</span>\n      </div>\n\n\n      <div class=\"user\">\n        <a href=\"https://github.com/EpicEricEE\" target=\"_blank\" rel=\"noopener\">\n          <img alt=\"EpicEricEE\" src=\"https://forum.typst.app/uploads/default/original/1X/c05c45e6fc6b38b34566598ca5e8d323040f8d3e.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"1E1E1E\">\n          EpicEricEE\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          scripting\n        </span>\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          syntax\n        </span>\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          change request\n        </span>\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">### Description\n\nAttaching an empty label to a figure (or other element) as in\n`<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">…</a></span><span class=\"excerpt hidden\">``typ\n#figure(rect(), caption: [...]) #label(\"\")\n```\nallows you to reference it with just `@`, which should probably not be allowed.\n\n### Reproduction URL\n\n_No response_\n\n### Operating system\n\nWeb app, Windows\n\n### Typst version\n\n- [x] I am using the latest version of Typst</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
      "raw": "You can't use sugar syntax for referencing such labels.\n\n```typ\n#figure[] #label(\" \")\n#ref(label(\" \"))\n```\n\nhttps://github.com/typst/typst/issues/5776#issuecomment-2629114366",
      "reply_to_post_number": 11,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 30,
      "score": 6.0,
      "accepted_answer": false,
      "trust_level": 3,
      "user_id": 51
    },
    {
      "id": 12193,
      "post_number": 13,
      "username": "Eric",
      "name": "Eric Biedert",
      "created_at": "2025-05-09T16:50:05.393Z",
      "updated_at": "2025-05-09T16:52:10.632Z",
      "cooked": "<p>I see, that is also possible. Here is a more robust (and slightly more complex) way that allows arbitrary content in definitions and automatically attaches usable labels (with hyphens instead of spaces and other non-letter characters):</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let to-label(body) = {\n  // Convert body to string, replace non-letter characters with\n  // hyphens, and ensure that it doesn't end with a hyphen.\n  import \"@preview/t4t:0.4.2\": get\n  label(get.text(body)\n    .replace(regex(\"[^\\p{L}\\p{N}\\-]+\"), \"-\")\n    .trim(\"-\", at: end))\n}\n\n#let define(word) = emph[#word#to-label(word)]\n\n#show ref: it =&gt; {\n  // Elements that are referencable by default and whose\n  // reference appearance should not be overridden.\n  let referencable = (figure, math.equation, heading, footnote)\n  \n  if it.element == none { return it }\n  if it.element.func() in referencable { return it }\n  if it.target != to-label(it.element) { return it }\n  // If the target element's body matches the label, show the\n  // reference as the element's body linked to the definition.\n  emph(link(it.target, it.element))\n}\n</code></pre>\n<p>This would allow referencing something like <code>#define[strict convex]</code> with <code>@strict-convex</code>.</p>\n<details>\n<summary>\nQuick note why <code>referencable</code> elements are excluded\n</summary>\n<p>To not intefere with standard references, elements which are already referencable are excluded. For example, in the case</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#figure(rect[Hello], caption: [A rectangle.]) &lt;Hello&gt;\n</code></pre>\n<p>the label <code>&lt;Hello&gt;</code> matches the text inside the rectangle, so the figure would have mistakenly been treated as a definition, replacing the “Figure 1” with a copy of the figure itself.</p>\n</details>",
      "raw": "I see, that is also possible. Here is a more robust (and slightly more complex) way that allows arbitrary content in definitions and automatically attaches usable labels (with hyphens instead of spaces and other non-letter characters):\n```typ\n#let to-label(body) = {\n  // Convert body to string, replace non-letter characters with\n  // hyphens, and ensure that it doesn't end with a hyphen.\n  import \"@preview/t4t:0.4.2\": get\n  label(get.text(body)\n    .replace(regex(\"[^\\p{L}\\p{N}\\-]+\"), \"-\")\n    .trim(\"-\", at: end))\n}\n\n#let define(word) = emph[#word#to-label(word)]\n\n#show ref: it => {\n  // Elements that are referencable by default and whose\n  // reference appearance should not be overridden.\n  let referencable = (figure, math.equation, heading, footnote)\n  \n  if it.element == none { return it }\n  if it.element.func() in referencable { return it }\n  if it.target != to-label(it.element) { return it }\n  // If the target element's body matches the label, show the\n  // reference as the element's body linked to the definition.\n  emph(link(it.target, it.element))\n}\n```\n\nThis would allow referencing something like `#define[strict convex]` with `@strict-convex`.\n\n<details>\n<summary>\nQuick note why <code>referencable</code> elements are excluded\n</summary>\n\nTo not intefere with standard references, elements which are already referencable are excluded. For example, in the case\n```typ\n#figure(rect[Hello], caption: [A rectangle.]) <Hello>\n```\nthe label `<Hello>` matches the text inside the rectangle, so the figure would have mistakenly been treated as a definition, replacing the \"Figure 1\" with a copy of the figure itself.\n\n</details>",
      "reply_to_post_number": 11,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 2,
      "reads": 27,
      "score": 40.4,
      "accepted_answer": true,
      "trust_level": 2,
      "user_id": 88
    },
    {
      "id": 12325,
      "post_number": 14,
      "username": "Amasica",
      "name": "Erik Oberländer",
      "created_at": "2025-05-12T09:23:29.016Z",
      "updated_at": "2025-05-12T09:23:29.016Z",
      "cooked": "<p>And could there be a way to reference something invisible?<br>\nLike I tried it with a figure, but then the ref part doesn’t work anymore</p>",
      "raw": "And could there be a way to reference something invisible?\nLike I tried it with a figure, but then the ref part doesn't work anymore",
      "reply_to_post_number": 13,
      "reply_count": 1,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 9.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1438
    },
    {
      "id": 12328,
      "post_number": 15,
      "username": "Amasica",
      "name": "Erik Oberländer",
      "created_at": "2025-05-12T09:39:53.590Z",
      "updated_at": "2025-05-13T19:18:35.769Z",
      "cooked": "<p>Actually nevermind, I got it to work with</p>\n<pre data-code-wrap=\"typc\"><code class=\"lang-typc\">show ref: it =&gt; {\n    if it.element.has(\"body\") and it.element.body == [ ] {\n      return emph(link(it.target, label-to-string(it.target)), bold: false)\n    } \n    \n    let referencable = (figure, math.equation, heading, footnote)\n    \n    if it.element == none { return it }\n    if it.element.func() in referencable { return it }\n    if it.target != to-label(it.element) { return it }\n    \n    emph(link(it.target, it.element), bold: false)\n  }\n</code></pre>\n<p>and</p>\n<pre data-code-wrap=\"typ\"><code class=\"lang-typ\">#let to-label(body) = {\n  // Convert body to string, replace non-letter characters with\n  // hyphens, and ensure that it doesn't end with a hyphen.\n  import \"@preview/t4t:0.4.2\": get\n  label(get.text(body)\n    .replace(regex(\"[^\\p{L}\\p{N}\\-]+\"), \"-\")\n    .trim(\"-\", at: end))\n}\n\n#let label-to-string(string) = str(string).replace(\"-\", \" \")\n\n#let define(word, hide: false) = {\n  if hide {\n    [\n      #figure(\n        [ ],\n      )\n      #to-label(word)\n      #v(0fr)\n    ]\n    // emph[#word#to-label(word)]\n  } else {\n    emph[#word#to-label(word)]\n  }\n}\n\n</code></pre>",
      "raw": "Actually nevermind, I got it to work with \n\n```typc\nshow ref: it => {\n    if it.element.has(\"body\") and it.element.body == [ ] {\n      return emph(link(it.target, label-to-string(it.target)), bold: false)\n    } \n    \n    let referencable = (figure, math.equation, heading, footnote)\n    \n    if it.element == none { return it }\n    if it.element.func() in referencable { return it }\n    if it.target != to-label(it.element) { return it }\n    \n    emph(link(it.target, it.element), bold: false)\n  }\n```\n\nand\n\n```typ\n#let to-label(body) = {\n  // Convert body to string, replace non-letter characters with\n  // hyphens, and ensure that it doesn't end with a hyphen.\n  import \"@preview/t4t:0.4.2\": get\n  label(get.text(body)\n    .replace(regex(\"[^\\p{L}\\p{N}\\-]+\"), \"-\")\n    .trim(\"-\", at: end))\n}\n\n#let label-to-string(string) = str(string).replace(\"-\", \" \")\n\n#let define(word, hide: false) = {\n  if hide {\n    [\n      #figure(\n        [ ],\n      )\n      #to-label(word)\n      #v(0fr)\n    ]\n    // emph[#word#to-label(word)]\n  } else {\n    emph[#word#to-label(word)]\n  }\n}\n\n```",
      "reply_to_post_number": 14,
      "reply_count": 0,
      "quote_count": 0,
      "like_count": 0,
      "reads": 24,
      "score": 4.8,
      "accepted_answer": false,
      "trust_level": 1,
      "user_id": 1438
    }
  ],
  "scraped_at": "2025-06-10T09:48:11.956228"
}